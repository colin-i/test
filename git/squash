
# git switch master && git pull orig master ; push
# gh workflow enable test_rust.yml; gh workflow enable test_web.yml
# git switch test2
# resolve in browser and git pull origin test2  or  git merge master , resolve, push
# gh workflow disable test_rust.yml; gh workflow disable test_web.yml
#this file
# git switch test && git merge test2 ; push

#if [ -z "${orig}" ]; then orig=orig; fi
#if [ -z "${test}" ]; then test=test; fi
#if [ -z "${origin}" ]; then origin=origin; fi

if [ -z "${test_orig}" ]; then test_orig=test_orig; fi
if [ -z "${master}" ]; then master=master; fi
if [ -z "${email}" ]; then email=costin.botescu@gmail.com; fi
if [ -z "${proj}" ]; then proj=$(basename $(pwd)); fi
if [ -z "${test2}" ]; then test2=test2; fi

#if [ -z "${1}" ] || [ "${1}" = "sync" ]; then
## ~/test/git/squash
#	git switch ${orig}
#	if [ -z "${1}" ]; then
#		git pull ${orig} ${master}
#	fi
#	a=`git rev-parse HEAD`
#	git switch ${test}
#	if [ -z "${1}" ]; then
#		git pull ${origin} ${test}
#	fi
#	b=`git rev-list HEAD^..HEAD  | sed -n 2p` #HEAD at rev-list can enumerate some hashes
#	echo ${a} ${b}
#	if [ ${a} = ${b} ]; then
#		git log -1
#		echo -n \~/test/git/squash x | xclip -selection clipboard
#		echo paste \~/test/git/squash x
#	else
#		echo different. git switch ${orig} , git reset --hard ${b} , \~/test/git/squash sync
#	fi
#	exit
#fi

git switch ${test_orig} || exit
a=`git rev-parse HEAD^`  #rev-parse and rev-list can show different results if there are merges, but is ok

b=`git rev-list --branches=*${test2} --author=${email}`
git log -1 --branches=*${test2} --author=${email}
echo ${b}
echo Enter if ok
read

git reset --hard ${a}
git merge ${master}
git merge --squash ${b}
#is already some predefined text #echo -n message | xclip -selection clipboard
git commit #without save inside, hit exit, watch additions deletions to be ok
echo -n \~/test/remote/pushforce ${proj} | xclip -selection clipboard
echo paste \~/test/remote/pushforce ${proj}
