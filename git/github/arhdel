set -e

gh release list --order asc --limit 9999 > 1
sort -k1,1 -s 1 > 2
cp 2 3
while :; do
	a=`head -1 3 | cut -f1 -d' '`
	b=`cat 3 | grep ^$a | wc -l`
	echo $a $b >> 4
	cat 3 | tail +$((b+1)) > 5
	mv 5 3
	test -s 3
	if [ $? != 0 ]; then
		break
	fi
done
mv 4 3
sort -k2nr 3 > 4

a=()
b=()
i=0
while read x; do
	read -a y <<< ${x}
	a[$i]=${y[0]}
	b[$i]=${y[1]}
	i=$((i+1))
done < 4
for (( j=0; j < ${i}; j++)) do
	echo ${a[$j]} - ${b[$j]}
done
echo how many \?
read -t $((60*60*24)) ans

rem_one_arh () {
	row=`cat 1 | grep -n "^$1 " | head -1`
	arh=( ${row} )
	sz=${#arh[@]}
	tag=${arh[$((sz-2))]}   #is more complex for tabs
	nr=`echo ${row} | grep -o "^[^:]*"`
	echo ${row} - knowing: ${nr} and ${tag}
	gh release delete ${tag} --cleanup-tag  #has confirmation
	sed -i ${nr}d 1
}

is_done=0
for ((j=0; j < $((i-1)); j++)) do
	n=${b[$((j+1))]} #down level
	m=${b[$j]}       #prev level for all at left, there is at least a program that is staying at 1?
	for ((l=n; l < m; l++)) do
		for ((k=j; k != -1; k--)) do
			if [ ${ans} = 0 ]; then #want to test how many = 0 ?
				is_done=1
				break
			fi
			rem_one_arh ${a[$k]}
			b[$k]=$((b[$k]-1))
			ans=$((ans-1))
		done
		if [ ${is_done} = 1 ]; then break; fi
	done
	if [ ${is_done} = 1 ]; then break; fi
done

rm 1 2 3 4
