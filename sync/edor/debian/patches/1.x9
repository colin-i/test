Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x9) focal; urgency=medium
 .
   * restoration file at one minute
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-01-10

--- /dev/null
+++ edor-1/.github/workflows/del.yml
@@ -0,0 +1,20 @@
+
+on:
+ # Allows you to run this workflow manually from the Actions tab
+ workflow_dispatch:
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ del:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-18.04
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   - name: Remove asset
+     uses: mknejp/delete-release-assets@v1
+     env:
+     with:
+      token: ${{ secrets.PAT }}
+      tag: refs/tags/${{ env.tag }}
+      assets: ${{ env.file }}
--- edor-1.orig/arh/pub
+++ edor-1/arh/pub
@@ -13,11 +13,11 @@ last=$(curl https://api.github.com/repos
 ~/test/upapp
 ~/test/rerpm && \
 ~/test/uprpm && \
-~/test/pub upapp uprpm && \
+~/test/pub upapp && \
 ~/test/pub2 && \
 ~/test/publp2 && \
 ~/test/lp && \
 ~/test/lp x && \
 ~/test/keyring && \
-~/test/del x ${last} && \
+~/test/del x ${last} x && \
 ~/test/arh2 ${last}
--- edor-1.orig/configure.ac
+++ edor-1/configure.ac
@@ -20,7 +20,7 @@ AC_PROG_CC
 
 # Checks for header files. Checks for libraries.
 
-AC_CHECK_HEADERS(dirent.h errno.h fcntl.h poll.h stdio.h stdlib.h string.h unistd.h)
+AC_CHECK_HEADERS(dirent.h errno.h fcntl.h poll.h stdio.h stdlib.h string.h unistd.h time.h)
 AC_CHECK_HEADERS(curses.h, [AC_SUBST(CSS, "")], [AC_SUBST(CSS, "-Wno-padded")])
 AC_SUBST(UNW, "")
 
--- edor-1.orig/readme.md
+++ edor-1/readme.md
@@ -24,7 +24,8 @@ Use autoconf automake libncurses-dev ; o
 ```sh
 autoreconf -i
 ./configure
-make install
+make
+sudo make install
 ```
 Use *\-\-prefix=your_path* at *./configure* if needed (example: at Termux in Android).\
 *\-\-disable\-cpp* to set c rules.\
--- edor-1.orig/s/bar.c
+++ edor-1/s/bar.c
@@ -49,20 +49,21 @@
 #define protocol "%u"
 #endif
 
+#define err_len_min 2
+
 static int err_l=0;
 static char*err_s;
 #define b_inf_s "F1 for help"
 #define quest_ex_s "? y/C/n"
 static int com_left=sizeof(b_inf_s);
-#define max_path 0xff
-static char input1[max_path+1];
-static char input2[max_path+1];
+static char input1[max_path_0];
+static char input2[max_path_0];
 static char*input0=input1;
 static WINDOW*poswn;
-static char inputr[max_path+1];
+static char inputr[max_path_0];
 static size_t cursorr=0;
 #define get_right getbegx(poswn)-1
-static char inputf[max_path+1];
+static char inputf[max_path_0];
 static int cursorf=0;
 
 typedef struct{
@@ -77,7 +78,7 @@ static size_t undos_spc=0;
 static size_t undos_save=0;
 static size_t undos_max=0;
 static int undo_v=0;
-static bool new_f=false;
+//static bool new_f=false;
 #define new_s "New Path"
 static int new_v=0;
 
@@ -89,10 +90,10 @@ static int wrt(int f){
 	size_t n=rows_tot-1;
 	for(size_t i=0;i<n;i++){
 		row*r=&rows[i];
-		if((size_t)write(f,r->data,r->sz)!=r->sz)return false;
-		if((size_t)write(f,ln_term,ln_term_sz)!=ln_term_sz)return false;
+		if((size_t)write(f,r->data,r->sz)!=r->sz)return 0;
+		if((size_t)write(f,ln_term,ln_term_sz)!=ln_term_sz)return 0;
 	}
-	if((size_t)write(f,rows[n].data,rows[n].sz)==rows[n].sz)return 1;
+	if((size_t)write(f,rows[n].data,rows[n].sz)==rows[n].sz)return command_return_ok;
 	return 0;
 }
 static int bcdl(int y,int*p,char*input,int cursor){
@@ -131,7 +132,7 @@ static bool bar_clear_mini(){
 		move(getmaxy(stdscr)-1,com_left);
 		while(new_v!=0){addch(' ');new_v--;}
 		return true;
-	}else if(err_l>3){
+	}else if(err_l>err_len_min){
 		move(getmaxy(stdscr)-1,com_left);
 		while(err_l!=0){addch(' ');err_l--;}
 		return true;
@@ -147,10 +148,10 @@ bool bar_clear(){
 	return bar_clear_mini();
 }
 void err_set(WINDOW*w){
-	if(err_l>3){//waiting for normal clear_com
+	if(err_l>err_len_min){//waiting for normal clear_com
 		int y=getmaxy(stdscr)-1;
 		mvaddch(y,com_left,'\"');
-		addnstr(err_s,err_l-2);
+		addnstr(err_s,err_l-err_len_min);
 		addch('\"');
 		wnoutrefresh(stdscr);
 		wmove(w,getcury(w),getcurx(w));//newpath+save
@@ -160,26 +161,33 @@ int open_new(char*path){
 	return open(path,O_CREAT|O_WRONLY|O_TRUNC,S_IRUSR|S_IWUSR);
 }
 //command return
-static int saving(){
+int saving_base(char*dest){
 	int f;int r;
-	if(new_f/*true*/){
-		f=open_new(textfile);
-		new_f=f==-1;
-		if(new_f/*true*/){
+	//this 'if' can be the second time in some places, but it is not a must to write once
+	if(access(dest,F_OK)==-1){
+	//if(new_f/*true*/){
+		f=open_new(dest);
+		//new_f=f==-1;
+		//if(new_f/*true*/){
+		if(f==-1){
 			bar_clear();//is troubleing with the bool,and more
 			err_s=strerror(errno);
-			err_l=(int)strlen(err_s)+2;
+			err_l=(int)strlen(err_s)+err_len_min;
 			int rg=get_right-com_left;
 			if(err_l>rg)err_l=rg;
 		}
 	}
-	else f=open(textfile,O_WRONLY|O_TRUNC);
+	else f=open(dest,O_WRONLY|O_TRUNC);
 	if(f!=-1){
 		r=wrt(f);
 		close(f);
 	}else r=0;
 	return r;
 }
+//command return
+static int saving(){
+	return saving_base(textfile);
+}
 static void inputpath(){
 	textfile=input0;
 	if(input0==input1)input0=input2;
@@ -190,7 +198,8 @@ static void inputpath(){
 static int saves(){
 	if(access(input0,F_OK)==-1){
 		inputpath();
-		new_f=true;return saving();
+		//new_f=true;
+		return saving();
 	}
 	return -1;
 }
@@ -674,8 +683,10 @@ static bool dos(WINDOW*w,eundo*un,size_t
 		}
 	}
 	undos_tot+=vl;
-	if(undos_tot==undos_save)mod_set(true);
-	else if(undos_tot==undos_save+vl)mod_set(false);
+	if(undos_tot==undos_save)
+		mod_set_on();
+	else if(undos_tot==undos_save+vl)
+		mod_set_off();
 	return true;
 }
 static void undo_show(size_t n){
@@ -771,7 +782,7 @@ static bool replace(size_t cursor){
 			memcpy(&r->data[xtext],inputr,cursorr);
 			row_set(r,xtext+cursorr,r->sz-xtext-cursor,0,&r->data[xtext+cursor]);
 		}
-		if(mod_flag/*true*/)mod_set(false);
+		mod_set_off_wrap();
 		return false;
 	}
 	return true;
@@ -958,7 +969,8 @@ int command(char*comnrp){
 					r=question("Overwrite");
 					if(r==1){
 						inputpath();
-						new_f=false;r=saving();
+						//new_f=false;
+						r=saving();
 					}else if(r==0){
 						command_rewrite(y,x,pos,input0,cursor,visib);
 						continue;
@@ -1092,7 +1104,9 @@ int command(char*comnrp){
 }
 bool new_visual(char*f){
 	if(access(f,F_OK)==-1){
-		new_v=sizeof(new_s);new_f=true;textfile=f;
+		new_v=sizeof(new_s);
+		//new_f=true;
+		textfile=f;
 		mvaddstr(getmaxy(stdscr)-1,com_left,new_s);
 		return true;
 	}
--- edor-1.orig/s/base.h
+++ edor-1/s/base.h
@@ -8,7 +8,9 @@ bool row_alloc(row*,size_t,size_t,size_t
 void row_set(row*,size_t,size_t,size_t,const char*);
 bool deleting_init(size_t,size_t,size_t,size_t);
 void deleting(size_t,size_t,size_t,size_t);
-void mod_set(bool);
+void mod_set_on();
+void mod_set_off();
+void mod_set_off_wrap();
 size_t sizemembuf(size_t,size_t,size_t,size_t);
 void cpymembuf(size_t,size_t,size_t,size_t,char*);
 bool paste(size_t,size_t,size_t*,char*,size_t,size_t,bool);
@@ -18,6 +20,7 @@ void fixmembuf(size_t*y,size_t*x);
 
 const char*bar_init(void);
 int save(void);
+int saving_base(char*);
 int question(const char*);
 int command(char*);
 void centering2(WINDOW*,size_t*,size_t*,bool);
--- edor-1.orig/s/inc/main/curses.h
+++ edor-1/s/inc/main/curses.h
@@ -55,6 +55,8 @@ int init_pair(short,short,short);
 int keypad(WINDOW*,bool);
 int getmouse(MEVENT*);
 int nodelay(WINDOW*,bool);
+void wtimeout(WINDOW*,int);
+int doupdate(void);
 
 #ifdef __cplusplus
 }
--- edor-1.orig/s/inc/main/stdio.h
+++ edor-1/s/inc/main/stdio.h
@@ -12,6 +12,7 @@ int puts(const char*);
 int putchar(int);
 int getchar(void);
 FILE* freopen(const char *filename, const char *mode, FILE *stream);
+//int snprintf(char* __buf, size_t __size, const char* __fmt, ...);
 
 #ifdef __cplusplus
 }
--- /dev/null
+++ edor-1/s/inc/main/time.h
@@ -0,0 +1,12 @@
+
+typedef long int time_t;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+time_t time(time_t);
+
+#ifdef __cplusplus
+}
+#endif
--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -35,6 +35,11 @@
 #else
 #include"inc/main/unistd.h"
 #endif
+#ifdef HAVE_TIME_H
+#include<time.h>
+#else
+#include"inc/main/time.h"
+#endif
 
 #include"sep.h"
 
@@ -142,6 +147,10 @@ static int yhelp;
 static bool helpend;
 static int phelp;
 static char*helptext;
+static time_t hardtime=0;
+static char*restorefile=nullptr;
+static char restorefile_buf[max_path_0];
+
 #define hel1 "USAGE\n"
 #define hel2 " [filepath]\
 \nINPUT\
@@ -1049,12 +1058,68 @@ static void row_del(size_t a,size_t b){
 	}
 	rows_tot-=c-a;
 }
-void mod_set(bool flag){
-	mod_flag=flag;
-	chtype ch=mod_flag/*true*/?' ':'*';
+
+static void easytime(){
+	hardtime=0;
+}
+static void mod_visual(chtype ch){
 	mvaddch(getmaxy(stdscr)-1,getmaxx(stdscr)-1,ch);
 	wnoutrefresh(stdscr);
 }
+static void mod_set(bool flag,chtype ch){
+	mod_flag=flag;
+	mod_visual(ch);
+}
+void mod_set_off(){
+	hardtime=time((time_t)nullptr);//cast only at non-header
+	//cannot delete mod_flag, it has meanings at undo type/bk/del sum and quit without save
+	mod_set(false,'*');
+}
+void mod_set_on(){
+	easytime();
+	mod_set(true,' ');
+}
+void mod_set_off_wrap(){
+	//if(mod_flag/*true*/){
+	if(hardtime==0){
+		mod_set_off();//with wrap
+	}
+}
+#define restore_marker ".edorrestorefile"
+static bool restorefile_path(char*p){
+	size_t ln=strlen(p)+sizeof(restore_marker);
+	if(ln>max_path_0)return false;//the path is too long
+	sprintf(restorefile_buf,"%s%s",p,restore_marker);
+	return true;
+}
+static void hardtime_resolve_returner(WINDOW*w){//argument for errors
+	if(textfile!=nullptr){
+		if(restorefile==nullptr){
+			//set restore file path
+			if(restorefile_path(textfile)/*true*/)restorefile=restorefile_buf;
+			else return;
+		}
+		//in case there is a restore file but at another path (restore, save as, type, restore!=oldrestore)
+		//	must set path every time and compare and i don't change the file name so this is a "to do"
+		//if(strcmp(newrestorefile,restorefile)!=0)remove(restorefile);
+
+		//save at path
+		if(saving_base(restorefile)==command_return_ok)
+			mod_visual('&');
+		else err_set(w);
+	}
+}
+#define one_minute 60
+//#define one_minute 1
+static void hardtime_resolve(WINDOW*w){//argument for errors
+	if(hardtime!=0){
+		if((time((time_t)nullptr)-hardtime)>one_minute){//>1
+			hardtime_resolve_returner(w);
+			easytime();
+		}
+	}
+}
+
 void deleting(size_t ybsel,size_t xbsel,size_t yesel,size_t xesel){
 	row*r1=&rows[ybsel];
 	if(ybsel==yesel){
@@ -1100,7 +1165,7 @@ static bool deleti(size_t ybsel,size_t x
 	bool many=ybsel!=yesel;
 	if(many/*true*/||xbsel!=xesel){
 		if(deletin(ybsel,xbsel,yesel,xesel,rw,cl,w,many)/*true*/){
-			if(mod_flag/*true*/)mod_set(false);
+			mod_set_off_wrap();
 			return true;
 		}
 	}
@@ -1215,7 +1280,7 @@ static void past(WINDOW*w){
 		size_t xe;
 		if(paste(y,x,&xe,cutbuf,cutbuf_sz,cutbuf_r,true)/*true*/){
 			pasted(y-ytext,xe,w);
-			if(mod_flag/*true*/)mod_set(false);
+			mod_set_off_wrap();
 			position(getcury(w),getcurx(w));
 		}
 	}
@@ -1521,7 +1586,7 @@ static void type(int cr,WINDOW*w){
 		}
 	}
 	wmove(w,rw,cl);
-	if(mod_flag/*true*/)mod_set(false);
+	mod_set_off_wrap();
 }
 static void indent(bool b,size_t ybsel,size_t*xbsel,size_t yesel,size_t*xesel,WINDOW*w){
 	if(ybsel>=rows_tot)return;
@@ -1538,7 +1603,7 @@ static void indent(bool b,size_t ybsel,s
 			row*r=&rows[i];
 			row_set(r,0,1,r->sz,"\t");
 		}
-		if(mod_flag/*true*/)mod_set(false);
+		mod_set_off_wrap();
 	}else{
 		bool something=false;
 		for(size_t i=ybsel;i<=ye;i++){
@@ -1554,7 +1619,7 @@ static void indent(bool b,size_t ybsel,s
 					r->sz=sz-1;
 				}
 			}
-			if(mod_flag/*true*/)mod_set(false);
+			mod_set_off_wrap();
 		}
 	}
 	int rb;if(ybsel<ytext)rb=0;
@@ -1697,7 +1762,7 @@ static bool savetofile(WINDOW*w,bool has
 	if(ret!=0){
 		if(ret==1){
 			if(d!=textfile)text_file=textfile;
-			mod_set(true);
+			mod_set_on();
 			undo_save();
 		}
 		else if(ret==-2)return true;
@@ -1708,7 +1773,23 @@ static bool savetofile(WINDOW*w,bool has
 static bool loopin(WINDOW*w){
 	int c;
 	for(;;){
+		//printf("\nteste1234\n");
+		//wtimeout(w,1000);
+		wtimeout(w,one_minute*1000);//it counts where wgetch is (example at visual)
 		c=wgetch(w);
+		hardtime_resolve(w);
+		if(c==ERR){
+			//this was ok at hardtime_resolve but will be too often there, here will be wrong sometimes but still less trouble
+			//doupdate();//noone will show virtual screen if without this
+
+			//and the cursor is getting away, not right but ok
+			wmove(w,getcury(w),getcurx(w));
+			//same as doupdate+not moving the cursor
+
+			continue;//timeout
+		}
+		wtimeout(w,-1);
+
 		int a=movment(c,w);
 		if(a==1)return true;
 		if(a!=0){
@@ -1784,6 +1865,7 @@ static bool loopin(WINDOW*w){
 						continue;
 					}
 				}
+				if(restorefile!=nullptr)remove(restorefile);//here restorefile is deleted
 				return false;
 			}
 			else type(c,w);
@@ -2019,7 +2101,7 @@ static void proced(char*comline){
 				if(r<=old_r)clrtoeol();//resize to up,is over text
 				//or =, clear bar,visual and saves
 				old_r=r;
-				if(mod_flag==false)mod_set(false);
+				if(mod_flag==false)mod_set_off();
 				else wnoutrefresh(stdscr);
 				position_reset();
 				position(cy,cx);
@@ -2052,6 +2134,87 @@ static void proced(char*comline){
 	}
 	if(cutbuf!=nullptr)free(cutbuf);
 }
+static void action(int argc,char**argv,WINDOW*w1){
+	size_t text_sz;
+	bool no_file=argc==1;
+	if(no_file==false){
+		no_file=new_visual(argv[1])/*true*/;
+		if(no_file==false){
+			if(restorefile_path(argv[1])/*true*/){
+				if(access(restorefile_buf,F_OK)==0){
+					if(argc==2){
+						puts("There is an unrestored file, (c)ontinue?\r");
+						int c=getchar();
+						if(c!='c')return;
+					}
+				}
+			}
+		}
+	}
+	struct pollfd fds[1];
+	//typedef struct __sFILE FILE;
+	//FILE* stdin __attribute__((annotate("introduced_in=" "23")));
+	fds[0].fd = known_stdin;
+	fds[0].events = POLLIN;
+	bool no_input=poll(fds, 1, 0)<1;
+	int ok=0;
+	if(no_file/*true*/&&no_input/*true*/){
+		text_init_b=(char*)malloc(1);
+		if(text_init_b!=nullptr){
+			rows=(row*)malloc(sizeof(row));
+			if(rows!=nullptr){
+				text_init_b[0]='\0';
+				text_sz=0;
+				rows[0].data=text_init_b;
+				rows[0].sz=0;rows[0].spc=0;
+				ok=1;
+				text_init_e=text_init_b+1;
+			}
+		}
+	}else{
+		ok=startfile(argv[1],&text_sz,no_file,no_input);
+		if(ok!=0){
+			if(ok<1){
+				char txt[]={'N','o','r','m','a','l','i','z','e',' ','l','i','n','e',' ','e','n','d','i','n','g','s',' ','t','o',' ','\\','r',' ',' ','?',' ','n','=','n','o',',',' ','d','e','f','a','u','l','t','=','y','e','s','\r','\0'};
+				//           0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26   27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49   50
+				if(ln_term_sz==2){txt[28]='\\';txt[29]='n';}
+				else if(ln_term[0]=='\n')txt[27]='n';
+				puts(txt);
+				int c=getchar();
+				if(c=='n')ok=0;
+			}
+			if(ok!=0){
+				rows=(row*)malloc(rows_tot*sizeof(row));
+				if(rows!=nullptr){
+					rows_init(text_sz);
+					textfile=argv[1];
+					text_init_e=text_init_b+text_sz+1;
+				}
+				else ok=0;
+			}
+		}
+	}
+	if(ok!=0){
+		color();
+		WINDOW*pw=position_init();
+		if(pw!=nullptr){
+			keypad(w1,true);
+			noecho();
+			nonl();//no translation,faster
+			mousemask(ALL_MOUSE_EVENTS,nullptr);//for error, export TERM=vt100
+			proced(argv[0]);
+			delwin(pw);
+		}
+	}
+	if(text_init_b!=nullptr){
+		if(rows!=nullptr){
+			text_free(0,rows_tot);
+			free(rows);
+			//puts(text_file
+		}
+		free(text_init_b);
+	}
+}
 int main(int argc,char**argv){
 	#ifdef ARM7L
 	struct sigaction signalhandlerDescriptor;
@@ -2061,76 +2224,12 @@ int main(int argc,char**argv){
 	sigaction(SIGSEGV, &signalhandlerDescriptor, nullptr);
 	//baz(argc);
 	#endif
-	if(argc>2){puts("Too many arguments.");return EXIT_FAILURE;}
+	if(argc>3){puts("Too many arguments.");return EXIT_FAILURE;}
 	WINDOW*w1=initscr();
 	use_default_colors();//assume_default_colors(-1,-1);//it's ok without this for color pair 0 (when attrset(0))
 	if(w1!=nullptr){
 		raw();//stty,cooked;relevant for getchar at me
-		size_t text_sz;
-		bool no_file=argc!=2||new_visual(argv[1])/*true*/;
-		struct pollfd fds[1];
-		//typedef struct __sFILE FILE;
-		//FILE* stdin __attribute__((annotate("introduced_in=" "23")));
-		fds[0].fd = known_stdin;
-		fds[0].events = POLLIN;
-		bool no_input=poll(fds, 1, 0)<1;
-		int ok=0;
-		if(no_file/*true*/&&no_input/*true*/){
-			text_init_b=(char*)malloc(1);
-			if(text_init_b!=nullptr){
-				rows=(row*)malloc(sizeof(row));
-				if(rows!=nullptr){
-					text_init_b[0]='\0';
-					text_sz=0;
-					rows[0].data=text_init_b;
-					rows[0].sz=0;rows[0].spc=0;
-					ok=1;
-					text_init_e=text_init_b+1;
-				}
-			}
-		}else{
-			ok=startfile(argv[1],&text_sz,no_file,no_input);
-			if(ok!=0){
-				if(ok<1){
-					char txt[]={'N','o','r','m','a','l','i','z','e',' ','l','i','n','e',' ','e','n','d','i','n','g','s',' ','t','o',' ','\\','r',' ',' ','?',' ','n','=','n','o',',',' ','d','e','f','a','u','l','t','=','y','e','s','\r','\0'};
-					//           0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26   27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49   50
-					if(ln_term_sz==2){txt[28]='\\';txt[29]='n';}
-					else if(ln_term[0]=='\n')txt[27]='n';
-					puts(txt);
-					int c=getchar();
-					if(c=='n')ok=0;
-				}
-				if(ok!=0){
-					rows=(row*)malloc(rows_tot*sizeof(row));
-					if(rows!=nullptr){
-						rows_init(text_sz);
-						textfile=argv[1];
-						text_init_e=text_init_b+text_sz+1;
-					}
-					else ok=0;
-				}
-			}
-		}
-		if(ok!=0){
-			color();
-			WINDOW*pw=position_init();
-			if(pw!=nullptr){
-				keypad(w1,true);
-				noecho();
-				nonl();//no translation,faster
-				mousemask(ALL_MOUSE_EVENTS,nullptr);//for error, export TERM=vt100
-				proced(argv[0]);
-				delwin(pw);
-			}
-		}
-		if(text_init_b!=nullptr){
-			if(rows!=nullptr){
-				text_free(0,rows_tot);
-				free(rows);
-				//puts(text_file
-			}
-			free(text_init_b);
-		}
+		action(argc,argv,w1);
 		endwin();
 		if(text_file!=nullptr)puts(text_file);
 	}
--- edor-1.orig/s/top.h
+++ edor-1/s/top.h
@@ -39,3 +39,8 @@ typedef struct{
 //#define com_nr_is_find_word(a) *a>=com_nr_findword
 
 #define is_word_char(a) ('0'<=a&&(a<='9'||('A'<=a&&(a<='Z'||(a=='_'||('a'<=a&&a<='z'))))))
+
+#define max_path 0xff
+#define max_path_0 max_path+1
+
+#define command_return_ok 1
