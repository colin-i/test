Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x17) focal; urgency=medium
 .
   * already opened detector
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-03-17

--- edor-1.orig/s/bar.c
+++ edor-1/s/bar.c
@@ -38,7 +38,7 @@
 #ifdef HAVE_UNISTD_H
 #include<unistd.h>
 #else
-#include"inc/bar/unistd.h"
+#include"inc/unistd.h"
 #endif
 
 #include"base.h"
@@ -191,7 +191,12 @@ static int saving(){
 	return saving_base(textfile);
 }
 static void inputpath(){
+	//this comes for save(not having file) and save as(ok or overwrite)
 	textfile=input0;
+
+	restore_rebase();
+	editing_rebase();
+
 	if(input0==input1)input0=input2;
 	else input0=input1;
 	//good for other commands that are not storing the result
@@ -1125,7 +1130,9 @@ bool new_visual(char*f){
 	if(access(f,F_OK)==-1){
 		new_v=sizeof(new_s);
 		//new_f=true;
+
 		textfile=f;
+
 		mvaddstr(getmaxy(stdscr)-1,com_left,new_s);
 		return true;
 	}
--- edor-1.orig/s/base.h
+++ edor-1/s/base.h
@@ -17,6 +17,8 @@ bool paste(size_t,size_t,size_t*,char*,s
 void vis(char,WINDOW*);
 void visual(char);
 void fixmembuf(size_t*y,size_t*x);
+void editing_rebase();
+void restore_rebase();
 
 const char*bar_init(void);
 int save(void);
--- edor-1.orig/s/inc/bar/errno.h
+++ edor-1/s/inc/bar/errno.h
@@ -3,8 +3,10 @@
 extern "C"{
 #endif
 
-int* __errno(void) __attribute__((__const__));
-#define errno (*__errno())
+//int* __errno(void) __attribute__((__const__));
+//#define errno (*__errno())
+extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
+#define errno (*__errno_location ())
 
 #ifdef __cplusplus
 }
--- edor-1.orig/s/inc/bar/unistd.h
+++ /dev/null
@@ -1,13 +0,0 @@
-
-#include "inc/unistd.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#define F_OK 0
-int access(const char*,int);
-
-#ifdef __cplusplus
-}
-#endif
--- edor-1.orig/s/inc/main/stdio.h
+++ edor-1/s/inc/main/stdio.h
@@ -8,10 +8,11 @@ extern FILE*stdin __attribute__((annotat
 extern "C" {
 #endif
 
-int puts(const char*);
-int putchar(int);
-int getchar(void);
 FILE* freopen(const char *filename, const char *mode, FILE *stream);
+int getchar(void);
+int putchar(int);
+int puts(const char*);
+int rename(const char*,const char*);
 //int snprintf(char* __buf, size_t __size, const char* __fmt, ...);
 
 #ifdef __cplusplus
--- edor-1.orig/s/inc/main/unistd.h
+++ edor-1/s/inc/main/unistd.h
@@ -14,6 +14,7 @@ extern "C" {
 
 off_t lseek(int,off_t,int);
 ssize_t read(int,void*,size_t);
+int unlink(const char*);
 
 #ifdef __cplusplus
 }
--- edor-1.orig/s/inc/stddef.h
+++ edor-1/s/inc/stddef.h
@@ -1,2 +1,2 @@
 
-typedef unsigned int size_t;
+typedef long unsigned int size_t;
--- edor-1.orig/s/inc/unistd.h
+++ edor-1/s/inc/unistd.h
@@ -1,12 +1,15 @@
 
 #include "inc/stddef.h"
 
-typedef int ssize_t;
+#define F_OK 0
+
+typedef long int ssize_t;
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+int access(const char*,int);
 int close(int);
 ssize_t write(int,const void*,size_t);
 
--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -151,6 +151,10 @@ static char*helptext;
 static time_t hardtime=0;
 static char*restorefile=nullptr;
 static char restorefile_buf[max_path_0];
+static char restorefile_buf2[max_path_0];
+static char*editingfile=nullptr;
+static char editingfile_buf[max_path_0];
+static char editingfile_buf2[max_path_0];
 static mmask_t stored_mouse_mask;
 static bool indent_flag=true;
 #define mask_size 1
@@ -1097,10 +1101,11 @@ static void mod_set(bool flag,chtype ch)
 	mod_flag=flag;
 	mod_visual(ch);
 }
+#define modif_visual '*'
 void mod_set_off(){
 	hardtime=time((time_t)nullptr);//cast only at non-header
 	//cannot delete mod_flag, it has meanings at undo type/bk/del sum and quit without save
-	mod_set(false,'*');
+	mod_set(false,modif_visual);
 }
 void mod_set_on(){
 	easytime();
@@ -1112,6 +1117,7 @@ void mod_set_off_wrap(){
 		mod_set_off();//with wrap
 	}
 }
+
 #define restore_marker ".edorrestorefile"
 static bool restorefile_path(char*p){
 	size_t ln=strlen(p)+sizeof(restore_marker);
@@ -1119,21 +1125,39 @@ static bool restorefile_path(char*p){
 	sprintf(restorefile_buf,"%s%s",p,restore_marker);
 	return true;
 }
+#define editing_marker ".edoreditingfile"
+static bool editingfile_path(char*p){
+	size_t ln=strlen(p)+sizeof(editing_marker);
+	if(ln>max_path_0)return false;//the path is too long
+	sprintf(editingfile_buf,"%s%s",p,editing_marker);
+	return true;
+}
+static void editing_new(){
+	int f=open_new(editingfile_buf);
+	if(f!=-1){
+		close(f);
+		editingfile=editingfile_buf;
+	}
+}
+
+static void restore_visual(){
+	mod_visual('&');
+}
 static void hardtime_resolve_returner(WINDOW*w){//argument for errors
 	if(textfile!=nullptr){
 		if(restorefile==nullptr){
 			//set restore file path
-			if(restorefile_path(textfile)/*true*/)restorefile=restorefile_buf;
-			else return;
+			if(restorefile_path(textfile)/*true*/){
+				//save at path
+				if(saving_base(restorefile_buf)==command_return_ok){
+					restorefile=restorefile_buf;
+					restore_visual();
+				}else err_set(w);
+			}
+		}else{
+			if(saving_base(restorefile)==command_return_ok)restore_visual();
+			else err_set(w);
 		}
-		//in case there is a restore file but at another path (restore, save as, type, restore!=oldrestore)
-		//	must set path every time and compare and i don't change the file name so this is a "to do"
-		//if(strcmp(newrestorefile,restorefile)!=0)remove(restorefile);
-
-		//save at path
-		if(saving_base(restorefile)==command_return_ok)
-			mod_visual('&');
-		else err_set(w);
 	}
 }
 #define one_minute 60
@@ -1146,6 +1170,23 @@ static void hardtime_resolve(WINDOW*w){/
 		}
 	}
 }
+void restore_rebase(){
+	if(restorefile!=nullptr){
+		sprintf(restorefile_buf2,"%s",restorefile_buf);
+		if(restorefile_path(textfile)/*true*/){
+			if(rename(restorefile_buf2,restorefile_buf)==0)restorefile=restorefile_buf;
+		}
+	}
+}
+void editing_rebase(){
+	if(editingfile!=nullptr){
+		//rename is better than delete, create new disk cycles?
+		sprintf(editingfile_buf2,"%s",editingfile_buf);
+		if(editingfile_path(textfile)/*true*/){
+			if(rename(editingfile_buf2,editingfile_buf)==0)editingfile=editingfile_buf;
+		}
+	}else if(editingfile_path(textfile)/*true*/)editing_new();
+}
 
 void deleting(size_t ybsel,size_t xbsel,size_t yesel,size_t xesel){
 	row*r1=&rows[ybsel];
@@ -1920,7 +1961,7 @@ static bool loopin(WINDOW*w){
 						continue;
 					}
 				}
-				if(restorefile!=nullptr)remove(restorefile);//here restorefile is deleted
+				if(restorefile!=nullptr)unlink(restorefile);//here restorefile is deleted
 				return false;
 			}
 			else if(strcmp(s,"^E")==0){
@@ -2216,7 +2257,10 @@ static void proced(char*comline){
 				if(r<=old_r)clrtoeol();//resize to up,is over text
 				//or =, clear bar,visual and saves
 				old_r=r;
-				if(mod_flag==false)mod_set_off();
+				if(mod_flag==false){
+					if(hardtime==0)restore_visual();
+					else mod_visual(modif_visual);
+				}
 				else wnoutrefresh(stdscr);
 				position_reset();
 				position(cy,cx);
@@ -2254,17 +2298,22 @@ static void action(int argc,char**argv,W
 	bool no_file=argc==1;
 	if(no_file==false){
 		no_file=new_visual(argv[1])/*true*/;
-		if(no_file==false){
-			if(restorefile_path(argv[1])/*true*/){
-				if(access(restorefile_buf,F_OK)==0){
-					//if(argc==2){
-					puts("There is an unrestored file, (c)ontinue?\r");
-					int c=getchar();
-					if(c!='c')return;
-					//}
-				}
+		if(restorefile_path(argv[1])/*true*/){
+			if(access(restorefile_buf,F_OK)==0){
+				//if(argc==2){
+				puts("There is an unrestored file, (c)ontinue?\r");
+				int c=getchar();
+				if(c!='c')return;
+				//}
 			}
 		}
+		if(editingfile_path(argv[1])/*true*/){
+			if(access(editingfile_buf,F_OK)==0){
+				puts("The file is already opened in another instance, (c)ontinue?\r");
+				int c=getchar();
+				if(c!='c')return;
+			}else editing_new();
+		}
 	}
 	struct pollfd fds[1];
 	//typedef struct __sFILE FILE;
@@ -2302,7 +2351,9 @@ static void action(int argc,char**argv,W
 				rows=(row*)malloc(rows_tot*sizeof(row));
 				if(rows!=nullptr){
 					rows_init(text_sz);
+
 					textfile=argv[1];
+
 					text_init_e=text_init_b+text_sz+1;
 				}
 				else ok=0;
@@ -2334,6 +2385,7 @@ static void action(int argc,char**argv,W
 		}
 		free(text_init_b);
 	}
+	if(editingfile!=nullptr)unlink(editingfile);//this can be before and after text_init_b
 }
 int main(int argc,char**argv){
 	#ifdef ARM7L
