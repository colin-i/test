Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x16) focal; urgency=medium
 .
   * file name visible
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-03-07

--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -1,3 +1,4 @@
+
 #include "top.h"
 
 #ifdef HAVE_CURSES_H
@@ -138,7 +139,7 @@ bool mod_flag=true;
 
 #define Char_Escape 27
 static char*mapsel=nullptr;
-static char*text_file=nullptr;
+//static char*text_file=nullptr;
 static size_t rows_spc=1;
 static bool*x_right=nullptr;
 static int*tabs=nullptr;
@@ -159,7 +160,8 @@ static bool indent_flag=true;
 static char prefs_file[max_path_0]={'\0'};//only the first byte is set
 
 #define hel1 "USAGE\n"
-#define hel2 " [filepath] skip_unrestoredfilecheck_flag\
+// skip_unrestoredfilecheck_flag
+#define hel2 " [filepath]\
 \nINPUT\
 \nhelp: q(uit),up/down,mouse/touch v.scroll\
 \n[Ctrl/Alt/Shift +]arrows/home/end/del,page up,page down,backspace,enter\
@@ -413,6 +415,15 @@ static void hmove(int n){
 	phelp=helpmanag(n);
 	helpshow(n);
 }
+static void topspace_clear(){
+	//first write is not here
+	move(0,0);//is not here
+	clrtoeol();//if name is shorter will let text
+}
+#define write_the_title(a) printinverted(a)
+static void write_title(){
+	write_the_title(textfile);
+}
 static bool helpin(WINDOW*w){
 	int c;
 	do{
@@ -427,6 +438,12 @@ static bool helpin(WINDOW*w){
 		else if(c==KEY_RESIZE)return true;
 	}while(c!='q');
 	//helpclear();wnoutrefresh(stdscr);
+
+	//need to clear first line anyway
+	topspace_clear();
+	if(textfile!=nullptr)write_title();
+	wnoutrefresh(stdscr);//doupdate is not enough
+
 	refreshpage(w);
 	return false;
 }
@@ -615,7 +632,7 @@ static void right_move(WINDOW*w,bool(*f)
 static int movment(int c,WINDOW*w){
 	if(c==KEY_MOUSE){
 		MEVENT e;
-		getmouse(&e);//==OK is when mousemask is 0, but then nothint at getch
+		getmouse(&e);//==OK is when mousemask is 0, but then nothing at getch
 		if((e.bstate&BUTTON4_PRESSED)!=0)vu1move(w,getcury(w));
 		else if((e.bstate&BUTTON5_PRESSED)!=0)vd1move(w,getcury(w));
 		else if((e.bstate&BUTTON1_CLICKED)!=0)amove(w,e.y,e.x);//return -2;}
@@ -1773,7 +1790,11 @@ static bool savetofile(WINDOW*w,bool has
 	}else{char aa=com_nr_save;ret=command(&aa);}
 	if(ret!=0){
 		if(ret==1){
-			if(d!=textfile)text_file=textfile;
+			if(d!=textfile){
+				//text_file=textfile;//now is a title
+				topspace_clear();
+				write_title();
+			}
 			mod_set_on();
 			undo_save();
 		}
@@ -2164,6 +2185,7 @@ static void proced(char*comline){
 	if(setfilebuf(comline,cutbuf_file)/*true*/){
 		bool loops=false;
 		int cy=0;int cx=0;
+		int topspace=1;
 		int r=getmaxy(stdscr)-1;
 		int old_r=r-1;//set -1 because at first compare is erasing new_visual
 		do{
@@ -2179,7 +2201,13 @@ static void proced(char*comline){
 			a=realloc(mapsel,(size_t)c+1);
 			if(a==nullptr)break;
 			mapsel=(char*)a;
-			WINDOW*w=newwin(r,c,0,0);
+
+			if(textfile!=nullptr){
+				move(0,0);//no clear, only overwrite, can resize left to right then back right to left
+				write_title();//this is also the first write
+			}
+
+			WINDOW*w=newwin(r-topspace,c,topspace,0);
 			if(w!=nullptr){
 				keypad(w,true);
 				refreshpage(w);
@@ -2229,11 +2257,11 @@ static void action(int argc,char**argv,W
 		if(no_file==false){
 			if(restorefile_path(argv[1])/*true*/){
 				if(access(restorefile_buf,F_OK)==0){
-					if(argc==2){
-						puts("There is an unrestored file, (c)ontinue?\r");
-						int c=getchar();
-						if(c!='c')return;
-					}
+					//if(argc==2){
+					puts("There is an unrestored file, (c)ontinue?\r");
+					int c=getchar();
+					if(c!='c')return;
+					//}
 				}
 			}
 		}
@@ -2316,14 +2344,14 @@ int main(int argc,char**argv){
 	sigaction(SIGSEGV, &signalhandlerDescriptor, nullptr);
 	//baz(argc);
 	#endif
-	if(argc>3){puts("Too many arguments.");return EXIT_FAILURE;}
+	if(argc>2){puts("Too many arguments.");return EXIT_FAILURE;}
 	WINDOW*w1=initscr();
 	use_default_colors();//assume_default_colors(-1,-1);//it's ok without this for color pair 0 (when attrset(0))
 	if(w1!=nullptr){
 		raw();//stty,cooked;relevant for getchar at me
 		action(argc,argv,w1);
 		endwin();
-		if(text_file!=nullptr)puts(text_file);
+		//if(text_file!=nullptr)puts(text_file);
 	}
 	return EXIT_SUCCESS;
 }
