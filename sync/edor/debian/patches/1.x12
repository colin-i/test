Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 edor (1-x12) focal; urgency=medium
 .
   * remember flags(mouse and indent) in a file in ~/.config/
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-01-25

--- edor-1.orig/s/main.c
+++ edor-1/s/main.c
@@ -152,6 +152,10 @@ static char*restorefile=nullptr;
 static char restorefile_buf[max_path_0];
 static mmask_t stored_mouse_mask;
 static bool indent_flag=true;
+#define mask_size 1
+#define mask_mouse 1
+#define mask_indent 2
+static char prefs_file[max_path_0]={'\0'};//only the first byte is set
 
 #define hel1 "USAGE\n"
 #define hel2 " [filepath] skip_unrestoredfilecheck_flag\
@@ -1776,6 +1780,28 @@ static bool savetofile(WINDOW*w,bool has
 	wmove(w,getcury(w),getcurx(w));
 	return false;
 }
+static void setprefs(int flag,bool set){
+	if(prefs_file[0]!='\0'){
+		//can use O_RDWR and lseek SEEK_SET
+		int f=open(prefs_file,O_RDONLY);
+		if(f!=-1){
+			char mask;
+			if(read(f,&mask,mask_size)==mask_size){
+				close(f);
+				if(set)mask|=flag;
+				else mask&=~flag;
+				f=open(prefs_file,O_WRONLY);
+				if(f!=-1){
+					#pragma GCC diagnostic push
+					#pragma GCC diagnostic ignored "-Wunused-result"
+					write(f,&mask,mask_size);
+					close(f);
+					#pragma GCC diagnostic pop
+				}
+			}
+		}
+	}
+}
 static bool loopin(WINDOW*w){
 	int c;
 	for(;;){
@@ -1875,11 +1901,12 @@ static bool loopin(WINDOW*w){
 				return false;
 			}
 			else if(strcmp(s,"^E")==0){
-				if(stored_mouse_mask!=0)stored_mouse_mask=mousemask(0,nullptr);
-				else stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);
+				if(stored_mouse_mask!=0){stored_mouse_mask=mousemask(0,nullptr);setprefs(mask_mouse,false);}
+				else{stored_mouse_mask=mousemask(ALL_MOUSE_EVENTS,nullptr);setprefs(mask_mouse,true);}
 			}
 			else if(strcmp(s,"^N")==0){
 				if(indent_flag/*true*/)indent_flag=false;else indent_flag=true;
+				setprefs(mask_indent,indent_flag);
 			}
 			else type(c,w);
 			//continue;
@@ -2007,6 +2034,19 @@ static int startfile(char*f,size_t*text_
 	}
 	return normalize(&text_init_b,text_sz,&rows_tot);
 }
+static bool help_init(char*f,size_t szf){
+	size_t sz1=sizeof(hel1)-1;
+	size_t sz2=sizeof(hel2);
+	char*a=(char*)malloc(sz1+szf+sz2);
+	if(a!=nullptr){
+		helptext=a;
+		memcpy(a,hel1,sz1);
+		a+=sz1;memcpy(a,f,szf);
+		memcpy(a+szf,hel2,sz2);
+		return true;
+	}
+	return false;
+}
 static void getfilebuf(char*cutbuf_file){//,size_t off){
 	int f=open(cutbuf_file,O_RDONLY);
 	if(f==-1)f=open_new(cutbuf_file);
@@ -2031,18 +2071,25 @@ static void getfilebuf(char*cutbuf_file)
 		close(f);
 	}
 }
-static bool help_init(char*f,size_t szf){
-	size_t sz1=sizeof(hel1)-1;
-	size_t sz2=sizeof(hel2);
-	char*a=(char*)malloc(sz1+szf+sz2);
-	if(a!=nullptr){
-		helptext=a;
-		memcpy(a,hel1,sz1);
-		a+=sz1;memcpy(a,f,szf);
-		memcpy(a+szf,hel2,sz2);
-		return true;
+static void getprefs(){
+	char mask;
+	int f=open(prefs_file,O_RDONLY);
+	if(f!=-1){
+		if(read(f,&mask,mask_size)==mask_size){
+			if((mask&mask_mouse)==0)stored_mouse_mask=mousemask(0,nullptr);
+			if((mask&mask_indent)==0)indent_flag=false;
+		}
+		close(f);
+		return;
+	}
+	f=open_new(prefs_file);
+	if(f!=-1){
+		mask=mask_mouse|mask_indent;
+		#pragma GCC diagnostic push
+		#pragma GCC diagnostic ignored "-Wunused-result"
+		write(f,&mask,mask_size);
+		#pragma GCC diagnostic pop
 	}
-	return false;
 }
 static bool setfilebuf(char*s,char*cutbuf_file){
 #if ((!defined(USE_FS)) && (!defined(USE__FS)))
@@ -2054,14 +2101,23 @@ static bool setfilebuf(char*s,char*cutbu
 		char a=s[i];
 		if(a==path_separator){i++;break;}
 	}while(i!=0);
-	bool b=help_init(&s[i],sz-i);
+	size_t exenamesize=sz-i;
+	bool b=help_init(&s[i],exenamesize);
 	char*h=getenv("HOME");
 	if(h!=nullptr){
 		size_t l=strlen(h);
 		if(l!=0){
-			if(l+(sz-i)+7<=128){
+			size_t info_sz=l+exenamesize+7;//plus separator dot info and null
+			if(info_sz<=max_path_0){
 				sprintf(cutbuf_file,"%s%c.%sinfo",h,path_separator,&s[i]);
 				getfilebuf(cutbuf_file);//l-1
+
+				const char*conf=".config";
+				size_t csz=strlen(conf)+1;//plus separator
+				if(info_sz+csz<=max_path_0){
+					sprintf(prefs_file,"%s%c%s%c.%sinfo",h,path_separator,conf,path_separator,&s[i]);
+					getprefs();
+				}
 			}
 		}
 	}
@@ -2071,7 +2127,10 @@ static void writefilebuf(char*cutbuf_fil
 	if(cutbuf_file[0]!=0){
 		int f=open(cutbuf_file,O_WRONLY|O_TRUNC);
 		if(f!=-1){
+			#pragma GCC diagnostic push
+			#pragma GCC diagnostic ignored "-Wunused-result"
 			write(f,cutbuf,cutbuf_sz);
+			#pragma GCC diagnostic pop
 			close(f);
 		}
 	}
@@ -2085,7 +2144,7 @@ static void color(){
 }
 
 static void proced(char*comline){
-	char cutbuf_file[128];
+	char cutbuf_file[max_path_0];
 	cutbuf_file[0]='\0';
 	if(setfilebuf(comline,cutbuf_file)/*true*/){
 		bool loops=false;
