Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-46) bionic; urgency=medium
 .
   * optimizations
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-09-07

--- actionswf-1.orig/.github/workflows/rpm.yml
+++ actionswf-1/.github/workflows/rpm.yml
@@ -17,7 +17,7 @@ jobs:
    - name: Run a multi-line script
      run: |
       #get deb
-      arh=i386
+      arh=`cat debian/control | grep ^Architecture | cut -d ' ' -f2`
       name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
       version=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
       #dist=`cat debian/changelog | head -1 | grep -Poe "[^ ]*(?=;)"`
--- actionswf-1.orig/example/Makefile
+++ actionswf-1/example/Makefile
@@ -1,6 +1,10 @@
 
 platform = lin
+
+ifndef OCOMP
 OCOMP=o
+endif
+
 OLINK=ounused
 syms=-s
 conv_64=0
--- actionswf-1.orig/src/Makefile
+++ actionswf-1/src/Makefile
@@ -1,6 +1,10 @@
 
 platform = lin
+
+ifndef OCOMP
 OCOMP=o
+endif
+
 OLINK=ounused
 syms=-s
 conv_64=0
--- actionswf-1.orig/src/action.es
+++ actionswf-1/src/action.es
@@ -1,20 +1,25 @@
 Format ElfObj64
 
-importaftercall ebool
 include "../include/prog.h"
 
+import "action_debug" action_debug
+import "brace_blocks_counter_init" brace_blocks_counter_init
+import "action_code_values" action_code_values
+import "action_code_values_index" action_code_values_index
+import "escape_action" escape_action
+import "action_debug_free" action_debug_free
+
+
+
+importaftercall ebool
+
 #this/an action
 
 import "action__code" action__code
 import "action_code_set" action_code_set
 import "action_code_row" action_code_row
-import "action_debug" action_debug
 import "dupreserve_string" dupreserve_string
-import "brace_blocks_counter_init" brace_blocks_counter_init
 import "brace_blocks_end" brace_blocks_end
-import "action_code_values" action_code_values
-import "action_code_values_index" action_code_values_index
-import "escape_action" escape_action
 functionX action(ss ac)
 #ss ac       actionscript string to be parsed
     sd p_values
@@ -48,7 +53,6 @@ functionX action(ss ac)
     call action__code(p_values)
 
     #free mem ok,another free can be at errors
-    import "action_debug_free" action_debug_free
     call action_debug_free()
 endfunction
 import "action_format" action_format
--- actionswf-1.orig/src/actioncode.s
+++ actionswf-1/src/actioncode.s
@@ -1,13 +1,12 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 #win32 with _
 importx "strcmp" strcmp
 importx "sprintf" sprintf
 importx "strlen" strlen
 
-importaftercall ebool
-include "../include/prog.h"
-
 const totalvalues=65535
 function action_code_values_container()
     value setofvalues=NULL
@@ -18,13 +17,9 @@ function action_code_values()
     setcall m action_code_values_container()
     return m#
 endfunction
-function action_code_values_init()
-    import "memalloc" memalloc
-    sv m
-    setcall m action_code_values_container()
-    setcall m# memalloc((totalvalues*DWORD))
-endfunction
+
 import "mem_free" mem_free
+
 function action_code_values_free()
     sv p
     setcall p action_code_values_container()
@@ -46,6 +41,81 @@ function action_code_get()
     add pointer x
     return pointer
 endfunction
+
+import "brace_blocks_get_memblock" brace_blocks_get_memblock
+import "block_get_size" block_get_size
+
+import "cond_blocks" cond_blocks
+import "brace_blocks_counter" brace_blocks_counter
+
+function get_nr_of_forIn_statements()
+    sd block;setcall block cond_blocks()
+    sd counter;sd c;setcall c brace_blocks_counter();set counter c#
+    sd nr=0
+    while counter>0
+        dec counter
+        sub block (DWORD)
+        if block#==(brace_blocks_function)
+            return nr
+        elseif block#==(for_marker)
+            inc nr
+        endelseif
+    endwhile
+    return nr
+endfunction
+
+#name/0
+function action_code_write_builtin_names(sv codepointer,sd p_action)
+    ss int="int"
+    sd compare
+    setcall compare strcmp(codepointer#,int)
+    if compare==0
+        set p_action# (ActionToInteger)
+        return int
+    endif
+    ss rnd="random"
+    setcall compare strcmp(codepointer#,rnd)
+    if compare==0
+    #0�(maximum-1)
+        set p_action# (ActionRandomNumber)
+        return rnd
+    endif
+    ss ascii="ord"
+    setcall compare strcmp(codepointer#,ascii)
+    if compare==0
+        set p_action# (ActionCharToAscii)
+        return ascii
+    endif
+    ss chr="chr"
+    setcall compare strcmp(codepointer#,chr)
+    if compare==0
+        set p_action# (ActionAsciiToChar)
+        return chr
+    endif
+    ss typeOf="TypeOf"
+    setcall compare strcmp(codepointer#,typeOf)
+    if compare==0
+        set p_action# (ActionTypeOf)
+        return typeOf
+    endif
+    return 0
+endfunction
+
+
+
+
+
+
+
+
+importaftercall ebool
+
+function action_code_values_init()
+    import "memalloc" memalloc
+    sv m
+    setcall m action_code_values_container()
+    setcall m# memalloc((totalvalues*DWORD))
+endfunction
 function action_code_set(sd value)
 	call action_code_set_ex(value,1)
 endfunction
@@ -233,8 +303,6 @@ import "brace_blocks_add_write_current"
 
 import "add_dummy_jump" add_dummy_jump
 import "resolve_dummy_jump" resolve_dummy_jump
-import "brace_blocks_get_memblock" brace_blocks_get_memblock
-import "block_get_size" block_get_size
 
 #next/same
 function action_code_write_conditions(sd codepointer)
@@ -307,7 +375,6 @@ function write_ifjump_withNot()
     #write the jump offset
     call write_ifjump_addTo_braceBlocks()
 endfunction
-import "cond_blocks" cond_blocks
 import "brace_blocks_counter_inc" brace_blocks_counter_inc
 function add_while_top_off(sd typeOfLoop)
     call brace_blocks_add_write_current()
@@ -354,22 +421,6 @@ function close_scope_forIn_statements()
         dec nr_of_forIn_statements
     endwhile
 endfunction
-import "brace_blocks_counter" brace_blocks_counter
-function get_nr_of_forIn_statements()
-    sd block;setcall block cond_blocks()
-    sd counter;sd c;setcall c brace_blocks_counter();set counter c#
-    sd nr=0
-    while counter>0
-        dec counter
-        sub block (DWORD)
-        if block#==(brace_blocks_function)
-            return nr
-        elseif block#==(for_marker)
-            inc nr
-        endelseif
-    endwhile
-    return nr
-endfunction
 function write_jump(sd size)
     call actionrecordheader((ActionJump),2)
     call swf_actionblock_add(#size,2)
@@ -496,42 +547,6 @@ function action_code_write_builtin_funct
     endif
     return cursor
 endfunction
-#name/0
-function action_code_write_builtin_names(sv codepointer,sd p_action)
-    ss int="int"
-    sd compare
-    setcall compare strcmp(codepointer#,int)
-    if compare==0
-        set p_action# (ActionToInteger)
-        return int
-    endif
-    ss rnd="random"
-    setcall compare strcmp(codepointer#,rnd)
-    if compare==0
-    #0�(maximum-1)
-        set p_action# (ActionRandomNumber)
-        return rnd
-    endif
-    ss ascii="ord"
-    setcall compare strcmp(codepointer#,ascii)
-    if compare==0
-        set p_action# (ActionCharToAscii)
-        return ascii
-    endif
-    ss chr="chr"
-    setcall compare strcmp(codepointer#,chr)
-    if compare==0
-        set p_action# (ActionAsciiToChar)
-        return chr
-    endif
-    ss typeOf="TypeOf"
-    setcall compare strcmp(codepointer#,typeOf)
-    if compare==0
-        set p_action# (ActionTypeOf)
-        return typeOf
-    endif
-    return 0
-endfunction
 #codepointer
 function action_code_write_builtin_set(sd codepointer)
     ss name
--- actionswf-1.orig/src/actionparse.s
+++ actionswf-1/src/actionparse.s
@@ -1,5 +1,7 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 #win32 with _
 importx "strcspn" strcspn
 importx "strchr" strchr
@@ -7,11 +9,98 @@ importx "memcpy" memcpy
 importx "sscanf" sscanf
 importx "strpbrk" strpbrk
 
-importaftercall ebool
-include "../include/prog.h"
-
 import "str_next" str_next
 import "str_expression_at_start" str_expression_at_start
+
+import "debug_code" debug_code
+import "spaces" spaces
+
+import "str_expression_at_start_withEndCare" str_expression_at_start_withEndCare
+
+#operations str
+function get_operations()
+    const operations_begin=!
+    chars operations="+-*/%&|^<>?"
+    #subtract 1 is for the string termination
+    const operations_size=!-operations_begin-1
+    return #operations
+endfunction
+
+#bool
+function action_parse_utilEndTypes(sd op,sv p_op,sd endtype1,sd endtype2)  #p_op is pointing at a stack variable
+    #when p_op is set, is to store the multiple kind of endtypes
+    if p_op!=0
+        set p_op# op
+        if op==endtype2
+            return (TRUE)
+        endif
+    endif
+    if op==endtype1;return (TRUE);endif
+    return (FALSE)
+endfunction
+
+import "is_numeric" is_numeric
+
+#strpbrk
+function action_code_membersplit(ss ac)
+    chars delims=".["
+    ss next
+    setcall next strpbrk(ac,#delims)
+    return next
+endfunction
+
+#str
+function compares_signs()
+    return "<>=!"
+endfunction
+function compare_bool_pointer()
+    data compare_bool=FALSE;return #compare_bool
+endfunction
+
+const cond_block_size=DWORD
+const brace_blocks_max=100*cond_block_size
+function brace_blocks_counter()
+    data counter#1
+    return #counter
+endfunction
+function brace_blocks_counter_init()
+    sd c
+    setcall c brace_blocks_counter()
+    set c# 0
+endfunction
+
+function cond_blocks()
+    sd p_i
+    setcall p_i brace_blocks_counter()
+    sd blocks
+    setcall blocks cond_blocks_at_index(p_i#)
+    return blocks
+endfunction
+function cond_blocks_at_index(sd i)
+    data blocks_mem#brace_blocks_max
+    sd blocks^blocks_mem
+    #
+    mult i (cond_block_size)
+    add blocks i
+    return blocks
+endfunction
+
+import "swf_actionblock" swf_actionblock
+function brace_blocks_get_memblock()
+    sd memblock
+    setcall memblock swf_actionblock((mem_exp_get_block))
+    return memblock
+endfunction
+
+import "action_code_get" action_code_get
+import "action_code_values_index" action_code_values_index
+
+
+
+
+
+importaftercall ebool
+
 import "action_code_set" action_code_set
 import "action_code_set_pointer" action_code_set_pointer
 import "error" error
@@ -33,7 +122,6 @@ function action_code_row(ss ac,sd a_bloc
 endfunction
 #pointer
 function action_code_row_ex(ss ac,sd a_block_detected,sd else_index)
-    import "debug_code" debug_code
     sv p_c
     setcall p_c debug_code()
     set p_c# ac
@@ -139,7 +227,6 @@ function action_parse_conditions(ss ac,s
             call error("expecting 'space' at for loop")
         endif
         set cursor# 0
-        import "spaces" spaces
         inc cursor;setcall cursor spaces(cursor)
         setcall marker str_expression_at_start(cursor,"in")
         if marker==cursor
@@ -255,7 +342,6 @@ function else_elseif_expression(ss ac,sd
     set p_elseif# (TRUE)
     return pointer
 endfunction
-import "str_expression_at_start_withEndCare" str_expression_at_start_withEndCare
 #pointer
 function action_code_row_parse_instrument(ss ac)
     ss pointer
@@ -444,14 +530,6 @@ function action_code_row_parse_tool(ss a
     setcall ac action_code_row_parse_tool_util(ac,0,endtype,0)
     return ac
 endfunction
-#operations str
-function get_operations()
-    const operations_begin=!
-    chars operations="+-*/%&|^<>?"
-    #subtract 1 is for the string termination
-    const operations_size=!-operations_begin-1
-    return #operations
-endfunction
 
 #pointer
 function action_code_row_parse_tool_util(ss ac,sd p_op,sd endtype1,sd endtype2)
@@ -536,18 +614,6 @@ function action_parse_loop(ss ac,sv p_op
         endelse
     endwhile
 endfunction
-#bool
-function action_parse_utilEndTypes(sd op,sv p_op,sd endtype1,sd endtype2)  #p_op is pointing at a stack variable
-    #when p_op is set, is to store the multiple kind of endtypes
-    if p_op!=0
-        set p_op# op
-        if op==endtype2
-            return (TRUE)
-        endif
-    endif
-    if op==endtype1;return (TRUE);endif
-    return (FALSE)
-endfunction
 #action
 function action_parse_take_action(sd op,ss ac)
     sd x
@@ -713,7 +779,6 @@ function action_code_take(ss ac)
         call action_code_member(ac)
     endelse
 endfunction
-import "is_numeric" is_numeric
 #bool
 function numeric_code(ss ac)
     ss pointer;set pointer ac
@@ -752,13 +817,6 @@ function numeric_code(ss ac)
     call action_code_set(value_low)
     return (TRUE)
 endfunction
-#strpbrk
-function action_code_membersplit(ss ac)
-    chars delims=".["
-    ss next
-    setcall next strpbrk(ac,#delims)
-    return next
-endfunction
 function action_code_member(ss ac)
     vstr delims=".["
     chars dot=".";chars sqbrace_start="["
@@ -792,13 +850,6 @@ endfunction
 #condition
 
 
-#str
-function compares_signs()
-    return "<>=!"
-endfunction
-function compare_bool_pointer()
-    data compare_bool=FALSE;return #compare_bool
-endfunction
 #firstcompare==NULL:action code/NULL;else oneSign_two_or_noCompare 0/1/2
 function action_compare(sd value,sd firstcompare)
     #
@@ -879,17 +930,6 @@ endfunction
 
 #{} blocks
 
-const cond_block_size=DWORD
-const brace_blocks_max=100*cond_block_size
-function brace_blocks_counter()
-    data counter#1
-    return #counter
-endfunction
-function brace_blocks_counter_init()
-    sd c
-    setcall c brace_blocks_counter()
-    set c# 0
-endfunction
 function brace_blocks_counter_inc()
     sd c
     setcall c brace_blocks_counter()
@@ -908,28 +948,6 @@ function brace_blocks_counter_dec()
     dec c#
 endfunction
 #
-function cond_blocks()
-    sd p_i
-    setcall p_i brace_blocks_counter()
-    sd blocks
-    setcall blocks cond_blocks_at_index(p_i#)
-    return blocks
-endfunction
-function cond_blocks_at_index(sd i)
-    data blocks_mem#brace_blocks_max
-    sd blocks^blocks_mem
-    #
-    mult i (cond_block_size)
-    add blocks i
-    return blocks
-endfunction
-import "swf_actionblock" swf_actionblock
-function brace_blocks_get_memblock()
-    sd memblock
-    setcall memblock swf_actionblock((mem_exp_get_block))
-    return memblock
-endfunction
-#
 function brace_blocks_add_parse(sd type)
     sd block
     setcall block cond_blocks()
@@ -1155,8 +1173,6 @@ function action_code_parse_function_dete
     call action_code_set((args_end))
     return pointer
 endfunction
-import "action_code_get" action_code_get
-import "action_code_values_index" action_code_values_index
 #pointer
 function action_code_parse_function_arguments(ss pointer)
     #arguments
--- actionswf-1.orig/src/actionpool.s
+++ actionswf-1/src/actionpool.s
@@ -1,12 +1,11 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 #win32 with _
 importx "strlen" strlen
 importx "memcmp" memcmp
 
-importaftercall ebool
-include "../include/prog.h"
-
 function actionpoolid_root()
     data id#1
     return #id
@@ -29,7 +28,23 @@ function actionpool_currentblock()
     setcall block struct_ids_actionpool((ids_get),poolid)
     return block
 endfunction
+
+import "block_get_mem" block_get_mem
+import "block_get_size" block_get_size
+import "dword_to_word_arg" dword_to_word_arg
+import "word_arg_to_dword" word_arg_to_dword
+
 import "swf_mem" swf_mem
+
+
+
+
+importaftercall ebool
+
+
+
+
+
 #pool id
 function actionpool_value(ss value)
     sd poolid
@@ -41,10 +56,7 @@ function actionpool_value(ss value)
     call swf_mem((mem_exp_change_back))
     return nr
 endfunction
-import "block_get_mem" block_get_mem
-import "block_get_size" block_get_size
 import "swf_mem_add" swf_mem_add
-import "dword_to_word_arg" dword_to_word_arg
 #pool id
 function actionpool_getvalue(ss value)
     sd block
@@ -60,7 +72,6 @@ function actionpool_getvalue(ss value)
         call swf_mem_add(#onevalue,2)
         set nr 0
     else
-        import "word_arg_to_dword" word_arg_to_dword
         sd mem
         sd count
         setcall mem block_get_mem(block)
--- actionswf-1.orig/src/actionutil.s
+++ actionswf-1/src/actionutil.s
@@ -1,19 +1,203 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 #win32 with _
 importx "strlen" strlen
 importx "memcpy" memcpy
 importx "sprintf" sprintf
-#
-importx "action" action
+
+import "spaces" spaces
+
+#strings
+
+#error_row
+function escape_action(ss ac,ss pointer,ss stop_pointer)
+    sd row=1
+    sd loop1=1
+    sd error_row=0
+    #
+    sd comments=0
+    chars lines_com_c1="*";chars lines_com_c2="/";ss test
+    const line_comment=1
+    const multiLine_comment=2
+    #
+    while loop1==1
+        sd loop2=1
+        setcall ac spaces(ac)
+        #
+        if comments!=(multiLine_comment)
+            set comments 0
+            if ac#==(Slash)
+                set test ac
+                inc test
+                if test#==(Slash)
+                    set comments (line_comment)
+                    add ac 2
+                elseif test#==lines_com_c1
+                    set comments (multiLine_comment)
+                    add ac 2
+                endelseif
+            endif
+        endif
+        #
+        while loop2==1
+            if ac#==0xa
+                set loop2 0
+                inc row
+            elseif ac#==0xd
+                set loop2 0
+                set test ac;inc test;if test#==0xa;inc ac;endif
+                inc row
+            elseif ac#==0
+                set loop2 0
+                set loop1 0
+                set pointer# 0
+            else
+                if comments==0
+                    if pointer==stop_pointer
+                        set error_row row
+                    else
+                        set pointer# ac#
+                    endelse
+                    inc pointer
+                elseif comments==(multiLine_comment)
+                    if ac#==lines_com_c1
+                        set test ac;inc test;if test#==lines_com_c2;set comments 0;inc ac;endif
+                    endif
+                endelseif
+            endelse
+            inc ac
+        endwhile
+	if error_row!=0
+            set pointer# 0
+            set loop1 0
+        endif
+    endwhile
+    return error_row
+endfunction
+#nr
+function escape_count(ss string,sd escape)
+    sd nr=0
+    sd escaped=0
+    while string#!=0
+        if string#==escape
+            if escaped==0
+                #
+                ss double_test
+                set double_test string
+                inc double_test
+                chars l="l";chars f="f";
+                if double_test#==l
+                    inc double_test
+                    if double_test#==f
+                        inc nr
+                    endif
+                endif
+                #
+                inc nr
+            endif
+            xor escaped 1
+        elseif escaped==1
+            set escaped 0
+        endelseif
+        inc string
+    endwhile
+    return nr
+endfunction
+
+#debug
+
+function action_debug(sd is_on)
+    data action_errors=FALSE
+    vstr *#1
+    vstr m=NULL
+    if is_on==(FALSE)
+        #set there and here, here good at errors and comeback
+        set action_errors (FALSE)
+        import "mem_free" mem_free
+        if m!=(NULL);call mem_free(#m);endif
+    else
+        return #action_errors
+    endelse
+endfunction
+function action_debug_free()
+    call action_debug((FALSE))
+endfunction
+
+function debug_code()
+    value code#1
+    return #code
+endfunction
+
+function action_error()
+    sd p_action_errors
+    setcall p_action_errors action_debug((TRUE))
+    if p_action_errors#==(FALSE)
+        return (void)
+    endif
+
+    vstr ac#1
+    vstr mem#1
+    add p_action_errors (DWORD);call memcpy(#ac,p_action_errors,(2*:))
+
+    import "printEr" printEr
+    call printEr("Row: ")
+    sv p_c
+    setcall p_c debug_code()
+    sd row
+    setcall row escape_action(ac,mem,p_c#)
+    import "string_nl_print" string_nl_print
+    #a small reserve for a number like 2 000 000 000
+    chars row_nr#dword_to_string_chars
+    call sprintf(#row_nr,"%u",row)
+    call string_nl_print(#row_nr)
+    call string_nl_print(p_c#)
+endfunction
+
+#size
+function action_size(sd id)
+    import "block_get_size" block_get_size
+    sd block
+    setcall block struct_ids_action((ids_get),id)
+    sd size
+    setcall size block_get_size(block)
+    addcall size pool_size(id)
+    #add termination
+    add size 1
+    return size
+endfunction
+
+import "block_get_mem" block_get_mem
+
+#these ids are get only, is safe at throwless
+import "struct_ids_action" struct_ids_action
+import "struct_ids_actionpool" struct_ids_actionpool
+
+#size
+function pool_size(sd id)
+    sd poolblock
+    setcall poolblock struct_ids_actionpool((ids_get),id)
+    sd poolsize
+    setcall poolsize block_get_size(poolblock)
+    #detected at button actions="", swfdump giving error without "if poolsize!=0"
+    if poolsize==0;return 0;endif
+    #add header
+    add poolsize (1+2)
+    return poolsize
+endfunction
+
+
+
+
 
 importaftercall ebool
-include "../include/prog.h"
+
+importx "action" action
 
 import "swf_actionblock_add" swf_actionblock_add
 import "actionrecordheader" actionrecordheader
 import "actionpool_value" actionpool_value
-import "spaces" spaces
 
 #tags
 
@@ -41,7 +225,7 @@ function action_push(sd factors)
 			set value iter#
 			incst iter
 			if value==(ap_Constant8)
-			#add the action pool(if isn't) and verify to add +1size if 8 will go to ap_Constant16
+			#set the action pool(if isn't) and verify to add +1size if 8 will go to ap_Constant16
 				sd translated_id
 				setcall translated_id actionpool_value(iter#v^)
 				if translated_id>0xff
@@ -105,7 +289,6 @@ function action_one(sd tag)
     call swf_actionblock_add(#tag,1)
 endfunction
 
-
 import "action_code_right_util" action_code_right_util
 #codepointer
 function action_caller(ss name,ss member,sd args_pointer)
@@ -186,170 +369,8 @@ function action_member_write_tool(sd val
     call action_member_loop(values,(get_member))
 endfunction
 
-#strings
-
-#error_row
-function escape_action(ss ac,ss pointer,ss stop_pointer)
-    sd row=1
-    sd loop1=1
-    sd error_row=0
-    #
-    sd comments=0
-    chars lines_com_c1="*";chars lines_com_c2="/";ss test
-    const line_comment=1
-    const multiLine_comment=2
-    #
-    while loop1==1
-        sd loop2=1
-        setcall ac spaces(ac)
-        #
-        if comments!=(multiLine_comment)
-            set comments 0
-            if ac#==(Slash)
-                set test ac
-                inc test
-                if test#==(Slash)
-                    set comments (line_comment)
-                    add ac 2
-                elseif test#==lines_com_c1
-                    set comments (multiLine_comment)
-                    add ac 2
-                endelseif
-            endif
-        endif
-        #
-        while loop2==1
-            if ac#==0xa
-                set loop2 0
-                inc row
-            elseif ac#==0xd
-                set loop2 0
-                set test ac;inc test;if test#==0xa;inc ac;endif
-                inc row
-            elseif ac#==0
-                set loop2 0
-                set loop1 0
-                set pointer# 0
-            else
-                if comments==0
-                    if pointer==stop_pointer
-                        set error_row row
-                    else
-                        set pointer# ac#
-                    endelse
-                    inc pointer
-                elseif comments==(multiLine_comment)
-                    if ac#==lines_com_c1
-                        set test ac;inc test;if test#==lines_com_c2;set comments 0;inc ac;endif
-                    endif
-                endelseif
-            endelse
-            inc ac
-        endwhile
-	if error_row!=0
-            set pointer# 0
-            set loop1 0
-        endif
-    endwhile
-    return error_row
-endfunction
-#nr
-function escape_count(ss string,sd escape)
-    sd nr=0
-    sd escaped=0
-    while string#!=0
-        if string#==escape
-            if escaped==0
-                #
-                ss double_test
-                set double_test string
-                inc double_test
-                chars l="l";chars f="f";
-                if double_test#==l
-                    inc double_test
-                    if double_test#==f
-                        inc nr
-                    endif
-                endif
-                #
-                inc nr
-            endif
-            xor escaped 1
-        elseif escaped==1
-            set escaped 0
-        endelseif
-        inc string
-    endwhile
-    return nr
-endfunction
-
-#debug
-
-function action_debug(sd is_on)
-    data action_errors=FALSE
-    vstr *#1
-    vstr m=NULL
-    if is_on==(FALSE)
-        #set there and here, here good at errors and comeback
-        set action_errors (FALSE)
-        import "mem_free" mem_free
-        if m!=(NULL);call mem_free(#m);endif
-    else
-        return #action_errors
-    endelse
-endfunction
-function action_debug_free()
-    call action_debug((FALSE))
-endfunction
-
-function debug_code()
-    value code#1
-    return #code
-endfunction
-
-function action_error()
-    sd p_action_errors
-    setcall p_action_errors action_debug((TRUE))
-    if p_action_errors#==(FALSE)
-        return (void)
-    endif
-
-    vstr ac#1
-    vstr mem#1
-    add p_action_errors (DWORD);call memcpy(#ac,p_action_errors,(2*:))
-
-    import "printEr" printEr
-    call printEr("Row: ")
-    sv p_c
-    setcall p_c debug_code()
-    sd row
-    setcall row escape_action(ac,mem,p_c#)
-    import "string_nl_print" string_nl_print
-    #a small reserve for a number like 2 000 000 000
-    chars row_nr#dword_to_string_chars
-    call sprintf(#row_nr,"%u",row)
-    call string_nl_print(#row_nr)
-    call string_nl_print(p_c#)
-endfunction
-
 #action
 
-import "struct_ids_action" struct_ids_action
-import "struct_ids_actionpool" struct_ids_actionpool
-
-#size
-function action_size(sd id)
-    import "block_get_size" block_get_size
-    sd block
-    setcall block struct_ids_action((ids_get),id)
-    sd size
-    setcall size block_get_size(block)
-    addcall size pool_wr_size((FALSE),id)
-    #add termination
-    add size 1
-    return size
-endfunction
-import "block_get_mem" block_get_mem
 import "swf_actionrecordheader" swf_actionrecordheader
 import "swf_mem_add" swf_mem_add
 function write_action(sd id)
@@ -359,25 +380,20 @@ function write_action(sd id)
     setcall mem block_get_mem(block)
     sd size
     setcall size block_get_size(block)
-    call pool_wr_size((TRUE),id)
+    call pool_wr(id)
     call swf_mem_add(mem,size)
     #this is ActionEndFlag after ACTIONRECORD [zero or more]
     data end=0
     call swf_mem_add(#end,1)
 endfunction
-#size/void
-function pool_wr_size(sd wrTrue_sizeFalse,sd id)
+#void
+function pool_wr(sd id)
     sd poolblock
     setcall poolblock struct_ids_actionpool((ids_get),id)
     sd poolsize
     setcall poolsize block_get_size(poolblock)
     #detected at button actions="", swfdump giving error without "if poolsize!=0"
     if poolsize==0;return 0;endif
-    if wrTrue_sizeFalse==(FALSE)
-        #add header
-        add poolsize (1+2)
-        return poolsize
-    endif
     sd poolmem
     setcall poolmem block_get_mem(poolblock)
     call swf_actionrecordheader((ActionConstantPool),poolsize)
--- actionswf-1.orig/src/bits.s
+++ actionswf-1/src/bits.s
@@ -1,6 +1,5 @@
 Format ElfObj64
 
-importaftercall ebool
 include "../include/prog.h"
 
 function bits_packs(ss dest,sd packs)
@@ -91,14 +90,7 @@ function numbitsMax(sd width,sd height)
     inc NBits
     return NBits
 endfunction
-#
-import "swf_mem_add" swf_mem_add
-function rect_add(sd width,sd height)
-    sd mem
-    sd sz
-    call rect_prepare(#mem,#sz,width,height)
-    call swf_mem_add(mem,sz)
-endfunction
+
 function rect_prepare(sv p_out,sv p_size,sd width,sd height)  #p_size is a stack variable
     sd NBits
     mult width 20
@@ -138,6 +130,20 @@ function matrix_translate(sv p_dest,sd p
         div size 8
     set p_size# size
 endfunction
-#
 
 
+
+
+
+importaftercall ebool
+
+
+
+#
+import "swf_mem_add" swf_mem_add
+function rect_add(sd width,sd height)
+    sd mem
+    sd sz
+    call rect_prepare(#mem,#sz,width,height)
+    call swf_mem_add(mem,sz)
+endfunction
--- actionswf-1.orig/src/character.s
+++ actionswf-1/src/character.s
@@ -1,18 +1,10 @@
 Format ElfObj64
 
-importx "swf_text" swf_text
-importx "swf_shape" swf_shape
-#
-importx "action_sprite" action_sprite
-
-importaftercall ebool
 include "../include/prog.h"
 
-
-#shape
-
 import "identifiers_get" identifiers_get
 import "dword_to_word_arg" dword_to_word_arg
+
 #value
 function args_advance(sv p_args)
     sd value
@@ -25,6 +17,112 @@ function shapewithstyle_records()
     chars shapewithstyle_record#max_chars_records
     return #shapewithstyle_record
 endfunction
+
+import "bits_bigendian" bits_bigendian
+import "numbitsMax" numbitsMax
+
+#n
+function shape_records_NumBits(sd p_val)
+    sd val=-2;add val p_val#
+    if val<0
+        mult val -1;add p_val# val
+        return 0
+    endif
+    return val
+endfunction
+#get:fill/lin
+function NumFill_NumLin(sd set_get,sd fill,sd lin)
+    data NFill_NLin#1
+    if set_get==0
+        set NFill_NLin lin;mult fill 0x10;or NFill_NLin fill
+    else
+        if fill==(FALSE);set lin NFill_NLin;and lin 0x0F;return lin
+        else;set fill NFill_NLin;div fill 0x10;return fill;endelse
+    endelse
+endfunction
+
+#edittext
+
+const sim64pointerSize=pointer_rest
+#struct
+function edittext_struct()
+    data fontid#1
+    data *font_height#1
+    str *fontclassname#1;chars *sim64pointer#sim64pointerSize
+    data *rgba#1
+    data *maxlength#1
+    str *initialtext#1;chars *sim64pointer#sim64pointerSize
+    data *layout_align#1
+    data *layout_leftmargin#1
+    data *layout_rightmargin#1
+    data *layout_indent#1
+    data *layout_leading#1
+    return #fontid
+endfunction
+function edittext_font(sd fontid,sd fontheight)
+    sd s
+    setcall s edittext_struct()
+    set s# fontid
+    add s (DWORD)
+    set s# fontheight
+endfunction
+function edittext_rgba(sd val)
+    sd ed_str
+    setcall ed_str edittext_struct()
+    add ed_str (3*DWORD+sim64pointerSize);set ed_str# val
+endfunction
+function edittext_layout(sd in_args)
+    sd s
+    setcall s edittext_struct()
+    add s (6*DWORD+sim64pointerSize+sim64pointerSize)
+    set s# in_args#
+    add s (DWORD);add in_args (DWORD);set s# in_args#
+    add s (DWORD);add in_args (DWORD);set s# in_args#
+    add s (DWORD);add in_args (DWORD);set s# in_args#
+    add s (DWORD);add in_args (DWORD);set s# in_args#
+endfunction
+function edittext_text(ss text)
+    sd s
+    setcall s edittext_struct()
+    add s (5*DWORD+sim64pointerSize)
+    set s# text
+endfunction
+
+function button_mem()
+    data up#1
+    data *over#1
+	data *hit#1
+
+    data *width#1
+    data *height#1
+
+    data *no_text#1
+    data *font_id#1
+    data *font_height#1
+    data *y#1
+    data *font_color#1
+
+    return #up
+endfunction
+
+import "free_sprite_id" free_sprite_id
+import "matrix_translate" matrix_translate
+
+import "action_size" action_size
+
+
+
+
+importaftercall ebool
+
+importx "swf_text" swf_text
+importx "swf_shape" swf_shape
+
+importx "action_sprite" action_sprite
+
+
+#shape
+
 import "error" error
 function shape_records_bits(sd value,sd size,sv p_dest_pos)
     #why was this here? data start#1
@@ -39,7 +137,6 @@ function shape_records_bits(sd value,sd
     #was >=
         call error("too many arguments at shape")
     endif
-    import "bits_bigendian" bits_bigendian
     sd p_pos
     set p_pos p_dest_pos
     add p_pos :
@@ -92,7 +189,6 @@ function shape_records_add_moveto(sd p_d
     setcall x args_advance(p_args)
     sd y
     setcall y args_advance(p_args)
-    import "numbitsMax" numbitsMax
     sd numbits
     mult x 20
     mult y 20
@@ -163,25 +259,6 @@ function shape_records_add_edge_curved(s
     call shape_records_bits(anchor_x,numbits,p_dest_pos)
     call shape_records_bits(anchor_y,numbits,p_dest_pos)
 endfunction
-#n
-function shape_records_NumBits(sd p_val)
-    sd val=-2;add val p_val#
-    if val<0
-        mult val -1;add p_val# val
-        return 0
-    endif
-    return val
-endfunction
-#get:fill/lin
-function NumFill_NumLin(sd set_get,sd fill,sd lin)
-    data NFill_NLin#1
-    if set_get==0
-        set NFill_NLin lin;mult fill 0x10;or NFill_NLin fill
-    else
-        if fill==(FALSE);set lin NFill_NLin;and lin 0x0F;return lin
-        else;set fill NFill_NLin;div fill 0x10;return fill;endelse
-    endelse
-endfunction
 #id
 function swf_shape_simple(sd width,sd height,sd fillcolor,sd lineheight,sd linecolor,sd xcurve,sd ycurve)
     sd wd;set wd width;sub wd lineheight
@@ -264,53 +341,6 @@ function swf_shape_simple(sd width,sd he
     return id
 endfunction
 
-#edittext
-
-const sim64pointerSize=pointer_rest
-#struct
-function edittext_struct()
-    data fontid#1
-    data *font_height#1
-    str *fontclassname#1;chars *sim64pointer#sim64pointerSize
-    data *rgba#1
-    data *maxlength#1
-    str *initialtext#1;chars *sim64pointer#sim64pointerSize
-    data *layout_align#1
-    data *layout_leftmargin#1
-    data *layout_rightmargin#1
-    data *layout_indent#1
-    data *layout_leading#1
-    return #fontid
-endfunction
-function edittext_font(sd fontid,sd fontheight)
-    sd s
-    setcall s edittext_struct()
-    set s# fontid
-    add s (DWORD)
-    set s# fontheight
-endfunction
-function edittext_rgba(sd val)
-    sd ed_str
-    setcall ed_str edittext_struct()
-    add ed_str (3*DWORD+sim64pointerSize);set ed_str# val
-endfunction
-function edittext_layout(sd in_args)
-    sd s
-    setcall s edittext_struct()
-    add s (6*DWORD+sim64pointerSize+sim64pointerSize)
-    set s# in_args#
-    add s (DWORD);add in_args (DWORD);set s# in_args#
-    add s (DWORD);add in_args (DWORD);set s# in_args#
-    add s (DWORD);add in_args (DWORD);set s# in_args#
-    add s (DWORD);add in_args (DWORD);set s# in_args#
-endfunction
-function edittext_text(ss text)
-    sd s
-    setcall s edittext_struct()
-    add s (5*DWORD+sim64pointerSize)
-    set s# text
-endfunction
-
 #id
 function swf_text_initial_font_centered(sd width,sd height,ss text,sd font_id,sd font_height,sd font_color)
     call edittext_font(font_id,font_height)
@@ -327,22 +357,6 @@ endfunction
 
 #button
 
-function button_mem()
-    data up#1
-    data *over#1
-	data *hit#1
-
-    data *width#1
-    data *height#1
-
-    data *no_text#1
-    data *font_id#1
-    data *font_height#1
-    data *y#1
-    data *font_color#1
-
-    return #up
-endfunction
 import "swf_tag_recordheader_entry" swf_tag_recordheader_entry
 import "swf_mem_add" swf_mem_add
 #id
@@ -369,7 +383,6 @@ function swf_button_base(sd state_def_id
     call action_sprite(id,actions)
 
     add size (BUTTONCONDACTION_header_size)
-    import "action_size" action_size
     addcall size action_size(id)
 
     call swf_tag_recordheader_entry((DefineButton2),size)
@@ -392,13 +405,10 @@ function swf_button_base(sd state_def_id
     call swf_mem_add(#BUTTONCONDACTION,(BUTTONCONDACTION_header_size))
     call write_action(id)
 
-    import "free_sprite_id" free_sprite_id
     call free_sprite_id(id)
     return ButtonId
 endfunction
 
-import "matrix_translate" matrix_translate
-
 #size/void
 function buttonrecord(sd writeflag,sd x,sd y,sd states,sd id,sd depth)
     #ButtonReserved[2]=0,ButtonHasBlendMode[1]=0,ButtonHasFilterList[1]=0
--- actionswf-1.orig/src/file.s
+++ actionswf-1/src/file.s
@@ -1,5 +1,7 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 importx "_open" open
 importx "_read" read
 importx "_write" write
@@ -7,10 +9,40 @@ importx "_lseek" lseek
 #importx tell   can't find it
 importx "_close" close
 
+import "printEr" printEr
+
+function file_get_content__resources(sd trueIsSet_falseIsFree,sd fileIn,sd memIn)
+    data file=fd_none;vdata mem=NULL
+    if trueIsSet_falseIsFree==(TRUE)
+        if fileIn!=(fd_none);set file fileIn
+        else;set mem memIn;endelse
+    else
+        if file!=(fd_none)
+            call file_close(#file)
+            if mem!=(NULL)
+                import "mem_free" mem_free
+                call mem_free(#mem)
+            endif
+        endif
+    endelse
+endfunction
+function file_get_content__resources_free()
+    call file_get_content__resources((FALSE))
+endfunction
+
+#close
+
+function file_close(sd p_file)
+    call close(p_file#)
+    set p_file# (fd_none)
+endfunction
+
+
+
+
+
 importaftercall ebool
-include "../include/prog.h"
 
-import "printEr" printEr
 import "error" error
 
 #file
@@ -75,24 +107,6 @@ function file_read(sd file,sd mem,sd siz
         call error("Read length is different or error")
     endif
 endfunction
-function file_get_content__resources(sd trueIsSet_falseIsFree,sd fileIn,sd memIn)
-    data file=fd_none;vdata mem=NULL
-    if trueIsSet_falseIsFree==(TRUE)
-        if fileIn!=(fd_none);set file fileIn
-        else;set mem memIn;endelse
-    else
-        if file!=(fd_none)
-            call file_close(#file)
-            if mem!=(NULL)
-                import "mem_free" mem_free
-                call mem_free(#mem)
-            endif
-        endif
-    endelse
-endfunction
-function file_get_content__resources_free()
-    call file_get_content__resources((FALSE))
-endfunction
 
 #write
 
@@ -108,10 +122,3 @@ function file_write(sd file,sd buffer,sd
     vstr er="File write error"
     call error(er)
 endfunction
-
-#close
-
-function file_close(sd p_file)
-    call close(p_file#)
-    set p_file# (fd_none)
-endfunction
--- actionswf-1.orig/src/storage.s
+++ actionswf-1/src/storage.s
@@ -1,16 +1,79 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 #win32 with _
 importx "strlen" strlen
 importx "memcpy" memcpy
 
-importaftercall ebool
-include "../include/prog.h"
+#this is throwless here
+import "struct_ids" struct_ids
+
+function free_sprite_id(sd id)
+    call struct_ids((ids_free),id)
+#these two are ok throwless
+    call struct_ids_action((ids_free),id)
+    call struct_ids_actionpool((ids_free),id)
+#
+endfunction
+
+#
+function identifiers()
+    data id#1
+    return #id
+endfunction
+function identifiers_set(sd value)
+    sd id
+    setcall id identifiers()
+    set id# value
+endfunction
+#id
+function identifiers_get()
+    sd id
+    setcall id identifiers()
+    sd value
+    set value id#
+    inc id#
+    call identifiers_set(id#)
+    return value
+endfunction
+
+#p
+function exportsId()
+    data exports=not_an_id
+    return #exports
+endfunction
 
 import "mem_free" mem_free
+import "action_code_values_free" action_code_values_free
+import "file_close" file_close
+import "block_get_mem_size" block_get_mem_size
+import "bits_packs" bits_packs
+import "word_swap_arg" word_swap_arg
+import "block_get_size" block_get_size
+import "block_reset_size" block_reset_size
+
+import "actionpoolid" actionpoolid;import "actionpoolid_root" actionpoolid_root
+import "actionpool_currentblock" actionpool_currentblock
+
+import "action_size" action_size
+import "dword_to_word_arg" dword_to_word_arg
+
+
+
+
+
+importaftercall ebool
+
+
+
+
+
+
+
 import "error" error
-import "struct_ids" struct_ids
 import "struct_ids_actionpool" struct_ids_actionpool
+import "struct_ids_action" struct_ids_action
 import "mem_block_add" mem_block_add
 import "def_mem" def_mem
 
@@ -65,11 +128,9 @@ function swf_mem(sd proc,sd arg,sd len)
             setcall exports exportsId()
             set exports# (not_an_id)
             #3 set of values
-            import "action_code_values_free" action_code_values_free
             call action_code_values_free()
             #file
             if file_out!=(fd_error)
-                import "file_close" file_close
                 call file_close(#file_out)
             endif
         endif
@@ -95,7 +156,6 @@ function swf_mem(sd proc,sd arg,sd len)
 
         sd block
         setcall block call_struct((ids_get),main_id)
-        import "block_get_mem_size" block_get_mem_size
         sd mem;sd size;call block_get_mem_size(block,#mem,#size)
 
         sd pointer
@@ -130,8 +190,6 @@ function swf_tag_recordheader_long_entry
     call swf_mem_add(#size,(DWORD))
 endfunction
 const short_header=2
-import "bits_packs" bits_packs
-import "word_swap_arg" word_swap_arg
 function swf_tag_recordheader(ss dest,sd tag,sd size)
     call bits_packs(dest,2,tag,10,size,6)
     call word_swap_arg(dest)
@@ -144,11 +202,6 @@ function swf_tag(ss dest,sd tag,sd size)
 endfunction
 
 #
-import "block_get_size" block_get_size
-import "block_reset_size" block_reset_size
-import "struct_ids_action" struct_ids_action
-import "actionpoolid" actionpoolid;import "actionpoolid_root" actionpoolid_root
-import "actionpool_currentblock" actionpool_currentblock
 function swf_actionblock(sd proc,sd arg,sd newmem_len)
     data id#1
     data id_back#1
@@ -189,7 +242,6 @@ function swf_actionblock(sd proc,sd arg,
         sd size
         setcall size block_get_size(block)
         if size!=0
-            import "action_size" action_size
             import "write_action" write_action
             sd tagsz
             setcall tagsz action_size(id)
@@ -209,7 +261,6 @@ endfunction
 function swf_actionblock_add(sd value,sd size)
     call swf_actionblock((mem_exp_add),value,size)
 endfunction
-import "dword_to_word_arg" dword_to_word_arg
 function actionrecordheader(sd tag,sd size)
     chars t#1
     chars length#2
@@ -233,32 +284,6 @@ function new_sprite_id()
     call struct_ids_actionpool((ids_set),id)
     return id
 endfunction
-function free_sprite_id(sd id)
-    call struct_ids((ids_free),id)
-    call struct_ids_action((ids_free),id)
-    call struct_ids_actionpool((ids_free),id)
-endfunction
-
-#
-function identifiers()
-    data id#1
-    return #id
-endfunction
-function identifiers_set(sd value)
-    sd id
-    setcall id identifiers()
-    set id# value
-endfunction
-#id
-function identifiers_get()
-    sd id
-    setcall id identifiers()
-    sd value
-    set value id#
-    inc id#
-    call identifiers_set(id#)
-    return value
-endfunction
 
 #
 function exports_init()
@@ -268,11 +293,6 @@ function exports_init()
     setcall id def_mem()
     set exports# id
 endfunction
-#p
-function exportsId()
-    data exports=not_an_id
-    return #exports
-endfunction
 #id
 function exportsId_get()
     sd e
--- actionswf-1.orig/src/swf.es
+++ actionswf-1/src/swf.es
@@ -1,28 +1,51 @@
 Format ElfObj64
 
+include "../include/prog.h"
+
 #win32 with _
 importx "memcpy" memcpy
 importx "strlen" strlen
 importx "memcmp" memcmp
 
+import "printEr" printEr
+import "identifiers_set" identifiers_set
+import "identifiers_get" identifiers_get
+import "rect_prepare" rect_prepare
+import "button_mem" button_mem
+
+import "dword_to_word_arg" dword_to_word_arg
+import "dword_swap" dword_swap
+import "args_advance" args_advance
+import "bits_packs" bits_packs
+import "NumFill_NumLin" NFill_NLin
+import "shapewithstyle_records" shapewithstyle_records
+import "word_arg_to_dword" word_arg_to_dword
+import "file_get_content__resources_free" file_get_content__resources_free
+import "file_resources_set" file_resources_set
+import "file_resources_free" file_resources_free
+importx "freereset" freereset
+import "struct_ids" struct_ids
+import "matrix_translate" matrix_translate
+import "block_get_size" block_get_size
+import "block_get_mem" block_get_mem
+import "free_sprite_id" free_sprite_id
+import "block_reset_size" block_reset_size
+
+
+
+
 importaftercall ebool
-include "../include/prog.h"
 
-import "printEr" printEr
 import "swf_tag" swf_tag
 import "swf_mem" swf_mem
 import "swf_mem_add" swf_mem_add
 import "swf_actionblock" swf_actionblock
-import "identifiers_set" identifiers_set
-import "identifiers_get" identifiers_get
 import "rect_add" rect_add
-import "rect_prepare" rect_prepare
 import "swf_tag_recordheader_entry" swf_tag_recordheader_entry
 import "error" error
 import "swf_shape_simple" swf_shape_simple
 
 import "swf_button_base" swf_button_base
-import "button_mem" button_mem
 import "swf_text_initial_font_centered" swf_text_initial_font_centered
 #id
 functionX swf_button(sd width,sd height,sd ButtonData)
@@ -151,7 +174,6 @@ functionX swf_button_last(ss newtext,ss
     return id
 endfunction
 
-import "dword_to_word_arg" dword_to_word_arg
 #font
 
 #id
@@ -210,7 +232,6 @@ endfunction
 
 #text
 
-import "dword_swap" dword_swap
 #id
 functionX swf_text(sd bound_width,sd bound_height,ss variablename,sd flags,sd structure)
 #sd bound_width  width of the text
@@ -360,7 +381,6 @@ functionX swf_text(sd bound_width,sd bou
 endfunction
 
 import "shape_records_add" shape_records_add
-import "args_advance" args_advance
 #id
 functionX swf_shape(sd width,sd height,sd args)
 #sd width
@@ -416,7 +436,6 @@ functionX swf_shape(sd width,sd height,s
         else
         #if fillstyle==(repeating_bitmap_fill)
         #clipped bitmap fill,non-smoothed repeating bitmap or non-smoothed clipped bitmap
-            import "bits_packs" bits_packs
             call dword_to_word_arg(fillarg,#data)
             sd fill_pointer^data
             add fill_pointer (WORD)
@@ -452,12 +471,10 @@ functionX swf_shape(sd width,sd height,s
     endif
     add shape_size linestyles_size
     #NumFillBits/NumLineBits
-    import "NumFill_NumLin" NFill_NLin
     call NFill_NLin(0,FillStyleCount,LineStyleCount)
     sd NumFill_NumLin;setcall NumFill_NumLin NFill_NLin(1,(TRUE));mult NumFill_NumLin 0x10;orcall NumFill_NumLin NFill_NLin(1,(FALSE))
     inc shape_size
     #shaperecord[n]
-    import "shapewithstyle_records" shapewithstyle_records
     sd shapewithstyle_record_start
     setcall shapewithstyle_record_start shapewithstyle_records()
     value pointer#1;data pos#1
@@ -648,14 +665,12 @@ functionX swf_dbl_ex(ss imagepath,sd p_w
         sd pointer
         set pointer cursor
         add pointer (BYTE)
-        import "word_arg_to_dword" word_arg_to_dword
         setcall p_wh# word_arg_to_dword(pointer)
         add pointer (WORD)
         add p_wh (DWORD)
         setcall p_wh# word_arg_to_dword(pointer)
     endif
     call swf_mem_add(cursor,image_size)
-    import "file_get_content__resources_free" file_get_content__resources_free
     call file_get_content__resources_free()
     return id
 endfunction
@@ -663,8 +678,6 @@ import "file_open" file_open
 import "file_seek" file_seek
 import "file_read" file_read
 import "filesize" filesize
-import "file_resources_set" file_resources_set
-import "file_resources_free" file_resources_free
 
 #width
 functionX swf_dbl_width(ss imagepath)
@@ -703,13 +716,11 @@ endfunction
 
 ##############
 import "exportsId_get" exportsId_get
-import "struct_ids" struct_ids
 functionX swf_done()
     call swf_exports_done();#remaining exports?
     call swf_actionblock((mem_exp_part_done));#in case there are remaining actions
 #the swf is done and the total length is wrote and the memory is freed
     call swf_mem((mem_exp_done))
-    importx "freereset" freereset
     call freereset()
 endfunction
 
@@ -765,7 +776,6 @@ functionX swf_placeobject(sd refid,sd de
 #sd depth    depth value
      call swf_placeobject_coords(refid,depth,0,0)
 endfunction
-import "matrix_translate" matrix_translate
 functionX swf_placeobject_coords(sd refid,sd depth,sd x,sd y)
 #sd refid
 #sd depth
@@ -811,8 +821,6 @@ endfunction
 
 #sprite
 
-import "block_get_size" block_get_size
-import "block_get_mem" block_get_mem
 #id
 functionX swf_sprite_done(sd spriteid)
 #sd spriteid        pre-id created with swf_sprite_new
@@ -839,7 +847,6 @@ functionX swf_sprite_done(sd spriteid)
 
     call swf_mem_add(mem,size)
 
-    import "free_sprite_id" free_sprite_id
     call free_sprite_id(spriteid)
 
     return id
@@ -935,7 +942,6 @@ functionX swf_exports_add(sd id,ss name)
     #
     call swf_mem((mem_exp_change_back))
 endfunction
-import "block_reset_size" block_reset_size
 functionX swf_exports_done()
 #write all the exports to the swf
     sd exports
--- actionswf-1.orig/src/util.s
+++ actionswf-1/src/util.s
@@ -11,10 +11,6 @@ importx "memcmp" memcmp
 
 import "platform_iob" platform_iob
 
-function erbool()
-    aftercall ebool
-    return #ebool
-endfunction
 include "../include/prog.h"
 
 function printEr(ss msg)
@@ -127,6 +123,209 @@ function string_nl_print(ss msg)
     chars nl={0xa,0}
     call printEr(#nl)
 endfunction
+
+#block
+
+function block_reset_size(sd block)
+    add block (mem_struct__size_off)
+    set block# (mem_struct_size)
+endfunction
+#size
+function block_get_size(sd block)
+    sd size
+    setcall size struct_off(block,(mem_struct__size_off))
+    sub size (mem_struct_size)
+    return size
+endfunction
+#size
+function block_get_fullsize(sd block)
+    sd size
+    setcall size struct_off(block,(mem_struct__size_off))
+    return size
+endfunction
+#mem
+function block_get_mem(sd block)
+    add block (mem_struct_size)
+    return block
+endfunction
+function block_get_mem_size(sd block,sv p_mem,sv p_size)  #size is a stack variable
+    setcall p_mem# block_get_mem(block)
+    setcall p_size# block_get_size(block)
+endfunction
+
+#mem procedures
+
+function mem_free(sv p_mem)
+    call free(p_mem#)
+    set p_mem# (NULL)
+endfunction
+
+#pointer
+
+function move_to_n_pointer(sd pointer,sd id)
+    mult id :
+    add pointer id
+    return pointer
+endfunction
+
+#strings/chars
+
+#chars
+
+#bool
+function is_numeric(sd char)
+    chars min="0"
+    chars max="9"
+    if char<min
+        return (FALSE)
+    elseif char<=max
+        return (TRUE)
+    endelseif
+    return (FALSE)
+endfunction
+#bool
+function part_of_variable(sd value)
+    sd bool
+    setcall bool is_numeric(value)
+    if bool==(TRUE)
+        return (TRUE)
+    endif
+    setcall bool is_letter(value)
+    return bool
+endfunction
+#bool
+function is_letter(sd value)
+    if value<(A)
+        return (FALSE)
+    elseif value<=(Z)
+        return (TRUE)
+    elseif value==(_)
+        return (TRUE)
+    elseif value<(a)
+        return (FALSE)
+    elseif value<=(z)
+        return (TRUE)
+    endelseif
+    return (FALSE)
+endfunction
+
+#strings
+
+#str
+function str_next(ss s,ss delims,sv p_op)  #p_op is pointing at a stack variable
+    sd pos
+    setcall pos strcspn(s,delims)
+    ss x
+    set x s
+    add x pos
+    set p_op# x#
+    if x#==0
+        return x
+    endif
+    set x# 0
+    inc x
+    return x
+endfunction
+#bool
+function str_at_str_start(ss s1,ss s2)
+    sd l1
+    sd l2
+    setcall l1 strlen(s1)
+    setcall l2 strlen(s2)
+    if l1<l2
+        return (FALSE)
+    endif
+    sd comp
+    setcall comp memcmp(s1,s2,l2)
+    if comp==0
+        return (TRUE)
+    endif
+    return (FALSE)
+endfunction
+
+#next/same
+function str_expression_at_start(ss string,ss expression)
+    sd bool
+    setcall bool str_at_str_start(string,expression)
+    if bool==(FALSE)
+        return string
+    endif
+    ss next
+    set next string
+    addcall next strlen(expression)
+    setcall bool part_of_variable(next#)
+    if bool==(TRUE)
+        return string
+    endif
+    setcall next spaces(next)
+    return next
+endfunction
+#next/same
+function str_expression_at_start_withEndCare(ss ac,ss expression)
+    ss pointer
+    setcall pointer str_expression_at_start(ac,expression)
+    if pointer==ac
+        return ac
+    endif
+    chars term=";"
+    if pointer#==term
+        inc pointer
+    endif
+    return pointer
+endfunction
+
+#str
+function spaces(ss str)
+    while 1==1
+        if str#!=(Space)
+            if str#!=(HorizontalTab)
+                return str
+            endif
+        endif
+        inc str
+    endwhile
+endfunction
+
+
+#closings
+
+import "file_close" file_close
+function file_resources(sd trueIsSet_falseIsFree,sd fileIn)
+    data file=fd_none
+    if trueIsSet_falseIsFree==(TRUE)
+        set file fileIn
+    else
+        if file!=(fd_none)
+            call file_close(#file)
+        endif
+    endelse
+endfunction
+function file_resources_set(sd file)
+    call file_resources((TRUE),file)
+endfunction
+function file_resources_free()
+    call file_resources((FALSE))
+endfunction
+
+#
+
+
+
+
+
+
+
+function erbool()
+    aftercall ebool
+    return #ebool
+endfunction
+
+
+
+
+
+
+
 #
 function memrealloc(sd mem,sd size)
 #unele fisiere pot da eroare de la realocare; fara functia asta aftercall poate fi degeaba
@@ -161,35 +360,6 @@ function def_data()
 	return mem
 endfunction
 
-#block
-
-function block_reset_size(sd block)
-    add block (mem_struct__size_off)
-    set block# (mem_struct_size)
-endfunction
-#size
-function block_get_size(sd block)
-    sd size
-    setcall size struct_off(block,(mem_struct__size_off))
-    sub size (mem_struct_size)
-    return size
-endfunction
-#size
-function block_get_fullsize(sd block)
-    sd size
-    setcall size struct_off(block,(mem_struct__size_off))
-    return size
-endfunction
-#mem
-function block_get_mem(sd block)
-    add block (mem_struct_size)
-    return block
-endfunction
-function block_get_mem_size(sd block,sv p_mem,sv p_size)  #size is a stack variable
-    setcall p_mem# block_get_mem(block)
-    setcall p_size# block_get_size(block)
-endfunction
-
 #mem procedures
 
 function mem_block_add(sv p_block,ss newblock,sd newblock_size)
@@ -222,11 +392,6 @@ function mem_block_add(sv p_block,ss new
     set block# size
 endfunction
 
-function mem_free(sv p_mem)
-    call free(p_mem#)
-    set p_mem# (NULL)
-endfunction
-
 #structure ids
 
 const max_structures=100
@@ -324,89 +489,10 @@ function struct_ids_expand(sd proc,sd id
         call mem_free(pointer)
     endelse
 endfunction
-#pointer
-function move_to_n_pointer(sd pointer,sd id)
-    mult id :
-    add pointer id
-    return pointer
-endfunction
-
-
-#strings/chars
-
-#chars
 
-#bool
-function is_numeric(sd char)
-    chars min="0"
-    chars max="9"
-    if char<min
-        return (FALSE)
-    elseif char<=max
-        return (TRUE)
-    endelseif
-    return (FALSE)
-endfunction
-#bool
-function part_of_variable(sd value)
-    sd bool
-    setcall bool is_numeric(value)
-    if bool==(TRUE)
-        return (TRUE)
-    endif
-    setcall bool is_letter(value)
-    return bool
-endfunction
-#bool
-function is_letter(sd value)
-    if value<(A)
-        return (FALSE)
-    elseif value<=(Z)
-        return (TRUE)
-    elseif value==(_)
-        return (TRUE)
-    elseif value<(a)
-        return (FALSE)
-    elseif value<=(z)
-        return (TRUE)
-    endelseif
-    return (FALSE)
-endfunction
 
 #strings
 
-#str
-function str_next(ss s,ss delims,sv p_op)  #p_op is pointing at a stack variable
-    sd pos
-    setcall pos strcspn(s,delims)
-    ss x
-    set x s
-    add x pos
-    set p_op# x#
-    if x#==0
-        return x
-    endif
-    set x# 0
-    inc x
-    return x
-endfunction
-#bool
-function str_at_str_start(ss s1,ss s2)
-    sd l1
-    sd l2
-    setcall l1 strlen(s1)
-    setcall l2 strlen(s2)
-    if l1<l2
-        return (FALSE)
-    endif
-    sd comp
-    setcall comp memcmp(s1,s2,l2)
-    if comp==0
-        return (TRUE)
-    endif
-    return (FALSE)
-endfunction
-
 #alloc
 function dupreserve_string(ss str)
     sd len
@@ -460,66 +546,3 @@ function str_escape(ss src,ss dest,sd de
     inc src
     return src
 endfunction
-
-#next/same
-function str_expression_at_start(ss string,ss expression)
-    sd bool
-    setcall bool str_at_str_start(string,expression)
-    if bool==(FALSE)
-        return string
-    endif
-    ss next
-    set next string
-    addcall next strlen(expression)
-    setcall bool part_of_variable(next#)
-    if bool==(TRUE)
-        return string
-    endif
-    setcall next spaces(next)
-    return next
-endfunction
-#next/same
-function str_expression_at_start_withEndCare(ss ac,ss expression)
-    ss pointer
-    setcall pointer str_expression_at_start(ac,expression)
-    if pointer==ac
-        return ac
-    endif
-    chars term=";"
-    if pointer#==term
-        inc pointer
-    endif
-    return pointer
-endfunction
-
-#str
-function spaces(ss str)
-    while 1==1
-        if str#!=(Space)
-            if str#!=(HorizontalTab)
-                return str
-            endif
-        endif
-        inc str
-    endwhile
-endfunction
-
-#closings
-
-import "file_close" file_close
-function file_resources(sd trueIsSet_falseIsFree,sd fileIn)
-    data file=fd_none
-    if trueIsSet_falseIsFree==(TRUE)
-        set file fileIn
-    else
-        if file!=(fd_none)
-            call file_close(#file)
-        endif
-    endelse
-endfunction
-function file_resources_set(sd file)
-    call file_resources((TRUE),file)
-endfunction
-function file_resources_free()
-    call file_resources((FALSE))
-endfunction
