Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-48) bionic; urgency=medium
 .
   * some bultin functions, including play...gotoAndPlay...trace
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-11-04

--- actionswf-1.orig/arh/pub
+++ actionswf-1/arh/pub
@@ -5,11 +5,10 @@ last=$(curl https://api.github.com/repos
 ~/test/deb && \
 ~/test/publp && \
 ~/test/rpm && \
-~/test/pub rpm && \
 ./makewin64 && \
 ~/test/del && \
 ~/test/rel && \
-~/test/pub rel && \
+~/test/pub rpm rel && \
 ~/test/uponrpm && \
 ~/test/up && \
 ~/test/pub uponrpm && \
@@ -18,3 +17,7 @@ last=$(curl https://api.github.com/repos
 ~/test/lp && \
 ~/test/lp x && \
 ~/test/arh2 ${last}
+
+#plans:
+
+#if builtin more than one param then is not a builtin
--- actionswf-1.orig/include/action.h
+++ actionswf-1/include/action.h
@@ -1,9 +1,13 @@
 
+const ActionEndFlag=0
+const ActionNextFrame=0x04
+const ActionPreviousFrame=0x05
+const ActionPlay=0x06
+const ActionStop=0x07
 #const ActionAdd=0x0A
 const ActionSubtract=0x0B
 const ActionMultiply=0x0C
 const ActionDivide=0x0D
-
 const ActionAnd=0x10
 const ActionOr=0x11
 const ActionNot=0x12
@@ -11,7 +15,7 @@ const ActionPop=0x17
 const ActionToInteger=0x18
 const ActionGetVariable=0x1C
 const ActionSetVariable=0x1D
-#const ActionTrace=0x26
+const ActionTrace=0x26
 const ActionRandomNumber=0x30
 const ActionCharToAscii=0x32
 const ActionAsciiToChar=0x33
@@ -42,6 +46,7 @@ const ActionBitLShift=0x63
 const ActionBitRShift=0x64
 const ActionBitURShift=0x65
 const ActionGreater=0x67
+const ActionGotoFrame=0x81
 const ActionStoreRegister=0x87
 const ActionConstantPool=0x88
 const ActionPush=0x96
--- actionswf-1.orig/src/Makefile
+++ actionswf-1/src/Makefile
@@ -12,7 +12,9 @@ conv_64=0
 #if modifying OFLAGS will lose inside data
 OFLAGS=conv_64 ${conv_64} ${OFLAGSEXTRA}
 
-items = ${platform} actioncode actionparse actionpool actionutil bits character file storage util
+#this is like ld is linking, reason: ostrip is not adapted for this, there is another solutin with ocompiler and NOBITS
+#	maybe is a 0x1000 .o size rule only from libexte.a
+items = actioncode actionparse actionutil bits character file storage util ${platform} actionpool
 expitems = action swf tool ../shared/action_dllmain
 
 exte=libexte.a
@@ -23,32 +25,62 @@ else
 	OFLAGS += underscore_pref 1
 endif
 
-projname=actionswf
+debug=
+debugstrip=
+projname=actionswf${debug}
 name = ${projname}.so
 xname = lib${name}
 defname = ${projname}.def
 items_prefix=
 prefname=${items_prefix}${name}
 
-logs :=
-obs :=
-eobs :=
+$(eval obs = )
+$(eval eobs = )
+$(foreach var,$(expitems),$(eval eobs += ${items_prefix}${var}.o))
+$(foreach var,$(items),$(eval obs += ${items_prefix}${var}.o))
+$(eval logs = )
+$(foreach var,$(expitems),$(eval logs += ${items_prefix}${var}.es.log))
+$(foreach var,$(items),$(eval logs += ${items_prefix}${var}.s.log))
 
-all: compile lnk def
+ATLDCOM = $(LD) ${syms} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${eobs} -shared -entry DllMain -o ${name} -lc -L. -l:${exte} --exclude-libs ${exte}
+
+ifeq (${platform},win)
+all: compile ounused link def
+else ifeq (${conv_64},1)
+all: compile ounused link
+else
+all: compile ${name}
+${name}:
+	${OLINK} ${logs}
+	@echo
+	$(AR) cr ${exte} ${obs}
+	${ATLDCOM}
+	if [ ! -e "./strip.py" ]; then wget https://raw.githubusercontent.com/colin-i/o/master/ostrip/strip.py; fi
+	$(eval strp = )
+	$(foreach var,$(expitems),$(eval strp += ${items_prefix}${var}.es.log ${items_prefix}${var}.o))
+	$(foreach var,$(items),$(eval strp += ${items_prefix}${var}.s.log ${items_prefix}${var}.o))
+	ostrip ${name} ${strp}
+	python3 strip.py ${name} ${debugstrip}${name}
+endif
+
+%.o: %.s
+	${OCOMP} $< ${OFLAGS}
+%.o: %.es
+	${OCOMP} $< ${OFLAGS}
 
 ounused:
 	${OLINK} ${logs}
 	@echo
 
-compile: ${items} ${expitems} ounused
+compile: ${obs} ${eobs}
 
-lnk:
+link:
 	if [ "${platform}" = "lin" ]; then \
 		$(AR) cr ${exte} ${obs}; \
 		if [ "${conv_64}" = "1" ]; then \
 			$(LD) ${syms} -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 ${eobs} -shared -entry DllMain -o ${prefname} -lc -L${items_prefix}. -l:${exte} --exclude-libs ${exte}; \
 		else \
-			$(LD) ${syms} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${eobs} -shared -entry DllMain -o ${name} -lc -L. -l:${exte} --exclude-libs ${exte}; \
+			${ATLDCOM}; \
 		fi \
 	else \
 		if [ "${conv_64}" = "1" ]; then \
@@ -61,27 +93,9 @@ lnk:
 
 #obs =   :in case it is called after an object (make bits link)
 #(make action link)
-fast:
-	$(eval obs = )
-	$(eval eobs = )
-	$(foreach var,$(items),$(eval obs += ${items_prefix}${var}.o))
-	$(foreach var,$(expitems),$(eval eobs += ${items_prefix}${var}.o))
-
-link: fast lnk
 
 def:
-	if [ "${platform}" = "win" ]; then \
-		../fix/makedef ${defname}; \
-	fi
-
-%: %.s
-	${OCOMP} $< ${OFLAGS}
-	$(eval logs += $@.s.log)
-	$(eval obs += $@.o)
-%: %.es
-	${OCOMP} $< ${OFLAGS}
-	$(eval logs += $@.es.log)
-	$(eval eobs += $@.o)
+	../fix/makedef ${defname}
 
 clean:
 	-printf ' %s.s.log' ${items} | xargs rm -f
@@ -91,6 +105,10 @@ clean:
 	-rm -f ${name}
 	-rm -f ${projname}.dll
 	-rm -f ${defname}
+	-rm -f strip.py
+	-rm -f .data
+	-rm -f .text
+	-rm -f .rela.dyn
 
 distclean: clean
 
--- actionswf-1.orig/src/actioncode.s
+++ actionswf-1/src/actioncode.s
@@ -4,7 +4,6 @@ include "../include/prog.h"
 
 #win32 with _
 importx "strcmp" strcmp
-importx "sprintf" sprintf
 importx "strlen" strlen
 
 const totalvalues=65535
@@ -64,41 +63,88 @@ function get_nr_of_forIn_statements()
     return nr
 endfunction
 
-#name/0
-function action_code_write_builtin_names(sv codepointer,sd p_action)
-    ss int="int"
-    sd compare
-    setcall compare strcmp(codepointer#,int)
-    if compare==0
-        set p_action# (ActionToInteger)
-        return int
-    endif
-    ss rnd="random"
-    setcall compare strcmp(codepointer#,rnd)
-    if compare==0
-    #0�(maximum-1)
-        set p_action# (ActionRandomNumber)
-        return rnd
-    endif
-    ss ascii="ord"
-    setcall compare strcmp(codepointer#,ascii)
-    if compare==0
-        set p_action# (ActionCharToAscii)
-        return ascii
-    endif
-    ss chr="chr"
-    setcall compare strcmp(codepointer#,chr)
-    if compare==0
-        set p_action# (ActionAsciiToChar)
-        return chr
-    endif
-    ss typeOf="TypeOf"
-    setcall compare strcmp(codepointer#,typeOf)
-    if compare==0
-        set p_action# (ActionTypeOf)
-        return typeOf
-    endif
-    return 0
+#name/null
+function action_code_write_builtin_names(sv codepointer,ss p_action)
+	set codepointer codepointer#
+	sd compare
+	vstr int="int"
+	setcall compare strcmp(codepointer,int)
+	if compare==0
+		set p_action# (ActionToInteger)
+		return int
+	endif
+	vstr rnd="random"
+	setcall compare strcmp(codepointer,rnd)
+	if compare==0
+	#0�(maximum-1)
+		set p_action# (ActionRandomNumber)
+		return rnd
+	endif
+	vstr ascii="ord"
+	setcall compare strcmp(codepointer,ascii)
+	if compare==0
+		set p_action# (ActionCharToAscii)
+		return ascii
+	endif
+	vstr chr="chr"
+	setcall compare strcmp(codepointer,chr)
+	if compare==0
+		set p_action# (ActionAsciiToChar)
+		return chr
+	endif
+	vstr typeOf="TypeOf"
+	setcall compare strcmp(codepointer,typeOf)
+	if compare==0
+		set p_action# (ActionTypeOf)
+		return typeOf
+	endif
+	vstr stop="stop"
+	setcall compare strcmp(codepointer,stop)
+	if compare==0
+		set p_action# (ActionStop)
+		return stop
+	endif
+	vstr play="play"
+	setcall compare strcmp(codepointer,play)
+	if compare==0
+		set p_action# (ActionPlay)
+		return play
+	endif
+	vstr nframe="nextFrame"
+	setcall compare strcmp(codepointer,nframe)
+	if compare==0
+		set p_action# (ActionNextFrame)
+		return nframe
+	endif
+	vstr pframe="prevFrame"
+	setcall compare strcmp(codepointer,pframe)
+	if compare==0
+		set p_action# (ActionPreviousFrame)
+		return pframe
+	endif
+	vstr goto="gotoAndStop"
+	setcall compare strcmp(codepointer,goto)
+	if compare==0
+		set p_action# (ActionGotoFrame)
+		inc p_action
+		set p_action# (ActionEndFlag)   #even if it's playing, it will stop, no ActionStop here
+		return goto
+	endif
+	vstr gotop="gotoAndPlay"
+	setcall compare strcmp(codepointer,gotop)
+	if compare==0
+		set p_action# (ActionGotoFrame)
+		inc p_action
+		set p_action# (ActionPlay)
+		return gotop
+	endif
+	vstr trace="trace"
+	setcall compare strcmp(codepointer,trace)
+	if compare==0
+		set p_action# (ActionTrace)
+		return trace
+	endif
+	return (NULL)
 endfunction
 
 
@@ -499,24 +545,27 @@ endfunction
 
 #codepointer
 function action_code_write_function(sd codepointer)
-    sd pointer
-    setcall pointer action_definefunction(codepointer)
-    if pointer!=codepointer
-        return pointer
-    endif
-    if codepointer#!=(call_action_left)
-        return codepointer
-    endif
-    setcall codepointer action_code_write_function_call(codepointer)
-    call action_one((ActionPop))
-    return codepointer
+	sd pointer
+	setcall pointer action_definefunction(codepointer)
+	if pointer!=codepointer
+		return pointer
+	endif
+	if codepointer#!=(call_action_left)
+		return codepointer
+	endif
+	sd want_return=FALSE
+	setcall codepointer action_code_write_function_call(codepointer,#want_return)
+	if want_return==(FALSE)  #can be modified inside
+		call action_one((ActionPop))
+	endif
+	return codepointer
 endfunction
 
 #codepointer
-function action_code_write_function_call(sv codepointer)
+function action_code_write_function_call(sv codepointer,sd pwant_return)
     add codepointer (DWORD)
     sd pointer
-    setcall pointer action_code_write_builtin_function(codepointer)
+    setcall pointer action_code_write_builtin_function(codepointer,pwant_return)
     if pointer!=codepointer
         return pointer
     endif
@@ -531,7 +580,7 @@ function action_code_write_function_call
     return codepointer
 endfunction
 #codepointer
-function action_code_write_builtin_function(sv codepointer)
+function action_code_write_builtin_function(sv codepointer,sd pwant_return)
     sv pointer
     set pointer codepointer
     if pointer#!=(no_pointer)
@@ -541,36 +590,77 @@ function action_code_write_builtin_funct
     add pointer :  #to pass the pointer
     #
     sd cursor
-    setcall cursor action_code_write_builtin_set(pointer)
+    setcall cursor action_code_write_builtin_set(pointer,pwant_return)
     if cursor==pointer
         return codepointer
     endif
     return cursor
 endfunction
 #codepointer
-function action_code_write_builtin_set(sd codepointer)
-    ss name
-    sd act
-    #
-    setcall name action_code_write_builtin_names(codepointer,#act)
-    if name==0
-        return codepointer
-    endif
-    #
-    chars er#256
-    add codepointer :   #to pass the pointer
-    if codepointer#==(args_end)
-        call sprintf(#er,"%s builtin function expects at least one parameter",name)
-        call error(#er)
-    endif
-    setcall codepointer action_code_right_util(codepointer)
-    if codepointer#!=(args_end)
-        call sprintf(#er,"%s builtin function expects at most one parameter",name)
-        call error(#er)
-    endif
-    add codepointer (DWORD)
-    call action_one(act)
-    return codepointer
+function action_code_write_builtin_set(sd codepointer,sd pwant_return)
+	ss name
+	chars act#1;chars act2#1
+	setcall name action_code_write_builtin_names(codepointer,#act)
+	if name!=(NULL)
+		sd test;set test codepointer
+		add test :   #to pass the pointer
+		if test#!=(args_end)
+			if act!=(ActionGotoFrame)
+				if act==(ActionTrace)
+					if pwant_return#==(TRUE)  #same like at gotoAndStop
+						return codepointer
+					endif
+				endif
+				setcall test action_code_right_util(test)
+				if test#==(args_end)
+					call action_one(act)
+					if act==(ActionTrace)
+						set pwant_return# (TRUE)  #to skip pop
+					endif
+					add test (DWORD)
+					return test
+				endif
+				#this is not ok but is lazy and mc overrides are not a must for builtin functions
+				vstr builtin="builtin function expects at most one parameter"
+				call error(builtin)
+			endif
+			#here is another format, if the first is not unsigned 16 then call movie clip function instead of actiongotoframe
+			if test#==(ap_Integer)
+				add test (DWORD)
+				if test#<=^0xffFF #attention at negative numbers, ignoring gotoandstop mc behaviour
+					sd val;set val test#
+					add test (DWORD)
+					if test#==(math_end)
+						add test (DWORD)
+						if test#==(args_end)
+							if pwant_return#==(FALSE)   #can be in a ...=gotoAndStop+... attribution and add extra code there
+								#                      because ActionGotoFrame is not pushing a return value
+								call actionrecordheader(act,(WORD))
+								call swf_actionblock_add(#val,(WORD))
+								set pwant_return# (TRUE)   #no ActionPop required
+								#
+								if act2!=(ActionEndFlag)
+									#ActionPlay
+									call swf_actionblock_add(#act2,(BYTE))
+								endif
+								#
+								add test (DWORD)
+								return test
+							endif
+						endif
+					endif
+				endif
+			endif
+		elseif act<=(ActionStop)  #this is skipping 1,2,3 but there are no actions in the model
+			if pwant_return#==(FALSE)  #same like at gotoAndStop
+				call action_one(act)
+				set pwant_return# (TRUE)  #to skip pop
+				add test (DWORD)
+				return test
+			endif
+		endelseif
+	endif
+	return codepointer
 endfunction
 #codepointer
 function action_code_new_or_call(sv codepointer)
@@ -650,7 +740,8 @@ function action_code_right_number(sd cod
         return codepointer
     endif
     if codepointer#==(call_action_right)
-        setcall codepointer action_code_write_function_call(codepointer)
+		sd want_return=TRUE
+        setcall codepointer action_code_write_function_call(codepointer,#want_return)
         return codepointer
     endif
     sd attrib
--- actionswf-1.orig/src/m64d
+++ actionswf-1/src/m64d
@@ -1,2 +1,2 @@
 
-OFLAGSEXTRA="function_name 1" ./make64 $@ && ./make64 syms= link
+OFLAGSEXTRA="function_name 1" ./make64 $@ && ./make64 syms= link debug=.d
