Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 actionswf (1-42) bionic; urgency=medium
 .
   * 64
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-08-31

--- /dev/null
+++ actionswf-1/.github/workflows/delrel.yml
@@ -0,0 +1,15 @@
+
+on:
+ workflow_dispatch:
+  inputs:
+   tag:
+    description: "project version"
+
+jobs:
+ delrel:
+   runs-on: ubuntu-latest
+   steps:
+    - uses: cb80/delrel@latest
+      with:
+       tag: ${{ github.event.inputs.tag }}
+       token: ${{ secrets.PAT }}
--- /dev/null
+++ actionswf-1/.github/workflows/rel.yml
@@ -0,0 +1,41 @@
+
+on:
+ workflow_dispatch:
+
+jobs:
+ rbuild:
+  runs-on: ubuntu-latest
+  steps:
+   - uses: actions/checkout@v3
+   - name: Run a multi-line script
+     run: |
+      #get the version from changelog/launchpad/input
+      tag=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
+      echo "tag=${tag}" >> $GITHUB_ENV
+   - name: Create Release
+     id: create_release
+     uses: actions/create-release@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      tag_name: ${{ env.tag }}
+      release_name: Release ${{ env.tag }}
+      draft: false
+      prerelease: false
+      #this can be undone. example: git push origin :refs/tags/1.6
+   - name: Store upload url for assets
+     run: |
+      #echo straight will not escape {}
+      a=${{ steps.create_release.outputs.upload_url }}
+      echo -n ${a} > 1.txt
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      echo "proj=${name}" >> $GITHUB_ENV
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: https://uploads.github.com/repos/colin-i/test/releases/67484178/assets{?name,label}
+      asset_path: ./1.txt
+      asset_name: ${{ env.proj }}
+      asset_content_type: text/plain
--- actionswf-1.orig/arh/pub
+++ actionswf-1/arh/pub
@@ -7,7 +7,7 @@
 ~/test/publp && \
 ~/test/rpm && \
 ~/test/pub rpm && \
-./makewin32 && \
+./makewin64 && \
 ~/test/del && \
 ~/test/rel && \
 ~/test/pub rel && \
@@ -17,4 +17,4 @@
 ~/test/pub2 && \
 ~/test/publp2 && \
 ~/test/lp && \
-~/test/lp x
\ No newline at end of file
+~/test/lp x
--- actionswf-1.orig/example/Makefile
+++ actionswf-1/example/Makefile
@@ -3,13 +3,14 @@ platform = lin
 OCOMP=o
 OLINK=ounused
 syms=-s
-conv_64=1
+conv_64=0
 OFLAGS=conv_64 ${conv_64}
 
 ifeq (${platform},win)
 	OFLAGS += inplace_reloc 0 include_sec 1
 else
-	OFLAGS += underscore_pref 1 exit_end 1
+	OFLAGS += exit_end 1
+	# underscore_pref 1   win32 with _, can go back to this later
 endif
 
 name=example
@@ -25,7 +26,11 @@ uns:
 
 lib:
 	if [ "${platform}" = "win" ]; then \
-		i686-w64-mingw32-dlltool --no-leading-underscore -d ../src/actionswf.def -l ${linkfile}; \
+		if [ "${conv_64}" = "1" ]; then \
+			i686-w64-mingw32-dlltool --no-leading-underscore -d ../src/actionswf.def -l ${linkfile}; \
+		else \
+			x86_64-w64-mingw32-dlltool --no-leading-underscore -d ../src/actionswf.def -l ${linkfile}; \
+		fi \
 	fi
 
 lnk:
@@ -36,7 +41,11 @@ lnk:
 			$(LD) ${syms} --dynamic-linker=/lib64/ld-linux-x86-64.so.2 ${name}.o -entry example_main -o ${name} -lc -L../src -l:actionswf.so; \
 		fi \
 	else \
-		i686-w64-mingw32-ld ${syms} ${name}.o -entry example_main -lmsvcrt -o ${name}.exe -L. -l${linkname}; \
+		if [ "${conv_64}" = "1" ]; then \
+			i686-w64-mingw32-ld ${syms} ${name}.o -entry example_main -lmsvcrt -o ${name}.exe -L. -l${linkname}; \
+		else \
+			x86_64-w64-mingw32-ld ${syms} ${name}.o -entry example_main -lmsvcrt -o ${name}.exe -L. -l${linkname}; \
+		fi \
 	fi
 
 exe:
--- actionswf-1.orig/example/example.s
+++ actionswf-1/example/example.s
@@ -1,6 +1,7 @@
 format elfobj64
 
-importx "_sprintf" sprintf
+#win32 with _
+importx "sprintf" sprintf
 
 #a simple shape moving on the stage example
 
--- actionswf-1.orig/example/makewin32
+++ actionswf-1/example/makewin32
@@ -1,2 +1,2 @@
 
-make platform=win $@
+make platform=win conv_64=1 $@
--- /dev/null
+++ actionswf-1/example/makewin64
@@ -0,0 +1,2 @@
+
+make platform=win conv_64=2 $@
--- actionswf-1.orig/include/prog.h
+++ actionswf-1/include/prog.h
@@ -5,6 +5,7 @@ const TRUE=1
 const FALSE=0
 
 const NULL=0
+const no_pointer=NULL
 
 #const MAX_PATH=260
 
@@ -15,6 +16,8 @@ const WORD=2
 const DWORD=4
 const QWORD=8
 
+const pointer_rest=:-DWORD
+
 const void=0
 
 const SEEK_SET=0
--- /dev/null
+++ actionswf-1/makewin
@@ -0,0 +1,15 @@
+
+cd src
+
+./makewin${1} && \
+\
+cd .. && \
+mkdir actionswf && \
+mv src/actionswf.dll actionswf && \
+cd src && \
+./makewin${1} clean && \
+cd .. && \
+zip -r actionswf.zip actionswf && \
+rm -r ./actionswf && \
+\
+unzip -l actionswf.zip
--- actionswf-1.orig/makewin32
+++ /dev/null
@@ -1,15 +0,0 @@
-
-cd src
-
-./makewin32 $@ && \
-\
-cd .. && \
-mkdir actionswf && \
-mv src/actionswf.dll actionswf && \
-cd src && \
-./makewin32 clean && \
-cd .. && \
-zip -r actionswf.zip actionswf && \
-rm -r ./actionswf && \
-\
-unzip -l actionswf.zip
--- /dev/null
+++ actionswf-1/makewin64
@@ -0,0 +1,2 @@
+
+./makewin 64
--- actionswf-1.orig/src/Makefile
+++ actionswf-1/src/Makefile
@@ -3,8 +3,9 @@ platform = lin
 OCOMP=o
 OLINK=ounused
 syms=-s
-conv_64=1
-OFLAGS=conv_64 ${conv_64}
+conv_64=0
+#OFLAGSEXTRA=
+OFLAGS=conv_64 ${conv_64} ${OFLAGSEXTRA}
 
 items = ${platform} actioncode actionparse actionpool actionutil bits character file storage util
 expitems = action swf tool ../shared/action_dllmain
--- actionswf-1.orig/src/actioncode.s
+++ actionswf-1/src/actioncode.s
@@ -1,8 +1,9 @@
 Format ElfObj64
 
-importx "_strcmp" strcmp
-importx "_sprintf" sprintf
-importx "_strlen" strlen
+#win32 with _
+importx "strcmp" strcmp
+importx "sprintf" sprintf
+importx "strlen" strlen
 
 importaftercall ebool
 include "../include/prog.h"
@@ -46,21 +47,32 @@ function action_code_get()
     return pointer
 endfunction
 function action_code_set(sd value)
-    sd nr
-    setcall nr action_code_values_index()
-    sd x
-    set x nr#
-    if x==(totalvalues)
-    #was >= but when >?, here and in another 3 places
-        import "error" error
-        call error("size error")
-    endif
-    sv pointer
-    setcall pointer action_code_values()
-    mult x (DWORD)
-    add pointer x
-    set pointer# value
-    inc nr#
+	call action_code_set_ex(value,1)
+endfunction
+function action_code_set_pointer(sd value)
+	call action_code_set_ex(value,(:/DWORD))
+endfunction
+function action_code_set_ex(sd value,sd size)
+	sd nr
+	setcall nr action_code_values_index()
+	sd x
+	set x nr#
+	sd to=DWORD
+	mult to x
+	add x size
+	if x>=(totalvalues)
+		import "error" error
+		call error("size error")
+	endif
+	sd pointer
+	setcall pointer action_code_values()
+	add pointer to
+	if size==1
+		set pointer# value
+	else
+		set pointer#v^ value
+	endelse
+	set nr# x
 endfunction
 function forward_values_expand(sd forward,sd data)
     sd currentnr
@@ -158,11 +170,11 @@ function action_code_pack(sd codepointer
     endelseif
     #
     if is_member==(TRUE)
-        setcall codepointer action_member_loop(codepointer,(DWORD))
+        setcall codepointer action_member_loop(codepointer,:)   #to pass the pointer
     else
     #definelocal or setvariable or delete2
-        call action_push((ap_Constant8),codepointer#,-1)
-        add codepointer (DWORD)
+        call action_push((ap_Constant8),codepointer#v^,-1)
+        add codepointer :  #to pass the pointer
     endelse
     if need_right==(TRUE)
         if codepointer#==(ActionIncrement)
@@ -231,7 +243,7 @@ function action_code_write_conditions(sd
     if cond==(for_marker)
         add codepointer (DWORD)
         if codepointer#!=(for_three)
-            call action_push((ap_Constant8),codepointer#,-1);add codepointer (DWORD)
+            call action_push((ap_Constant8),codepointer#v^,-1);add codepointer :   #to pass the pointer
             call action_one((ActionEnumerate))
             #
             call add_while_top_off((for_marker))
@@ -248,11 +260,11 @@ function action_code_write_conditions(sd
             sd attr2;set attr2 codepointer#;add codepointer (DWORD)
             #
             if attr2==(ActionSetMember)
-                setcall codepointer action_member_loop(codepointer,(DWORD))
+                setcall codepointer action_member_loop(codepointer,:)  #to pass the pointer
             else
                 #var or set variable
                 call action_push((ap_Constant8),codepointer#,-1)
-                add codepointer (DWORD)
+                add codepointer :   #to pass the pointer
             endelse
             #
             call action_push((ap_RegisterNumber),first_reg,-1)
@@ -450,7 +462,7 @@ function action_code_write_function(sd c
 endfunction
 
 #codepointer
-function action_code_write_function_call(sd codepointer)
+function action_code_write_function_call(sv codepointer)
     add codepointer (DWORD)
     sd pointer
     setcall pointer action_code_write_builtin_function(codepointer)
@@ -468,14 +480,14 @@ function action_code_write_function_call
     return codepointer
 endfunction
 #codepointer
-function action_code_write_builtin_function(sd codepointer)
-    sd pointer
+function action_code_write_builtin_function(sv codepointer)
+    sv pointer
     set pointer codepointer
-    if pointer#!=0
+    if pointer#!=(no_pointer)
         #no builtin at members
         return codepointer
     endif
-    add pointer (DWORD)
+    add pointer :  #to pass the pointer
     #
     sd cursor
     setcall cursor action_code_write_builtin_set(pointer)
@@ -485,7 +497,7 @@ function action_code_write_builtin_funct
     return cursor
 endfunction
 #name/0
-function action_code_write_builtin_names(sd codepointer,sd p_action)
+function action_code_write_builtin_names(sv codepointer,sd p_action)
     ss int="int"
     sd compare
     setcall compare strcmp(codepointer#,int)
@@ -531,7 +543,7 @@ function action_code_write_builtin_set(s
     endif
     #
     chars er#256
-    add codepointer (DWORD)
+    add codepointer :   #to pass the pointer
     if codepointer#==(args_end)
         call sprintf(#er,"%s builtin function expects at least one parameter",name)
         call error(#er)
@@ -546,16 +558,16 @@ function action_code_write_builtin_set(s
     return codepointer
 endfunction
 #codepointer
-function action_code_new_or_call(sd codepointer)
+function action_code_new_or_call(sv codepointer)
     sd member
     set member codepointer#
     #
-    add codepointer (DWORD)
+    add codepointer :  #to pass the pointer
     sd fname
     set fname codepointer#
     #
     import "action_caller" action_caller
-    add codepointer (DWORD)
+    add codepointer :  #to pass the pointer
     setcall codepointer action_caller(fname,member,codepointer)
     return codepointer
 endfunction
@@ -574,7 +586,7 @@ function action_code_right_util(sd codep
     if codepointer#==(new_action)
         add codepointer (DWORD)
         sd member
-        set member codepointer#
+        set member codepointer#v^
         setcall codepointer action_code_new_or_call(codepointer)
         if member==0
             call action_one((ActionNewObject))
@@ -630,16 +642,20 @@ function action_code_right_number(sd cod
     set attrib codepointer#
     add codepointer (DWORD)
     if attrib==(ActionGetMember)
-        setcall codepointer action_member_loop(codepointer,0)
+        setcall codepointer action_member_loop(codepointer,(get_member))
     else
         if attrib==(ActionGetVariable)
-            call action_one_command(codepointer#)
+            call action_one_command(codepointer#v^)
+            add codepointer (pointer_rest)
         elseif attrib==(ap_double)
             sd low;set low codepointer#;add codepointer (DWORD)
             call action_push(attrib,low,codepointer#,-1)
-        else
-        #ap_Integer or ap_Constant8
+        elseif attrib==(ap_Integer)
             call action_push(attrib,codepointer#,-1)
+        else
+        #ap_Constant8
+            call action_push(attrib,codepointer#v^,-1)
+            add codepointer (pointer_rest)
         endelse
         add codepointer (DWORD)
     endelse
@@ -704,10 +720,10 @@ function action_definefunction(sd codepo
     return codepointer
 endfunction
 #codepointer
-function action_deffunction(sd codepointer)
+function action_deffunction(sv codepointer)
     ss fn_name
     set fn_name codepointer#
-    add codepointer (DWORD)
+    add codepointer :  #to pass the pointer
     sd fn_name_size
     setcall fn_name_size strlen(fn_name)
     inc fn_name_size
@@ -721,24 +737,24 @@ function action_deffunction(sd codepoint
     sd NumParams=0
     sd args
     set args codepointer
-    while codepointer#!=0
+    while codepointer#!=(no_pointer)
         addcall fn_size strlen(codepointer#)
         inc fn_size
         inc NumParams
-        add codepointer (DWORD)
+        add codepointer :  #to pass the pointer
     endwhile
-    add codepointer (DWORD)
+    add codepointer :  #to pass the pointer
     #
     call actionrecordheader((ActionDefineFunction),fn_size)
     call swf_actionblock_add(fn_name,fn_name_size)
     call swf_actionblock_add(#NumParams,(NumParams_size))
     #
     sd wr_size
-    while args#!=0
+    while args#!=(no_pointer)
         setcall wr_size strlen(args#)
         inc wr_size
         call swf_actionblock_add(args#,wr_size)
-        add args (DWORD)
+        add args :  #to pass the pointer
     endwhile
     #
     data dummyoffset=0
--- actionswf-1.orig/src/actionparse.s
+++ actionswf-1/src/actionparse.s
@@ -1,10 +1,11 @@
 Format ElfObj64
 
-importx "_strcspn" strcspn
-importx "_strchr" strchr
-importx "_memcpy" memcpy
-importx "_sscanf" sscanf
-importx "_strpbrk" strpbrk
+#win32 with _
+importx "strcspn" strcspn
+importx "strchr" strchr
+importx "memcpy" memcpy
+importx "sscanf" sscanf
+importx "strpbrk" strpbrk
 
 importaftercall ebool
 include "../include/prog.h"
@@ -12,6 +13,7 @@ include "../include/prog.h"
 import "str_next" str_next
 import "str_expression_at_start" str_expression_at_start
 import "action_code_set" action_code_set
+import "action_code_set_pointer" action_code_set_pointer
 import "error" error
 const add=Plus
 const sub=Hyphen
@@ -152,11 +154,11 @@ function action_parse_conditions(ss ac,s
         set cursor# 0
         #
         #enum can take ActionEnumerate(x.x[z])
-        call action_code_set(marker)
+        call action_code_set_pointer(marker)
         #
         if pointer!=ac
             call action_code_set((ActionDefineLocal))
-            call action_code_set(pointer)
+            call action_code_set_pointer(pointer)
         else
             call action_parse_left_holder(pointer,(ActionSetVariable),(ActionSetMember))
         endelse
@@ -305,14 +307,13 @@ function action_parse_pack(ss ac,sd endC
     ss delims^set
 
     setcall ac str_next(pointer,delims,#op)
-
     if isnewvar==(TRUE)
         if op==set
             call action_code_set((ActionDefineLocal))
-            call action_code_set(pointer)
+            call action_code_set_pointer(pointer)
         else
             call action_code_set((ActionDefineLocal2))
-            call action_code_set(pointer)
+            call action_code_set_pointer(pointer)
             return ac
         endelse
     else
@@ -381,7 +382,7 @@ function action_parse_left_holder(ss poi
     setcall test action_code_membersplit(pointer)
     if test==(NULL)
         call action_code_set(ac1)
-        call action_code_set(pointer)
+        call action_code_set_pointer(pointer)
     else
         call action_code_set(ac2)
         call action_code_member(pointer)
@@ -474,7 +475,7 @@ function action_code_row_parse_tool_util
     return ac
 endfunction
 #pointer
-function action_parse_loop(ss ac,sd p_op,sd endtype1,sd endtype2,sd p_ifElse_bool)
+function action_parse_loop(ss ac,sv p_op,sd endtype1,sd endtype2,sd p_ifElse_bool)  #p_op is pointing at a stack variable
     sd bool
     #can be on the stack but chars are low values; ends are set again when recursivity
     chars oprs#operations_size
@@ -536,7 +537,7 @@ function action_parse_loop(ss ac,sd p_op
     endwhile
 endfunction
 #bool
-function action_parse_utilEndTypes(sd op,sd p_op,sd endtype1,sd endtype2)
+function action_parse_utilEndTypes(sd op,sv p_op,sd endtype1,sd endtype2)  #p_op is pointing at a stack variable
     #when p_op is set, is to store the multiple kind of endtypes
     if p_op!=0
         set p_op# op
@@ -694,7 +695,7 @@ function action_code_str(ss ac)
     inc dest
     setcall next str_escape(ac,dest,delim)
     call action_code_set((ap_Constant8))
-    call action_code_set(dest)
+    call action_code_set_pointer(dest)
     return next
 endfunction
 function action_code_take(ss ac)
@@ -706,7 +707,7 @@ function action_code_take(ss ac)
     setcall test action_code_membersplit(ac)
     if test==0
         call action_code_set((ActionGetVariable))
-        call action_code_set(ac)
+        call action_code_set_pointer(ac)
     else
         call action_code_set((ActionGetMember))
         call action_code_member(ac)
@@ -770,7 +771,7 @@ function action_code_member(ss ac)
         if pos!=0
         #0 is at second+ multi-dimensional arrays levels
             add pointer pos
-            call action_code_set(ac)
+            call action_code_set_pointer(ac)
         endif
         if pointer#==sqbrace_start
             set pointer# 0
@@ -784,7 +785,7 @@ function action_code_member(ss ac)
         endif
         set ac pointer
     endwhile
-    call action_code_set(0)
+    call action_code_set_pointer((no_pointer))
 endfunction
 
 
@@ -1144,11 +1145,11 @@ function action_code_parse_function_dete
     if last_dot!=0
         set last_dot# 0
         inc last_dot
-        call action_code_set(start)
-        call action_code_set(last_dot)
+        call action_code_set_pointer(start)
+        call action_code_set_pointer(last_dot)
     else
-        call action_code_set(0)
-        call action_code_set(start)
+        call action_code_set_pointer((no_pointer))
+        call action_code_set_pointer(start)
     endelse
     setcall pointer action_code_parse_function_arguments(pointer)
     call action_code_set((args_end))
@@ -1234,9 +1235,9 @@ function action_code_parse_deffunction(s
         call error("start sign expected at function definition: (")
     endif
     set args# 0
-    call action_code_set(name_start)
+    call action_code_set_pointer(name_start)
     setcall pointer action_code_parse_function_defarguments(args)
-    call action_code_set(0)
+    call action_code_set_pointer((no_pointer))
     #
     call brace_blocks_add_parse((function_marker))
     #loop until the function code is over
@@ -1271,7 +1272,7 @@ function action_code_parse_function_defa
     while op!=close
         sd pos
         setcall pos strcspn(ac,argsdelims)
-        call action_code_set(ac)
+        call action_code_set_pointer(ac)
         add ac pos
         if ac#==0
             call error("close the function arguments sign expected: )")
--- actionswf-1.orig/src/actionpool.s
+++ actionswf-1/src/actionpool.s
@@ -1,7 +1,8 @@
 Format ElfObj64
 
-importx "_strlen" strlen
-importx "_memcmp" memcmp
+#win32 with _
+importx "strlen" strlen
+importx "memcmp" memcmp
 
 importaftercall ebool
 include "../include/prog.h"
--- actionswf-1.orig/src/actionutil.s
+++ actionswf-1/src/actionutil.s
@@ -1,8 +1,9 @@
 Format ElfObj64
 
-importx "_strlen" strlen
-importx "_memcpy" memcpy
-importx "_sprintf" sprintf
+#win32 with _
+importx "strlen" strlen
+importx "memcpy" memcpy
+importx "sprintf" sprintf
 #
 importx "action" action
 
@@ -17,86 +18,87 @@ import "spaces" spaces
 #tags
 
 function action_push(sd factors)
-    sd iter^factors
-    sd size=0
-    while iter#!=-1
-        inc size
-        if iter#==(ap_Null)
-        #skip
-        elseif iter#==(ap_Undefined)
-        #skip
-        elseif iter#==(ap_Integer)
-            add size (DWORD)
-            incst iter
-        elseif iter#==(ap_double)
-            add size (QWORD)
-            incst iter;incst iter
-        else
-        #if iter#==(ap_RegisterNumber)
-        #if iter#==(ap_Boolean)
-        #if iter#==(ap_Constant8)
-            add size (BYTE)
-            sd value
-            set value iter#
-            incst iter
-            if value==(ap_Constant8)
-            #add the action pool(if isn't) and verify to add +1size if 8 will go to ap_Constant16
-                sd translated_id
-                setcall translated_id actionpool_value(iter#)
-                if translated_id>0xff
-                    inc size
-                endif
-            endif
-        endelse
-        incst iter
-    endwhile
-
-    call actionrecordheader((ActionPush),size)
-
-    sd cursor^factors
-    while cursor#!=-1
-        #test here Constant8 to Constant16
-        if cursor#==(ap_Constant8)
-            incst cursor
-            #call actionpool_getvalue, the pool already exists(actionpool_value if not)
-            import "actionpool_getvalue" actionpool_getvalue
-            setcall translated_id actionpool_getvalue(cursor#)
-            sub cursor :
-            sd const_sz=BYTE
-            if translated_id>0xff
-                inc const_sz
-                set cursor# (ap_Constant16)
-            endif
-        endif
-
-        call swf_actionblock_add(cursor,1)
-
-        if cursor#==(ap_Null)
-        #skip
-        elseif cursor#==(ap_Undefined)
-        #skip
-        elseif cursor#==(ap_Integer)
-            incst cursor
-            call swf_actionblock_add(cursor,(DWORD))
-        elseif cursor#==(ap_double)
-            incst cursor
-            call swf_actionblock_add(cursor,(DWORD))
-            incst cursor
-            call swf_actionblock_add(cursor,(DWORD))
-        elseif cursor#==(ap_RegisterNumber)
-            incst cursor
-            call swf_actionblock_add(cursor,(BYTE))
-        elseif cursor#==(ap_Boolean)
-            incst cursor
-            call swf_actionblock_add(cursor,(BYTE))
-        else
-        #if cursor#==(ap_Constant8)
-        #or was modified to (ap_Constant16)
-            incst cursor
-            call swf_actionblock_add(#translated_id,const_sz)
-        endelse
-        incst cursor
-    endwhile
+	sd iter^factors
+	sd size=0
+	while iter#!=-1
+		inc size
+		if iter#==(ap_Integer)
+			add size (DWORD)
+			incst iter
+		elseif iter#==(ap_double)
+			add size (QWORD)
+			add iter (2*:)
+		elseif iter#==(ap_Null)
+		#skip
+		elseif iter#==(ap_Undefined)
+		#skip
+		else
+		#if iter#==(ap_RegisterNumber)
+		#if iter#==(ap_Boolean)
+		#if iter#==(ap_Constant8)
+			add size (BYTE)
+			sd value
+			set value iter#
+			incst iter
+			if value==(ap_Constant8)
+			#add the action pool(if isn't) and verify to add +1size if 8 will go to ap_Constant16
+				sd translated_id
+				setcall translated_id actionpool_value(iter#v^)
+				if translated_id>0xff
+					inc size
+				endif
+			endif
+		endelse
+		incst iter
+	endwhile
+
+	call actionrecordheader((ActionPush),size)
+
+	sd cursor^factors
+	while cursor#!=-1
+		#test here Constant8 to Constant16
+		if cursor#==(ap_Constant8)
+			sv pointer
+			set pointer cursor
+			incst pointer
+			#call actionpool_getvalue, the pool already exists(actionpool_value if not)
+			import "actionpool_getvalue" actionpool_getvalue
+			setcall translated_id actionpool_getvalue(pointer#)
+			sd const_sz=BYTE
+			if translated_id>0xff
+				inc const_sz
+				set cursor# (ap_Constant16)
+			endif
+		endif
+
+		call swf_actionblock_add(cursor,1)
+
+		if cursor#==(ap_Integer)
+			incst cursor
+			call swf_actionblock_add(cursor,(DWORD))
+		elseif cursor#==(ap_double)
+			incst cursor
+			call swf_actionblock_add(cursor,(DWORD))
+			incst cursor
+			call swf_actionblock_add(cursor,(DWORD))
+		elseif cursor#==(ap_RegisterNumber)
+			incst cursor
+			call swf_actionblock_add(cursor,(BYTE))
+		elseif cursor#==(ap_Boolean)
+			incst cursor
+			call swf_actionblock_add(cursor,(BYTE))
+		elseif cursor#==(ap_Null)
+		#skip
+		elseif cursor#==(ap_Undefined)
+		#skip
+		else
+		#if cursor#==(ap_Constant8)
+		#or was modified to (ap_Constant16)
+			call swf_actionblock_add(#translated_id,const_sz)
+			incst cursor
+		endelse
+		incst cursor
+	endwhile
 endfunction
 
 function action_one(sd tag)
@@ -127,9 +129,9 @@ endfunction
 import "action_get_one" action_get_one
 #the position where the mathpointer reachs
 function action_member_loop(sd mathpointer,sd endoffset)
-    call action_get_one(mathpointer#)
+    call action_get_one(mathpointer#v^)
     while 1==1
-        add mathpointer (DWORD)
+        add mathpointer :  #to pass the pointer
         #
         while mathpointer#==(square_bracket_start)
         #multi-dim arrays
@@ -138,28 +140,28 @@ function action_member_loop(sd mathpoint
             if endoffset==(get_member)
                 call action_one((ActionGetMember))
             else
-                if mathpointer#!=0
+                if mathpointer#v^!=(no_pointer)
                     call action_one((ActionGetMember))
                 else
-                    add mathpointer (DWORD)
+                    add mathpointer :  #to pass the pointer
                     return mathpointer
                 endelse
             endelse
         endwhile
-        sd endtest
+        sv endtest
         set endtest mathpointer
         add endtest endoffset
         #
-        if endtest#==0
-            if endoffset!=0
+        if endtest#==(no_pointer)
+            if endoffset!=(no_pointer)
                 #push to set later
-                call action_push((ap_Constant8),mathpointer#,-1)
-                add mathpointer (DWORD)
+                call action_push((ap_Constant8),mathpointer#v^,-1)
+                add mathpointer :  #to pass the pointer
             endif
-            add mathpointer (DWORD)
+            add mathpointer :  #to pass the pointer
             return mathpointer
         endif
-        call action_push((ap_Constant8),mathpointer#,-1)
+        call action_push((ap_Constant8),mathpointer#v^,-1)
         call action_one((ActionGetMember))
     endwhile
 endfunction
@@ -384,9 +386,9 @@ endfunction
 
 #format
 
-function action_format(sd args)
+function action_format(sv args)
     sd args_nr=2
-    sd args_format
+    sv args_format
     set args_format args;incst args_format
     chars e="%"
     addcall args_nr escape_count(args_format#,e)
--- actionswf-1.orig/src/bits.s
+++ actionswf-1/src/bits.s
@@ -99,7 +99,7 @@ function rect_add(sd width,sd height)
     call rect_prepare(#mem,#sz,width,height)
     call swf_mem_add(mem,sz)
 endfunction
-function rect_prepare(sv p_out,sd p_size,sd width,sd height)
+function rect_prepare(sv p_out,sv p_size,sd width,sd height)  #p_size is a stack variable
     sd NBits
     mult width 20
     mult height 20
--- actionswf-1.orig/src/character.s
+++ actionswf-1/src/character.s
@@ -266,7 +266,7 @@ endfunction
 
 #edittext
 
-const sim64pointerSize=:-DWORD
+const sim64pointerSize=pointer_rest
 #struct
 function edittext_struct()
     data fontid#1
--- actionswf-1.orig/src/file.s
+++ actionswf-1/src/file.s
@@ -57,7 +57,7 @@ endfunction
 #read
 import "memalloc" memalloc
 #mem
-function file_get_content(ss filepath,sd p_size)
+function file_get_content(ss filepath,sv p_size)  #size is a stack variable
     sd file
     setcall file file_open(filepath,(_open_read))
     call file_get_content__resources((TRUE),file)
--- actionswf-1.orig/src/m32d
+++ actionswf-1/src/m32d
@@ -1,2 +1,2 @@
 
-make compile && make link syms= items_prefix=/home/bc/s/actionswf-1/src/ LD=/home/bc/Desktop/out/LD-.glibc2.27-x86_64.AppImage
+OFLAGSEXTRA="function_name 1" ./make32 $@ && make link syms= items_prefix=/home/bc/s/actionswf-1/src/ LD=/home/bc/Desktop/out/LD-.glibc2.27-x86_64.AppImage
--- /dev/null
+++ actionswf-1/src/m32dx
@@ -0,0 +1,2 @@
+
+./m32d compile
--- actionswf-1.orig/src/m64d
+++ actionswf-1/src/m64d
@@ -1,2 +1,2 @@
 
-./make64 syms= $@
+OFLAGSEXTRA="function_name 1" ./make64 $@ && ./make64 syms= link
--- /dev/null
+++ actionswf-1/src/m64dx
@@ -0,0 +1,2 @@
+
+./m64d compile
--- /dev/null
+++ actionswf-1/src/make32
@@ -0,0 +1,2 @@
+
+make conv_64=1 $@
--- actionswf-1.orig/src/makewin32
+++ actionswf-1/src/makewin32
@@ -1,2 +1,2 @@
 
-make platform=win $@
+make platform=win conv_64=1 $@
--- /dev/null
+++ actionswf-1/src/makewin64
@@ -0,0 +1,4 @@
+
+make platform=win conv_64=2 $@
+
+#make platform=win link
--- /dev/null
+++ actionswf-1/src/mw64d
@@ -0,0 +1,2 @@
+
+OFLAGSEXTRA="function_name 1" ./makewin64 $@ && ./makewin64 syms= link
--- /dev/null
+++ actionswf-1/src/mw64dx
@@ -0,0 +1,2 @@
+
+./mw64d compile
--- actionswf-1.orig/src/storage.s
+++ actionswf-1/src/storage.s
@@ -1,7 +1,8 @@
 Format ElfObj64
 
-importx "_strlen" strlen
-importx "_memcpy" memcpy
+#win32 with _
+importx "strlen" strlen
+importx "memcpy" memcpy
 
 importaftercall ebool
 include "../include/prog.h"
@@ -24,7 +25,11 @@ function swf_mem(sd proc,sd arg,sd len)
     data main_id#1
     vdata call_struct#1;vdata c_main^struct_ids;vdata c_pool^struct_ids_actionpool
 
-    if proc==(mem_exp_init)
+    if proc==(mem_exp_change_back)
+        set id main_id
+        set call_struct c_main
+        return (void)
+    elseif proc==(mem_exp_init)
     #arg is file
     #len is filelength offset
         if path_mem!=(NULL)
@@ -69,10 +74,6 @@ function swf_mem(sd proc,sd arg,sd len)
             endif
         endif
         return (void)
-    elseif proc==(mem_exp_change_back)
-        set id main_id
-        set call_struct c_main
-        return (void)
     endelseif
     if path_mem==(NULL)
     #swf_(placeobject...)->mem_exp_add;swf_sprite_(placeobject...)->mem_exp_change;swf_done->mem_exp_done
@@ -152,15 +153,7 @@ function swf_actionblock(sd proc,sd arg,
     data id#1
     data id_back#1
     sd poolid
-    if proc==(mem_exp_init)
-        set id arg
-        set id_back id
-        call struct_ids_action((ids_set),id)
-        call struct_ids_actionpool((ids_set),id)
-        sd p_poolid;setcall p_poolid actionpoolid();set p_poolid# id
-        sd p_poolrootid;setcall p_poolrootid actionpoolid_root();set p_poolrootid# id
-        return (void)
-    elseif proc==(mem_exp_change)
+    if proc==(mem_exp_change)
         #must verify to be a valid user input id
         call struct_ids_actionpool((ids_get_pointer),id)
         #
@@ -177,6 +170,14 @@ function swf_actionblock(sd proc,sd arg,
         setcall poolid actionpoolid()
         set poolid# root_poolid#
         return (void)
+    elseif proc==(mem_exp_init)
+        set id arg
+        set id_back id
+        call struct_ids_action((ids_set),id)
+        call struct_ids_actionpool((ids_set),id)
+        sd p_poolid;setcall p_poolid actionpoolid();set p_poolid# id
+        sd p_poolrootid;setcall p_poolrootid actionpoolid_root();set p_poolrootid# id
+        return (void)
     endelseif
     sd p_block
     setcall p_block struct_ids_action((ids_get_pointer),id)
--- actionswf-1.orig/src/swf.es
+++ actionswf-1/src/swf.es
@@ -1,8 +1,9 @@
 Format ElfObj64
 
-importx "_memcpy" memcpy
-importx "_strlen" strlen
-importx "_memcmp" memcmp
+#win32 with _
+importx "memcpy" memcpy
+importx "strlen" strlen
+importx "memcmp" memcmp
 
 importaftercall ebool
 include "../include/prog.h"
@@ -165,7 +166,7 @@ functionX swf_font(ss fontname,sd font_f
     chars FontNameLen#1
 
     const font_hd_start_size=!-font_hd_start
-    data font_hd_start^id
+    vdata font_hd_start^id
 
     data NumGlyphs=0
 
@@ -612,8 +613,8 @@ functionX swf_dbl_ex(ss imagepath,sd p_w
     if size<8
         call error("missing image header")
     endif
-    chars hd_magic1={D,B,l,1};data magic1^hd_magic1
-    chars hd_magic2={D,B,l,2};data magic2^hd_magic2
+    chars hd_magic1={D,B,l,1};vdata magic1^hd_magic1
+    chars hd_magic2={D,B,l,2};vdata magic2^hd_magic2
     if mem#!=magic1#
     if mem#!=magic2#
         call printEr("expecting dbl(define bits lossless 1 or 2)header; filepath: ")
@@ -708,7 +709,7 @@ functionX swf_done()
     call swf_actionblock((mem_exp_part_done));#in case there are remaining actions
 #the swf is done and the total length is wrote and the memory is freed
     call swf_mem((mem_exp_done))
-    import "freereset" freereset
+    importx "freereset" freereset
     call freereset()
 endfunction
 
--- actionswf-1.orig/src/util.s
+++ actionswf-1/src/util.s
@@ -1,12 +1,13 @@
 Format ElfObj64
 
-importx "_fwrite" fwrite
-importx "_realloc" realloc
-importx "_memcpy" memcpy
-importx "_free" free
-importx "_strcspn" strcspn
-importx "_strlen" strlen
-importx "_memcmp" memcmp
+#win32 with _
+importx "fwrite" fwrite
+importx "realloc" realloc
+importx "memcpy" memcpy
+importx "free" free
+importx "strcspn" strcspn
+importx "strlen" strlen
+importx "memcmp" memcmp
 
 import "platform_iob" platform_iob
 
@@ -100,7 +101,7 @@ function error(ss msg)
     import "action_error" action_error
     call action_error()
 
-    import "freereset" freereset
+    importx "freereset" freereset
     call freereset()
     #this can be after code_values(in last_free); but normal is this at action and last_free at swf_done(without this)
     import "action_debug_free" action_debug_free
@@ -184,7 +185,7 @@ function block_get_mem(sd block)
     add block (mem_struct_size)
     return block
 endfunction
-function block_get_mem_size(sd block,sd p_mem,sd p_size)
+function block_get_mem_size(sd block,sv p_mem,sv p_size)  #size is a stack variable
     setcall p_mem# block_get_mem(block)
     setcall p_size# block_get_size(block)
 endfunction
@@ -203,7 +204,7 @@ function mem_block_add(sv p_block,ss new
     set sz_test size
     add sz_test newblock_size
     if sz_test>allsize
-    #was >=
+    #was >= but when >?, here and in another 2 places
         div sz_test (block_size)
         mult sz_test (block_size)
         add sz_test (block_size)
@@ -375,7 +376,7 @@ endfunction
 #strings
 
 #str
-function str_next(ss s,ss delims,sd p_op)
+function str_next(ss s,ss delims,sv p_op)  #p_op is pointing at a stack variable
     sd pos
     setcall pos strcspn(s,delims)
     ss x
--- actionswf-1.orig/src/win.s
+++ actionswf-1/src/win.s
@@ -3,7 +3,8 @@ format elfobj64
 
 include "../include/prog.h"
 
-importx "___iob_func" iob_func
+#win32 with _
+importx "__iob_func" iob_func
 
 function platform_iob()
 #    const STDIN_FILENO=0
