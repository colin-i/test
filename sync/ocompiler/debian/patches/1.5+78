Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+78) xenial; urgency=medium
 .
   * class-like offsets and at runtime, and CHAR
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-03-15

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -125,24 +125,24 @@
 	Example:
 	<br>
 	<a class="code">
-    Chars charsdata="Text"<br>
-    Str string^charsdata<br>
+    Char chardata="Text"<br>
+    Str string^chardata<br>
     Str text="Text data"</a>
 	</p>
 
 	<p>
 	4. Characters
 	<br>
-	Language command: <b>Chars</b>
+	Language command: <b>Char</b>
 	<br>
 	Is a 8 bit value. It is used for operations.
 	<br>
 	Example:
 	<br>
 	<a class="code">
-    Chars value={1}<br>
-    Chars value=1<br>
-    Chars value="Add text here"</a>
+    Char value={1}<br>
+    Char value=1<br>
+    Char value="Add text here"</a>
 	</p>
 
 	<p>
@@ -167,7 +167,7 @@
 	Example:
 	<br>
 	<a class="code">
-    Chars charsdata="Text"<br>
+    Char chardata="Text"<br>
     function recursive(sd stackdata)<br>
     endfunction<br>
     ss string="Text"<br>
@@ -196,7 +196,7 @@
 	<br>
 	Language command: <b>STRX</b>
 	<br>
-	Language command: <b>CHARSX</b>
+	Language command: <b>CHARX</b>
 	<br>
 	Language command: <b>VDATAX</b>
 	<br>
@@ -225,7 +225,7 @@
 	<a class="code">
         Const fruits=20<br>
         Data value=-70<br>
-        Chars text="The quick brown fox jumps over the laxy dog."<br>
+        Char text="The quick brown fox jumps over the laxy dog."<br>
         Str stringASM=0x401000</a>
 	</p>
 	<p>
@@ -235,7 +235,7 @@
 	<br>
 	<a class="code">
         Data values={1,3,900}<br>
-        Chars bytes={1,4,100}<br>
+        Char bytes={1,4,100}<br>
         Str pointers={0x401010,0x401020}</a>
 	</p>
 	</p>
@@ -248,7 +248,7 @@
 	<a class="code">
         Data reserveDATA#10<br>
         #the data section will have 40 bytes reserved<br>
-        Chars reserveCHARS#10<br>
+        Char reserveCHAR#10<br>
         #the data section will have 10 bytes reserved<br>
         Str reservePointers#10<br>
         #the data section will have 40 bytes reserved</a>
@@ -265,7 +265,7 @@
 	<a class="code">
         Data value=1<br>
         Data pointervalue^value<br>
-        Chars bytes="Raw text data declaration."<br>
+        Char bytes="Raw text data declaration."<br>
         Str text^bytes</a>
 	</p>
 
@@ -273,7 +273,7 @@
 	4. Relocation sign ('%')
 	<br>
 	Used at the object format. It acts like equal sign and then the offset is added to the REL section.
-	At executables it translated to '='. At Str and quotations declaration the equal sign adds at object to Rel and this sign cannot be used here. At Chars the sign cannot be used.
+	At executables it translated to '='. At Str and quotations declaration the equal sign adds at object to Rel and this sign cannot be used here. At Char the sign cannot be used.
 	<br>
 	Add another '%' sign to point to .dtnb section instead of .data if applicable.
 	<br>
@@ -308,7 +308,7 @@
 	<table class="code">
 	<tr><td>const a=1</td></tr>
 	<tr><td>#</td>                <td>add</td> <td>sub</td> <td>mul</td> <td>div</td>   <td>rem</td>   <td>pow</td> <td>and</td> <td>or</td>  <td>xor</td> <td>shl</td> <td>sar</td> <td>less</td><td>greater</td><td>neg</td><td>not</td></tr>
-	<tr><td>chars *examples={</td><td>3+2,</td><td>6-4.</td><td>5*5,</td><td>32/10,</td><td>32/10,</td><td>3$2,</td><td>7&2,</td><td>5|2,</td><td>7^2,</td><td>2<2,</td><td>8>3,</td><td>2<3,</td><td>2>3,</td>   <td>-a</td> <td>~0}</td></tr>
+	<tr><td>char *examples={</td><td>3+2,</td><td>6-4.</td><td>5*5,</td><td>32/10,</td><td>32/10,</td><td>3$2,</td><td>7&2,</td><td>5|2,</td><td>7^2,</td><td>2<2,</td><td>8>3,</td><td>2<3,</td><td>2>3,</td>   <td>-a</td> <td>~0}</td></tr>
 	<tr><td>#</td>                <td>5</td>   <td>2</td>   <td>25</td>  <td>3</td>     <td>2</td>     <td>9</td>   <td>2</td>   <td>7</td>   <td>5</td>   <td>8</td>   <td>1</td>   <td>1</td>   <td>0</td>      <td>-1</td> <td>0xff</td></tr>
 	</table>
 	<a class="code">
@@ -608,9 +608,9 @@
         #the valueA will be 3</p>
 
 	<p>
-        Chars data="ABC"<br>
+        Char data="ABC"<br>
         Str string^data<br>
-        Chars c1#1<br>
+        Char c1#1<br>
         Set c1 string#<br>
         #the c1 will be A</p>
 
@@ -700,7 +700,7 @@
         SetCall value numbers_inter(value)<br>
         #the value will store 30</p>
 	<p>
-        chars format="%i %i"<br>
+        char format="%i %i"<br>
         sd args^format;sd *={100,200}<br>
         CallEx printf #args 3</p>
 	</a>
@@ -718,9 +718,9 @@
         #the default format is Format Exe<br>
         Library "user32.dll"<br>
         Import "MessageBoxA" Message<br>
-        Chars program="Program"<br>
+        Char program="Program"<br>
         Str title^program<br>
-        Chars data="Hello World"<br>
+        Char data="Hello World"<br>
         Str text^data<br>
         Data null=0<br>
         Call Message(null,text,title,null)<br>
@@ -823,10 +823,10 @@
         Library "libc.so.6"<br>
         #at first library, the interpretor is created: "lib/ld-linux.so.2"<br>
         Import "printf" printf<br>
-        chars newlinedata={0xa,0}<br>
+        char newlinedata={0xa,0}<br>
         str newline^newlinedata<br>
         call printf(newline)<br>
-        chars hello="Hello World!"<br>
+        char hello="Hello World!"<br>
         str helloworld^hello<br>
         call printf(helloworld)<br>
         call printf(newline)<br>
--- ocompiler-1.orig/ostrip/Makefile
+++ ocompiler-1/ostrip/Makefile
@@ -1,6 +1,18 @@
 
 all: ostrip
 
+ifndef nobits_virtual
+nobits_virtual=1
+endif
+
+strippy=ostriputil
+
+OFLAGS=${OFLAGSEXTRA}
+
+ifeq (${nobits_virtual},0)
+OFLAGS+=nobits_virtual 0
+endif
+
 OB = ostrip
 OBJ = ${OB}.o
 OBT = ${OB}.txt
@@ -17,24 +29,20 @@ OUNUSED=../ounused/ounused
 syms =-s
 ATCCCOM = $(CC) ${syms} -o ${OB}
 
-strippy=ostriputil
-
-nobits_virtual=1
-
 ostrip: ${OBJ}
 	${OUNUSED} ${FULLOBJLOG}
 	@echo
 	${ATCCCOM} ${FULLOBJO}
 	if [ "${nobits_virtual}" != "1" ]; then \
-		if [ "$(shell lsb_release -cs)" = "jammy" ]; then \
-			${FULLOBJ} ${FULLOBJ} ${FULLOBJLOG} ${FULLOBJO}; \
-			if [ "$$?" = "0" ]; then \
-				${strippy} ${FULLOBJ} ${FULLOBJ}; \
-			fi; \
+		${FULLOBJ} ${FULLOBJ} ${FULLOBJLOG} ${FULLOBJO}; \
+		if [ "$$?" = "0" ]; then \
+			${strippy} ${FULLOBJ} ${FULLOBJ}; \
 		fi; \
 	fi
 #	@echo
 #without this echo will do a strange cc command
+#		if [ "$(shell lsb_release -cs)" = "jammy" ]; then \
+#		fi; \
 #xenial do wrong access somehow, bionic and focal do extra code at text and need to extra code at realoffset for .text
 
 install: all
@@ -47,17 +55,33 @@ clean-compile:
 	-rm -f .data
 	-rm -f .text
 	-rm -f .rela.dyn
+	-rm -f .symtab
+	-rm -f .symtab_offset
 
 clean-link:
 	-rm -f ostrip
 
-clean: clean-compile clean-link
+clean-test:
+	-rm -f z
+
+clean: clean-compile clean-link clean-test
 distclean: clean
 
 uninstall:
 	-rm -f $(DESTDIR)$(prefix)/bin/ostrip
 
 test:
-	echo "Nothing"
+	if [ "${nobits_virtual}" != "1" ]; then \
+		${ATCCCOM} ${FULLOBJO} -o z; \
+		if [ "$$?" = "0" ]; then \
+			${FULLOBJ} ./z ${FULLOBJLOG} ${FULLOBJO}; \
+			if [ "$$?" = "0" ]; then \
+				${strippy} ./z ./z; \
+				if [ "$$?" = "0" ]; then \
+					diff ./z ${FULLOBJ}; \
+				fi; \
+			fi; \
+		fi; \
+	fi
 
 .PHONY: all install clean distclean uninstall test
--- ocompiler-1.orig/ostrip/after.s
+++ ocompiler-1/ostrip/after.s
@@ -11,20 +11,20 @@ function aftercall_find(sv objects,sv po
 		add end sym
 		while sym!=end
 #Data elf64_sym_st_name#1
-#Chars elf64_sym_st_info#1
-#Chars *elf64_sym_st_other={0}
-#Chars elf64_sym_st_shndx#2
+#Char elf64_sym_st_info#1
+#Char *elf64_sym_st_other={0}
+#Char elf64_sym_st_shndx#2
 #Data elf64_sym_st_value#1;data *=0
 #Data elf64_sym_st_size#1;data *=0
-const sym__to_value=datasize+charsize+charsize+(2*charsize)
+const sym__to_value=datasize+charize+charize+(2*charize)
 const sym_size=sym__to_value+:+:
-const sym__to_shndx=datasize+charsize+charsize
+const sym__to_shndx=datasize+charize+charize
 			add sym (sym__to_shndx)
-			chars d={dataind,0}
+			char d={dataind,0}
 			sd cmp;setcall cmp memcmp(sym,#d,2)
 			if cmp==0
-				sub sym (charsize+charsize)
-				chars info=STB_GLOBAL*0x10|STT_NOTYPE   ;#global seems to always be here but there is too much code to separate
+				sub sym (charize+charize)
+				char info=STB_GLOBAL*0x10|STT_NOTYPE   ;#global seems to always be here but there is too much code to separate
 				if info==sym#
 				#this is the aftercall,get string pointer from strtab
 					sub sym (datasize)
@@ -76,7 +76,7 @@ function aftercall_replace(sv psym,sv ps
 endfunction
 
 function aftercall_in_objects(sv objects,ss astr,sv aoffset,sd textinneroffset)
-	sv tphisic%pexetext
+	sv tphisic%%pexetext
 	set tphisic tphisic#
 	add tphisic textinneroffset
 	while objects#!=(NULL)
@@ -104,7 +104,7 @@ function aftercall_in_objects(sv objects
 			#in data is with dataind (and only in one object)
 			#sub pointer (to_symtab)
 			#call aftercall_object_section(pointer,sympos,aoffset)
-			sub pointer (from_symtab_to_text)
+			sub pointer (from_text_to_symtab)
 			call reloc_item(pointer,sympos,aoffset,tphisic)
 		endif
 		add object (to_text_extra_a)
--- ocompiler-1.orig/ostrip/file.s
+++ ocompiler-1/ostrip/file.s
@@ -23,30 +23,30 @@ function get_file(sd name,sv p_file,sv s
 		#at frees will check next
 		#set p_secN# (NULL)
 
-		chars elf64_ehd_e_ident_sign={asciiDEL,asciiE,asciiL,asciiF}
-#chars *elf64_ehd_e_ident_class={ELFCLASS64}
-#chars *elf64_ehd_e_ident_data={ELFDATA2LSB}
-#chars *elf64_ehd_e_ident_version={EV_CURRENT}
-#chars *elf64_ehd_e_ident_osabi={ELFOSABI_NONE}
-#chars *elf64_ehd_e_ident_abiversion={EI_ABIVERSION}
-#chars *elf64_ehd_e_ident_pad={0,0,0,0,0,0,0}
-#Chars *elf64_ehd_e_type={ET_REL,0}
+		char elf64_ehd_e_ident_sign={asciiDEL,asciiE,asciiL,asciiF}
+#char *elf64_ehd_e_ident_class={ELFCLASS64}
+#char *elf64_ehd_e_ident_data={ELFDATA2LSB}
+#char *elf64_ehd_e_ident_version={EV_CURRENT}
+#char *elf64_ehd_e_ident_osabi={ELFOSABI_NONE}
+#char *elf64_ehd_e_ident_abiversion={EI_ABIVERSION}
+#char *elf64_ehd_e_ident_pad={0,0,0,0,0,0,0}
+#Char *elf64_ehd_e_type={ET_REL,0}
 		const after_sign_to_machine=1+1+1+1+1+7+2
-		Chars elf64_ehd_e_machine={EM_X86_64,0}
+		Char elf64_ehd_e_machine={EM_X86_64,0}
 #data *elf64_ehd_e_version=EV_CURRENT
 #data *elf64_ehd_e_entry={0,0}
 #data *elf64_ehd_e_phoff={0,0}
 		const after_machine_to_shoff=4+8+8
 #data elf64_ehd_e_shoff#1;data *=0
 #data *elf64_ehd_e_flags=0
-#chars *elf64_ehd_e_ehsize={64,0}
-#chars *elf64_ehd_e_phentsize={0,0}
-#chars *elf64_ehd_e_phnum={0,0}
+#char *elf64_ehd_e_ehsize={64,0}
+#char *elf64_ehd_e_phentsize={0,0}
+#char *elf64_ehd_e_phnum={0,0}
 		const after_shoff_to_shentsize=4+2+2+2
-#chars *elf64_ehd_e_shentsize={64,0}
-#chars elf64_ehd_e_shnum#2
-#chars elf64_ehd_e_shstrndx#2
-#chars *pad={0,0}
+#char *elf64_ehd_e_shentsize={64,0}
+#char elf64_ehd_e_shnum#2
+#char elf64_ehd_e_shstrndx#2
+#char *pad={0,0}
 		sd sz=4
 		sd sign;call read(file,#sign,sz)
 		sd c;setcall c memcmp(#sign,#elf64_ehd_e_ident_sign,sz)
--- ocompiler-1.orig/ostrip/header.h
+++ ocompiler-1/ostrip/header.h
@@ -48,7 +48,7 @@ const asciiDEL=0x7F
 
 const section_nr_of_values=2    ;#*2 for size
 
-const charsize=1
+const charize=1
 
 const verbose_count=0
 const verbose_flush=-1
--- ocompiler-1.orig/ostrip/obj.s
+++ ocompiler-1/ostrip/obj.s
@@ -7,13 +7,15 @@ const object_nr_of_secondary_sections=2
 const object_nr_of_sections=object_nr_of_main_sections+object_nr_of_secondary_sections
 const section_alloc=:*section_nr_of_values
 const object_alloc_secs=object_nr_of_sections*section_alloc
+#data text sym str
+#8,8  8,8  8,8 8,8=0x40
 
 #const to_text=section_alloc
 const to_symtab=object_nr_of_main_sections*section_alloc
 const to_strtab=to_symtab+section_alloc
 const from_symsize_to_voffset=:+section_alloc
 const from_strtab_to_symtab=section_alloc
-const from_symtab_to_text=section_alloc
+const from_text_to_symtab=section_alloc
 const from_text_to_data_extra=section_alloc+(object_nr_of_secondary_sections*section_alloc)
 
 const to_data_extra=object_alloc_secs
@@ -25,6 +27,9 @@ const extra_sz=from_extra_sz_to_extra_sz
 const to_text_extra=to_data_extra_sz+extra_sz
 const to_text_extra_a=to_text_extra+from_extra_sz_to_extra_sz_a
 const object_alloc=to_text_extra+extra_sz
+#4,8,8                   8,8
+#Xlogoffset,sz,szaligned textsz,szaligned
+#0x64
 
 ##stripped size
 function get_objs(sv pargs,sd end)
@@ -35,7 +40,7 @@ function get_objs(sv pargs,sd end)
 	add pointers :  #for null end
 
 	#make a container
-	sv pobjects%pobjects
+	sv pobjects%%pobjects
 	setcall pobjects# alloc(pointers)
 
 	#set end
@@ -51,7 +56,7 @@ function get_objs(sv pargs,sd end)
 		add objects :
 		set objects# (NULL)
 
-		chars o1=".rela.data";chars o2=".rela.text";chars o3=".symtab";chars o4=".strtab"
+		char o1=".rela.data";char o2=".rela.text";char o3=".symtab";char o4=".strtab"
 		const o1c^o1;const o2c^o2;const o3c^o3;const o4c^o4
 		value oN%{o1c,o2c,o3c,o4c}
 		value *=NULL
@@ -93,7 +98,7 @@ function get_offset(sd fname)
 		if off!=-1
 			sub off (2+8)  #knowing \r\n same as ounused that is not headering with src. and 8 is copy-paste
 			call seeks(file,off)
-			chars buf={0,0,0,0, 0,0,0,0, 0}
+			char buf={0,0,0,0, 0,0,0,0, 0}
 			call read(file,#buf,8) #copy-paste
 			datax nr#1
 			call sscanf(#buf,"%08x",#nr) #copy-paste
--- ocompiler-1.orig/ostrip/ostrip.s
+++ ocompiler-1/ostrip/ostrip.s
@@ -39,7 +39,7 @@ include "throwless.s"
 include "rel.s"
 
 function messagedelim(sv st)
-	Chars visiblemessage={0x0a,0}
+	Char visiblemessage={0x0a,0}
 	Call fprintf(st#,#visiblemessage)
 endfunction
 Function Message(ss text)
@@ -68,7 +68,7 @@ function erMessages(ss m1,ss m2)
 	call erEnd()
 endfunction
 
-chars s1=".data";chars s2=".text";chars s3=".symtab";chars s3o=".symtab_offset";chars s4=".strtab"
+char s1=".data";char s2=".text";char s3=".symtab";char s3o=".symtab_offset";char s4=".strtab"
 
 include "file.s"
 include "obj.s"
@@ -78,24 +78,24 @@ include "reldyn.s"
 entry main(sd argc,sv argv) #0,ss exec,ss log1,ss *obj1)   #... logN objN
 
 if argc>=(1+3)  #0 is all the time
-	sd verb%ptrverbose
+	sd verb%%ptrverbose
 	setcall verb# access(".debug",(F_OK))
 
-	sv pfile%pexefile
+	sv pfile%%pexefile
 	const s1c^s1;const s2c^s2;const s3c^s3;const s4c^s4
 	value sN%{s1c,s2c}
 	value s3c%s3c
 	value s4c%s4c
 	value *=NULL
-	sv pexe%pexedata
+	sv pexe%%pexedata
 	datax nrs#2   #this is required inside but is better than passing the number of sections
 	datax symtabnr#1
 	datax *#1
 
 	#text/data can go null later, with access error if rela points there, but to not set here null is probably same access error
-	#sv pt%pexetext
+	#sv pt%%pexetext
 	#set pt# (NULL)
-	sv ps%pexesym
+	sv ps%%pexesym
 	set ps# (NULL)
 	#and set data null here, it is useless there for objects call
 	set pexe# (NULL)   #data
@@ -103,7 +103,7 @@ if argc>=(1+3)  #0 is all the time
 	set frees.execdynsym (NULL)
 	set frees.execdynstr (NULL)
 
-	sv pobjects%pobjects
+	sv pobjects%%pobjects
 	set pobjects# (NULL) #this is on the main plan, is after ss exec at frees
 
 	mult argc :
@@ -140,7 +140,7 @@ if argc>=(1+3)  #0 is all the time
 	if acall!=(NULL)
 		if ps#!=(NULL)
 			#replace if exe symtab
-			sv pexestr%pexestr
+			sv pexestr%%pexestr
 			call aftercall_replace(ps,pexestr,acall,datavaddr)
 
 			set s4c (NULL)  #for write skip
--- ocompiler-1.orig/ostrip/rel.s
+++ ocompiler-1/ostrip/rel.s
@@ -2,13 +2,13 @@
 
 function reloc(sv objects,sd daddr,sd datainneroffset,sd textinneroffset)
 	sd doffset;set doffset daddr
-	sv voffset%pexedatasize;   #this is after the new size was set
+	sv voffset%%pexedatasize;   #this is after the new size was set
 	set voffset voffset#
 	add voffset daddr
-	sv dphisic%pexedata
+	sv dphisic%%pexedata
 	set dphisic dphisic#
 	add dphisic datainneroffset
-	sv tphisic%pexetext
+	sv tphisic%%pexetext
 	set tphisic tphisic#
 	add tphisic textinneroffset
 	while objects#!=(NULL)
--- ocompiler-1.orig/ostrip/throwless.s
+++ ocompiler-1/ostrip/throwless.s
@@ -73,7 +73,7 @@ function verbose(sd action)
 			inc n
 		else
 		#if action==(verbose_flush)
-			chars out#10+1   ;#max 32
+			char out#10+1   ;#max 32
 			call sprintf(#out,"%u",n)
 			call Message(#out)
 			set n 0
@@ -147,18 +147,19 @@ function objs_concat(sv objects,sv pdata
 endfunction
 
 function memtomem(sv dest,sv src,sd size)
-	#optimized?
-	const stack_size_trail=:-1
-	sd opt=~stack_size_trail
+	#optimized
+	sd opt=:-1
 	and opt size
+
 	sub size opt
-	add opt dest
-	while dest!=opt
+	add size dest
+	while dest!=size
 		set dest# src#
 		incst dest
 		incst src
 	endwhile
-	add size dest
+
+	add size opt
 	while dest!=size
 		set dest#s^ src#s^
 		inc dest
--- ocompiler-1.orig/ounused/ounused.s
+++ ocompiler-1/ounused/ounused.s
@@ -10,7 +10,7 @@ include "./throwless.s"
 
 function messagedelim()
 	sv st^stderr
-	Chars visiblemessage={0x0a,0}
+	Char visiblemessage={0x0a,0}
 	Call fprintf(st#,#visiblemessage)
 endfunction
 Function Message(ss text)
--- ocompiler-1.orig/src/files/actions/fileformat.s
+++ ocompiler-1/src/files/actions/fileformat.s
@@ -4,13 +4,13 @@ if errormsg!=(noerror)
 	call msgerrexit(errormsg)
 endif
 
-#also needed at dtnb
-#sub datasecSize datasecReg
+#also needed at dtnb and old
+sub datasecSize datasecReg
 
 if nobits_virtual==(No)
 	#in case old style virtual
-	#setcall errormsg set_reserve(datasecSize)
-	setcall errormsg set_reserve(nobitssecReg)
+	setcall errormsg set_reserve(datasecSize)
+	#setcall errormsg set_reserve(nobitssecReg)
 	if errormsg!=(noerror)
 		Call msgerrexit(errormsg)
 	endif
--- ocompiler-1.orig/src/files/actions/fileformat/elf_resolve.s
+++ ocompiler-1/src/files/actions/fileformat/elf_resolve.s
@@ -48,11 +48,11 @@ If object==false
 		#add here, next will be calculations and these will be above
 		data secstrs_off_atnames#1
 		setcall errormsg addtonames(ptrnull,#secstrs_off_atnames)
-		chars dynstr_c=".dynstr";data dynstr#1
+		char dynstr_c=".dynstr";data dynstr#1
 		#shstrtab
 		setcall errormsg addtonames(#dynstr_c,#dynstr)
 		If errormsg!=noerr;Call msgerrexit(errormsg);EndIf
-		chars dynsec_c=".dynamic";data dynsec#1
+		char dynsec_c=".dynamic";data dynsec#1
 		setcall errormsg addtonames(#dynsec_c,#dynsec)
 		If errormsg!=noerr;Call msgerrexit(errormsg);EndIf
 		#
@@ -310,7 +310,7 @@ Else
 	sd symind=symind
 
 	if nobits_virtual==(Yes)
-		SetCall errormsg elfaddsecs(dtnbstrtab,(SHT_NOBITS),elf_sec_flags_data,elf_sec_fileoff,nobitssecReg,(elf_sec_obj_align))
+		SetCall errormsg elfaddsecs(dtnbstrtab,(SHT_NOBITS),elf_sec_flags_data,elf_sec_fileoff,datasecSize,(elf_sec_obj_align))
 		If errormsg!=noerr
 			Call msgerrexit(errormsg)
 		EndIf
@@ -347,7 +347,7 @@ Else
 		set syment elf32_dyn_d_val_syment;set relent elf32_dyn_d_val_relent
 	endelse
 
-	Chars elfsymtab=".symtab"
+	Char elfsymtab=".symtab"
 	Str ptrelfsymtab^elfsymtab
 	Data SHT_SYMTAB=2
 
@@ -358,7 +358,7 @@ Else
 
 	Data SHT_RELA=4
 
-	Chars elfreldata=".rela.data"
+	Char elfreldata=".rela.data"
 	Str ptrelfreldata^elfreldata
 	Add elf_sec_fileoff tableReg
 	SetCall errormsg elfaddstrsec(ptrelfreldata,SHT_RELA,null,elf_sec_fileoff,ptraddresses,symind,dataind,dwordsize,relent)
@@ -366,7 +366,7 @@ Else
 		Call msgerrexit(errormsg)
 	EndIf
 
-	Chars elfreltxt=".rela.text"
+	Char elfreltxt=".rela.text"
 	Str ptrelfreltxt^elfreltxt
 	Add elf_sec_fileoff addressesReg
 	SetCall errormsg elfaddstrsec(ptrelfreltxt,SHT_RELA,null,elf_sec_fileoff,ptrextra,symind,codeind,dwordsize,relent)
@@ -374,7 +374,7 @@ Else
 		Call msgerrexit(errormsg)
 	EndIf
 
-	Chars elfstrtab=".strtab"
+	Char elfstrtab=".strtab"
 	Str ptrelfstrtab^elfstrtab
 	Add elf_sec_fileoff extraReg
 	SetCall errormsg elfaddstrsec(ptrelfstrtab,(SHT_STRTAB),null,elf_sec_fileoff,ptrnames,null,null,bytesize,null)
--- ocompiler-1.orig/src/files/actions/fileformat/pe_struct.s
+++ ocompiler-1/src/files/actions/fileformat/pe_struct.s
@@ -28,7 +28,7 @@ Data pdos^dos_header
 Data dos_size=dossize
 Call memset(pdos,null,dos_size)
 
-Chars mz="MZ"
+Char mz="MZ"
 Str pmz^mz
 Call memtomem(pdos,pmz,wordsize)
 
@@ -50,9 +50,9 @@ Sub pdoscrs dwordsize
 Data e_lfanew=0x80
 Set pdoscrs# e_lfanew
 
-Chars stubcode={0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21}
-Chars stubstr="This program cannot be run in DOS mode."
-Chars stubstrend={0xd,0xa,0x24,0,0,0,0,0,0,0,0}
+Char stubcode={0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21}
+Char stubstr="This program cannot be run in DOS mode."
+Char stubstrend={0xd,0xa,0x24,0,0,0,0,0,0,0,0}
 Data pstub^stub
 Data stubsz^stubstr
 Data pstubcode^stubcode
--- ocompiler-1.orig/src/files/actions/main.s
+++ ocompiler-1/src/files/actions/main.s
@@ -135,7 +135,8 @@ While includesReg!=null
 
 						set skipfree 1
 
-						set functionTagIndex 0
+						set functionTagIndex 0   #used after pass_init for alloc,through pass_calls,pass_write with scope store/store class
+						#and scopes alloc
 					endif
 				EndElse
 			endif
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -13,7 +13,7 @@ if dot_comma_end==0
 endif
 
 #test the line size and set the size of line break
-Chars newline=asciireturn
+Char newline=asciireturn
 Data linebreaksize#1
 Set linebreaksize bytesize
 
@@ -34,7 +34,7 @@ while loop==2
 		if is_comment_multiline==0
 			set loop 1
 			if pointer!=content
-				Chars carriage=asciicarriage
+				Char carriage=asciicarriage
 				ss testcontent
 				set testcontent pointer
 				dec testcontent
@@ -106,7 +106,7 @@ if loop==1
 						ElseIf commandset==(cPRIMSEC)
 						ElseIf commandset==(cONEARG)
 						Elseif commandset==(cCALL)
-						#at object is difficult, there is no virtual, ostrip is in the project
+						#before .dtnb: at object is difficult, there is no virtual, ostrip is in the project
 						elseIf commandset==(cIMPORTLINK) #needing importx here
 						elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
 						ElseIf commandset==(cLIBRARY)
@@ -214,7 +214,7 @@ if loop==1
 					setcall was_whitespaces spaces(pcontent,pcomsize)
 					If comsize!=zero
 						if content#!=(commentascii)
-							Chars _unreccomaftererr="Unrecognized data after command."
+							Char _unreccomaftererr="Unrecognized data after command."
 							Str unreccomaftererr^_unreccomaftererr
 							Set errormsg unreccomaftererr
 						else
--- ocompiler-1.orig/src/files/actions/main/index/aftercall.s
+++ ocompiler-1/src/files/actions/main/index/aftercall.s
@@ -20,7 +20,7 @@ else
 		SetCall errormsg entryvarsfns(pcontent#,pcomsize#)
 		if errormsg==(noerror)
 			sd ac_current_data;setcall ac_current_data get_img_vdata_dataReg()
-			SetCall errormsg addaref(ac_current_data,pcontent,pcomsize,comsize,(charsnumber),(dummy_mask))
+			SetCall errormsg addaref(ac_current_data,pcontent,pcomsize,comsize,(charnumber),(dummy_mask))
 			if errormsg==(noerror)
 				SetCall errormsg addtosec(#null,(aftercalldeclaresize),ptrdatasec)
 				if errormsg==(noerror)
--- ocompiler-1.orig/src/files/actions/main/index/callex.s
+++ ocompiler-1/src/files/actions/main/index/callex.s
@@ -22,21 +22,21 @@ if errormsg==(noerror)
 				if errormsg==(noerror)
 					const callex_x86_64_start=!
 					#same but with 2 rex, inc je, -2 jmp, and 3* at sib
-					chars callex_x86_64={REX_Operand_64,0x81,0xf9,0,0,0,0,0x74,8,REX_Operand_64,0xFF,1*toregopcode|ecxregnumber|regregmod,0xff,6*toregopcode|espregnumber,3*tomod|callex_regopcode,0xEB,0xef}
+					char callex_x86_64={REX_Operand_64,0x81,0xf9,0,0,0,0,0x74,8,REX_Operand_64,0xFF,1*toregopcode|ecxregnumber|regregmod,0xff,6*toregopcode|espregnumber,3*tomod|callex_regopcode,0xEB,0xef}
 					set callex_sz (!-callex_x86_64_start);set callex_data #callex_x86_64
 				endif
 			else
 				const callex_start=!
 				# ## cmp ecx,0
-				chars callex_i386={0x81,0xf9};data *=0
+				char callex_i386={0x81,0xf9};data *=0
 				#je ###
-				chars *={0x74};chars *callex_je=7
+				char *={0x74};char *callex_je=7
 				#dec ecx
-				chars *=0xFF;chars *=1*toregopcode|ecxregnumber|0xc0
+				char *=0xFF;char *=1*toregopcode|ecxregnumber|0xc0
 				# push [eax+ecx*4]
-				chars *callex_c2=0xff;chars *=6*toregopcode|espregnumber;chars *callex_sib=2*tomod|callex_regopcode
+				char *callex_c2=0xff;char *=6*toregopcode|espregnumber;char *callex_sib=2*tomod|callex_regopcode
 				#jmp ##
-				chars *=0xEB;chars *callex_jmp=0xf1
+				char *=0xEB;char *callex_jmp=0xf1
 				#
 				set callex_sz (!-callex_start);set callex_data #callex_i386
 			endelse
--- ocompiler-1.orig/src/files/actions/main/index/endfunction.s
+++ ocompiler-1/src/files/actions/main/index/endfunction.s
@@ -2,7 +2,7 @@
 
 if parses==(pass_init)
 	if innerfunction==false
-		Chars unexef="Unexpected ENDFUNCTION command."
+		Char unexef="Unexpected ENDFUNCTION command."
 		Str unexeferr^unexef
 		Set errormsg unexeferr
 	else
--- ocompiler-1.orig/src/files/actions/main/index/format.s
+++ ocompiler-1/src/files/actions/main/index/format.s
@@ -2,18 +2,18 @@
 Data formatresponse#1
 
 #exe format
-Chars exeformat="EXE"
+Char exeformat="EXE"
 Str ptrexeformat^exeformat
 SetCall formatresponse stratmemspc(pcontent,pcomsize,ptrexeformat,false)
 
 #elf format
 If formatresponse==false
-	Chars elfformat="ELF"
+	Char elfformat="ELF"
 	Str ptrelfformat^elfformat
 	SetCall formatresponse stratmemspc(pcontent,pcomsize,ptrelfformat,false)
 	If formatresponse==true
 		Set fileformat elf_unix
-		Chars elfobjformat="OBJ"
+		Char elfobjformat="OBJ"
 		Str ptrelfobjformat^elfobjformat
 		Data elfobjformresp#1
 
@@ -46,13 +46,13 @@ If formatresponse==false
 				Set object true
 				SetCall errormsg elfaddstrsym(ptrnull,null,null,null,null,null,ptrtable)
 				If errormsg==noerr
-					Chars elfdata=".data"
+					Char elfdata=".data"
 					Str ptrelfdata^elfdata
 					Data dataind=dataind
 					Set datastrtab namesReg
 					SetCall errormsg elfaddstrsym(ptrelfdata,null,null,STT_SECTION,(STB_LOCAL),dataind,ptrtable)
 					If errormsg==noerr
-						Chars elftext=".text"
+						Char elftext=".text"
 						Str ptrelftext^elftext
 						Data codeind=codeind
 						Set codestrtab namesReg
@@ -85,11 +85,11 @@ EndElse
 
 If errormsg==noerr
 	If formatresponse==false
-		Chars unrecform="Unrecognized file format."
+		Char unrecform="Unrecognized file format."
 		Str ptrunrecform^unrecform
 		Set errormsg ptrunrecform
 	ElseIf formatdefined==2
-		Chars nomoreformats="The FORMAT command can be defined at the start and only once."
+		Char nomoreformats="The FORMAT command can be defined at the start and only once."
 		Str ptrnomoreformats^nomoreformats
 		Set errormsg ptrnomoreformats
 	EndElseIf
--- ocompiler-1.orig/src/files/actions/main/index/function.s
+++ ocompiler-1/src/files/actions/main/index/function.s
@@ -1,10 +1,10 @@
 
 If innerfunction==true
-	Chars finferr="There is already another function started."
+	Char finferr="There is already another function started."
 	Str ptrfinf^finferr
 	Set errormsg ptrfinf
 ElseIf programentrypoint!=codesecReg
-	Chars funcafterentry="Unavailable FUNCTION/ENTRY[...] statement; The start address was at File: %s; Line: %s."
+	Char funcafterentry="Unavailable FUNCTION/ENTRY[...] statement; The start address was at File: %s; Line: %s."
 	Str fnafteren^funcafterentry
 
 	call dwtomem(entrylinenumber,uint32s)
--- ocompiler-1.orig/src/files/actions/main/index/hex.s
+++ ocompiler-1/src/files/actions/main/index/hex.s
@@ -1,3 +1,3 @@
 
 
-setcall errormsg enumcommas(pcontent,pcomsize,pcomsize#,(fndecandgroup),(charsnumber),(NULL),(hexenum)) #there are 4 more arguments but are not used
+setcall errormsg enumcommas(pcontent,pcomsize,pcomsize#,(fndecandgroup),(charnumber),(NULL),(hexenum)) #there are 4 more arguments but are not used
--- ocompiler-1.orig/src/files/actions/main/index/i3.s
+++ ocompiler-1/src/files/actions/main/index/i3.s
@@ -1,6 +1,6 @@
 
 If comsize==zero
-	Chars interrupt={0xCC}
+	Char interrupt={0xCC}
 	Str ptrinterrupt^interrupt
 	SetCall errormsg addtosec(ptrinterrupt,bytesize,ptrcodesec)
 endif
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -7,7 +7,7 @@ Data ptrimpescapes^impescapes
 
 If object==false
 	If implibsstarted==false
-		Chars noliberr="Unexpected IMPORT statement; there is no LIBRARY opened."
+		Char noliberr="Unexpected IMPORT statement; there is no LIBRARY opened."
 		Str ptrnoliberr^noliberr
 		Set errormsg ptrnoliberr
 	EndIf
@@ -59,7 +59,7 @@ If errormsg==noerr
 					#after this will find var in vars/fns and if not add a new
 					sd imp_size;setcall imp_size find_whitespaceORcomment(content,comsize)
 					If imp_size==zero
-						Chars missimportref="Import name for compiler must be specified after the name for output."
+						Char missimportref="Import name for compiler must be specified after the name for output."
 						Str ptrimpref^missimportref
 						Set errormsg ptrimpref
 					Else
--- ocompiler-1.orig/src/files/actions/main/index/library.s
+++ ocompiler-1/src/files/actions/main/index/library.s
@@ -20,7 +20,7 @@ Else
 		Set d_un namesReg
 		SetCall errormsg addtosec(ptr_d_tag,sizeofElf32_Dyn,ptrtable)
 	Else
-		Chars libatobj="LIBRARY statement is not used at object format."
+		Char libatobj="LIBRARY statement is not used at object format."
 		Str ptrlibatobj^libatobj
 		Set errormsg ptrlibatobj
 	EndElse
--- ocompiler-1.orig/src/files/actions/pathout.s
+++ ocompiler-1/src/files/actions/pathout.s
@@ -18,7 +18,7 @@ Sub minpath unit
 Sub cursorpath unit
 
 While minpath!=cursorpath
-	Chars teststr#1
+	Char teststr#1
 	Set teststr cursorpath#
 	If teststr==dot
 		Set pointofpathout cursorpath
@@ -33,12 +33,12 @@ Data extension#1
 Set extension null
 
 If fileformat==pe_exec
-	Chars exe=".exe"
+	Char exe=".exe"
 	Str pexe^exe
 	Set extension pexe
 Else
 	If object==true
-		Chars obj=".o"
+		Char obj=".o"
 		Str pobj^obj
 		Set extension pobj
 	EndIf
--- ocompiler-1.orig/src/files/actions/setdefdir.s
+++ ocompiler-1/src/files/actions/setdefdir.s
@@ -1,11 +1,11 @@
 
 
-Chars safedirdata="./"
+Char safedirdata="./"
 Str safedir^safedirdata
 
 Str filenameloc#1
 SetCall filenameloc endoffolders(path_nofree)
-Chars storeachar#1
+Char storeachar#1
 Set storeachar filenameloc#
 Set filenameloc# null
 
@@ -40,7 +40,7 @@ Add safecurrentdirloc wordsize
 Call memtomem(safecurrentdirloc,filenameloc,movesize)
 
 if logbool==true
-	chars logfileextension=".log"
+	char logfileextension=".log"
 	str logextension^logfileextension
 
 	setcall errormsg maxpathverif(safecurrentdirtopath,logextension)
@@ -61,7 +61,7 @@ if logbool==true
 			sd log_main_folder
 			setcall log_main_folder getcwd((NULL),0)
 			if log_main_folder==(NULL)
-				chars getcwd_first="first getcwd error"
+				char getcwd_first="first getcwd error"
 				set errormsg #getcwd_first
 			else
 				setcall errormsg addtolog_withchar_parses(log_main_folder,(log_pathfolder),(TRUE))
--- ocompiler-1.orig/src/files/actions/write.s
+++ ocompiler-1/src/files/actions/write.s
@@ -5,7 +5,7 @@ Data err#1
 
 SetCall err openfile(ptrfileout,safecurrentdirtopath,_open_write)
 If err!=noerr
-	Chars fouterr="Error with the file out open function."
+	Char fouterr="Error with the file out open function."
 	Str fileouterr^fouterr
 	Call msgerrexit(fileouterr)
 EndIf
--- ocompiler-1.orig/src/files/functions/64/align.s
+++ ocompiler-1/src/files/functions/64/align.s
@@ -39,7 +39,7 @@ function stack_align(sd nr)
 		endelseif
 		#Stack aligned on 16 bytes. Depending on the number of arguments
 		vdata code%%ptr_codesec
-		chars align={REX_Operand_64,0x83,0xEC,8}
+		char align={REX_Operand_64,0x83,0xEC,8}
 		sd err
 		SetCall err addtosec(#align,(4),code)
 		return err
@@ -164,9 +164,9 @@ function align_entryscope()
 	if type!=0
 		#bt ebx,3 (offset 3) x8 or x0
 		#rex to bt the first byte it is useless
-		chars bt={twobytesinstruction_byte1,bt_instruction,bt_reg_imm8|ebxregnumber,3}
+		char bt={twobytesinstruction_byte1,bt_instruction,bt_reg_imm8|ebxregnumber,3}
 		#j(c|nc);sub rbx,8
-		chars jump#1;chars *=4;chars *={REX_Operand_64,0x83,RegReg*tomod|(5*toregopcode)|ebxregnumber,8}
+		char jump#1;char *=4;char *={REX_Operand_64,0x83,RegReg*tomod|(5*toregopcode)|ebxregnumber,8}
 		if type==(even_align)
 			#there are more even calls to align
 			#Jump short if not carry
--- ocompiler-1.orig/src/files/functions/64/bit.s
+++ ocompiler-1/src/files/functions/64/bit.s
@@ -71,7 +71,7 @@ endfunction
 ##REX_W
 function rex_w(sd p_err)
 	Data code%%ptr_codesec
-	chars r=REX_Operand_64
+	char r=REX_Operand_64
 	SetCall p_err# addtosec(#r,1,code)
 endfunction
 #er
@@ -141,6 +141,14 @@ function stack64_enlarge(sd val)
 	endif
 	return val
 endfunction
+function stack64_base(sv pdata)
+	sd is_arg;setcall is_arg stackrelativebit(pdata#)
+	if is_arg==0
+		return 0
+	endif
+	sd val;setcall val stack64_enlarge((stackinitpush+dwsz))  #ebp/ebx+return
+	return val
+endfunction
 
 #setx
 
@@ -157,17 +165,17 @@ function convdata(sd type,sd dest,sd fna
 		return nr_of_args   #ms_convention or lin
 	elseif type==(convdata_call)
 		#rdi
-		chars hex_1={REX_Operand_64,moveatprocthemem,ediregnumber*toregopcode|espregnumber,0x24,0}
+		char hex_1={REX_Operand_64,moveatprocthemem,ediregnumber*toregopcode|espregnumber,0x24,0}
 		#rsi
-		chars hex_2={REX_Operand_64,moveatprocthemem,esiregnumber*toregopcode|disp8mod|espregnumber,0x24,8}
+		char hex_2={REX_Operand_64,moveatprocthemem,esiregnumber*toregopcode|disp8mod|espregnumber,0x24,8}
 		#rcx/rdx,rsp+
-		chars hex_3={REX_Operand_64,moveatprocthemem};chars c3#1;chars *=0x24;chars c3o#1
+		char hex_3={REX_Operand_64,moveatprocthemem};char c3#1;char *=0x24;char c3o#1
 		#rdx/rcx,rsp+
-		chars hex_4={REX_Operand_64,moveatprocthemem};chars c4#1;chars *=0x24;chars c4o#1
+		char hex_4={REX_Operand_64,moveatprocthemem};char c4#1;char *=0x24;char c4o#1
 		#r8,rsp+
-		chars hex_5={REX_R8_15,moveatprocthemem,0x44,0x24};chars c5o#1
+		char hex_5={REX_R8_15,moveatprocthemem,0x44,0x24};char c5o#1
 		#r9,rsp+
-		chars hex_6={REX_R8_15,moveatprocthemem,0x4C,0x24};chars c6o#1
+		char hex_6={REX_R8_15,moveatprocthemem,0x4C,0x24};char c6o#1
 		if nr_of_args==(lin_convention)
 			set dest# #hex_1
 			incst dest;set dest# #hex_2
@@ -181,37 +189,37 @@ function convdata(sd type,sd dest,sd fna
 	elseif type==(convdata_fn)
 		const functionxlin_start=!
 		#pop a
-		chars functionxlin_code=0x58
+		char functionxlin_code=0x58
 		#sub esp,conv8
-		chars *={REX_Operand_64,0x83,5*toregopcode|regregmod|espregnumber};chars *=lin_convention*qwsz
+		char *={REX_Operand_64,0x83,5*toregopcode|regregmod|espregnumber};char *=lin_convention*qwsz
 		#push a
-		chars *=0x50
+		char *=0x50
 		const functionxlin_shadow=!-functionxlin_start
 
-		chars *={REX_Operand_64,moveatmemtheproc,ediregnumber*toregopcode|disp8mod|espregnumber,0x24,8}
+		char *={REX_Operand_64,moveatmemtheproc,ediregnumber*toregopcode|disp8mod|espregnumber,0x24,8}
 		const conv_fn_b1=!-functionxlin_start
 
-		chars *={REX_Operand_64,moveatmemtheproc,esiregnumber*toregopcode|disp8mod|espregnumber,0x24,16}
+		char *={REX_Operand_64,moveatmemtheproc,esiregnumber*toregopcode|disp8mod|espregnumber,0x24,16}
 		const functionx_start=!
 		const conv_fn_b2=!-functionxlin_start
 
 		#mov [rsp+(8h/18h)],rcx/rdx
-		chars functionx_code={REX_Operand_64,moveatmemtheproc};chars f3#1;chars *=0x24;chars f3o#1
+		char functionx_code={REX_Operand_64,moveatmemtheproc};char f3#1;char *=0x24;char f3o#1
 		const conv_fn_a1=!-functionx_start
 		const conv_fn_b3=!-functionxlin_start
 
 		#mov [rsp+(10h/20h)],rdx/rcx
-		chars *={REX_Operand_64,moveatmemtheproc};chars f4#1;chars *=0x24;chars f4o#1
+		char *={REX_Operand_64,moveatmemtheproc};char f4#1;char *=0x24;char f4o#1
 		const conv_fn_a2=!-functionx_start
 		const conv_fn_b4=!-functionxlin_start
 
 		#mov [rsp+(18h/28h)],r8
-		chars *={REX_R8_15,moveatmemtheproc,0x44,0x24};chars f5o#1
+		char *={REX_R8_15,moveatmemtheproc,0x44,0x24};char f5o#1
 		const conv_fn_a3=!-functionx_start
 		const conv_fn_b5=!-functionxlin_start
 
 		#mov [rsp+(20h/30h)],r9
-		chars *={REX_R8_15,moveatmemtheproc,0x4C,0x24};chars f6o#1
+		char *={REX_R8_15,moveatmemtheproc,0x4C,0x24};char f6o#1
 
 		if nr_of_args==(ms_convention)
 			if fnargs==0
@@ -297,14 +305,14 @@ function function_call_64f(sd hex_n,sd c
 			if nr_of_args<conv
 				#shadow space
 				#sub esp,x;default 4 args stack space convention
-				chars hex_w={REX_Operand_64,0x83,0xEC};chars argspush#1
+				char hex_w={REX_Operand_64,0x83,0xEC};char argspush#1
 				set argspush nr_of_args;sub argspush conv;mult argspush (-1*qwsz)
 				SetCall err addtosec(#hex_w,4,code)
 			endif
 		elseif nr_of_args>0
 			#lin_convention
 			#add esp,x
-			chars hex_x={REX_Operand_64,0x83,regregmod|espregnumber};chars adjuster#1
+			char hex_x={REX_Operand_64,0x83,regregmod|espregnumber};char adjuster#1
 			if nr_of_args>conv;set adjuster conv;else;set adjuster nr_of_args;endelse
 			mult adjuster (qwsz)
 			SetCall err addtosec(#hex_x,4,code)
@@ -325,39 +333,39 @@ function function_call_64(sd is_callex)
 	endif
 	##
 	#mov edx,eax
-	chars find_args={REX_Operand_64,0x8b,edxregnumber|regregmod}
+	char find_args={REX_Operand_64,0x8b,edxregnumber|regregmod}
 	SetCall err addtosec(#find_args,3,code);If err!=(noerror);Return err;EndIf
 	#
 	#convention and shadow space
 	#cmp rax,imm32
-	chars cmp_je={REX_Operand_64,0x3d};data cmp_imm32#1
+	char cmp_je={REX_Operand_64,0x3d};data cmp_imm32#1
 	set cmp_imm32 conv;dec cmp_imm32
 	#jump if above
-	chars *callex_jump=0x77;chars j_off#1
+	char *callex_jump=0x77;char j_off#1
 	#
 	#convention gdb view,and gui view
 	#push a
-	chars callex_conv=0x50
+	char callex_conv=0x50
 	#neg al
-	chars *={0xf6,3*toregopcode|regregmod}
+	char *={0xf6,3*toregopcode|regregmod}
 	#add al conv
-	chars *=0x04;chars conv_neg#1
+	char *=0x04;char conv_neg#1
 	#mov cl 5
-	chars *={0xb1,5}
+	char *={0xb1,5}
 	#mult al cl
-	chars *={0xf6,4*toregopcode|ecxregnumber|regregmod}
+	char *={0xf6,4*toregopcode|ecxregnumber|regregmod}
 	#call
-	chars *={0xe8,0,0,0,0}
+	char *={0xe8,0,0,0,0}
 	#pop c
-	chars *=0x59
+	char *=0x59
 	#add rax rcx    can be --image-base=int64 but more than 0xff000000 x64 dbg says invalid but there is int64 rip in parent x64 debug
-	chars *={REX_Operand_64,0x01,ecxregnumber|regregmod}
+	char *={REX_Operand_64,0x01,ecxregnumber|regregmod}
 	#pop a
-	chars *=0x58
+	char *=0x58
 	#add rcx,imm8
-	chars *={REX_Operand_64,0x83,ecxregnumber|regregmod,11}
+	char *={REX_Operand_64,0x83,ecxregnumber|regregmod,11}
 	#j cl
-	chars *={0xff,4*toregopcode|ecxregnumber|regregmod}
+	char *={0xff,4*toregopcode|ecxregnumber|regregmod}
 	#
 	set conv_neg conv
 	set j_off 25
@@ -377,15 +385,15 @@ function function_call_64(sd is_callex)
 	#shadow space
 	if conv==(ms_convention)
 		#neg al
-		chars callex_shadow={0xf6,3*toregopcode|regregmod}
+		char callex_shadow={0xf6,3*toregopcode|regregmod}
 		#add al conv-1
-		chars *=0x04;chars shadow_neg#1
+		char *=0x04;char shadow_neg#1
 		#push qwordsz
-		chars *={0x6a,qwsz}
+		char *={0x6a,qwsz}
 		#mul al [esp]
-		chars *={0xf6,4*toregopcode|espregnumber,espregnumber*toregopcode|espregnumber}
+		char *={0xf6,4*toregopcode|espregnumber,espregnumber*toregopcode|espregnumber}
 		#sub rsp,rax
-		chars *={REX_Operand_64,0x2b,espregnumber*toregopcode|regregmod}
+		char *={REX_Operand_64,0x2b,espregnumber*toregopcode|regregmod}
 		#
 		set shadow_neg conv;dec shadow_neg
 		set j_off 12
@@ -394,18 +402,18 @@ function function_call_64(sd is_callex)
 	else
 		#lin_convention
 		#cmp rax,imm32
-		chars callex_unshadow={REX_Operand_64,0x3d};data *cmp_imm32=lin_convention
+		char callex_unshadow={REX_Operand_64,0x3d};data *cmp_imm32=lin_convention
 		#jump if below or equal
-		chars *callex_jump=0x76;chars *j_off=10
-		chars *rax_conv={REX_Operand_64,0xb8};data *={lin_convention,0}
+		char *callex_jump=0x76;char *j_off=10
+		char *rax_conv={REX_Operand_64,0xb8};data *={lin_convention,0}
 		#push qwordsz
-		chars *={0x6a,qwsz}
+		char *={0x6a,qwsz}
 		#inc al
-		chars *={0xfe,regregmod}
+		char *={0xfe,regregmod}
 		#mul al [esp]
-		chars *={0xf6,4*toregopcode|espregnumber,espregnumber*toregopcode|espregnumber}
+		char *={0xf6,4*toregopcode|espregnumber,espregnumber*toregopcode|espregnumber}
 		#add rsp,rax
-		chars *={REX_Operand_64,0x03,espregnumber*toregopcode|regregmod}
+		char *={REX_Operand_64,0x03,espregnumber*toregopcode|regregmod}
 		#
 		SetCall err addtosec(#callex_unshadow,28,code)
 	endelse
@@ -426,35 +434,35 @@ function callex64_call()
 	#Stack aligned on 16 bytes.
 	const callex64_start=!
 	#bt esp,3 (bit offset 3)        rsp for 3 bits is useless
-	chars callex64_code={0x0F,0xBA,bt_reg_imm8|espregnumber,3}
+	char callex64_code={0x0F,0xBA,bt_reg_imm8|espregnumber,3}
 	#jc @ (jump when rsp=....8)
-	chars *=0x72;chars *=7+2+4+2+2
+	char *=0x72;char *=7+2+4+2+2
 	#7cmp ecx,5
-	chars *={REX_Operand_64,0x81,0xf9};data jcase1#1
+	char *={REX_Operand_64,0x81,0xf9};data jcase1#1
 	set jcase1 conv;inc jcase1
 	#2jb $
-	chars *=0x72;chars *=4+2+2+7+2+4+2+4
+	char *=0x72;char *=4+2+2+7+2+4+2+4
 	#4bt ecx,0
-	chars *={0x0F,0xBA,bt_reg_imm8|ecxregnumber,0}
+	char *={0x0F,0xBA,bt_reg_imm8|ecxregnumber,0}
 	#2jc %
-	chars *=0x72;chars *=2+7+2+4+2
+	char *=0x72;char *=2+7+2+4+2
 	#2jmp $
-	chars *=0xEB;chars *=7+2+4+2+4
+	char *=0xEB;char *=7+2+4+2+4
 	#7@ cmp ecx,5
-	chars *={REX_Operand_64,0x81,0xf9};data jcase2#1
+	char *={REX_Operand_64,0x81,0xf9};data jcase2#1
 	set jcase2 conv;inc jcase2
 	#2jb %
-	chars *=0x72;chars *=4+2
+	char *=0x72;char *=4+2
 	#4bt ecx,0
-	chars *={0x0F,0xBA,bt_reg_imm8|ecxregnumber,0}
+	char *={0x0F,0xBA,bt_reg_imm8|ecxregnumber,0}
 	#2jc $
-	chars *=0x72;chars *=4
+	char *=0x72;char *=4
 	#%
 	#4 sub rsp,8
-	chars *={REX_Operand_64,0x83,0xEC};chars *=8
+	char *={REX_Operand_64,0x83,0xEC};char *=8
 	#$
 	#mov rdx,rcx
-	chars *keep_nr_args={REX_Operand_64,0x8b,edxregnumber*toregopcode|ecxregnumber|regregmod}
+	char *keep_nr_args={REX_Operand_64,0x8b,edxregnumber*toregopcode|ecxregnumber|regregmod}
 	sd ptrcodesec%%ptr_codesec
 	sd err
 	SetCall err addtosec(#callex64_code,(!-callex64_start),ptrcodesec)
--- ocompiler-1.orig/src/files/functions/actions/argstwo.s
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -28,10 +28,10 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	Data eaxreg=eaxregnumber
 	Data ecxreg=ecxregnumber
 
-	Chars opprim#1
-	Chars opsec#1
-	Chars atprocthemem={moveatprocthemem}
-	Chars atmemtheproc={moveatmemtheproc}
+	Char opprim#1
+	Char opsec#1
+	Char atprocthemem={moveatprocthemem}
+	Char atmemtheproc={moveatmemtheproc}
 
 	sd imm
 	Data errnr#1
@@ -82,7 +82,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	call storefirst_isimm()
 
 	Data primcalltype#1
-	Chars two=2
+	Char two=2
 
 	Set primcalltype false
 
@@ -99,10 +99,10 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		if subtype==(cSET)
 			Set opprim atmemtheproc
 		ElseIf subtype==(cADD)
-			Chars addprim={0x01}
+			Char addprim={0x01}
 			Set opprim addprim
 		ElseIf subtype==(cSUB)
-			Chars subprim={0x29}
+			Char subprim={0x29}
 			Set opprim subprim
 		ElseIf subtype<=(cREM)
 			Set opprim atprocthemem
@@ -116,14 +116,14 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		ElseIf subtype<=(cXOR)
 			Set sameimportant false
 			If subtype==(cAND)
-				Chars andprim={0x21}
+				Char andprim={0x21}
 				Set opprim andprim
 			ElseIf subtype==(cOR)
-				Chars orprim={0x09}
+				Char orprim={0x09}
 				Set opprim orprim
 			Else
 			#(cXOR)
-				Chars xorprim={0x31}
+				Char xorprim={0x31}
 				Set opprim xorprim
 			EndElse
 		Else
@@ -146,12 +146,12 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		Data conditionmodrm#1
 		Set conditionmodrm condition#
 
-		Chars compare=0x39
+		Char compare=0x39
 		Set opprim compare
 
 		#imm specific
-		chars compimminitial={0x39}
-		chars compimmop#1
+		char compimminitial={0x39}
+		char compimmop#1
 		set compimmop compimminitial
 	EndElse
 
@@ -243,7 +243,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	If primcalltype==false
 		setcall imm getisimm()
 		if imm==true
-			#chars immtake=0xB8
+			#char immtake=0xB8
 			#set opsec immtake
 			#if divmul==(TRUE)
 			#	add opsec 1
@@ -262,18 +262,18 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 				setcall errnr writeop_promotes(dataargsec,opsec,sufixsec,regopcode,lowsec,comp_at_bigs)
 			else
 			#only take at prefix on regcode
-				setcall errnr writetake(regopcode,dataargsec)
+				setcall errnr writetake_offset(regopcode,dataargsec)
 				#call writeoperation_take(#errnr,dataargsec,sufixsec,regopcode,lowsec)
 				#pprefix is reset in the road at remind
 			endelse
-			call restore_argmask_ex(dataargsec)
+			#call restore_argmask_ex(dataargsec)
 		endelse
 		If errnr!=noerr
 			Return errnr
 		EndIf
 	Elseif divmul==(TRUE)
 		#only at multcall and divcall
-		chars transferreturntoecx={0x89,0xc1}
+		char transferreturntoecx={0x89,0xc1}
 		str ptrcall^transferreturntoecx
 		data calltransfersize=2
 		if big==(TRUE)
@@ -306,9 +306,9 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 	If divmul==true
 		Data regreg=RegReg
 
-		Chars regopcodemult={5}
+		Char regopcodemult={5}
 		#If you don't care about the upper half, you can use either mul or imul
-		Chars regopcodeex#1
+		Char regopcodeex#1
 
 		If subtype==(cMULT)
 			Set regopcodeex regopcodemult
@@ -316,13 +316,13 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			setcall errnr div_prepare(lowprim,big,#regopcodeex)
 		EndElse
 
-		Chars opcodexini={0xF7}
-		Chars opcodeex#1
-		Chars modrmex#1
+		Char opcodexini={0xF7}
+		Char opcodeex#1
+		Char modrmex#1
 		Data sizeex=2
 		Str ptropcodeex^opcodeex
-		Chars storeex#1
-		chars storeexrm#1
+		Char storeex#1
+		char storeexrm#1
 
 		Set opcodeex opcodexini
 		Set storeex atmemtheproc
@@ -345,7 +345,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		EndIf
 
 		if lowprim==(TRUE)
-		# str# ss# chars
+		# str# ss# char
 		#rdx is ready
 			if rem==(FALSE)
 				setcall storeexrm formmodrm((mod_0),eaxreg,(edxregnumber))
@@ -364,9 +364,9 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 		if imm==true
 			#first imm true only at comparations
 			#continue to write the imm comparation(first is imm, second doesnt care)ex: 1(constant)==1(constant)->cmp ecx,eax (eax,ecx can be if switch)
-			chars immcompdata#1
+			char immcompdata#1
 			set immcompdata compimmop
-			chars *immcompdatamodrm=0xc1
+			char *immcompdatamodrm=0xc1
 			str immcomp^immcompdata
 			data immcompsz=2
 			if store_big==(TRUE)
@@ -379,8 +379,8 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 			EndIf
 		endif
 
-		Chars jumpifnotcond={0x0f}
-		Chars cond#1
+		Char jumpifnotcond={0x0f}
+		Char cond#1
 		#this will be resolved at endcond
 		Data *jump#1
 
@@ -391,7 +391,7 @@ Function twoargs_ex(sv ptrcontent,sd ptr
 
 		SetCall errnr addtosec(jumpcond,conddatasz,codeptr)
 	EndElseIf
-	call restore_argmask() #this must be after primwrite and/or divmul
+	#call restore_argmask() #this must be after primwrite and/or divmul
 	Return errnr
 EndFunction
 
@@ -436,7 +436,7 @@ endfunction
 
 function writeoper(sd takeindex,sd location,sd sufix)
 	sd err
-	setcall err writetake(takeindex,location)
+	setcall err writetake_offset(takeindex,location)
 	If err==(noerror)
 		if sufix==(TRUE)
 			sd t;setcall t sufix64(location)
@@ -484,75 +484,75 @@ function writeop_promotes(sd dataarg,sd
 	return err
 endfunction
 
-function argmasks()
-	value a#5 #aligned(no casts at the time of write)
-	return #a
-endfunction
-function store_argmask(sd data)
-	ss a
-	setcall a argmasks()
-	inc a#
-	if a#==2
-		add a (2*:)
-	endif
-	incst a
-	set a#v^ data
-	incst a
-	add data (maskoffset)
-	set a#d^ data#
-endfunction
-function restore_argmask()
-	call restore_argmask_ex((NULL))
-endfunction
-function restore_argmask_ex(sd original)
-	ss a
-	setcall a argmasks()
-	if a#>0
-		sv copy;set copy a
-		if a#==2
-			add copy (2*:)
-		endif
-		incst copy
-		sd data
-		set data copy#
-		if original!=(NULL)
-			if data!=original
-				ret  #this is the case when catsfirst secondnothing and try to restore second onfirst
-			endif
-		endif
-		incst copy
-		add data (maskoffset)
-		set data# copy#d^
-		dec a#
-	endif
-endfunction
+#function argmasks()
+#	value a#5 #aligned(no casts at the time of write)
+#	return #a
+#endfunction
+#function store_argmask(sd data)
+#	ss a
+#	setcall a argmasks()
+#	inc a#
+#	if a#==2
+#		add a (2*:)
+#	endif
+#	incst a
+#	set a#v^ data
+#	incst a
+#	add data (maskoffset)
+#	set a#d^ data#
+#endfunction
+#function restore_argmask()
+#	call restore_argmask_ex((NULL))
+#endfunction
+#function restore_argmask_ex(sd original)
+#	ss a
+#	setcall a argmasks()
+#	if a#>0
+#		sv copy;set copy a
+#		if a#==2
+#			add copy (2*:)
+#		endif
+#		incst copy
+#		sd data
+#		set data copy#
+#		if original!=(NULL)
+#			if data!=original
+#				ret  #this is the case when castfirst secondnothing and try to restore second onfirst
+#			endif
+#		endif
+#		incst copy
+#		add data (maskoffset)
+#		set data# copy#d^
+#		dec a#
+#	endif
+#endfunction
 
 
 #err
 function div_prepare(sd low,sd big,ss p_regopcode)
 	const bt_atdiv=bt_reg_imm8|eaxregnumber
 	vData codeptr%%ptr_codesec
-	Chars regopcodeidiv={7}
+	Char regopcodeidiv={7}
 	sd errnr
 	if big==(TRUE)
 	#bt rax,63;jc,;mov 0,edx;jmp,;mov -1,rdx
 	#In x64, any operation on a 32-bit register clears the top 32 bits of the corresponding 64-bit register too, so there's no need to use mov 0,rax (and xor rax, rax)
 		const div_prepare_high=!
-		chars high={REX_Operand_64,twobytesinstruction_byte1,bt_instruction,bt_atdiv,63,jnc_instruction,9,REX_Operand_64,mov_imm_to_rm,regregmod|edxregnumber,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
+		char high={REX_Operand_64,twobytesinstruction_byte1,bt_instruction,bt_atdiv,63,jnc_instruction,9,REX_Operand_64,mov_imm_to_rm,regregmod|edxregnumber,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
 		SetCall errnr addtosec(#high,(!-div_prepare_high),codeptr)
 		set p_regopcode# regopcodeidiv
 	elseif low==(FALSE)
 	#bt eax,31;jc,;mov 0,edx;jmp,;mov -1,edx
 		const div_prepare_mediu=!
-		chars mediu={twobytesinstruction_byte1,bt_instruction,bt_atdiv,31,jnc_instruction,7,atedximm,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
+		char mediu={twobytesinstruction_byte1,bt_instruction,bt_atdiv,31,jnc_instruction,7,atedximm,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
 		SetCall errnr addtosec(#mediu,(!-div_prepare_mediu),codeptr)
 		set p_regopcode# regopcodeidiv
 	else
 	#like the zero extension, this remains zero
 		const div_prepare_low=!
 	#bt eax,15;jc,;mov ah,0;jmp,;mov ah,-1
-	#	chars small={twobytesinstruction_byte1,bt_instruction,bt_atdiv,7,jnc_instruction,5,0xc6,regregmod|ahregnumber,-1,jmp_rel8,3,0xc6,regregmod|ahregnumber,0}
-		chars small={0xc6,regregmod|ahregnumber,0}
+	#	char small={twobytesinstruction_byte1,bt_instruction,bt_atdiv,7,jnc_instruction,5,0xc6,regregmod|ahregnumber,-1,jmp_rel8,3,0xc6,regregmod|ahregnumber,0}
+		char small={0xc6,regregmod|ahregnumber,0}
 		SetCall errnr addtosec(#small,(!-div_prepare_low),codeptr)
 		set p_regopcode# 6    #otherwise, 255/-1 idiv -255 exception (-128 to 127 allowed)
 	endelse
--- ocompiler-1.orig/src/files/functions/actions/dataparse.s
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -15,7 +15,7 @@ Function entryvarsfns(data content,data
 		EndIf
 	EndIf
 
-	Chars varfndup="Variable/Function name is already defined."
+	Char varfndup="Variable/Function name is already defined."
 	Str ptrvarfndup^varfndup
 	Return ptrvarfndup
 EndFunction
@@ -34,17 +34,14 @@ function get_img_vdata()
 	return value
 endfunction
 #same
-function get_img_vdata_dataReg()
-	sd reg;setcall reg get_img_vdata()
+function get_dataReg()
 	vdata ptrdataReg%%ptr_dataReg
-	add reg ptrdataReg#
-	return reg
+	return ptrdataReg#
 endfunction
 #same
-function get_img_vdata_dataSize()
-	sd reg;setcall reg get_img_vdata()
+function get_dataSize()
 	vdata ptrdataSize%ptrdataSize
-	add reg ptrdataSize#
+	sd reg;set reg ptrdataSize#
 	vdata ptr_nobits_virtual%ptr_nobits_virtual
 	if ptr_nobits_virtual#==(Yes)
 		#this is here because this function is called from fndecargs and from simple declare add reference
@@ -53,6 +50,18 @@ function get_img_vdata_dataSize()
 	endif
 	return reg
 endfunction
+#same
+function get_img_vdata_dataReg()
+	sd reg;setcall reg get_img_vdata()
+	addcall reg get_dataReg()
+	return reg
+endfunction
+#same
+function get_img_vdata_dataSize()
+	sd reg;setcall reg get_img_vdata()
+	addcall reg get_dataSize()
+	return reg
+endfunction
 
 #err
 Function addvarreference(sv ptrcontent,sd ptrsize,sd valsize,sd typenumber,sd mask,sd stackoffset,sd is_expand)
@@ -77,10 +86,12 @@ Function addvarreference(sv ptrcontent,s
 		if stack==false
 			if is_expand==(TRUE)
 				setcall value get_img_vdata_dataSize()
-				sd ptr_nobits_virtual%ptr_nobits_virtual
-				if ptr_nobits_virtual#==(Yes)
-					or mask (expandbit)
-				endif
+
+				#commented was before expandbit at class scopes
+				#sd ptr_nobits_virtual%ptr_nobits_virtual
+				#if ptr_nobits_virtual#==(Yes)
+				or mask (expandbit)
+				#endif
 			else
 				setcall value get_img_vdata_dataReg()
 			endelse
@@ -94,7 +105,7 @@ Function addvarreference(sv ptrcontent,s
 				#stack function argument
 				set value stackoffset
 				#data ebp_relative=ebpregnumber*tostack_relative
-				or mask (stack_relative)
+				or mask (stackrelativebit)
 			endelse
 			or mask (stackbit)
 			sd vbool
@@ -109,7 +120,7 @@ Function addvarreference(sv ptrcontent,s
 		Data pointer#1
 		SetCall pointer vars(content,valsize,structure)
 		If pointer!=zero
-			Chars constdup="Constant name is already defined."
+			Char constdup="Constant name is already defined."
 			Str pconstdup^constdup
 			Return pconstdup
 		EndIf
@@ -127,16 +138,16 @@ function addvarreferenceorunref(sv ptrco
 
 	Data zero=0
 	If valsize==zero
-		Chars _namecverr="Name for variable/constant expected."
+		Char _namecverr="Name for variable/constant expected."
 		vStr namecverr^_namecverr
 		Return namecverr
 	EndIf
 
 	data content#1
 	set content ptrcontent#
-	Chars firstchar#1
+	Char firstchar#1
 	Set firstchar content#
-	Chars unrefsign="*"
+	Char unrefsign="*"
 
 	If firstchar!=unrefsign
 		if firstchar==(asciicirc)   #throwless if on a throwing area
@@ -161,7 +172,7 @@ function addvarreferenceorunref(sv ptrco
 		EndIf
 	Else
 		If typenumber==(constantsnumber)
-			Chars unrefconstant="Unexpected unreference sign ('*') at constant declaration."
+			Char unrefconstant="Unexpected unreference sign ('*') at constant declaration."
 			vStr ptrunrefconstant^unrefconstant
 			Return ptrunrefconstant
 		EndIf
@@ -175,7 +186,7 @@ function getsign(str content,data size,s
 	data true=TRUE
 	data noerr=noerror
 	Data valsize#1
-	Chars equalsign=assignsign
+	Char equalsign=assignsign
 
 	SetCall valsize valinmem_pipes(content,size,equalsign,ptrsz)
 	If valsize!=size
@@ -183,12 +194,12 @@ function getsign(str content,data size,s
 		return noerr
 	endif
 
-	Chars reservesign=reserveascii
+	Char reservesign=reserveascii
 	SetCall valsize valinmem_pipes(content,size,reservesign,ptrsz)
 	If valsize!=size
 		Data constnr=constantsnumber
 		If typenumber==constnr
-			Chars constreserveerr="Unexpected reserve sign ('#') at constant declaration."
+			Char constreserveerr="Unexpected reserve sign ('#') at constant declaration."
 			Str ptrconstreserveerr^constreserveerr
 			Return ptrconstreserveerr
 		EndIf
@@ -196,14 +207,14 @@ function getsign(str content,data size,s
 		return noerr
 	endif
 
-	Data charsnr=charsnumber
-	Chars pointersign=pointersigndeclare
+	Data charnr=charnumber
+	Char pointersign=pointersigndeclare
 	SetCall valsize valinmem_pipes(content,size,pointersign,ptrsz)
 	If valsize!=size
-		If typenumber==charsnr
+		If typenumber==charnr
 			#grep    stackfilter2 4
 			if stack==(FALSE)
-				Chars ptrchar="Incorrect pointer sign ('^') used at CHARS declaration."
+				Char ptrchar="Incorrect pointer sign ('^') used at CHAR declaration."
 				Str ptrptrchar^ptrchar
 				Return ptrptrchar
 			endif
@@ -215,12 +226,12 @@ function getsign(str content,data size,s
 		return noerr
 	endif
 
-	Chars relsign=relsign
+	Char relsign=relsign
 	SetCall valsize valinmem_pipes(content,size,relsign,ptrsz)
 	If valsize!=size
-		Chars ptrrelchar="Incorrect relocation sign ('%') used at CHARS/CONST declaration."
+		Char ptrrelchar="Incorrect relocation sign ('%') used at CHAR/CONST declaration."
 		Str ptrptrrelchar^ptrrelchar
-		If typenumber==charsnr
+		If typenumber==charnr
 			#stackfilter2   grep5
 			if stack==(FALSE)
 				Return ptrptrrelchar
@@ -234,12 +245,12 @@ function getsign(str content,data size,s
 	endif
 
 	if stack==true
-		chars nosign=nosign
+		char nosign=nosign
 		Set assigntype# nosign
 		return noerr
 	endif
 
-	Chars _assignoperatorerr="One from the assign operators expected."
+	Char _assignoperatorerr="One from the assign operators expected."
 	Str assignoperatorerr^_assignoperatorerr
 	Return assignoperatorerr
 endfunction
--- ocompiler-1.orig/src/files/functions/actions/declare.s
+++ ocompiler-1/src/files/functions/actions/declare.s
@@ -2,7 +2,7 @@
 #err
 function declare(sv pcontent,sd pcomsize,sd bool_64,sd subtype,sd parses)
 	Data valsize#1
-	Chars sign#1
+	Char sign#1
 	#below also at virtual at get_reserve (with mask there)
 	sd is_stack
 	sd typenumber
@@ -66,7 +66,7 @@ function declare(sv pcontent,sd pcomsize
 					return (noerror)
 				endelse
 			else
-				if typenumber!=(charsnumber)
+				if typenumber!=(charnumber)
 					if typenumber!=(constantsnumber)
 						set unitsize (dwsz)
 					endif
@@ -125,7 +125,7 @@ function declare(sv pcontent,sd pcomsize
 					sd pdataReg%%ptr_dataReg
 					add pdataReg# unitsize    #this is init by 0
 				else
-					sd pnobitsReg%ptrnobitsReg
+					sd pnobitsReg%ptrdataSize
 					add pnobitsReg# unitsize    #this is init by 0
 				endelse
 			endelse
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.s
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -90,7 +90,7 @@ const fndecandgroup=1
 Function enumcommas(sv ptrcontent,sd ptrsize,sd sz,sd fndecandgroupOrpush,sd typenumberOrparses,sd punitsizeOrparses,sd hexOrunitsize,sd stack,sd long_mask,sd relocbool,sd relocindx)
 	Data zero=0
 	vstrx argsize#1
-	Chars comma=","
+	Char comma=","
 	Data err#1
 	Data noerr=noerror
 	datax content#1
@@ -116,9 +116,9 @@ Function enumcommas(sv ptrcontent,sd ptr
 			Data bSz=bsz
 			Data dwSz=dwsz
 			Data unitsize#1   #ignored at stack
-			Data charsnr=charsnumber
+			Data charnr=charnumber
 			if punitsizeOrparses==(NULL)
-				If typenumberOrparses==charsnr
+				If typenumberOrparses==charnr
 				#ignored at stack value   grep stackfilter2  1
 					Set unitsize bSz    #used also at hex
 				Else
@@ -191,7 +191,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 			if sz!=0
 				set argsize content
 				dec argsize
-				chars d_quot=asciidoublequote
+				char d_quot=asciidoublequote
 				if argsize#==d_quot
 					#look later at escapes, here only at the margins
 					#here the string ".." is in a good condition when quotes_forward was called at fn(...)
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -70,12 +70,12 @@ Function parsefunction(data ptrcontent,d
 
 	SetCall sz valinmem(content,size,(asciiparenthesisstart))
 	If sz==zero
-		Chars funnameexp="Function name expected."
+		Char funnameexp="Function name expected."
 		Str fnerr^funnameexp
 		Return fnerr
 	EndIf
 	If sz==size
-		Chars startfnexp="Open parenthesis sign ('(') expected."
+		Char startfnexp="Open parenthesis sign ('(') expected."
 		Str starterr^startfnexp
 		Return starterr
 	EndIf
@@ -121,6 +121,10 @@ Function parsefunction(data ptrcontent,d
 			#
 			#return noerr
 		else
+			if el_or_e==(FALSE)
+				call scopes_store_class()
+			endif
+
 			#pass_write
 			sd pointer
 			setcall pointer vars_ignoreref(content,sz,fns)
@@ -327,7 +331,7 @@ function prepare_function_call(sd pconte
 			If p_data#==0
 				setcall p_data# vars_number(pcontent#,sz,(stackvaluenumber))
 				If p_data#==0
-					Chars unfndeferr="Undefined function/data call."
+					Char unfndeferr="Undefined function/data call."
 					Str ptrunfndef^unfndeferr
 					Return ptrunfndef
 				EndIf
@@ -349,7 +353,7 @@ function prepare_function_call(sd pconte
 	#
 	setcall err rex_w_if64();if err!=(noerror);return err;endif
 	#
-	chars espebx={moveatregthemodrm,0xe3}
+	char espebx={moveatregthemodrm,0xe3}
 	Str ptrespebx^espebx
 	Data sizeespebx=2
 	SetCall err addtosec(ptrespebx,sizeespebx,code)
@@ -388,7 +392,7 @@ function write_function_call(sd ptrdata,
 	EndIf
 
 	If boolindirect==(FALSE)
-		Chars directcall#1
+		Char directcall#1
 		Data directcalloff#1
 
 		Data ptrdirectcall^directcall
@@ -410,7 +414,7 @@ function write_function_call(sd ptrdata,
 			setcall err reloc64_ante();If err!=(noerror);Return err;EndIf
 			SetCall err addtosec(ptrdirectcall,(directcallsize),code);If err!=(noerror);Return err;EndIf
 			setcall err reloc64_post();If err!=(noerror);Return err;EndIf
-			chars callcode={0xff,0xd0}
+			char callcode={0xff,0xd0}
 			setcall err addtosec(#callcode,2,code)
 		EndElse
 	Else
@@ -420,9 +424,9 @@ function write_function_call(sd ptrdata,
 			SetCall err unresolvedcallsfn(code,1,ptrvirtualimportsoffset) #,ptrdata#
 			If err!=(noerror);Return err;EndIf
 		endif
-		Chars callaction={0xff}
+		Char callaction={0xff}
 		#Data noreg=noregnumber
-		Chars callactionopcode={2}
+		Char callactionopcode={2}
 		Data eaxregnumber=eaxregnumber
 		#call stack64_op_set()
 		SetCall err writeopera(ptrdata,callaction,callactionopcode,eaxregnumber) #no sufix was
@@ -449,9 +453,9 @@ function write_function_call(sd ptrdata,
 		#absolute
 			const global_err_ex_start=!
 			#mov ecx,imm32
-			chars g_err_mov=0xb8+ecxregnumber;data g_err_mov_disp32#1
+			char g_err_mov=0xb8+ecxregnumber;data g_err_mov_disp32#1
 			#cmp byte[ecx],0
-			chars *={0x80,7*toregopcode|ecxregnumber};chars *=0
+			char *={0x80,7*toregopcode|ecxregnumber};char *=0
 			const global_err_ex_sz=!-global_err_ex_start
 			#add rel,1 is (b8+ecx), one byte
 			set g_err_mov_disp32 global_err_ptr#
@@ -459,7 +463,7 @@ function write_function_call(sd ptrdata,
 			SetCall err addtosec(#g_err_mov,(global_err_ex_sz),code)
 		Else
 			#mov to ecx is reseting the high part of the rcx
-			chars g_err=0xb9
+			char g_err=0xb9
 			data *rel=0
 			#
 			sd af_relof
@@ -468,21 +472,21 @@ function write_function_call(sd ptrdata,
 			setcall err reloc64_ante();If err!=(noerror);Return err;EndIf
 			SetCall err addtosec(#g_err,5,code);If err!=(noerror);Return err;EndIf
 			setcall err reloc64_post();If err!=(noerror);Return err;EndIf
-			chars g_cmp={0x80,7*toregopcode|ecxregnumber,0}
+			char g_cmp={0x80,7*toregopcode|ecxregnumber,0}
 			SetCall err addtosec(#g_cmp,3,code)
 		EndElse
 		If err!=(noerror);Return err;EndIf
 		#jz
-		chars g_err_jz=0x74;chars ret_end_sz#1
+		char g_err_jz=0x74;char ret_end_sz#1
 		#
 		ss ret_end_p
 		sd is_linux_term;setcall is_linux_term is_linux_end()
 		if is_linux_term==(TRUE)
 			#int 0x80, sys_exit, eax 1,ebx the return number
 			const g_err_sys_start=!
-			chars g_err_sys={0x8b,ebxregnumber*toregopcode|0xc0|eaxregnumber}
-			chars *={0xb8,1,0,0,0}
-			Chars *={intimm8,0x80}
+			char g_err_sys={0x8b,ebxregnumber*toregopcode|0xc0|eaxregnumber}
+			char *={0xb8,1,0,0,0}
+			Char *={intimm8,0x80}
 			const g_err_sys_size=!-g_err_sys_start
 			set ret_end_sz (g_err_sys_size)
 			set ret_end_p #g_err_sys
@@ -515,7 +519,7 @@ function is_linux_end()
 endfunction
 #er
 function entryraw_top()
-	chars s={0x6a,0}
+	char s={0x6a,0}
 	data code%%ptr_codesec
 	sd err
 	setcall err addtosec(#s,2,code)
--- ocompiler-1.orig/src/files/functions/actions/fndecargs.s
+++ ocompiler-1/src/files/functions/actions/fndecargs.s
@@ -2,7 +2,7 @@
 
 Function fndecargs(sv ptrcontent,sd ptrsize,sd sz,sd ptr_stackoffset,sd parses)
 	If sz==0
-		Chars szexp="Variable declaration expected."
+		Char szexp="Variable declaration expected."
 		Str szexpptr^szexp
 		Return szexpptr
 	EndIf
@@ -53,25 +53,29 @@ Function fndecargs(sv ptrcontent,sd ptrs
 			set long_mask (datapointbit)
 			set datasize (qwsz)
 		endelseif
-	elseif vartype==(charsnumber)
+	elseif vartype==(charnumber)
 		set datasize (bsz)
 	endelseif
 
+	vdata ptrdataSize%ptrdataSize
+
 	if parses==(pass_init)
 		if is_stack==(FALSE)
 			if is_expand==(FALSE)
 				vdata ptrdataReg%%ptr_dataReg
 				add ptrdataReg# datasize
-			endif
+			else
+				add ptrdataSize# datasize
+			endelse
 		endif
 		call advancecursors(ptrcontent,ptrsize,sz)
 		return (noerror)
 	endif
 
 	#this is a write to sec for old data args, careful with stackoff
-	Chars stacktransfer1#1;chars *={0x84,0x24}
+	Char stacktransfer1#1;char *={0x84,0x24}
 	Data stackoff#1
-	Chars stacktransfer2#1
+	Char stacktransfer2#1
 	Data memoff#1
 
 	sd stackindex
@@ -99,7 +103,6 @@ Function fndecargs(sv ptrcontent,sd ptrs
 	sd sectionind=dataind
 	if is_expand==(TRUE)
 		setcall memoff get_img_vdata_dataSize()
-		vdata ptrdataSize%ptrdataSize
 		add ptrdataSize# datasize
 		sd ptr_nobits_virtual%ptr_nobits_virtual
 		if ptr_nobits_virtual#==(Yes)
@@ -116,14 +119,14 @@ Function fndecargs(sv ptrcontent,sd ptrs
 		EndIf
 	endelse
 
-	Chars stackt1ini=moveatprocthemem
-	Chars stackt2ini=0xA3
+	Char stackt1ini=moveatprocthemem
+	Char stackt2ini=0xA3
 
 	Set stacktransfer1 stackt1ini
 	Set stacktransfer2 stackt2ini
 
 	If datasize==(bsz)
-	#chars
+	#char
 		Dec stacktransfer1
 		Dec stacktransfer2
 	elseif long_mask!=0
--- ocompiler-1.orig/src/files/functions/add/add.s
+++ ocompiler-1/src/files/functions/add/add.s
@@ -35,9 +35,9 @@ endfunction
 Function addaref(data value,data ptrcontent,data ptrsize,data size,data typenumber,data mask)
 	Ss content
 	Set content ptrcontent#
-	Chars byte#1
+	Char byte#1
 
-	Chars err="The declarations must contain only alphanumeric, underscore and around chars and cannot start with a number."
+	Char err="The declarations must contain only alphanumeric, underscore and around chars and cannot start with a number."
 	Str _err^err
 
 	sd bool
--- ocompiler-1.orig/src/files/functions/add/addstresc.s
+++ ocompiler-1/src/files/functions/add/addstresc.s
@@ -42,7 +42,7 @@ Function addtosecstresc(sd pcontent,sd p
 
 	add end pcontent#
 	While pcontent#!=end
-		Chars byte#1
+		Char byte#1
 		SetCall byte quotescaped(pcontent,psize,zero)
 		Set destloc# byte
 		Inc destloc
--- ocompiler-1.orig/src/files/functions/add/addtomem.s
+++ ocompiler-1/src/files/functions/add/addtomem.s
@@ -59,7 +59,7 @@ Function addtosec(str content,data size,
 			EndElseIf
 		EndElse
 		If sectionexpand==false
-			Chars _memerr="Memory space error."
+			Char _memerr="Memory space error."
 			Str memerr^_memerr
 			Return memerr
 		Else
@@ -123,7 +123,7 @@ Function addtosecstr(str content,data si
 	If errnr!=noerr
 		Return errnr
 	EndIf
-	Chars null={0}
+	Char null={0}
 	Data sz=1
 	Str ptrnull^null
 	SetCall errnr addtosec(ptrnull,sz,dst)
--- ocompiler-1.orig/src/files/functions/argument/arg.s
+++ ocompiler-1/src/files/functions/argument/arg.s
@@ -15,8 +15,8 @@ endfunction
 
 #err
 function arg_size(ss content,sd sizetoverify,sd p_argsize)
-	Chars spc=" "
-	Chars tab={0x09}
+	Char spc=" "
+	Char tab={0x09}
 	sd szargspc
 	sd szargtab
 	SetCall szargspc valinmem(content,sizetoverify,spc)
@@ -38,7 +38,7 @@ Function getarg(sv ptrcontent,sd ptrsize
 	sd size
 	sd errnr
 
-	chars d_q=getarg_str
+	char d_q=getarg_str
 
 	if argsize==0
 		return "Argument name expected."
@@ -132,11 +132,12 @@ Function getarg(sv ptrcontent,sd ptrsize
 					set argsize_filter argsize
 					dec argsize_filter
 
-					setcall container_sz valinmem(content,argsize_filter,(asciidot))
+					#class test
+					setcall container_sz valinmem(content,argsize_filter,(asciicolon))
 					if container_sz!=argsize_filter
-						setcall errnr getarg_dot(content,argsize_filter,container_sz,ptrdata,ptrlow,ptrsufix)
+						setcall errnr getarg_colon(content,argsize_filter,container_sz,ptrdata,ptrlow,ptrsufix)
 					else
-						SetCall errnr varsufix(content,argsize_filter,ptrdata,ptrlow,ptrsufix)
+						setcall errnr getarg_testdot(content,argsize_filter,ptrdata,ptrlow,ptrsufix)
 					endelse
 					if errnr!=(noerror)
 						return errnr
@@ -144,40 +145,50 @@ Function getarg(sv ptrcontent,sd ptrsize
 				else
 					data ptrobject%ptrobject
 					data ptrfunctions%%ptr_functions
-					setcall container_sz valinmem(content,argsize,(asciidot))
+
+					#class test
+					setcall container_sz valinmem(content,argsize,(asciicolon))
 					if container_sz!=argsize
-						setcall errnr getarg_dot(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
+						setcall errnr getarg_colon(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
 						if errnr!=(noerror)
 							return errnr
 						endif
-					elseif ptrobject#==1
-						#verify for function
-						setcall ptrdata# vars(content,argsize,ptrfunctions)
-						if ptrdata#==0
-							SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
+					else
+						setcall container_sz valinmem(content,argsize,(asciidot))
+						if container_sz!=argsize
+							setcall errnr getarg_dot(content,argsize,container_sz,ptrdata,ptrlow,ptrsufix)
 							if errnr!=(noerror)
-								sd undvar_err
-								setcall undvar_err undefinedvariable()
-								if errnr==undvar_err
-									setcall errnr undefinedvar_fn()
-								endif
 								return errnr
 							endif
+						elseif ptrobject#==1
+							#verify for function
+							setcall ptrdata# vars(content,argsize,ptrfunctions)
+							if ptrdata#==0
+								SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
+								if errnr!=(noerror)
+									sd undvar_err
+									setcall undvar_err undefinedvariable()
+									if errnr==undvar_err
+										setcall errnr undefinedvar_fn()
+									endif
+									return errnr
+								endif
+							else
+								set ptrlow# (FALSE)
+								set ptrsufix# (FALSE)
+								sd var
+								setcall var function_in_code()
+								set var# 1
+								#the code operation is a "prefix" like
+								setcall prefix prefix_bool()
+								set prefix# 1
+							endelse
 						else
-							set ptrlow# (FALSE)
-							set ptrsufix# (FALSE)
-							sd var
-							setcall var function_in_code()
-							set var# 1
-							#the code operation is a "prefix" like
-							setcall prefix prefix_bool()
-							set prefix# 1
+							SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
+							if errnr!=(noerror)
+								return errnr
+							endif
 						endelse
-					else
-						SetCall errnr varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
-						if errnr!=(noerror)
-							return errnr
-						endif
 					endelse
 				endelse
 			endelse
@@ -193,25 +204,13 @@ Function getarg(sv ptrcontent,sd ptrsize
 EndFunction
 #err
 function getarg_dot(sd content,sd argsize,sd container_sz,sd ptrdata,sd ptrlow,sd ptrsufix)
-	data ptrfunctions%%ptr_functions
-	#if is a dot
-	sd inter
-	#setcall inter vars(content,container_sz,ptrfunctions)
 	sd errnr
-	sd pos=0
-	setcall inter vars_core_ref_scope(content,container_sz,ptrfunctions,(NULL),(TRUE),#pos)
-	if inter==(NULL)
-		setcall errnr undefinedvar_fn()
+	sd scope
+	setcall errnr get_scope(#content,#argsize,container_sz,#scope)
+	if errnr!=(noerror)
 		return errnr
 	endif
-	inc container_sz
-	sd argsize_filter
-	set argsize_filter argsize
-	call advancecursors(#content,#argsize_filter,container_sz)
-	#
-	sd scope
-	setcall scope scopes_get_scope(pos)
-	SetCall errnr varsufix_ex(content,argsize_filter,ptrdata,ptrlow,ptrsufix,scope)
+	SetCall errnr varsufix_ex(content,argsize,ptrdata,ptrlow,ptrsufix,scope)
 	if errnr!=(noerror)
 		return errnr
 	endif
@@ -219,9 +218,246 @@ function getarg_dot(sd content,sd argsiz
 	if test==0
 		return (noerror)
 	endif
+	setcall errnr there_is_nothing_there()
+	return errnr
+endfunction
+#er
+#function getarg_colon(sd content,sd argsize,sd container_sz,sv ptrdata,sd ptrlow,sd ptrsufix)
+#	sd data
+#	sd err
+#	sd scope
+#	sd nr
+#	sd subtract_base
+#	sd part_sz
+
+#	setcall part_sz valinmem(content,container_sz,(asciidot))
+#	sub argsize container_sz
+#	if part_sz!=container_sz
+#		setcall err get_scope(#content,#container_sz,part_sz,#scope)
+#		if err!=(noerror)
+#			return err
+#		endif
+#		setcall data searchinvars_scope(content,container_sz,#nr,scope)
+#		if data==(NULL)
+#			setcall err undefinedvariable()
+#			return err
+#		endif
+#		if nr<(totalmemvariables)
+#			sd entrybags%%ptr_scopes
+#			if scope!=entrybags
+#				#stored class info
+#				setcall subtract_base scopes_get_class_data(scope,data) # test expandbit is inside
+#			else
+#				setcall subtract_base get_img_vdata() #or img_nbdata if exec will have (test expandbit)
+#			endelse
+#		else
+#			#stack
+#			set subtract_base 0
+#		endelse
+#	else
+#		setcall data strinvars(content,container_sz,#nr)
+#		if data==(NULL)
+#			setcall err undefinedvariable()
+#			return err
+#		endif
+#		if nr<(totalmemvariables)
+#			sd ptrinnerfunction%globalinnerfunction
+#			if ptrinnerfunction#==(TRUE)
+#				sd ptrfunctionTagIndex%ptrfunctionTagIndex
+#				setcall scope scopes_get_scope(ptrfunctionTagIndex#)
+#				setcall subtract_base scopes_get_class_data(scope,data)
+#			else
+#				setcall subtract_base get_img_vdata() #or img_nbdata if exec will have (test expandbit)
+#			endelse
+#		else
+#			#stack
+#			set subtract_base 0
+#		endelse
+#	endelse
+
+#	#this offset will be added
+#	sd val;set val data#
+#	sub val subtract_base
+
+#	add content container_sz
+#	call stepcursors(#content,#argsize)
+
+#	#get location and mask
+#	setcall err getarg_testdot(content,argsize,ptrdata,ptrlow,ptrsufix)
+#	if err!=(noerror)
+#		return err
+#	endif
+
+#	char random#1
+#	data *#2    #ignore name
+#	#in case are two args
+#	data *#2    #ignore name
+#	call tempdatapair(#random,ptrdata)
+#	sd pointer;set pointer ptrdata#
+#	add pointer# val
+#	return (noerror)
+#endfunction
+#er
+function getarg_colon(sd content,sd argsize,sd container_sz,sv ptrdata,sd ptrlow,sd ptrsufix)
+	#first test if has runtime pointer
+	sd pointer_size=0
+	if container_sz!=0
+		# !=0? yes, example: ":"
+		ss cursor=-1
+		add cursor content
+		add cursor container_sz
+		if cursor#==(pointerascii)
+			dec container_sz
+			inc pointer_size
+		endif
+	endif
+	sd data
+	sd err
+	sd scope
+	sd is_stack
+	sd part_sz;setcall part_sz valinmem(content,container_sz,(asciidot))
+	sub argsize container_sz
+	if part_sz!=container_sz
+		setcall err get_scope(#content,#container_sz,part_sz,#scope)
+		if err!=(noerror)
+			return err
+		endif
+		sd nr;setcall data searchinvars_scope(content,container_sz,#nr,scope)
+		if data==(NULL)
+			setcall err undefinedvariable()
+			return err
+		endif
+		if nr>=(totalmemvariables)
+			setcall err there_is_nothing_there()
+			return err
+		endif
+		set is_stack 0   #use later when keeping location
+	else
+		setcall data searchinvars(content,container_sz,(NULL),(NULL),1)
+		if data==(NULL)
+			setcall err undefinedvariable()
+			return err
+		endif
+		setcall is_stack stackbit(data)
+	endelse
+	add content container_sz
+	call advancecursors(#content,#argsize,pointer_size)
+	call stepcursors(#content,#argsize)
+
+	sd subtract_base
+	sd test
+	setcall container_sz valinmem(content,argsize,(asciidot))
+	if container_sz!=argsize
+		setcall err get_scope(#content,#argsize,container_sz,#scope)
+		if err!=(noerror)
+			return err
+		endif
+		SetCall err varsufix_ex(content,argsize,ptrdata,ptrlow,ptrsufix,scope)
+		if err!=(noerror)
+			return err
+		endif
+		setcall test stackbit(ptrdata#)
+		if test==0
+			sd entrybags%%ptr_scopes
+			if scope!=entrybags
+				#stored class info
+				setcall subtract_base scopes_get_class_data(scope,ptrdata) # test expandbit is inside
+			else
+				setcall subtract_base get_img_vdata() #or img_nbdata if exec will have (test expandbit)
+			endelse
+		else
+			setcall subtract_base stack64_base(ptrdata)
+		endelse
+	else
+		SetCall err varsufix(content,argsize,ptrdata,ptrlow,ptrsufix)
+		if err!=(noerror)
+			return err
+		endif
+		setcall test stackbit(ptrdata#)
+		if test==0
+			sd ptrinnerfunction%globalinnerfunction
+			if ptrinnerfunction#==(TRUE)
+				sd ptrfunctionTagIndex%ptrfunctionTagIndex
+				setcall scope scopes_get_scope(ptrfunctionTagIndex#)
+				setcall subtract_base scopes_get_class_data(scope,ptrdata)
+			else
+				setcall subtract_base get_img_vdata() #or img_nbdata if exec will have (test expandbit)
+			endelse
+		else
+			setcall subtract_base stack64_base(ptrdata)
+		endelse
+	endelse
+	char random#1
+	data *#3
+	#in case are two args
+	data d2#3
+	call tempdatapair(#random,ptrdata,#d2)
+
+	sd pointer;set pointer ptrdata#
+	sub pointer# subtract_base
+
+	#keep location, will be some disturbance if combining stack with data, but if not is ok
+	sd pointer2=maskoffset;sd data2=maskoffset
+	add pointer2 pointer
+	add data2 data
+	sd location_part;sd transformation_part
+	if is_stack!=0
+		set location_part (stack_location_bits)
+		and location_part data2#
+		set transformation_part (~stack_location_bits)
+	else
+		set location_part (location_bits)
+		and location_part data2#
+		set transformation_part (~location_bits)
+	endelse
+	and pointer2# transformation_part
+	or pointer2# location_part
+
+	#decide if add offset now or at runtime with sufix
+	if pointer_size!=0
+		#runtime
+		or pointer2# (suffixbit)
+		add pointer2 (masksize)
+		set pointer2# pointer#
+		set pointer# data#
+	else
+		add pointer# data#
+	endelse
+
+	return (noerror)
+endfunction
+#err
+function getarg_testdot(sd content,sd size,sd ptrdata,sd ptrlow,sd ptrsufix)
+	sd errnr
+	sd container_sz
+	setcall container_sz valinmem(content,size,(asciidot))
+	if container_sz!=size
+		setcall errnr getarg_dot(content,size,container_sz,ptrdata,ptrlow,ptrsufix)
+	else
+		SetCall errnr varsufix(content,size,ptrdata,ptrlow,ptrsufix)
+	endelse
+	return errnr
+endfunction
+
+function there_is_nothing_there()
 	return "Stack variables are not relevant for scope.variable."
 endfunction
 
+#err
+function get_scope(sv pcontent,sd psize,sd sz,sv pscope)
+	data ptrfunctions%%ptr_functions
+	sd var
+	sd pos=0
+	setcall var vars_core_ref_scope(pcontent#,sz,ptrfunctions,(NULL),(TRUE),#pos)
+	if var==(NULL)
+		return "Undefined function name."
+	endif
+	inc sz
+	call advancecursors(pcontent,psize,sz)
+	setcall pscope# scopes_get_scope(pos)
+	return (noerror)
+endfunction
+
 function function_in_code()
 	data bool#1
 	return #bool
@@ -290,21 +526,21 @@ function argfilters_helper(sd ptrconditi
 	Data argsz#1
 
 	#and same rule like getcommand like elseif then else
-	Chars firstcomp="==";Data *jne=0x85
-	Chars *="!=";        Data *je=0x84
-	Chars *="<=^";       Data *ja=0x87
-	Chars *=">=^";       Data *jb=0x82
-	Chars *="<=";        Data *jg=0x8F
-	Chars *=">=";        Data *jl=0x8C
-	Chars *="<^";        Data *jae=0x83   #wanted cast before but will problem with arg cast that was after to continue at sufix
-	Chars *=">^";        Data *jbe=0x86
-	Chars *="<";         Data *jge=0x8D
-	Chars *=">";         Data *jle=0x8E
-	Chars term={0}
+	Char firstcomp="==";Data *jne=0x85
+	Char *="!=";        Data *je=0x84
+	Char *="<=^";       Data *ja=0x87
+	Char *=">=^";       Data *jb=0x82
+	Char *="<=";        Data *jg=0x8F
+	Char *=">=";        Data *jl=0x8C
+	Char *="<^";        Data *jae=0x83   #wanted cast before but will problem with arg cast that was after to continue at sufix
+	Char *=">^";        Data *jbe=0x86
+	Char *="<";         Data *jge=0x8D
+	Char *=">";         Data *jle=0x8E
+	Char term={0}
 
 	Data ptr#1
 	Data ptrini^firstcomp
-	Chars byte#1
+	Char byte#1
 
 	Set ptr ptrini
 	Set byte ptr#
@@ -334,7 +570,7 @@ function argfilters_helper(sd ptrconditi
 		Add ptr (1+4)
 		Set byte ptr#
 	EndWhile
-	Chars conderr="Condition sign(s) expected."
+	Char conderr="Condition sign(s) expected."
 	Str _conderr^conderr
 	Return _conderr
 	Return err
--- ocompiler-1.orig/src/files/functions/argument/argument.s
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -5,15 +5,15 @@ function getreturn(data ptrptrcontinuati
 	if b==(TRUE)
 		sd conv;setcall conv convdata((convdata_total))
 		if conv==(lin_convention)
-			chars lin64_return={0xc9,0x5b}
+			char lin64_return={0xc9,0x5b}
 			#pop c;add rsp,8*conv;push c
-			chars *={0x59,REX_Operand_64,0x83,regregmod|espregnumber,lin_convention*qwsz,0x51}
-			chars *=retcom
+			char *={0x59,REX_Operand_64,0x83,regregmod|espregnumber,lin_convention*qwsz,0x51}
+			char *=retcom
 			set ptrptrcontinuation# #lin64_return
 			return (2+6+1)
 		endif
 	endif
-	Chars returncontinuation={0xc9,0x5b,retcom}
+	Char returncontinuation={0xc9,0x5b,retcom}
 	str ptrreturncontinuation^returncontinuation
 	data sizeretcontinuation=3
 	set ptrptrcontinuation# ptrreturncontinuation
@@ -24,7 +24,7 @@ function getexit(sv ptrptrcontinuation,s
 	#if to keep rsp can be leave pop sub rsp,:
 
 	#int 0x80, sys_exit, eax 1,ebx the return number
-	chars sys_exit={0xb8,1,0,0,0}
+	char sys_exit={0xb8,1,0,0,0}
 	data exinit^sys_exit
 	data exitsize=5
 	Data codeptr%%ptr_codesec
@@ -34,7 +34,7 @@ function getexit(sv ptrptrcontinuation,s
 		Return err
 	EndIf
 
-	Chars unixcontinuation={intimm8,0x80}
+	Char unixcontinuation={intimm8,0x80}
 	set ptrptrcontinuation# #unixcontinuation
 	set psizeofcontinuation# 2
 	return (noerror)
@@ -65,7 +65,7 @@ Function argument(data ptrcontent,data p
 
 	Data regprepare_bool#1
 
-	Chars op#1
+	Char op#1
 	Data zero=0
 
 	Str ptrcontinuation#1
@@ -90,12 +90,12 @@ Function argument(data ptrcontent,data p
 				Return err
 			EndIf
 		ElseIf subtype==(cINC)
-			Chars inc={0xFF}
+			Char inc={0xFF}
 			Set op inc
 			set regopcode 0
 		ElseIf subtype==(cDEC)
-			Chars dec={0xFF}
-			Chars decregopcode={1}
+			Char dec={0xFF}
+			Char decregopcode={1}
 			Set op dec
 			Set regopcode decregopcode
 		ElseIf subtype<=(cDECST)
@@ -105,7 +105,7 @@ Function argument(data ptrcontent,data p
 			else
 				set regopcode 5
 			endelse
-			chars incs_sz#1
+			char incs_sz#1
 			sd b;setcall b is_for_64()
 			if b==(FALSE);set incs_sz (dwsz)
 			else;set incs_sz (qwsz);endelse
@@ -115,8 +115,8 @@ Function argument(data ptrcontent,data p
 			set op (0xf7)
 			set regopcode 3
 		ElseIf subtype==(cNOT)
-			Chars not={0xF7}
-			Chars notregopcode={Notregopcode}
+			Char not={0xF7}
+			Char notregopcode={Notregopcode}
 			Set op not
 			Set regopcode notregopcode
 		ElseIf subtype<=(cSAR)
@@ -164,8 +164,8 @@ Function argument(data ptrcontent,data p
 		#push
 			#If lowbyte==false
 			#since with 64 push data will push quad even without rex
-			#	Chars push={0xff}
-			#	Chars pushopcode={6}
+			#	Char push={0xff}
+			#	Char pushopcode={6}
 			#	Set op push
 			#	Set regopcode pushopcode
 			#	call stack64_op_set()
@@ -174,11 +174,11 @@ Function argument(data ptrcontent,data p
 			#	#prepare for eax for al
 			#	Set intchar eaxreg
 			#EndIf
-			Chars pushaction={moveatprocthemem}
+			Char pushaction={moveatprocthemem}
 			Set op pushaction
 			set regopcode (eaxregnumber)
 
-			chars pushadvance={0x50}
+			char pushadvance={0x50}
 			data pushcontinuationsize=1
 			data ptrpushcontinuation^pushadvance
 			Set ptrcontinuation ptrpushcontinuation
@@ -193,7 +193,7 @@ Function argument(data ptrcontent,data p
 		EndElseIf
 		sd comp_at_bigs;setcall comp_at_bigs comp_one(lowbyte,dataarg,sufix,op)
 		setcall err writeop_promotes(dataarg,op,sufix,regopcode,lowbyte,comp_at_bigs)
-		call restore_argmask() #before this there is no err!=noerr: it is not a must, only less space
+		#call restore_argmask() #before this there is no err!=noerr: it is not a must, only less space
 	Else
 	#imm
 		If forwardORcallsens!=forward
--- ocompiler-1.orig/src/files/functions/argument/comwrite.s
+++ ocompiler-1/src/files/functions/argument/comwrite.s
@@ -41,7 +41,7 @@ Function formmodrm(data mod,data regopco
 EndFunction
 
 function takewithimm(sd ind,sd addr)
-	Chars takeop#1
+	Char takeop#1
 	Data takeloc#1
 
 	Set takeop (0xb8)
@@ -103,14 +103,11 @@ function writetake(sd takeindex,sd entry
 			sd var
 			setcall var function_in_code()
 			if var#==0
-				sd expand;setcall expand expandbit(entry)
 				sd sectionind
+				sd expand;setcall expand expandbit_wrap(entry)
 				if expand!=0
-					#this test is already at var declaration
-					#sd ptr_nobits_virtual%ptr_nobits_virtual
-					#if ptr_nobits_virtual#==(Yes)
+					#before expandbit at class: this test is already at var declaration
 					set sectionind (dtnbind)
-					#endif
 				else
 					set sectionind (dataind)
 				endelse
@@ -142,11 +139,11 @@ function writetake(sd takeindex,sd entry
 		endif
 		setcall errnr datatake(takeindex,take_loc)
 	else
-		chars stack_relative#1
-		chars regreg=RegReg
+		char stack_relative#1
+		char regreg=RegReg
 		setcall stack_relative stack_get_relative(entry)
-		chars getfromstack={0x03}
-		chars getfromstack_modrm#1
+		char getfromstack={0x03}
+		char getfromstack_modrm#1
 		SetCall getfromstack_modrm formmodrm(regreg,takeindex,stack_relative)
 		data ptrgetfromstack^getfromstack
 		data sizegetfromstack=2
@@ -160,6 +157,41 @@ function writetake(sd takeindex,sd entry
 	endelse
 	Return errnr
 endfunction
+#er
+function writetake_offset(sd takeindex,sd entry)
+	sd er;setcall er writetake(takeindex,entry)
+	if er==(noerror)
+		sd test;setcall test suffixbit(entry)
+		if test!=0
+			char op=0x81
+			char modrm#1
+			data disp32#1
+			add entry (addoffset)
+			set disp32 entry#
+			if disp32<0
+				#is only sign-extended imm32 to r64
+				return "The displacement for this value is not implemented at the moment."
+			endif
+			setcall er rex_w_if64()
+			if er==(noerror)
+				#need to take further
+				char take=moveatprocthemem
+				char tmodrm#1
+				setcall tmodrm formmodrm((mod_0),takeindex,takeindex)
+				value ptrcodesec%%ptr_codesec
+				SetCall er addtosec(#take,2,ptrcodesec)
+				if er==(noerror)
+					setcall er rex_w_if64()
+					if er==(noerror)
+						setcall modrm formmodrm((RegReg),0,takeindex)
+						SetCall er addtosec(#op,6,ptrcodesec)
+					endif
+				endif
+			endif
+		endif
+	endif
+	return er
+endfunction
 
 #val64. is one call at this that will break val64 if not a return value
 Function writeoperation_take(sd p_errnr,sd location,sd sufix,sd takeindex,sd is_low)
@@ -167,7 +199,7 @@ Function writeoperation_take(sd p_errnr,
 	Data errnr#1
 	Data noerr=noerror
 
-	setcall errnr writetake(takeindex,location)
+	setcall errnr writetake_offset(takeindex,location)
 	If errnr!=noerr
 		set p_errnr# errnr;return (void)
 	EndIf
@@ -216,8 +248,8 @@ function sufix_take(sd takeindex,sd take
 			return err;endif
 	endif
 	Data ptrcodesec%%ptr_codesec
-	Chars newtake=moveatprocthemem
-	Chars newtakemodrm#1
+	Char newtake=moveatprocthemem
+	Char newtakemodrm#1
 	Str ptrnewtake^newtake
 	Data sz2=bsz+bsz
 	setcall newtakemodrm formmodrm((mod_0),takeindex,takeindex)
@@ -258,13 +290,13 @@ Function writeoperation_op(sd operationo
 	#if is like was xor prepare,prepare
 	If is_prepare==(TRUE)
 	# !=(noregnumber)
-		#Chars comprepare1={0x33}
-		#Chars comprepare2#1
+		#Char comprepare1={0x33}
+		#Char comprepare2#1
 		#setcall comprepare2 formmodrm((RegReg),regprepare,regprepare)
 		#SetCall errnr addtosec(#comprepare1,sz2,ptrcodesec)
 
 		#zero extend
-		chars extend_byte=twobytesinstruction_byte1
+		char extend_byte=twobytesinstruction_byte1
 		SetCall errnr addtosec(#extend_byte,1,ptrcodesec)
 		If errnr!=noerr
 			Return errnr
@@ -284,8 +316,8 @@ Function writeoperation_op(sd operationo
 		#endElse
 	EndElse
 
-	Chars actionop#1
-	Chars actionmodrm#1
+	Char actionop#1
+	Char actionmodrm#1
 
 	Set actionop operationopcode
 	SetCall actionmodrm formmodrm(mod,regopcode,takeindex)
--- ocompiler-1.orig/src/files/functions/argument/imm.s
+++ ocompiler-1/src/files/functions/argument/imm.s
@@ -105,7 +105,7 @@ endfunction
 
 #er
 function write_imm(sd dataarg,sd op)
-	chars immop#1
+	char immop#1
 	data value#1
 	data immadd^immop
 	set immop op
@@ -123,7 +123,7 @@ function write_imm_sign(sd dataarg,sd re
 	sd err
 	setcall err rex_w_if64()
 	if err==(noerror)
-		chars movs_imm=mov_imm_to_rm
+		char movs_imm=mov_imm_to_rm
 		SetCall err addtosec(#movs_imm,1,codeptr)
 		if err==(noerror)
 			sd op
@@ -149,7 +149,7 @@ function write_imm_trunc(sd value,sd reg
 		return err
 	endif
 	#low
-	chars a#2
+	char a#2
 	ss b^a;set b# (atalimm)
 	add b# reg
 	inc b
--- ocompiler-1.orig/src/files/functions/commands/cond.s
+++ ocompiler-1/src/files/functions/commands/cond.s
@@ -57,7 +57,7 @@ Function checkcondloopclose()
 	Call getcontReg(condloop,ptrregnr)
 	Data zero=0
 	If regnr!=zero
-		Chars closeerr="All conditions/loops within a scope most be closed."
+		Char closeerr="All conditions/loops within a scope most be closed."
 		Str _closeerr^closeerr
 		Return _closeerr
 	EndIf
@@ -68,7 +68,7 @@ EndFunction
 Const backjumpsize=5
 #err
 Function condjump(data size)
-	Chars jump={0xe9}
+	Char jump={0xe9}
 	Data jsize#1
 	Data bjsz=backjumpsize
 
@@ -92,7 +92,7 @@ Function condend(data number)
 
 	Call getptrcontReg(condloop,ptrptrcReg)
 	If ptrcReg#==0
-		Chars uncloseerr="Unexpected condition/loop close command."
+		Char uncloseerr="Unexpected condition/loop close command."
 		Str _uncloseerr^uncloseerr
 		Return _uncloseerr
 	EndIf
@@ -149,7 +149,7 @@ function condendtest(sv p_conds,sd numbe
 				call condendwrite(conds,codeoffset)
 			endif
 		elseIf lastcondition!=number
-			Chars difcloseerr="The previous condition/loop is from a different type."
+			Char difcloseerr="The previous condition/loop is from a different type."
 			vStr _difcloseerr^difcloseerr
 			Return _difcloseerr
 		else
--- ocompiler-1.orig/src/files/functions/commons/base.s
+++ ocompiler-1/src/files/functions/commons/base.s
@@ -126,7 +126,7 @@ EndFunction
 
 #str
 function log_term(sd psz)
-	chars textterm={asciicarriage,asciireturn,0}
+	char textterm={asciicarriage,asciireturn,0}
 	set psz# 2
 	return #textterm
 endfunction
@@ -218,7 +218,7 @@ function addtolog_withchar_ex_atunused_h
 endfunction
 #err
 function addtolog_natural(sd number)
-	chars buf#8+1
+	char buf#8+1
 	call sprintf(#buf,"%08x",number)  #for file seek at position
 	sd err;setcall err addtolog_withchar(#buf,(log_expand))
 	return err
--- ocompiler-1.orig/src/files/functions/commons/comfn.s
+++ ocompiler-1/src/files/functions/commons/comfn.s
@@ -8,7 +8,7 @@ Function memrealloc(data ptrpointer,data
 	SetCall newpointer realloc(oldpointer,size)
 	Data null=NULL
 	If newpointer==null
-		Chars newmem="Memory allocation error."
+		Char newmem="Memory allocation error."
 		Data pnewmem^newmem
 		Return pnewmem
 	EndIf
@@ -72,8 +72,8 @@ Function memcmp(str m1,str m2,data size)
 	Data equal=0
 	Data notequal=-1
 
-	Chars c1#1
-	Chars c2#1
+	Char c1#1
+	Char c2#1
 	While size!=zero
 		Set c1 m1#
 		Set c2 m2#
@@ -89,8 +89,8 @@ EndFunction
 
 #sizeof the string
 Function strlen(str str)
-	Chars term={0}
-	Chars byte#1
+	Char term={0}
+	Char byte#1
 	Data sz#1
 	Data zero=0
 	Set sz zero
@@ -110,9 +110,9 @@ Function printbuf(sd format,sd message,s
 	addCall bufsize strlen(message)
 	addCall bufsize strlen(s1)
 	if nr>0
-		add bufsize (dw_chars)
+		add bufsize (dw_char)
 		if nr>1
-			add bufsize (dw_chars)
+			add bufsize (dw_char)
 		endif
 	endif
 
@@ -156,7 +156,7 @@ Function openfile(data pfile,str path,da
 	Return noerr
 EndFunction
 
-chars writefile_err="Cannot write data to a file."
+char writefile_err="Cannot write data to a file."
 const writefile_err_p^writefile_err
 #return _write (-1 or wrln)
 Function writefile(data hfile,str buf,data ln)
@@ -249,9 +249,9 @@ Function padsec(data hfile,data value,da
 EndFunction
 
 #true if match or false
-Function filepathdelims(chars chr)
-	Chars bslash=asciibs
-	Chars slash=asciislash
+Function filepathdelims(char chr)
+	Char bslash=asciibs
+	Char slash=asciislash
 	Data true=TRUE
 	Data false=FALSE
 	If chr==bslash
@@ -402,7 +402,7 @@ endfunction
 function compareagainstmaxpath(data sizetocompare)
 	data flag_max_path=flag_MAX_PATH
 	if sizetocompare>flag_max_path
-		chars greaterthanmax="A file path size is greater than maximum number."
+		char greaterthanmax="A file path size is greater than maximum number."
 		str greater^greaterthanmax
 		return greater
 	else
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -5,29 +5,29 @@ Const spacenotreq=0
 
 #with caution like elseif before else for getcommand comparations
 
-Chars cCOMMENT_c={commentascii,0}
-Chars cDATA_c="DATA";Chars cSTR_c="STR";Chars cCHARS_c="CHARS";Chars cSD_c="SD";Chars cSS_c="SS";Chars cSV_c="SV"
-	Chars cVDATA_c="VDATA";Chars cVSTR_c="VSTR";Chars cVALUE_c="VALUE"
-	Chars cDATAX_c="DATAX";Chars cSTRX_c="STRX";Chars cCHARSX_c="CHARSX"
-	Chars cVDATAX_c="VDATAX";Chars cVSTRX_c="VSTRX";Chars cVALUEX_c="VALUEX"
-	Chars cCONST_c="CONST"
-Chars cSET_c="SET";Chars cADD_c="ADD";Chars cSUB_c="SUB";Chars cMULT_c="MULT";Chars cDIV_c="DIV";Chars cREM_c="REM";Chars cAND_c="AND";Chars cOR_c="OR";Chars cXOR_c="XOR"
-Chars cRETURN_c="RETURN";Chars cINCST_c="INCST";Chars cINC_c="INC";Chars cDECST_c="DECST";Chars cDEC_c="DEC";Chars cNEG_c="NEG";Chars cNOT_c="NOT";Chars cSHL_c="SHL";Chars cSHR_c="SHR";Chars cSAR_c="SAR";Chars cEXIT_c="EXIT"
-Chars cCALLX_c="CALLX";Chars cCALL_c="CALL"
-Chars cIF_c="IF";Chars cENDIF_c="ENDIF";Chars cELSEIF_c="ELSEIF";Chars cELSE_c="ELSE";Chars cENDELSEIF_c="ENDELSEIF";Chars cENDELSE_c="ENDELSE";Chars cWHILE_c="WHILE";Chars cENDWHILE_c="ENDWHILE";Chars cBREAK_c="BREAK";Chars cCONTINUE_c="CONTINUE"
-Chars cIMPORT_c="IMPORT";Chars cIMPORTX_c="IMPORTX"
-Chars cFUNCTION_c="FUNCTION";Chars cFUNCTIONX_c="FUNCTIONX";Chars cENTRYRAW_c="ENTRYRAW";Chars cENTRY_c="ENTRY"
-Chars cENDFUNCTION_c="ENDFUNCTION"
-Chars cRET_c="RET"
-Chars cINCLUDE_c="INCLUDE"
-Chars cFORMAT_c="FORMAT"
-Chars cIMPORTAFTERCALL_c="IMPORTAFTERCALL";Chars cAFTERCALL_c="AFTERCALL"
-Chars cWARNING_c="WARNING"
-Chars cCALLEXX_c="CALLEXX";Chars cCALLEX_c="CALLEX"
-Chars cOVERRIDE_c="OVERRIDE"
-Chars cLIBRARY_c="LIBRARY"
-Chars cHEX_c="HEX"
-Chars cI3_c="I3"
+Char cCOMMENT_c={commentascii,0}
+Char cDATA_c="DATA";Char cSTR_c="STR";Char cCHAR_c="CHAR";Char cSD_c="SD";Char cSS_c="SS";Char cSV_c="SV"
+	Char cVDATA_c="VDATA";Char cVSTR_c="VSTR";Char cVALUE_c="VALUE"
+	Char cDATAX_c="DATAX";Char cSTRX_c="STRX";Char cCHARX_c="CHARX"
+	Char cVDATAX_c="VDATAX";Char cVSTRX_c="VSTRX";Char cVALUEX_c="VALUEX"
+	Char cCONST_c="CONST"
+Char cSET_c="SET";Char cADD_c="ADD";Char cSUB_c="SUB";Char cMULT_c="MULT";Char cDIV_c="DIV";Char cREM_c="REM";Char cAND_c="AND";Char cOR_c="OR";Char cXOR_c="XOR"
+Char cRETURN_c="RETURN";Char cINCST_c="INCST";Char cINC_c="INC";Char cDECST_c="DECST";Char cDEC_c="DEC";Char cNEG_c="NEG";Char cNOT_c="NOT";Char cSHL_c="SHL";Char cSHR_c="SHR";Char cSAR_c="SAR";Char cEXIT_c="EXIT"
+Char cCALLX_c="CALLX";Char cCALL_c="CALL"
+Char cIF_c="IF";Char cENDIF_c="ENDIF";Char cELSEIF_c="ELSEIF";Char cELSE_c="ELSE";Char cENDELSEIF_c="ENDELSEIF";Char cENDELSE_c="ENDELSE";Char cWHILE_c="WHILE";Char cENDWHILE_c="ENDWHILE";Char cBREAK_c="BREAK";Char cCONTINUE_c="CONTINUE"
+Char cIMPORT_c="IMPORT";Char cIMPORTX_c="IMPORTX"
+Char cFUNCTION_c="FUNCTION";Char cFUNCTIONX_c="FUNCTIONX";Char cENTRYRAW_c="ENTRYRAW";Char cENTRY_c="ENTRY"
+Char cENDFUNCTION_c="ENDFUNCTION"
+Char cRET_c="RET"
+Char cINCLUDE_c="INCLUDE"
+Char cFORMAT_c="FORMAT"
+Char cIMPORTAFTERCALL_c="IMPORTAFTERCALL";Char cAFTERCALL_c="AFTERCALL"
+Char cWARNING_c="WARNING"
+Char cCALLEXX_c="CALLEXX";Char cCALLEX_c="CALLEX"
+Char cOVERRIDE_c="OVERRIDE"
+Char cLIBRARY_c="LIBRARY"
+Char cHEX_c="HEX"
+Char cI3_c="I3"
 
 const not_a_subtype=-1
 
@@ -53,10 +53,10 @@ Const com_size=cSTR-cDATA
 			Data *=cDECLARE
 			Data *=cSTR
 			Data *=spacereq
-		Const cCHARS=!-cDECLARE_top
-			data *^cCHARS_c
+		Const cCHAR=!-cDECLARE_top
+			data *^cCHAR_c
 			Data *=cDECLARE
-			Data *=cCHARS
+			Data *=cCHAR
 			Data *=spacereq
 		Const cSD=!-cDECLARE_top
 			data *^cSD_c
@@ -98,10 +98,10 @@ Const com_size=cSTR-cDATA
 			Data *=cDECLARE
 			Data *=cSTRX
 			Data *=spacereq
-		Const cCHARSX=!-cDECLARE_top
-			data *^cCHARSX_c
+		Const cCHARX=!-cDECLARE_top
+			data *^cCHARX_c
 			Data *=cDECLARE
-			Data *=cCHARSX
+			Data *=cCHARX
 			Data *=spacereq
 		Const cVDATAX=!-cDECLARE_top
 			data *^cVDATAX_c
@@ -446,7 +446,7 @@ Function getcommand(data pcontent,data p
 		Set spacebool cursor#
 
 		#implement for SetCall...
-		Chars calldata="CALL"
+		Char calldata="CALL"
 		Str call^calldata
 
 		ss extstr=NULL
@@ -495,7 +495,7 @@ Function getcommand(data pcontent,data p
 		Set cursor pointercommands#
 	EndWhile
 
-	Chars _unrecCom="Unrecognized command/declaration name."
+	Char _unrecCom="Unrecognized command/declaration name."
 	Str unrecCom^_unrecCom
 	Set ptrerrormsg# unrecCom
 EndFunction
--- ocompiler-1.orig/src/files/functions/commons/strcommons.s
+++ ocompiler-1/src/files/functions/commons/strcommons.s
@@ -78,10 +78,10 @@ Function stratmem(data pcontent,data psi
 
 	Set sizetorun nrsz
 	While sizetorun!=zero
-		Chars a_from_az={a_from_az}
-		Chars z_from_az={z_from_az}
-		Chars b#1
-		Chars c#1
+		Char a_from_az={a_from_az}
+		Char z_from_az={z_from_az}
+		Char b#1
+		Char c#1
 
 		Set b content#
 		If b>=a_from_az
@@ -120,7 +120,7 @@ function find_whitespaceORcomment(ss con
 	ss end;set end content;add end size
 	ss start;set start content
 	while content!=end
-		chars b#1;set b content#
+		char b#1;set b content#
 		if b==(commentascii)
 			sub content start
 			return content
@@ -137,7 +137,7 @@ function find_whitespaceORcomment(ss con
 	return content
 endfunction
 #bool
-function is_whitespace(chars c)
+function is_whitespace(char c)
 	if c==(asciispace)
 		return (TRUE)
 	endif
@@ -251,8 +251,8 @@ EndFunction
 Function quotescaped(Data pcontent,Data psize,Data pescapes)
 	Str content#1
 	Data size#1
-	Chars byte#1
-	Chars bs=asciibs
+	Char byte#1
+	Char bs=asciibs
 	Data zero=0
 
 	Set content pcontent#
@@ -279,7 +279,7 @@ EndFunction
 
 #return false or true
 Function quotientinmem(data ptrcontent,data ptrsize,data pquotsz,data pescapes)
-	Chars quotation={asciidoublequote,0}
+	Char quotation={asciidoublequote,0}
 	Str pquotation^quotation
 	Data intnr=0
 	Data zero=0
@@ -301,8 +301,8 @@ Function quotientinmem(data ptrcontent,d
 	Data escbefore=0
 	Data escafter=0
 
-	Chars byte={0}
-	Chars bnull={0}
+	Char byte={0}
+	Char bnull={0}
 	While length!=zero
 		Set escbefore pescapes#
 		SetCall byte quotescaped(ptrdata,ptrlength,pescapes)
@@ -330,7 +330,7 @@ Function quotinmem(data ptrcontent,data
 	SetCall bool quotientinmem(ptrcontent,ptrsize,pquotsz,pescapes)
 	Data false=FALSE
 	If bool==false
-		Chars strerr="Expecting string delimited by quotations and with the backslash the escape character."
+		Char strerr="Expecting string delimited by quotations and with the backslash the escape character."
 		Str ptrstrerr^strerr
 		Return ptrstrerr
 	EndIf
@@ -355,7 +355,7 @@ endfunction
 #err
 function quotes_forward(sd p_content,ss last,sd p_newlines,sd p_lastlinestart)
 #this version is knowing that the first char is "
-	chars delim=asciidoublequote
+	char delim=asciidoublequote
 	ss content
 	set content p_content#
 	str unend="end string (\") expected"
@@ -366,7 +366,7 @@ function quotes_forward(sd p_content,ss
 	endif
 	sd newlines=0
 	while content#!=delim
-		chars escape_c=asciibs
+		char escape_c=asciibs
 		while content#==escape_c
 			if escapes==0
 				set escapes 1
@@ -378,7 +378,7 @@ function quotes_forward(sd p_content,ss
 				return unend
 			endif
 		endwhile
-		chars newline=asciireturn
+		char newline=asciireturn
 		if content#==newline
 			if p_newlines!=0
 				inc newlines
--- ocompiler-1.orig/src/files/functions/commons/valinmem.s
+++ ocompiler-1/src/files/functions/commons/valinmem.s
@@ -3,10 +3,10 @@
 
 
 #return the size of the value, if the delim is found the size counts until there
-Function valinmemsens(str content,data size,chars delim,data sens)
+Function valinmemsens(str content,data size,char delim,data sens)
 	Data length#1
 	Set length size
-	Chars byte#1
+	Char byte#1
 	Data zero=0
 
 	If size==zero
@@ -35,14 +35,14 @@ Function valinmemsens(str content,data s
 	Return length
 EndFunction
 
-Function valinmem(str content,data size,chars delim)
+Function valinmem(str content,data size,char delim)
 	Data returnvalue#1
 	Data forward=FORWARD
 	SetCall returnvalue valinmemsens(content,size,delim,forward)
 	Return returnvalue
 EndFunction
 
-function valinmem_pipes(str content,data size,chars delim,data pipe)
+function valinmem_pipes(str content,data size,char delim,data pipe)
 	data sz#1
 	setcall sz valinmem(content,size,delim)
 	set pipe# sz
--- ocompiler-1.orig/src/files/functions/commons/vars.s
+++ ocompiler-1/src/files/functions/commons/vars.s
@@ -74,10 +74,12 @@ function vars_core_ref_scope(ss content,
 				endif
 			endIf
 			#elseIf ptrconstants==ptrstructure 0x72
-		EndIf
-		Add container dwlen
-		SetCall varsize strlen(container)
-		If warningssearch==(NULL)
+			Add container dwlen
+			SetCall varsize strlen(container)
+		Else
+			sd pmask;set pmask container
+			Add container dwlen
+			SetCall varsize strlen(container)
 			If varsize==size
 				Data cmpret#1
 				SetCall cmpret memcmp(container,content,size)
@@ -85,31 +87,27 @@ function vars_core_ref_scope(ss content,
 					#if set the reference is true
 					if setref==1
 						#go back from string to mask
-						Sub container dwlen
+						#Sub container dwlen
 
 						#get the value and change the reference bit of the mask to true
 						Data value#1
-						Set value container#
+						Set value pmask#
 						Data referenceBit=referencebit
 						Or value referenceBit
-						Set container# value
+						Set pmask# value
 					endif
-
 					Return entrypoint
 				EndIf
 			EndIf
 			if position_pointer!=(NULL)
 				#are mixed with imports
-				#go back from string to mask
 				sd against=idatabitfunction
-				sd back=-dwsz
-				add back container
-				and against back#
+				and against pmask#
 				if against==0
 					inc position_pointer#
 				endif
 			endif
-		EndIf
+		endElse
 		Add varsize blen
 		Add container varsize
 	EndWhile
@@ -221,7 +219,7 @@ EndFunction
 
 #err
 Function undefinedvariable()
-	Chars undefinedvar="Undefined variable name."
+	Char undefinedvar="Undefined variable name."
 	Str _undefinedvar^undefinedvar
 	Return _undefinedvar
 EndFunction
@@ -264,27 +262,27 @@ function varsufix_ex(ss content,sd size,
 	EndIf
 	Set ptrdata# data
 
-	Data charsnumber=charsnumber
+	Data charnumber=charnumber
 	sd prefix
 	setcall prefix prefix_bool()
 
-	If type==charsnumber
+	If type==charnumber
 		If ptrsufix#==true
-			Chars ptrsfxerr="CHARS statement cannot have the pointer sufix."
+			Char ptrsfxerr="CHAR statement cannot have the pointer sufix."
 			Str _ptrsfxerr^ptrsfxerr
 			Return _ptrsfxerr
 		EndIf
 		if prefix#==0
 			Set ptrlow# true
 		else
-			#need all chars address at prefix
+			#need all char address at prefix
 			set ptrlow# false
 		endelse
 		return (noerror)
 	endIf
 
 	sd is_str
-	setcall is_str cast_resolve(type,cast,data)
+	setcall is_str cast_resolve(type,cast,ptrdata)
 
 	If is_str==false
 		Set ptrlow# false
@@ -347,8 +345,24 @@ function cast_test(ss content,sd p_size)
 	return (no_cast)
 endfunction
 
+function tempdatapair(ss p_trick,sv ptrdata,sd data2)
+	xor p_trick# 1
+	sd test=1;and test p_trick#
+	if test==0
+		set p_trick data2
+		#add p_trick (location_and_mask)
+	else
+		inc p_trick
+	endelse
+	sd val;set val ptrdata#
+	set ptrdata# p_trick
+	set p_trick#d^ val#
+	add p_trick (maskoffset);add val (maskoffset)
+	set p_trick#d^ val#
+endfunction
+
 #bool is_string
-function cast_resolve(sd number,sd cast,sd data)
+function cast_resolve(sd number,sd cast,sv ptrdata)
 	if cast==(no_cast)
 		Data stringsnumber=stringsnumber
 		Data stackstringnumber=stackstringnumber
@@ -360,8 +374,18 @@ function cast_resolve(sd number,sd cast,
 		return (FALSE)
 	endif
 	if cast!=(cast_string)
-		call store_argmask(data)
+
+		#call store_argmask(data)
+
+		char random#1
+		data *#2    #ignore name
+		#in case are two args
+		data data2#2    #ignore name
+
+		call tempdatapair(#random,ptrdata,#data2)
+		sd data;set data ptrdata#
 		add data (maskoffset)
+
 		if cast==(cast_data)
 			and data# (~pointbit)
 		else
--- ocompiler-1.orig/src/files/functions/dataassign.s
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -6,10 +6,10 @@ Function dataassign(sd ptrcontent,sd ptr
 	Data true=TRUE
 	Str err#1
 	Data noerr=noerror
-	chars nosign=nosign
+	char nosign=nosign
 
 	Data constantsnr=constantsnumber
-	Data charsnr=charsnumber
+	Data charnr=charnumber
 	Data stringsnr=stringsnumber
 
 	data offset_const#1
@@ -50,7 +50,7 @@ Function dataassign(sd ptrcontent,sd ptr
 	Set size ptrsize#
 	If size==0
 		#not at unitsize: constants,stacks
-		Chars rightsideerr="Right side of the assignment expected."
+		Char rightsideerr="Right side of the assignment expected."
 		Str ptrrightsideerr^rightsideerr
 		Return ptrrightsideerr
 	endIf
@@ -71,9 +71,9 @@ Function dataassign(sd ptrcontent,sd ptr
 	Data zero=0
 
 	data valuewritesize#1
-	#is for chars name="value" or str name="value"
+	#is for char name="value" or str name="value"
 	data stringtodata#1
-	#is for chars name="value"
+	#is for char name="value"
 	data skipNumberValue#1
 	Data importbittest#1
 
@@ -85,7 +85,7 @@ Function dataassign(sd ptrcontent,sd ptr
 	set importbittest -1
 
 	If sign==(assignsign)
-		Chars byte#1
+		Char byte#1
 		Set content ptrcontent#
 		Set byte content#
 		if byte==(relsign)
@@ -95,7 +95,7 @@ Function dataassign(sd ptrcontent,sd ptr
 				#to not set byte in vain
 				Return ptrrightsideerr
 			endIf
-			#this comparation is not for chars and const is excluded at getsign
+			#this comparation is not for char and const is excluded at getsign
 			if relocbool!=true
 				return "Unexpected relocation sign."
 			endif
@@ -105,12 +105,12 @@ Function dataassign(sd ptrcontent,sd ptr
 			endif
 			Set byte content#
 		endif
-		Chars groupstart="{"
+		Char groupstart="{"
 		If byte!=groupstart
-			chars stringstart=asciidoublequote
+			char stringstart=asciidoublequote
 			If byte==stringstart
 			#"text"
-				If typenumber==charsnr
+				If typenumber==charnr
 					if stack==false
 					#else is at stack value   grep stackfilter2   2
 						set stringtodata true
@@ -148,7 +148,7 @@ Function dataassign(sd ptrcontent,sd ptr
 					endelse
 				EndElseIf
 				if stringtodata==false
-					chars bytesatintegers="The string assignment (\"\") can be used at CHARS, STR or SS."
+					char bytesatintegers="The string assignment (\"\") can be used at CHAR, STR or SS."
 					str bytesatints^bytesatintegers
 					return bytesatints
 				endif
@@ -164,7 +164,7 @@ Function dataassign(sd ptrcontent,sd ptr
 				if err!=noerr
 					return err
 				endif
-				If typenumber==charsnr
+				If typenumber==charnr
 					if stack==false
 					#else is at stack value   grep stackfilter2   3
 						set valuewritesize (bsz)
@@ -181,7 +181,7 @@ Function dataassign(sd ptrcontent,sd ptr
 				endif
 			endif
 			If typenumber==constantsnr
-				Chars constgroup="Group begin sign ('{') is not expected to declare a constant."
+				Char constgroup="Group begin sign ('{') is not expected to declare a constant."
 				Str ptrconstgroup^constgroup
 				Return ptrconstgroup
 			EndIf
@@ -189,10 +189,10 @@ Function dataassign(sd ptrcontent,sd ptr
 			Set content ptrcontent#
 			Set size ptrsize#
 			Data sz#1
-			Chars groupstop="}"
+			Char groupstop="}"
 			SetCall sz valinmem(content,size,groupstop)
 			If sz==size
-				Chars groupend="Group end sign ('}') expected."
+				Char groupend="Group end sign ('}') expected."
 				Str ptrgroupend^groupend
 				Return ptrgroupend
 			EndIf
@@ -250,11 +250,9 @@ Function dataassign(sd ptrcontent,sd ptr
 			if rightstackbit==0
 				Set value pointer#
 
-				#vdata ptr_nobits_virtual%ptr_nobits_virtual
-				#if ptr_nobits_virtual#==(Yes)
 				#data^datax or sd^datax
-				#expandbit already has nobits_virtual previous test
-				sd expand;setcall expand expandbit(pointer)
+				#before expandbit at class: expandbit already has nobits_virtual previous test
+				sd expand;setcall expand expandbit_wrap(pointer)
 				if expand!=0
 					set relocindx (dtnbind)
 				endif
@@ -429,13 +427,13 @@ function get_reserve_size(sv ptrcontent,
 	If err!=(noerror)
 		Return err
 	EndIf
-	Chars negreserve="Unexpected negative value at reserve declaration."
+	Char negreserve="Unexpected negative value at reserve declaration."
 	vStr ptrnegreserve^negreserve
 	If ptrvalue#<0
 		Return ptrnegreserve
 	EndIf
 	if is_stack==(FALSE)
-		If typenumber!=(charsnumber)
+		If typenumber!=(charnumber)
 			SetCall err maxsectioncheck(ptrvalue#,ptrvalue)
 			If err==(noerror)
 				SetCall err maxsectioncheck(ptrvalue#,ptrvalue)
--- ocompiler-1.orig/src/files/functions/debug.s
+++ ocompiler-1/src/files/functions/debug.s
@@ -21,17 +21,17 @@ function debug_lines(sd reg,sd line,sd c
 	if test==(TRUE)
 		if reg!=codeRegD
 			sv ptrdebug%%ptr_debug
-			chars a=log_line
+			char a=log_line
 			sd err
 			setcall err addtosec(#a,(bsz),ptrdebug)
 			if err==(noerror)
-				charsx buf#dw_chars_0
+				charx buf#dw_char_0
 				sd len
 				inc aux
 				setcall len dwtomem(aux,#buf)
 				setcall err addtosec(#buf,len,ptrdebug)
 				if err==(noerror)
-					chars b=asciispace
+					char b=asciispace
 					setcall err addtosec(#b,(bsz),ptrdebug)
 					if err==(noerror)
 						setcall len dwtomem(codeRegD,#buf)
--- ocompiler-1.orig/src/files/functions/elf/elf.s
+++ ocompiler-1/src/files/functions/elf/elf.s
@@ -129,7 +129,7 @@ Function elfaddstrsec(data stringofname,
 EndFunction
 
 #err
-Function elfaddsym(data stringoff,data value,data size,chars st_info,chars bind,data index,data struct)
+Function elfaddsym(data stringoff,data value,data size,char st_info,char bind,data index,data struct)
 #	sd st_info
 #	Set st_info type
 const elf_sym_st_info_tohibyte=16
@@ -144,9 +144,9 @@ const elf_sym_st_info_tohibyte=16
 	if x==(TRUE)
 		Data elf64_sym_st_name#1
 	#const elf64_sym_st_info_offset=dwsz
-		Chars elf64_sym_st_info#1
-		Chars *elf64_sym_st_other={0}
-		Chars elf64_sym_st_shndx#2
+		Char elf64_sym_st_info#1
+		Char *elf64_sym_st_other={0}
+		Char elf64_sym_st_shndx#2
 		Data elf64_sym_st_value#1;data *=0
 		Data elf64_sym_st_size#1;data *=0
 
@@ -172,11 +172,11 @@ const elf_sym_st_info_tohibyte=16
 		Const STT_FUNC=2
 		Const STT_SECTION=3
 	#const elf32_sym_st_info_offset=3*dwsz
-		Chars elf32_sym_st_info#1
+		Char elf32_sym_st_info#1
 		#Symbol visibility
-		Chars *elf32_sym_st_other={0}
+		Char *elf32_sym_st_other={0}
 		#Section index
-		Chars elf32_sym_st_shndx#2
+		Char elf32_sym_st_shndx#2
 
 		Set elf32_sym_st_name stringoff
 		Set elf32_sym_st_value value
@@ -191,7 +191,7 @@ const elf_sym_st_info_tohibyte=16
 	Return err
 EndFunction
 #err
-Function elfaddstrszsym(data stringstroff,data sz,data value,data size,chars type,chars bind,data index,data struct)
+Function elfaddstrszsym(data stringstroff,data sz,data value,data size,char type,char bind,data index,data struct)
 	Data regnr#1
 	Data ptrregnr^regnr
 	Data err#1
@@ -203,7 +203,7 @@ Function elfaddstrszsym(data stringstrof
 	Return err
 EndFunction
 #err
-Function elfaddstrsym(data stringstroff,data value,data size,chars type,chars bind,data index,data struct)
+Function elfaddstrsym(data stringstroff,data value,data size,char type,char bind,data index,data struct)
 	Data sz#1
 	SetCall sz strlen(stringstroff)
 	Data err#1
@@ -266,9 +266,9 @@ Function addrel_base(sd offset,sd symbol
 		#offset
 		Data elf_r_offset#1
 		#Relocation type and symbol index
-		Chars *elf_r_info_type=R_386_32
+		Char *elf_r_info_type=R_386_32
 	#const elf_r_info_symbolindex_offset=dwsz+bsz
-		chars elf_r_info_symbolindex#3
+		char elf_r_info_symbolindex#3
 	#const elf_r_info_symbolindex_size=3
 		data elf_r_addend#1
 
--- ocompiler-1.orig/src/files/functions/include.s
+++ ocompiler-1/src/files/functions/include.s
@@ -34,7 +34,7 @@ Function include(ss path,sd both)
 	Data sizeoffl#1
 	Data offsetoffl#1
 	Data *lineoffl=0
-	Chars nameoffl#shortstrsize
+	Char nameoffl#shortstrsize
 
 	Data err#1
 	Data noerr=noerror
@@ -67,7 +67,7 @@ Function include(ss path,sd both)
 		setcall err addtolog_withchar_parses(pcontentoffl#,(log_pathfolder),both)
 		If err!=noerr;Return err;EndIf
 
-		chars storechar#1
+		char storechar#1
 		set storechar folders#
 		set folders# 0
 
@@ -115,7 +115,7 @@ Function include(ss path,sd both)
 
 	Add dest fnamesize
 	If moresize==one
-		Chars morestr="~"
+		Char morestr="~"
 		Set dest# morestr
 		Add dest one
 	EndIf
--- ocompiler-1.orig/src/files/functions/inits.s
+++ ocompiler-1/src/files/functions/inits.s
@@ -38,7 +38,7 @@ function comline_parse(sd argc,sv argv)
 endfunction
 #err
 function comline_value(ss v,sd p)
-	chars input#1
+	char input#1
 	set input v#
 	if input!=0
 		if input>=(asciizero)
--- ocompiler-1.orig/src/files/functions/override.s
+++ ocompiler-1/src/files/functions/override.s
@@ -15,7 +15,7 @@ function override_com(sd pcontent,sd psi
 	endif
 	sd err
 	ss t
-	charsx aux#1   #override is at all passes coming again here
+	charx aux#1   #override is at all passes coming again here
 	set t name;add t size;set aux t#;set t# 0
 	#work can be done do allow line comment here
 	ss p
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -44,7 +44,7 @@ Function warnings(sd p_err,sd has_named_
 		EndIf
 		If var!=(NULL)
 			if p_err#==(noerror)
-				Chars unrefformat="Unreferenced variable/function/constant: %s. Parent: %s."
+				Char unrefformat="Unreferenced variable/function/constant: %s. Parent: %s."
 				Str ptrunrefformat^unrefformat
 
 				Data printbuffer#1
@@ -71,7 +71,7 @@ EndFunction
 #void
 #parse and set the value, 0-9(one digit) values are expected here
 function parsepreferences(sd ptrcontent,sd ptrsize,sd strs_pointers)
-	Chars searchsign="="
+	Char searchsign="="
 	Data sizeuntilsign#1
 
 	str content#1
--- ocompiler-1.orig/src/files/functions/scopes.s
+++ ocompiler-1/src/files/functions/scopes.s
@@ -1,4 +1,6 @@
 
+const sizeofclassinfo=dwsz+dwsz
+
 value scopesbag#1
 data scopesbag_size#1
 const scopesbag_ptr^scopesbag
@@ -20,14 +22,16 @@ function scopes_free()
 			while start!=pointer
 				sub pointer :
 				sv cursor_first;set cursor_first pointer#
-				sv cursor=sizeofscope
-				add cursor cursor_first
-				while cursor_first!=cursor
-				#the order is reversed but it is not a work more if all mallocs are ok
-					sub cursor (sizeofcontainer)
-					call enumbags_free(cursor)
-				endwhile
-				call free(cursor_first)
+				if cursor_first!=(NULL)
+					sv cursor=sizeofscope
+					add cursor cursor_first
+					while cursor_first!=cursor
+						#reversed order for speed reasons here, not care about alloc order
+						sub cursor (sizeofcontainer)
+						call enumbags_free(cursor) #this has check against NULL
+					endwhile
+					call free(cursor_first)
+				endif
 			endwhile
 		endif
 		call free(start)
@@ -78,7 +82,10 @@ function scopes_alloc(sd has_named_entry
 		#alloc some dummy values
 		while start!=pointer
 			sub pointer :
-			setcall pointer# memcalloc((sizeofscope)) #is calloc, needing reg 0, in case it is searched , and at freeings
+			setcall pointer# memcalloc((sizeofscope+sizeofclassinfo)) #is calloc, needing reg 0, in case it is searched , and at freeings
+			if pointer#==(NULL)
+				return (error)
+			endif
 		endwhile
 		return (noerror)
 	endif
@@ -150,3 +157,22 @@ function scopes_searchinvars(sd p_err,sv
 	endwhile
 	return (NULL)
 endfunction
+
+
+function scopes_store_class()
+	sd ptrfunctionTagIndex%ptrfunctionTagIndex
+	sd scope;setcall scope scopes_get_scope(ptrfunctionTagIndex#)
+	add scope (sizeofscope)
+	setcall scope# get_img_vdata_dataReg()  #and img_vdata ? at getarg will subtract from ptrdata# that is with the same img_vdata
+	add scope (dwsz)
+	setcall scope# get_img_vdata_dataSize()
+endfunction
+function scopes_get_class_data(sd scope,sd data)
+	add scope (sizeofscope)
+	sd expand;setcall expand expandbit(data)
+	if expand!=0
+		add scope (location)
+		return scope#
+	endif
+	return scope#
+endfunction
--- ocompiler-1.orig/src/files/functions/stack/stack.s
+++ ocompiler-1/src/files/functions/stack/stack.s
@@ -71,14 +71,14 @@ function entryscope()
 	data container%%ptr_codesec
 	sd err
 	#push ebx,push ebp
-	const scope1_start=!;chars scope1={0x53,0x55};const scope1_sz=!-scope1_start
+	const scope1_start=!;char scope1={0x53,0x55};const scope1_sz=!-scope1_start
 	const stackinitpush=2*dwsz
 	#mov e(r)bp e(r)sp
-	const scope2_start=!;chars scope2={moveatregthemodrm,0xec};const scope2_sz=!-scope2_start
+	const scope2_start=!;char scope2={moveatregthemodrm,0xec};const scope2_sz=!-scope2_start
 	#mov e(r)bx e(r)sp
-	const scope3_start=!;chars scope3={moveatregthemodrm,0xdc};const scope3_sz=!-scope3_start
+	const scope3_start=!;char scope3={moveatregthemodrm,0xdc};const scope3_sz=!-scope3_start
 	#sub e(r)bx dword
-	const scope4_start=!;chars scope4={0x81,0xeb}
+	const scope4_start=!;char scope4={0x81,0xeb}
 	data *scopestack=0;const scope4_sz=!-scope4_start
 
 	setcall err addtosec(#scope1,(scope1_sz),container);if err!=(noerror);return err;endif
@@ -112,8 +112,8 @@ endfunction
 
 #er
 function addtocode_decstack(sd for_64)
-	chars movtostack=moveatmemtheproc
-	chars *modrm=disp32mod|ebxregnumber
+	char movtostack=moveatmemtheproc
+	char *modrm=disp32mod|ebxregnumber
 	data rampindex#1
 
 	data stack^movtostack
@@ -134,6 +134,7 @@ function addtocode_decstack(sd for_64)
 endfunction
 #er
 function addtocodeforstack(sd rightstackpointer,sd for_64)
+	#s^s
 	data noerr=noerror
 
 	sd err
@@ -147,7 +148,7 @@ function addtocodeforstack(sd rightstack
 endfunction
 #er
 function addtocodefordata(sd value,sd for_64,sd ext)
-	chars code=ateaximm
+	char code=ateaximm
 	data val#1
 
 	sd err
--- ocompiler-1.orig/src/files/functions/stack/stack_inits.s
+++ ocompiler-1/src/files/functions/stack/stack_inits.s
@@ -1,13 +1,12 @@
 
 
 
-function data_get_maskbit(ss pointer,sd bit)
+#mask bit
+function data_get_maskbit(sd pointer,sd bit)
 	add pointer (maskoffset)
 	and bit pointer#
 	return bit
 endfunction
-
-#import bit
 function importbit(sd pointer)
 	sd bit
 	setcall bit data_get_maskbit(pointer,(idatabitfunction))
@@ -18,9 +17,9 @@ function stackbit(sd pointer)
 	setcall bit data_get_maskbit(pointer,(stackbit))
 	return bit
 endfunction
-function pointbit(sd pointer)
+function stackrelativebit(sd pointer)
 	sd bit
-	setcall bit data_get_maskbit(pointer,(pointbit))
+	setcall bit data_get_maskbit(pointer,(stackrelativebit))
 	return bit
 endfunction
 function datapointbit(sd pointer)
@@ -33,13 +32,32 @@ function expandbit(sd pointer)
 	setcall bit data_get_maskbit(pointer,(expandbit))
 	return bit
 endfunction
+function expandbit_wrap(sd pointer)
+	vdata ptr_nobits_virtual%ptr_nobits_virtual
+	if ptr_nobits_virtual#==(Yes)
+		sd bit
+		setcall bit data_get_maskbit(pointer,(expandbit))
+		return bit
+	endif
+	return 0
+endfunction
+function pointbit(sd pointer)
+	sd bit
+	setcall bit data_get_maskbit(pointer,(pointbit))
+	return bit
+endfunction
+function suffixbit(sd pointer)
+	sd bit
+	setcall bit data_get_maskbit(pointer,(suffixbit))
+	return bit
+endfunction
 
 function stack_get_relative(sd location)
 	sd mask
 	set mask location
 	add mask (maskoffset)
 	set mask mask#
-	and mask (stack_relative)
+	and mask (stackrelativebit)
 	if mask==0
 		return (ebxregnumber)
 	endif
--- ocompiler-1.orig/src/files/functions/values/numbersandconstants.s
+++ ocompiler-1/src/files/functions/values/numbersandconstants.s
@@ -1,9 +1,9 @@
 
 
 #bool numeric
-Function numeric(chars c)
-	Chars zero={asciizero}
-	Chars nine={asciinine}
+Function numeric(char c)
+	Char zero={asciizero}
+	Char nine={asciinine}
 	Data false=FALSE
 	Data true=TRUE
 	If c<zero
@@ -30,7 +30,7 @@ Function memtoint(str content,data size,
 		Dec content;Dec size
 
 		Data bool#1
-		Chars byte#1
+		Char byte#1
 		Set byte content#
 		SetCall bool numeric(byte)
 		If bool==(FALSE)
@@ -79,14 +79,14 @@ EndFunction
 const nothex_value=-1
 
 #out -1 or the converted number
-Function hexnr(chars byte)
-	Chars Asciizero={asciizero}
-	Chars Asciinine={asciinine}
-	Chars AsciiA={asciiA}
-	Chars AsciiF={asciiF}
-	Chars Asciia={asciia}
-	Chars Asciif={asciif}
-	Chars afternine={10}
+Function hexnr(char byte)
+	Char Asciizero={asciizero}
+	Char Asciinine={asciinine}
+	Char AsciiA={asciiA}
+	Char AsciiF={asciiF}
+	Char Asciia={asciia}
+	Char Asciif={asciif}
+	Char afternine={10}
 	If byte<Asciizero
 		Return (nothex_value)
 	ElseIf byte<=Asciinine
@@ -132,7 +132,7 @@ Function memtohex(str content,data size,
 	Data ps^size
 	Data bool=0
 	Data zero=0
-	Chars byte#1
+	Char byte#1
 	Data nr#1
 	Data initialmultp=1
 	Data multp#1
@@ -164,7 +164,7 @@ EndFunction
 function numbertoint(str content,data size,data outval,data minusbool)
 	Data bool#1
 	#test to see if the ! sign is present that means the current data cursor
-	chars data_cursor=asciiexclamationmark
+	char data_cursor=asciiexclamationmark
 	if content#==data_cursor
 		if size==1
 			setcall outval# get_img_vdata_dataReg()
@@ -172,7 +172,7 @@ function numbertoint(str content,data si
 		endif
 		if size==2
 			inc content
-			charsx against#1
+			charx against#1
 			set against content#
 			if against!=(asciix)
 			#maybe is X
@@ -182,8 +182,9 @@ function numbertoint(str content,data si
 				#main.ptr_nobits_virtual not yet at ocompiler, we have WinMain or nothing at windows
 				vdata ptr_nobits_virtual%ptr_nobits_virtual
 				if ptr_nobits_virtual#==(Yes)
-					vdata pnobitsReg%ptrnobitsReg
-					set outval# pnobitsReg#
+					#vdata pnobitsReg%ptrnobitsReg
+					#set outval# pnobitsReg#
+					setcall outval# get_dataSize()
 					#add outval# get_img_vdata()
 					return (noerror)
 				endif
@@ -194,7 +195,7 @@ function numbertoint(str content,data si
 		str er="The text after the data cursor sign isn't recognized."
 		return er
 	#test for : sign (the size of a stack value, 4B on 32-bits, 8B on 64-bits)
-	chars int_size=asciicolon
+	char int_size=asciicolon
 	elseif content#==int_size
 		if size!=1;return "The text after the size of an integer sign isn't recognized.";endif
 		sd b;setcall b is_for_64()
@@ -207,7 +208,7 @@ function numbertoint(str content,data si
 	If bool==0
 		SetCall bool memtohex(content,size,outval)
 		If bool==0
-			Chars _intvalerr="Integer(dec/hex) value not recognized."
+			Char _intvalerr="Integer(dec/hex) value not recognized."
 			Str intvallerr^_intvalerr
 			Return intvallerr
 		EndIf
@@ -221,7 +222,7 @@ Function numbersconstants(str content,da
 	If size<=0
 		Return intconsterr
 	EndIf
-	chars not=asciiequiv
+	char not=asciiequiv
 	sd notbool=FALSE
 	if content#==not
 		set notbool (TRUE)
@@ -250,7 +251,7 @@ Function numbersconstants(str content,da
 		Data pointer#1
 		SetCall pointer vars(content,size,constr)
 		If pointer==0
-			Chars unconst="Undefined constant name."
+			Char unconst="Undefined constant name."
 			Str ptruncost^unconst
 			Return ptruncost
 		EndIf
@@ -275,7 +276,7 @@ function parenthesis_size(ss content,sd
 	sd mark
 	data noerr=noerror
 	sd last
-	Chars closefnexp="Close parenthesis sign (')') expected."
+	Char closefnexp="Close parenthesis sign (')') expected."
 	Str closeerr^closefnexp
 
 	set mark content
@@ -292,8 +293,8 @@ function parenthesis_size(ss content,sd
 		if content==last
 			return closeerr
 		endif
-		Chars fnbegin=asciiparenthesisstart
-		Chars fnend=asciiparenthesisend
+		Char fnbegin=asciiparenthesisstart
+		Char fnend=asciiparenthesisend
 		if content#==fnend
 			dec opens
 			if opens==z
@@ -311,7 +312,7 @@ endfunction
 #er
 function parenthesis_all_size(ss content,sd size,sd ptr_sz)
 	data noerr=noerror
-	Chars fnbegin=asciiparenthesisstart
+	Char fnbegin=asciiparenthesisstart
 	if content#!=fnbegin
 		return noerr
 	endif
--- ocompiler-1.orig/src/files/functions/values/operations.s
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -93,7 +93,7 @@ function operation_core(sd inoutvalue,sd
 	ElseIf number==(divNumber)
 		Data zero=0
 		If newitem==zero
-			Chars zerodiv="Division by 0 error."
+			Char zerodiv="Division by 0 error."
 			Str ptrzerodiv^zerodiv
 			Return ptrzerodiv
 		EndIf
@@ -167,7 +167,7 @@ function operation_core(sd inoutvalue,sd
 endfunction
 
 #bool
-Function signop(chars byte,sd outval)
+Function signop(char byte,sd outval)
 	Data false=FALSE
 	Data true=TRUE
 
--- ocompiler-1.orig/src/files/headers/commons.h
+++ ocompiler-1/src/files/headers/commons.h
@@ -59,9 +59,9 @@ data two=2
 data three=3
 Data negative=-1
 Data i#1
-Chars dot="."
+Char dot="."
 
-const dw_chars=10
-const dw_chars_0=dw_chars+1
+const dw_char=10
+const dw_char_0=dw_char+1
 
 const sym_with_size=dwsz
--- ocompiler-1.orig/src/files/headers/elf_format.h
+++ ocompiler-1/src/files/headers/elf_format.h
@@ -19,35 +19,35 @@ const ET_REL=1
 
 Const elf_fileheaders_start=!
 
-chars *elf32_ehd_e_ident_sign={ELFMAG0,ELFMAG1,ELFMAG2,ELFMAG3}
+char *elf32_ehd_e_ident_sign={ELFMAG0,ELFMAG1,ELFMAG2,ELFMAG3}
 
 #32-bit objects
-chars *elf32_ehd_e_ident_class={ELFCLASS32}
+char *elf32_ehd_e_ident_class={ELFCLASS32}
 
 #2's complement, little endian
 const ELFDATA2LSB=1
-chars *elf32_ehd_e_ident_data={ELFDATA2LSB}
+char *elf32_ehd_e_ident_data={ELFDATA2LSB}
 
 #Current version
 const EV_CURRENT=1
-chars *elf32_ehd_e_ident_version={EV_CURRENT}
+char *elf32_ehd_e_ident_version={EV_CURRENT}
 
 #EI_OSABI
 const ELFOSABI_NONE=0
-chars *elf32_ehd_e_ident_osabi={ELFOSABI_NONE}
+char *elf32_ehd_e_ident_osabi={ELFOSABI_NONE}
 
 #If no values are specified for the EI_OSABI field by the processor supplement or no version values are specified for the ABI determined by a particular value of the EI_OSABI byte, the value 0 shall be used for the EI_ABIVERSION byte; it indicates unspecified.
 const EI_ABIVERSION=0
-chars *elf32_ehd_e_ident_abiversion={EI_ABIVERSION}
+char *elf32_ehd_e_ident_abiversion={EI_ABIVERSION}
 
 #pad to 0x10
-chars *elf32_ehd_e_ident_pad={0,0,0,0,0,0,0}
+char *elf32_ehd_e_ident_pad={0,0,0,0,0,0,0}
 
 
 #Object file type
-Chars elf32_ehd_e_type#2
+Char elf32_ehd_e_type#2
 #Architecture,Intel 80386
-Chars *elf32_ehd_e_machine={EM_386,0}
+Char *elf32_ehd_e_machine={EM_386,0}
 
 data *elf32_ehd_e_version=EV_CURRENT
 #entry point
@@ -58,19 +58,19 @@ data elf32_ehd_e_phoff#1
 data elf32_ehd_e_shoff#1
 data *elf32_ehd_e_flags=0
 #Size of this header
-chars *elf32_ehd_e_ehsize={52,0}
+char *elf32_ehd_e_ehsize={52,0}
 #Program header table entry size
 Const elf32_ehd_e_phentsize=32
-chars *elf32_ehd_e_phentsize={elf32_ehd_e_phentsize,0}
+char *elf32_ehd_e_phentsize={elf32_ehd_e_phentsize,0}
 #Program header table entry count
-chars elf32_ehd_e_phnum#2
+char elf32_ehd_e_phnum#2
 #Section header table entry size
 Const elf32_ehd_e_shentsize=40
-chars *elf32_ehd_e_shentsize={elf32_ehd_e_shentsize,0}
+char *elf32_ehd_e_shentsize={elf32_ehd_e_shentsize,0}
 #Section header table entry count
-chars elf32_ehd_e_shnum#2
+char elf32_ehd_e_shnum#2
 #Section header string table index
-chars elf32_ehd_e_shstrndx#2
+char elf32_ehd_e_shstrndx#2
 
 Const elf_fileheaders_end=!
 
@@ -89,27 +89,27 @@ data ptrelf32_ehd_e_shstrndx^elf32_ehd_e
 
 #64 bit objects
 Const elf64_fileheaders_start=!
-chars elf64_ehd_e_ident_sign={ELFMAG0,ELFMAG1,ELFMAG2,ELFMAG3}
-chars *elf64_ehd_e_ident_class={ELFCLASS64}
-chars *elf64_ehd_e_ident_data={ELFDATA2LSB}
-chars *elf64_ehd_e_ident_version={EV_CURRENT}
-chars *elf64_ehd_e_ident_osabi={ELFOSABI_NONE}
-chars *elf64_ehd_e_ident_abiversion={EI_ABIVERSION}
-chars *elf64_ehd_e_ident_pad={0,0,0,0,0,0,0}
-Chars *elf64_ehd_e_type={ET_REL,0}
-Chars *elf64_ehd_e_machine={EM_X86_64,0}
+char elf64_ehd_e_ident_sign={ELFMAG0,ELFMAG1,ELFMAG2,ELFMAG3}
+char *elf64_ehd_e_ident_class={ELFCLASS64}
+char *elf64_ehd_e_ident_data={ELFDATA2LSB}
+char *elf64_ehd_e_ident_version={EV_CURRENT}
+char *elf64_ehd_e_ident_osabi={ELFOSABI_NONE}
+char *elf64_ehd_e_ident_abiversion={EI_ABIVERSION}
+char *elf64_ehd_e_ident_pad={0,0,0,0,0,0,0}
+Char *elf64_ehd_e_type={ET_REL,0}
+Char *elf64_ehd_e_machine={EM_X86_64,0}
 data *elf64_ehd_e_version=EV_CURRENT
 data *elf64_ehd_e_entry={0,0}
 data *elf64_ehd_e_phoff={0,0}
 data elf64_ehd_e_shoff#1;data *=0
 data *elf64_ehd_e_flags=0
-chars *elf64_ehd_e_ehsize={64,0}
-chars *elf64_ehd_e_phentsize={0,0}
-chars *elf64_ehd_e_phnum={0,0}
-chars *elf64_ehd_e_shentsize={64,0}
-chars elf64_ehd_e_shnum#2
-chars elf64_ehd_e_shstrndx#2
-chars *pad={0,0}
+char *elf64_ehd_e_ehsize={64,0}
+char *elf64_ehd_e_phentsize={0,0}
+char *elf64_ehd_e_phnum={0,0}
+char *elf64_ehd_e_shentsize={64,0}
+char elf64_ehd_e_shnum#2
+char elf64_ehd_e_shstrndx#2
+char *pad={0,0}
 Const elf64_fileheaders_size=!-elf64_fileheaders_start
 
 
@@ -232,7 +232,7 @@ Const elf_importfileheaders_end=!
 Data elf_importfileheaders%elf_importfileheaders
 Data elf_importfileheaders_size=elf_importfileheaders_end-elf_importfileheaders
 
-Chars interpreter="/lib/ld-linux.so.2"
+Char interpreter="/lib/ld-linux.so.2"
 Str ptrinterpreter^interpreter
 Data interpretersize#1
 
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -9,7 +9,7 @@ Const idatabitfunction=0x02
 Const stackbit=0x04
 #bit offset 3:
 	#stackbit: 1 means ebp fn arguments          #was bit offset 3,4,5: stack ebx/ebp
-Const stack_relative=0x08
+Const stackrelativebit=0x08
 	#nostackbit: datapointbit
 Const datapointbit=0x08
 #bit offset 4: 1 means is nobits
@@ -20,12 +20,20 @@ const aftercallthrowlessbit=0x20
 const x86_64bit=0x40
 #bit offset 7; pointer bit (sv# with rex, sd# without rex)
 const pointbit=0x80
+#bit offset 8; runtime sufix offset
+const suffixbit=0x100
 
 const dummy_mask=0
 const valueslongmask=datapointbit|pointbit
+const location_bits=stackbit|expandbit
+const stack_location_bits=location_bits|stackrelativebit
 
-Const maskoffset=dwsz
-Const nameoffset=maskoffset+dwsz
+const location=dwsz
+Const maskoffset=location
+const masksize=dwsz
+const location_and_mask=maskoffset+masksize
+Const nameoffset=location_and_mask
+const addoffset=location_and_mask
 
 const sizeof_minimumentry=nameoffset+1
 #ref entry end
@@ -89,7 +97,7 @@ Datax *#1
 Datax stringMax#1
 Datax *#1
 Datax *#1
-Datax charsMax#1
+Datax charMax#1
 Datax *#1
 Datax *#1
 Datax sdMax#1
@@ -108,7 +116,7 @@ Datax *#1
 Datax stringfnscopeMax#1
 Datax *#1
 Datax *#1
-Datax charsfnscopeMax#1
+Datax charfnscopeMax#1
 Datax *#1
 Datax *#1
 Datax sdfnMax#1
@@ -124,13 +132,13 @@ Datax *#1
 Const memvariablesnumber=0
 	Const integersnumber=memvariablesnumber+0
 	Const stringsnumber=memvariablesnumber+1
-	Const charsnumber=memvariablesnumber+2
-	const valuesinnernumber=charsnumber
-Const totalmemvariables=charsnumber+1
+	Const charnumber=memvariablesnumber+2
+	const valuesinnernumber=charnumber
+Const totalmemvariables=charnumber+1
 	Const stackdatanumber=totalmemvariables+integersnumber
 	Const stackstringnumber=totalmemvariables+stringsnumber
 	Const stackvaluenumber=totalmemvariables+valuesinnernumber
-	#that was +charsnumber because it is compared against 2. and more reasons
+	#that was +charnumber because it is compared against 2. and more reasons
 Const numberofvars=stackvaluenumber+1
 
 const vnumbers=numberofvars
@@ -219,7 +227,7 @@ const containersalmostend^debugsecReg
 data containerssize=containersalmostend+dwsz-containersbegin
 const containerssize^containerssize
 
-chars dummyEntry_data#sizeof_minimumentry
+char dummyEntry_data#sizeof_minimumentry
 
 Data dummyEntryMax=sizeof_minimumentry
 Data *dummyEntry^dummyEntry_data
@@ -229,8 +237,8 @@ Const ptrdummyEntry^dummyEntryMax
 
 #data clownEntry#1
 #data *#1
-data nobitssecReg#1
-const ptrnobitsReg^nobitssecReg
+#data nobitssecReg#1
+#const ptrnobitsReg^nobitssecReg
 #used at !x offset
 
 Data datasecSize#1
@@ -313,7 +321,7 @@ const ptrlogfile^logfile
 
 data includedir#1
 const ptrincludedir^includedir
-chars fileendchar#1
+char fileendchar#1
 
 const ignore_warn=0
 #const show_warn=1
@@ -348,7 +356,7 @@ Data ptrsubtype^subtype
 
 
 ##stack
-#chars movtostack={0xc7,0x85}
+#char movtostack={0xc7,0x85}
 #data rampindex#1
 #data rampvalue#1
 const rampadd_value_off=bsz
@@ -393,7 +401,7 @@ const reserveascii=asciinumber
 const pointerascii=asciinumber
 
 #const max_uint64=20
-chars uint32c#dw_chars_0
+char uint32c#dw_char_0
 vstr uint32s^uint32c
 
 data w_as_e#1
--- ocompiler-1.orig/src/files/headers/pe_format.h
+++ ocompiler-1/src/files/headers/pe_format.h
@@ -11,22 +11,22 @@ Const dossize=0x1e*wsz+dwsz
 
 Const pe_fileheadersstart=!
 
-Chars dos_header#dossize
+Char dos_header#dossize
 Const stublength=0x40
-Chars stub#stublength
+Char stub#stublength
 
-Chars *coffmagic="PE"
+Char *coffmagic="PE"
 #IMAGE_FILE_HEADER
-Chars *align={0}
-Chars fileheader#4*wsz+dwsz+dwsz+dwsz
+Char *align={0}
+Char fileheader#4*wsz+dwsz+dwsz+dwsz
 
 #IMAGE_OPTIONAL_HEADER
 #Standard fields.
 ####set later
-Chars Magic#2
+Char Magic#2
 ####system linker i think
-Chars *MajorLinkerVersion={1}
-Chars *MinorLinkerVersion={0x45}
+Char *MajorLinkerVersion={1}
+Char *MinorLinkerVersion={0x45}
 ####hard (file pad)
 Data SizeOfCode=0x1000
 Data SizeOfInitializedData=0x2000
@@ -43,12 +43,12 @@ Data *ImageBase=pe_imagebase
 Data SectionAlignment=page_sectionalignment
 Data FileAlignment=0x200
 #Const VersionsSize=6*wsz
-Chars *MajorOperatingSystemVersion={1,0}
-Chars *MinorOperatingSystemVersion={0,0}
-Chars *MajorImageVersion={0,0}
-Chars *MinorImageVersion={0,0}
-Chars *MajorSubsystemVersion={5,0}
-Chars *MinorSubsystemVersion={1,0}
+Char *MajorOperatingSystemVersion={1,0}
+Char *MinorOperatingSystemVersion={0,0}
+Char *MajorImageVersion={0,0}
+Char *MinorImageVersion={0,0}
+Char *MajorSubsystemVersion={5,0}
+Char *MinorSubsystemVersion={1,0}
 Data *Win32VersionValue=0
 	#all virtuals(sec pad)
 Data SizeOfImage=0x4000
@@ -58,8 +58,8 @@ Data *CheckSum=0
 
 #Const IMAGE_SUBSYSTEM_WINDOWS_GUI=2
 Const IMAGE_SUBSYSTEM_WINDOWS_CUI=3
-Chars *Subsystem={IMAGE_SUBSYSTEM_WINDOWS_CUI,0}
-Chars DllCharacteristics#2
+Char *Subsystem={IMAGE_SUBSYSTEM_WINDOWS_CUI,0}
+Char DllCharacteristics#2
 Data *SizeOfStackReserve=0x10000
 Data *SizeOfStackCommit=0x1000
 Data *SizeOfHeapReserve=0x10000
@@ -86,9 +86,9 @@ Const IMAGE_SCN_MEM_WRITE=0x80000000
 Const IMAGE_SCN_CNT_CODE=0x00000020
 Const IMAGE_SCN_MEM_EXECUTE=0x20000000
 
-Chars *datasection=".data"
+Char *datasection=".data"
 #IMAGE_SIZEOF_SHORT_NAME=8
-Chars *alignmenttoEight_data_name={0,0}
+Char *alignmenttoEight_data_name={0,0}
 Data dVirtualSize=0x1000
 Const pe_data_offset=0x1000
 Data *dVirtualAddress=pe_data_offset
@@ -101,8 +101,8 @@ Data *dPointerToRawData=0x1000
 Data *moreatdata={0,0,0}
 Data *datasectionCharacteristics=IMAGE_SCN_CNT_INITIALIZED_DATA|IMAGE_SCN_MEM_READ|IMAGE_SCN_MEM_WRITE
 
-Chars *codesection=".code"
-Chars *alignmenttoEight_code_name={0,0}
+Char *codesection=".code"
+Char *alignmenttoEight_code_name={0,0}
 Data cVirtualSize#1
 Data cVirtualAddress#1
 Data cSizeOfRawData#1
@@ -114,8 +114,8 @@ Const sizefileheadercodedata=!
 
 Const idatasectionstart=!
 
-Chars *idatasection=".idata"
-Chars *alignmenttoEight_idata_name={0}
+Char *idatasection=".idata"
+Char *alignmenttoEight_idata_name={0}
 Data *iVirtualSize=0x1000
 Data iVirtualAddress#1
 Data iSizeOfRawData=0x1000
--- ocompiler-1.orig/src/files/inits/alloc.s
+++ ocompiler-1/src/files/inits/alloc.s
@@ -17,14 +17,14 @@ Set unresolvedcallsMax mainscope
 Data constantssize=constantssize
 Set integerMax mainscope
 Set stringMax mainscope
-Set charsMax mainscope
+Set charMax mainscope
 Set sdMax mainscope
 Set ssMax mainscope
 Set svMax mainscope
 
 Set integerfnscopeMax subscope
 Set stringfnscopeMax subscope
-Set charsfnscopeMax subscope
+Set charfnscopeMax subscope
 Set sdfnMax subscope
 Set ssfnMax subscope
 Set svfnMax subscope
--- ocompiler-1.orig/src/files/inits/inits.s
+++ ocompiler-1/src/files/inits/inits.s
@@ -29,7 +29,7 @@ Call sortallcommands()
 
 #the detailed functions and entry point informations
 #main alloc error msg
-Chars entrystartfile#shortstrsize
+Char entrystartfile#shortstrsize
 Str ptrentrystartfile^entrystartfile
 Data entrylinenumber#1
 
@@ -67,9 +67,9 @@ set warn_hidden_whitespaces_times 0
 sd convention_64
 setcall convention_64 p_neg_is_for_64()
 
-ss init_argmasks
-setcall init_argmasks argmasks()
-set init_argmasks# 0
+#ss init_argmasks
+#setcall init_argmasks argmasks()
+#set init_argmasks# 0
 
 if includedir==(TRUE)
 	set fileendchar (log_fileend)
@@ -90,8 +90,10 @@ set functionTagIndex 0
 
 call resetisimm()
 
-#this is init at main.s and used after that    set datasecSize 0
-set nobitssecReg 0
+#this is init at main.s and used after that
+#but since #! needed at first pass too
+set datasecSize 0
+#set nobitssecReg 0
 
 sd p_b
 setcall p_b is_for_64_is_impX_or_fnX_p_get()
--- ocompiler-1.orig/src/linux/files/xgetfile.s
+++ ocompiler-1/src/linux/files/xgetfile.s
@@ -1,6 +1,6 @@
 
 if argc<1
-	Chars cmdscripterr="Cannot parse to input file name."
+	Char cmdscripterr="Cannot parse to input file name."
 	Str ptrcmdscripterr^cmdscripterr
 	call exitMessage(ptrcmdscripterr)
 endif
@@ -8,7 +8,7 @@ endif
 #if the file was executed from the PATH, then the root folder it is searched
 Data argumentssize#1
 str scriptfullname#1
-chars slash=asciislash
+char slash=asciislash
 data slashtest#1
 
 setcall argumentssize strlen(argv0)
@@ -29,7 +29,7 @@ else
 		setcall sizeofpath strlen(envpath)
 		set accessresult negative
 		while sizeofpath!=zero
-			chars pathdelim=":"
+			char pathdelim=":"
 			data sizeoffolder#1
 			setcall sizeoffolder valinmem(envpath,sizeofpath,pathdelim)
 
@@ -51,7 +51,7 @@ else
 					add scrpointer sizeoffolder
 					dec scrpointer
 
-					chars slashcompare#1
+					char slashcompare#1
 					set slashcompare scrpointer#
 					inc scrpointer
 					if slashcompare!=slash
@@ -94,8 +94,8 @@ else
 endelse
 
 if argc<2
-	Chars cmdnoinput="O Compiler - usage: o \"filename\" [[pref1 value1]...[prefN valueN]]"
-	chars moreinfo="Documentation is here: https://htmlpreview.github.io/?https://github.com/colin-i/o/blob/master/o.html"
+	Char cmdnoinput="O Compiler - usage: o \"filename\" [[pref1 value1]...[prefN valueN]]"
+	char moreinfo="Documentation is here: https://htmlpreview.github.io/?https://github.com/colin-i/o/blob/master/o.html"
 	ss moreinfo_helper^moreinfo
 	dec moreinfo_helper;set moreinfo_helper# (asciireturn)
 	call exitMessage(#cmdnoinput)
--- ocompiler-1.orig/src/linux/o.s
+++ ocompiler-1/src/linux/o.s
@@ -12,7 +12,7 @@ Function Message(str text)
 	set stderrorobject stderrorobject_init#
 	set stderrorobject stderrorobject#
 
-	Chars visiblemessagedata={0x0a,0}
+	Char visiblemessagedata={0x0a,0}
 	Str visiblemessage^visiblemessagedata
 
 	Call fprintf(stderrorobject,visiblemessage)
--- ocompiler-1.orig/src/linux/obj.s
+++ ocompiler-1/src/linux/obj.s
@@ -13,7 +13,7 @@ Function Message(str text)
 	sd stderrorobject^stderr
 	set stderrorobject stderrorobject#
 
-	Chars visiblemessagedata={0x0a,0}
+	Char visiblemessagedata={0x0a,0}
 	Str visiblemessage^visiblemessagedata
 
 	Call fprintf(stderrorobject,visiblemessage)
--- /dev/null
+++ ocompiler-1/src/obj.txt
@@ -0,0 +1,3816 @@
+f0VMRgEBAQAAAAAAAAAAAAEAAwABAAAAAAAAAAAAAAA0AAAAAAAAADQAIAAAACgACAAHAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAMAAAAAAAAAAAQAAMU4
+AAAAAAAAAAAAAAQAAAAAAAAABwAAAAEAAAAGAAAAAAAAAMU8AABqwAEAAAAAAAAAAAAEAAAAAAAA
+AA0AAAAIAAAAAwAAAAAAAAAv/QEAWQEAAAAAAAAAAAAABAAAAAAAAABnEwAAAgAAAAAAAAAAAAAA
+L/0BAAAXAAAHAAAABAAAAAQAAAAQAAAAbxMAAAQAAAAAAAAAAAAAAC8UAgDMFQAABAAAAAEAAAAE
+AAAADAAAAHoTAAAEAAAAAAAAAAAAAAD7KQIA6BMBAAQAAAACAAAABAAAAAwAAACFEwAAAwAAAAAA
+AAAAAAAA4z0DAI0TAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAKAAQAAAAAAAAAAAAAAAEAAAAAAAAAABAAAAEAAAACAAAABAAAAAgAAAAAAAAAAQAAAAIAAAAD
+AAAA/////wAAAAAuAAAAAABIAAAAAAAAAAAAAAAAAAAAWAAAADgBAAAAAAAAAAAAAAAJAAAAZAAA
+AAAAAABtAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAANgAAADkAAAADAAAAPAAAAAIAQAA/AAAABQBAAAYAAAALAEAAA4AAAAA
+AAAAQQIAAAAAAAAAAAAAAAAAAPUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgEAAAAAAAAA
+AAAAAAAAAAAAAB4BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRQAQAAAA
+IAAAAAAAAAAAAAAAMAAAABAAAAAAQAAAEAAAAAIAAAEAAAAAAAAABQABAAAAAAAAQAAAAAAAAAAA
+AAADAAAAAAABAAAQAAAAAAEAABAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuZGF0YQAAAAAQAAAA
+EAAAABAAAAAQAAAAAAAAAAAAAAAAAABAAADALmNvZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAIAAAYC5pZGF0YQAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAEAAAEAABAAAf0VM
+RgEBAQAAAAAAAAAAAAAAAwABAAAAAAAAAAAAAAAAAAAAAAAAADQAIAAAACgAAAAAAAEEAAA0AAAA
+EQQAACEEAAAtBAAAMQQAADMEAAB/RUxGAgEBAAAAAAAAAAAAAQA+AAEAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAQAAAAAAAQAAAAAAAAAABAAAAAAQAAACEBAgAhAQIAAAAAAAAAAAGAAAA
+ABAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAEAAAkwQAAEAAAAADAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAEAAAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAABAAAAAQAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAABgAAAAAQAADbBAAAYAAAAC9saWIvbGQtbGludXguc28uMgBDBQAA
+AAAAAAQAAAAAAAAABgAAAAAAAAALAAAAEAAAAAUAAAAAAAAACgAAAAAAAAAHAAAAAAAAAAgAAAAA
+AAAACQAAAAwAAAAAAAAAAAAAAEgAAAABAAAAAAAAAAAAAAAMAAAACAAAAAAAAAAAAAAAAAAAAEhP
+TUUA0wUAAE5vIHByZWZlcmVuY2VzIGZpbGUgZm91bmQgaW4gSE9NRS4gVGhlIGZpbGUgaXMgaGVy
+ZTogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NvbGluLWkvby9tYXN0ZXIvLm9j
+b21waWxlci50eHQATgYAAEdldGVudiBlcnJvciBvbiBIT01FLgBtaXNzaW5nIHZhbHVlIGZvciBj
+b21tYW5kIGxpbmUgYXJndW1lbnQAAGEgY29tbWFuZCBsaW5lIHZhbHVlIGNhbiBoYXZlIG9ubHkg
+MCwxLDIgb3IgMwBjb21tYW5kIGxpbmUgdmFsdWUgbXVzdCBoYXZlIG9ubHkgb25lIGRpZ2l0AGNv
+bW1hbmQgbGluZSB2YWx1ZSBpcyBub3QgYSBudW1iZXIAY29tbWFuZCBsaW5lIHZhbHVlIG51bGwA
+Y29tbWFuZCBsaW5lIGFyZ3VtZW50IG5vdCBmb3VuZAAAAAAAAAAAAAAAAAAAAAAAAAAAAE1lbW9y
+eSBhbGxvY2F0aW9uIGVycm9yLgBWBwAAAAAAAG1hbGxvYyBlcnJvcgAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAnAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/
+////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AcAACVzJXMA5QAAAAAAAAAA
+AAAAAAAAAAAAAAD/////AAAAAB0IAABDYW5ub3Qgb3BlbiBhIGZpbGU6AAAAAABDYW5ub3Qgd3Jp
+dGUgZGF0YSB0byBhIGZpbGUuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////
+/wAAAAAAAAAAAAAAAAAAAAAAAAAAAFwvAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAA9QgAAAAAAAAAAAAAAAAAAAIAAAAAAAAARmlsZSByZWFkIGVycm9yLgBG
+aWxlIGxlbmd0aCBmdW5jdGlvbiBlcnJvci4AAAAAAAAAAAAAAAAAAAAAAAAAAADlAAAAAAAAAAAA
+AAAAAAAAABAAAEEgZmlsZSBwYXRoIHNpemUgaXMgZ3JlYXRlciB0aGFuIG1heGltdW0gbnVtYmVy
+LgBmCQAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAALMJAAAAAAAAAAAAAAgAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAMAAAA2wkAAAAAAAABAAAADAAAAAYAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCgD1AAAAuQAAALkAAAAAAAAAAAAAAAAl
+MDh4AAAAAAC5AAAAAAAAAAAAAAAAAAAABAAAAAEAAAAAAAAAAAAAAGAKAABkCgAAAAAAAAEAAAAA
+AAAAwAAAAAAAAADMAAAAAgEAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVuZGVmaW5lZCB2YXJpYWJsZSBu
+YW1lLgAQCwAAAAAAAC0LAAAAAAAAAQAAAAAAAAAAAAAAAgAAAENIQVIgc3RhdGVtZW50IGNhbm5v
+dCBoYXZlIHRoZSBwb2ludGVyIHN1Zml4LgBJCwAAAQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAYXoAAAAAAAAAAAIM
+AABIaWRkZW4gd2hpdGVzcGFjZXMgYXQgOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAOwwAAD8MAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAACIAmQwAAAAAAAAAAAAAAQAAAAAAAAAAAAAA
+qwwAAK8MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEV4cGVjdGluZyBz
+dHJpbmcgZGVsaW1pdGVkIGJ5IHF1b3RhdGlvbnMgYW5kIHdpdGggdGhlIGJhY2tzbGFzaCB0aGUg
+ZXNjYXBlIGNoYXJhY3Rlci4A4QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJYDQAAZW5kIHN0
+cmluZyAoIikgZXhwZWN0ZWQAXAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAA
+AAABAAAAAAAAAAAAAAAAAAAAAAAAAAAjAERBVEEAU1RSAENIQVIAU0QAU1MAU1YAVkRBVEEAVlNU
+UgBWQUxVRQBEQVRBWABTVFJYAENIQVJYAFZEQVRBWABWU1RSWABWQUxVRVgAQ09OU1QAU0VUAEFE
+RABTVUIATVVMVABESVYAUkVNAEFORABPUgBYT1IAUkVUVVJOAElOQ1NUAElOQwBERUNTVABERUMA
+TkVHAE5PVABTSEwAU0hSAFNBUgBFWElUAENBTExYAENBTEwASUYARU5ESUYARUxTRUlGAEVMU0UA
+RU5ERUxTRUlGAEVOREVMU0UAV0hJTEUARU5EV0hJTEUAQlJFQUsAQ09OVElOVUUASU1QT1JUAElN
+UE9SVFgARlVOQ1RJT04ARlVOQ1RJT05YAEVOVFJZUkFXAEVOVFJZAEVOREZVTkNUSU9OAFJFVABJ
+TkNMVURFAEZPUk1BVABJTVBPUlRBRlRFUkNBTEwAQUZURVJDQUxMAFdBUk5JTkcAQ0FMTEVYWABD
+QUxMRVgAT1ZFUlJJREUATElCUkFSWQBIRVgASTMArg0AAAAAAAAAAAAAAAAAALANAAAQAAAAAAAA
+AAEAAAC1DQAAEAAAABAAAAABAAAAuQ0AABAAAAAgAAAAAQAAAL4NAAAQAAAAMAAAAAEAAADBDQAA
+EAAAAEAAAAABAAAAxA0AABAAAABQAAAAAQAAAMcNAAAQAAAAYAAAAAEAAADNDQAAEAAAAHAAAAAB
+AAAA0g0AABAAAACAAAAAAQAAANgNAAAQAAAAkAAAAAEAAADeDQAAEAAAAKAAAAABAAAA4w0AABAA
+AACwAAAAAQAAAOkNAAAQAAAAwAAAAAEAAADwDQAAEAAAANAAAAABAAAA9g0AABAAAADgAAAAAQAA
+AP0NAAAQAAAA8AAAAAEAAAADDgAAEAEAAAAAAAABAAAABw4AABABAAAQAAAAAQAAAAsOAAAQAQAA
+IAAAAAEAAAAPDgAAEAEAADAAAAABAAAAFA4AABABAABAAAAAAQAAABgOAAAQAQAAUAAAAAEAAAAc
+DgAAEAEAAGAAAAABAAAAIA4AABABAABwAAAAAQAAACMOAAAQAQAAgAAAAAEAAAAnDgAAoAEAAAAA
+AAABAAAALg4AAKABAAAQAAAAAQAAADQOAACgAQAAIAAAAAEAAAA4DgAAoAEAADAAAAABAAAAPg4A
+AKABAABAAAAAAQAAAEIOAACgAQAAUAAAAAEAAABGDgAAoAEAAGAAAAABAAAASg4AAKABAABwAAAA
+AQAAAE4OAACgAQAAgAAAAAEAAABSDgAAoAEAAJAAAAABAAAAVg4AAKABAACgAAAAAQAAAFsOAABQ
+AgAAAAAAQAEAAABhDgAAUAIAAAAAAAABAAAAZg4AAHACAAAAAAAAAQAAAGkOAABwAgAAEAAAAAAA
+AABvDgAAcAIAACAAAAABAAAAdg4AAHACAAAwAAAAAAAAAHsOAABwAgAAQAAAAAAAAACFDgAAcAIA
+AFAAAAAAAAAAjQ4AAHACAABgAAAAAQAAAJMOAABwAgAAcAAAAAAAAACcDgAAcAIAAIAAAAAAAAAA
+og4AAHACAACQAAAAAAAAAKsOAAAQAwAAAAAAAAEAAACyDgAAEAMAABAAAAABAAAAug4AADADAAAA
+AAAAAQAAAMMOAAAwAwAAEAAAAAEAAADNDgAAMAMAACAAAAABAAAA1g4AADADAAAwAAAAAQAAANwO
+AABwAwAAAAAAAAAAAADoDgAAgAMAAAAAAAAAAAAA7A4AAJADAAAAAAAAAQAAAPQOAACgAwAAAAAA
+AAEAAAD7DgAAsAMAAAAAAAABAAAACw8AALADAAAQAAAAAQAAABUPAADQAwAAAAAAAAEAAAAdDwAA
+4AMAAAAAAEABAAAAJQ8AAOADAAAAAAAAAQAAACwPAAAABAAAAAAAAAEAAAA1DwAAEAQAAAAAAAAB
+AAAAPQ8AACAEAAAAAAAAAQAAAEEPAAAwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAQAAAAQAAAAAAAAAAAAAAENBTEwADBUAAFgAWABVbnJlY29nbml6ZWQgY29t
+bWFuZC9kZWNsYXJhdGlvbiBuYW1lLgAZFQAABAAAAEQPAACEEwAARAAAAFQPAACYFAAADwAAAFNl
+Y3Rpb24gc2l6ZSBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIDIgMTQ3IDQ4MyA2NDcgKDB4N2ZGRmZm
+RkYpLgAAAAAAAAAAAAAAAAAAAAAAAAAAALAVAAAAAAAAAAAAAAAAAAAAAAAA2AAAAOQAAAAsAQAA
+hQAAAAEAAAAAAAAAAQAAAAAAAABNZW1vcnkgc3BhY2UgZXJyb3IuAOgVAAAAAAAAAAAAAJUAAAAA
+AAAABAAAAAAAAAAAAAAAGBYAAOQAAAAAAAAACgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABA
+FgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRoZSBkZWNsYXJhdGlvbnMgbXVzdCBjb250YWlu
+IG9ubHkgYWxwaGFudW1lcmljLCB1bmRlcnNjb3JlIGFuZCBhcm91bmQgY2hhcnMgYW5kIGNhbm5v
+dCBzdGFydCB3aXRoIGEgbnVtYmVyLgBiFgAAAAAAAO0AAAAAAAAA2xYAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAPcWAAAAADA5AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAMDlBRmFmCgAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAA0FwAAOBcA
+AAAAAAAAAAAAAAAAAAABAAAAAAAAADBYABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEFAgAAQXQg
+dGhlIG1vbWVudCwgIVggaXMgbm90IGNhbGN1bGF0ZWQgZm9yIHRoaXMgZm9ybWF0IChleGFtcGxl
+OiBpcyBjYWxjdWxhdGVkIGF0IG9iamVjdCB3aXRoIG5vYml0cyBzZWN0aW9uKS4ARXhwZWN0aW5n
+ICFYIC4AGBgAAFRoZSB0ZXh0IGFmdGVyIHRoZSBkYXRhIGN1cnNvciBzaWduIGlzbid0IHJlY29n
+bml6ZWQuADpUaGUgdGV4dCBhZnRlciB0aGUgc2l6ZSBvZiBhbiBpbnRlZ2VyIHNpZ24gaXNuJ3Qg
+cmVjb2duaXplZC4ASW50ZWdlcihkZWMvaGV4KSB2YWx1ZSBub3QgcmVjb2duaXplZC4AjBgAAAAA
+AAAAAAAAAAAAAMcYAABJbnRlZ2VyKGRlYy9oZXgpIG9yIGNvbnN0YW50IHZhbHVlIGV4cGVjdGVk
+LgB+wAAAAAAAAABVbmRlZmluZWQgY29uc3RhbnQgbmFtZS4A/RgAAAAAAAAAAAAAQ2xvc2UgcGFy
+ZW50aGVzaXMgc2lnbiAoJyknKSBleHBlY3RlZC4AIhkAACgpAAAAACgCAAAAJXUAXxkAAE92ZXJm
+bG93IGF0IGNvbnN0YW50cy4AAAAAAAAAAABEaXZpc2lvbiBieSAwIGVycm9yLgB+GQAAAAAAAAAB
+AAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAIAQAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAA
+DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAphoAAAIAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAA+BoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA
+AAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAA
+AAAAAABmGwAA2AAAAOQAAAD8AAAAAAAAAAUCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAA
+AAAAAAAAAAADAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAOQAAAAFAAAAuQAAABQBAAAAAAAA
+uQAAABQBAAAAAAAAAAMDAOUbAAACAAAA5AAAAIEAAAAAAFRoZSBkaXNwbGFjZW1lbnQgZm9yIHRo
+aXMgdmFsdWUgaXMgbm90IGltcGxlbWVudGVkIGF0IHRoZSBtb21lbnQuAIsA5AAAAAAAAAAAAAAA
+5AAAAIsATRwAAAIAAADkAAAAAAAAAAAAAAACAAAADwAAAAAAAAIAAABEhQAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAEAAACGHAAAAQAAAIYcAAAAAAAAhhwAAIocAAAAAAAAihwAAAAAAACK
+HAAAthwAAIocAAC2HAAAihwAAAEAAAC2HAAAAAAAAAAAAAAA2hwAAAUAAADkAAAA5AAAAMcAAOQA
+AAAAAAAA/hwAAFVucmVjb2duaXplZCBpbm5lciB0ZXh0LgAAAAAAIAAJRXhwZWN0aW5nIGFyZ3Vt
+ZW50IG5hbWUuACJBcmd1bWVudCBuYW1lIGV4cGVjdGVkLgAAAAAAAAAAAOAAAABTdHJpbmcgaGVy
+ZSBpcyB1c2VsZXNzIGF0IHRoZSBtb21lbnQuANgAAACKHQAAVW5leHBlY3RlZCBudW1iZXJzL2Nv
+bnN0YW50cywgZXhwZWN0aW5nIGEgdmFyaWFibGUuALkAAADMAAAAcooAAAAAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAABTdGFjayB2YXJpYWJsZXMgYXJlIG5vdCByZWxldmFudCBmb3Igc2NvcGUudmFy
+aWFibGUuAMwAAABVbmRlZmluZWQgZnVuY3Rpb24gbmFtZS4AAAAAAAAAAAAAAAAAAAAAAAEAAAAA
+AAAAAAAAAAAAAAA9PQCFAAAAIT0AhAAAADw9XgCHAAAAPj1eAIIAAAA8PQCPAAAAPj0AjAAAADxe
+AIMAAAA+XgCGAAAAPACNAAAAPgCOAAAAAAAAAABVHgAAAAAAAAAAAAAAsR4AAFVucmVjb2duaXpl
+ZCBjaGFyYWN0ZXJzIGF0IGZpcnN0IGNvbmRpdGlvbiBhcmd1bWVudC4AAAAAAENvbmRpdGlvbiBz
+aWduKHMpIGV4cGVjdGVkLgDqHgAAAAAAAAofAAAAAAAAyVtZSIPEMFHDyVvDHx8AAAMAAAC4AQAA
+ACofAAAFAAAA5AAAAM2AAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA
+AAAA5AAAAAAAAAAAAAAAAQAAAP//AQD3AgAAAACAHwAAAAAAAIgfAAAAAAAAkB8AAItQAQAAAJkf
+AAAAAAAAAAAAAAAAAAAAAAAAqh8AAAQAAAAAAAAAAAAAAAMAAAAGAAAAAAAAAAEAAAAAAAAA0h8A
+AOQAAAABAAAAAAAAAAAAAAAAAAAA5AAAAFNVi+yL3IHrAAAAAAAAAAAGAQAAAQAAANsJAAACAAAA
+iYMAAAAAEiAAAAYAAADkAAAAAAAAALgAAAAA5AAAAAAAAAAxIAAAzAAAAMwAAAAAAAAAAAAAAAAA
+AAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAAFZhcmlhYmxlL0Z1bmN0aW9uIG5hbWUg
+aXMgYWxyZWFkeSBkZWZpbmVkLgBtIAAAAAAAAAAAAACZAAAAnQAAAOAAAAB9AAAABQIAAIEAAAAA
+AAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANggAAAAAAAAAAAAAENvbnN0YW50IG5hbWUg
+aXMgYWxyZWFkeSBkZWZpbmVkLgDoIAAAAAAAAAAAAAAAAAAATmFtZSBmb3IgdmFyaWFibGUvY29u
+c3RhbnQgZXhwZWN0ZWQuABohAAAAAAAAACoAVW5leHBlY3RlZCB0aHJvd2xlc3Mgc2lnbiAoJ14n
+KSBhdCBjb25zdGFudCBkZWNsYXJhdGlvbi4AVW5leHBlY3RlZCB1bnJlZmVyZW5jZSBzaWduICgn
+KicpIGF0IGNvbnN0YW50IGRlY2xhcmF0aW9uLgCDIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAAAAAEAAAAAAAAAAAAAAD0jDAAAAFVuZXhwZWN0ZWQgcmVzZXJ2ZSBzaWduICgnIycpIGF0IGNv
+bnN0YW50IGRlY2xhcmF0aW9uLgDwIQAAAgAAAF5JbmNvcnJlY3QgcG9pbnRlciBzaWduICgnXicp
+IHVzZWQgYXQgQ0hBUiBkZWNsYXJhdGlvbi4AMCIAACVJbmNvcnJlY3QgcmVsb2NhdGlvbiBzaWdu
+ICgnJScpIHVzZWQgYXQgQ0hBUi9DT05TVCBkZWNsYXJhdGlvbi4AbCIAAABPbmUgZnJvbSB0aGUg
+YXNzaWduIG9wZXJhdG9ycyBleHBlY3RlZC4AsSIAAFZhcmlhYmxlIGRlY2xhcmF0aW9uIGV4cGVj
+dGVkLgDdIgAAAAAAAJgUAAAAAAAACCMAAAAAAAAUIwAAAAAAAAAAAAAAAAAAICMAAH0AAADgAAAA
+AIQkAAAAAAAAAAAAAAAAAAAAAAA8IwAA2AAAAIujuQAAABQBAADkAAAAAAAAAAAAAAABAAAAAAAA
+ALkAAADYAAAA/AAAAAAAAAAAAAAAFAEAAAAAAAAsAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAA
+AAABAAAA/////w0AAAAAAAAAsCMAAAEAAAAEAAAAAAAAAAIAAAAAAAAAAAAAAMwjAAAiAAAAADkB
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8SMAAAAAAAABAAAAuQAAABQBAAAMAAAAJAAA
+AO0jAABGdW5jdGlvbi9JbXBvcnQgbmFtZSBpcyBhbHJlYWR5IGRlZmluZWQuAAAAAAAAAAAAAAAA
+AAEAAAAAAAAAzAAAAOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZ1bmN0aW9uIG5hbWUgZXhwZWN0
+ZWQuAHIkAABPcGVuIHBhcmVudGhlc2lzIHNpZ24gKCcoJykgZXhwZWN0ZWQuAI4kAAAaAQAADQAA
+AAAAAADAJAAAAAAAALkAAAACAAAAAgAAAPAAAAAAAAAAAAAAAG4kAAAAAAAAzAAAAFVuZGVmaW5l
+ZCBmdW5jdGlvbi9kYXRhIGNhbGwuAPAkAADkAAAAi+MWJQAAAgAAAOQAAAAAAAAAAAAAAAAAAAAC
+AAAAuQAAAAAAAAAAOCUAADklAAD/0KEAAAD/AgAAAAAUAQAAuQAAAACAOQC5AAAAAIA5AHQAi9i4
+AQAAAM2AAAAAAAAAAABqAOQAAAAAAAAAfiUAAAAAAACGJQAAAAAAAI4lAAAAAAAAliUAAAAAAAAA
+AAAAniUAAKIlAAAAAAAAAQAAAAAAAAABAAAAAACLiQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+AAACASkhCTEAAAAAAAAAAAEAAAAAAAAAOTkAAAAAAFNlY29uZCBhcmd1bWVudCBhdCBDQUxMRVgg
+bXVzdCBub3QgYmUgb25lIGJ5dGUuAAAAAADkAAAAicEzJgAAAgAAAAMAAAAFAPcAAAIAAABEJgAA
+AAAAwVAmAAACAAAADwAAAAAAWiYAAAYAAADkAAAAB0gPuuA/cwlIx8L/////6wW6AAAAAA+64B9z
+B7r/////6wW6AAAAAMbEAAAAAAAARhsAAFZpcnR1YWwgZGVjbGFyYXRpb25zIGNhbiBoYXZlIG9u
+bHkgdGhlIHJlc2VydmUgc2lnbi4A5AAAAAAAAADZJgAAAAAAABgAAAAEAAAAAAAAAAAAAAAAAAAA
+GAAAAAQAAADtJgAAAAAAAAAAAAAAAAAAAAAAABEnAAAAAAAAAAAAAAAAAAAhJwAAGAAAAAAAAABB
+bGwgY29uZGl0aW9ucy9sb29wcyB3aXRoaW4gYSBzY29wZSBtb3N0IGJlIGNsb3NlZC4AMScAAAAA
+AAAAAAAA6QAAAAAFAAAAcicAAHEnAAAAAAAA5AAAAAAAAAAYAAAAAAAAAJInAABVbmV4cGVjdGVk
+IGNvbmRpdGlvbi9sb29wIGNsb3NlIGNvbW1hbmQuAJonAAAAAAAAxycAAOQAAAACAAAAAAAAANcn
+AAAAAAAAVGhlIHByZXZpb3VzIGNvbmRpdGlvbi9sb29wIGlzIGZyb20gYSBkaWZmZXJlbnQgdHlw
+ZS4A4ycAAAAAAADkAAAAAAAAACUoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAA
+AAABAAAAGAAAAAQAAABXYXJuaW5nOiBFTkRFTFNFSUYgbm90IG1hdGNoaW5nIElGAAAAAACAKAAA
+AAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAYAAAA5AAAAFRoZXJlIGlzIG5vIGxvb3Ag
+dG8gY29udGludWUuABgAAABUaGVyZSBpcyBubyBsb29wIHRvIGJyZWFrLgAAAAAAAAAAAAAAAADx
+KAAA9SgAAPwAAAAIAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJKQAAFAAAAPAAAAAAAAAA8AAAAAAA
+AAAAAAAAMSkAADUpAAD8AAAAAAAAAEUpAAAEAAAAAAAAAAAAAAAAAAAAAAAAAFkpAABdKQAAAAAA
+AAAAAAAUAAAAAAAAAAAAAAAAAAAA7QAAAAAAAAAoZW50cnkpAAIBAADMAAAAKGZ1bmN0aW9uKQDA
+AAAAKGNvbnN0YW50KQBVbnJlZmVyZW5jZWQgdmFyaWFibGUvZnVuY3Rpb24vY29uc3RhbnQ6ICVz
+LiBQYXJlbnQ6ICVzLgCzKQAAAAAAAAgAAAAAPQAAAAAAAAAAAAAAAAABAAAAAAAAAHdhcm5pbmdz
+AG92ZXJfcHJlZgBoaWRkZW5fcHJlZgB3X2FzX2UAbG9nZmlsZQBjb2RlRm5PYmoAY29uc3Rfd2Fy
+bgBpbmNsdWRlZGlyAGZ1bmN0aW9uX25hbWUAY29udl82NABudWxfcmVzX3ByZWYAc2RfYXNfc3YA
+aW5wbGFjZV9yZWxvYwByZWxvY182NAB1bmRlcnNjb3JlX3ByZWYAZXhpdF9lbmQAaW5jbHVkZV9z
+ZWMAaWdub3JlX2Zvcm1hdF9zbwBjYWxsX2FsaWduAG5vYml0c192aXJ0dWFsAGhhc19kZWJ1ZwAA
+AAAAAisAAC5vY29tcGlsZXIudHh0AAAAAAAAAAAAAAAAABkrAAAAAAAAISsAAAAAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAD0rAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAAABIAAAA
+AAAAAABIizwkAEiLdCQISIsAJABIiwAkAEyLRCQATItMJABYSIPsMFBIiXwkCEiJdCQQSIkAJABI
+iQAkAEyJRCQATIlMJABIg+wASIPEAOQAAABIi8JIPQAAAAB3AFD22AQAsQX24egAAAAAWUgBwVhI
+g8EL/+H22AQAagj2JCRIK+BIPQYAAAB2Cki4BgAAAAAAAABqCP7A9iQkSAPg5AAAAA+65ANyEUiB
++QAAAAByGw+64QByEesTSIH5AAAAAHIGD7rhAHIESIPsCEiL0QAAAAAAAAAA5AAAAEiD7Aj9AQAA
+TW9yZSB0aGFuIDY1NTM1IGV2ZW4gY2FsbHM/ADMyNzY4IG9kZCBjYWxscz8AD7rjAwAESIPrCOQA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAP0AAAAAEAAAAAAAAAEAAAAAAAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvCwAAMAsAAC8LAAAAAAAAP0AAAAAAAAA
+AC0AAEdldGNkdyBlcnJvci4AAAAAAAAAAAAAGy0AAENoZGlyIGVycm9yLgAAAAAAAAAAABAAAAAA
+AAAAAAAAAAAAAADMLAAAfgAAAAAAIAAAAJAsAAAAAAAAAAAAAFYtAAAAAAAAAAAAAAEAAAAAAAAA
+AAAAAAAMAAAAAgAAAAEAAAAAAAAAfy0AAMAAAAAAAAAAUmlnaHQgc2lkZSBvZiB0aGUgYXNzaWdu
+bWVudCBleHBlY3RlZC4Ajy0AAAAAAAAAAAAAAQAAAAAAAADGLQAAAAAAANgAAADkAAAAzAAAAAAA
+AAAAAAAAAAAAAAAAAAAAAAAAAFVuZXhwZWN0ZWQgcmVsb2NhdGlvbiBzaWduLgAFAgAAewAiGi4A
+AFJlbG9jYXRpb24gc2lnbiBhbmQgc3RyaW5nIHN1cnJvdW5kZWQgYnkgcXVvdGF0aW9ucyBpcyBu
+b3QgYWxsb3dlZC4AVGhlIHN0cmluZyBhc3NpZ25tZW50ICgiIikgY2FuIGJlIHVzZWQgYXQgQ0hB
+UiwgU1RSIG9yIFNTLgBeLgAAR3JvdXAgYmVnaW4gc2lnbiAoJ3snKSBpcyBub3QgZXhwZWN0ZWQg
+dG8gZGVjbGFyZSBhIGNvbnN0YW50LgCdLgAAAAAAAH0AR3JvdXAgZW5kIHNpZ24gKCd9JykgZXhw
+ZWN0ZWQuAOUuAAB9AAAAAAAAAAAAAAAAAAAAAAAAALkAAAAAAAAAoQAAAKUAAAAwLwAARG91Ymxl
+IHBvaW50ZXIgKF5eKSBleHBlY3RlZCBpbiB0aGlzIGNhc2U6IGV4ZWN1dGFibGUgZm9ybWF0IGFu
+ZCBpbXBvcnRlZCBmdW5jdGlvbi4AAQAAAIwvAABVbmV4cGVjdGVkIGRvdWJsZSBwb2ludGVyLgAA
+AAAApy8AAFVuZGVmaW5lZCB2YXJpYWJsZS9mdW5jdGlvbiBuYW1lLgBVbmV4cGVjdGVkIG5lZ2F0
+aXZlIHZhbHVlIGF0IHJlc2VydmUgZGVjbGFyYXRpb24uANEvAADYAAAAAAAAAAAAAAAAAAAA////
+/1gAAAD1AAAAAAAAAGZpcnN0IGFyZ3VtZW50IGlzIG1pc3NpbmcgYXQgb3ZlcnJpZGUAc2Vjb25k
+IGFyZ3VtZW50IGlzIG1pc3NpbmcgYXQgb3ZlcnJpZGUAAAAAAAAAAABsIAAAAABDYW5ub3QgcGFy
+c2UgdG8gaW5wdXQgZmlsZSBuYW1lLgCCMAAAAAAAAAAAAAAvAAAAAAAAAAAAAAAAwDAAAFBBVEgA
+yTAAAEdldGVudiBlcnJvciBvbiBQQVRILgAAAAAAOgAAAAAAAAAAAAAAAAAAAQAAAPowAABQYXRo
+ZmluZCBlcnJvci4ATyBDb21waWxlciAtIHVzYWdlOiBvICJmaWxlbmFtZSIgW1twcmVmMSB2YWx1
+ZTFdLi4uW3ByZWZOIHZhbHVlTl1dAERvY3VtZW50YXRpb24gaXMgaGVyZTogaHR0cHM6Ly9odG1s
+cHJldmlldy5naXRodWIuaW8vP2h0dHBzOi8vZ2l0aHViLmNvbS9jb2xpbi1pL28vYmxvYi9tYXN0
+ZXIvby5odG1sAACgAAAAIAAAQAYAACADAAAAQAYAAAwAAAABAAAAAwAALi8A0zEAAAAAAAAA4zEA
+AENhbm5vdCBzZXQgYWN0aXZlIGZvbGRlcjoAAAAAAAAAAAAubG9nAAUyAAAAAAAAAAAAAGZpcnN0
+IGdldGN3ZCBlcnJvcgAAAEAAAAAAAAAAAAAAAAAAAAAAAC0yAAAAAAAAAAAAAEYBAABKAQAAAAAA
+AAAAAAAIAAAADAAAAAAAAAAAAAAAIAAAAFEyAABxMgAAAAAAAAoAAAAADYQTAAAAAAAA/////4cy
+AAD/////AAAAAAAAAACTMgAAlzIAAFVuZXhwZWN0ZWQgSU1QT1JUIHN0YXRlbWVudDsgdGhlcmUg
+aXMgbm8gTElCUkFSWSBvcGVuZWQuAKMyAAAAAAAAEAEAAEltcG9ydCBuYW1lIGZvciBjb21waWxl
+ciBtdXN0IGJlIHNwZWNpZmllZCBhZnRlciB0aGUgbmFtZSBmb3Igb3V0cHV0LgDoMgAADQAAAFRo
+ZXJlIGlzIGFscmVhZHkgYW5vdGhlciBmdW5jdGlvbiBzdGFydGVkLgA2MwAAVW5hdmFpbGFibGUg
+RlVOQ1RJT04vRU5UUllbLi4uXSBzdGF0ZW1lbnQ7IFRoZSBzdGFydCBhZGRyZXNzIHdhcyBhdCBG
+aWxlOiAlczsgTGluZTogJXMuAGUzAAABAAAAVW5leHBlY3RlZCBFTkRGVU5DVElPTiBjb21tYW5k
+LgDFMwAAAAAAAAAAAADpMwAAAAAAAAAAAAD5MwAAAAAAAAAAAAABNAAABTQAAAAAAABFWEUAFTQA
+AEVMRgAdNAAAT0JKACU0AAAAAAAANjQAU08ALmRhdGEANzQAAAEAAAAudGV4dABFNAAAAgAAAC5k
+dG5iAACABAhVbnJlY29nbml6ZWQgZmlsZSBmb3JtYXQuAF00AABUaGUgRk9STUFUIGNvbW1hbmQg
+Y2FuIGJlIGRlZmluZWQgYXQgdGhlIHN0YXJ0IGFuZCBvbmx5IG9uY2UuAHs0AABBZnRlckNhbGwg
+dmFyaWFibGUgbmFtZSBleHBlY3RlZC4AAAAAAAAAAAAAAAAAAAAAAAAAAABJbXBvcnRBZnRlckNh
+bGwgaXMgdXNlZCBhdCBvYmplY3RzLgDtAAAAT04AT0ZGAEV4cGVjdGluZyAnb24nIG9yICdvZmYn
+IGNvbW1hbmQASIH5AAAAAHQISP/J/zTI6++B+QAAAAB0B//J/zSI6/EAAAAAAAAAAGI1AABmNQAA
+AQAAAAAAAAByNQAATElCUkFSWSBzdGF0ZW1lbnQgaXMgbm90IHVzZWQgYXQgb2JqZWN0IGZvcm1h
+dC4AfjUAAMyyNQAAAAAAABAAAABVbnJlY29nbml6ZWQgZGF0YSBhZnRlciBjb21tYW5kLgC/NQAA
+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJXMgRmlsZSAlcywgUm93ICV1LCBDb2x1bW4gJXUAJXMg
+RmlsZSAlcywgUm93ICV1AAAAAAAANjYAAFJlc3RvcmUgZm9sZGVyIGVycm9yLgAAAAAAVDYAAEVO
+REZVTkNUSU9OIGNvbW1hbmQgZXhwZWN0ZWQgdG8gY2xvc2UgdGhlIG9wZW5lZCBGVU5DVElPTi4A
+AAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAuZXhlAKw2AAAubwC1NgAAAAAAAA0CAAANAgAA
+QAAAAE1aAMw2AACAAAAAAQAAAAQAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dyYW0gY2Fu
+bm90IGJlIHJ1biBpbiBET1MgbW9kZS4ADQokAAAAAAAAAABNAgAA8TYAAOM2AAAAAAAA8TYAAAAA
+AABAAAAAGTcAAJECAABMAQAAAgAAAAAAAADgAAAADwMAAAAAAABcNwAApQIAAAsBAABoNwAA6wIA
+AAUDAACAAAAAyAEAAA0CAAAFAwAAAAAAAAgAAAAUAAAAAAAAANUDAAAoAAAAAAEAAAAEAAAAAAAA
+AAAAAAAAAAAAAAAAAgAAALg3AAACAAAAwDcAAAAAAAAuZHluc3RyAAAAAAAuZHluYW1pYwAAAAAA
+AAAAAAAAAAAAAAAAAAAAAPE3AAAAAAAAAAAAAAAAAAABAAAABTgAAAEAAAAAAAAAAwAAAAYAAAAu
+ZGVidWcALnN5bXRhYgAkOAAAAgAAAAQAAAAucmVsYS5kYXRhADg4AAAucmVsYS50ZXh0AEc4AAAu
+c3RydGFiAFY4AAAAAAAAAAAAAAAAAAAAAAAAbjgAAAAAAAAAAAAAAAAAAEVycm9yIHdpdGggdGhl
+IGZpbGUgb3V0IG9wZW4gZnVuY3Rpb24uAII4AAAAAAAA/////wAAAABeBQAAqgUAAAAAAACLhCQE
+AAAAowAAAABTVYvsi9yB6wQAAAC4AAAAAImDAAAAAIvTixKLAovTiQKL47oGAAAAiwJQi9OLAlC4
+AAAAAP/Qi+O6AAAAAIsCUIvTiwJQuAAAAAD/0IvjugYAAACLAlCL04sCULgAAAAA/9DJW8NTVYvs
+i9yB6wAAAADJW8NTVYvsi9yB6wAAAACL47oMAAAAA9WLAlDoYv///4vj6D9TAQDJW8NTVYvsi9yB
+6wQAAACL47oUAAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsCUOgpAAAAi9OJArgAAAAAi9M5Ag+E
+DAAAAIvji9OLAlDoXRQAAIvTiwLJW8PJW8NTVYvsi9yB6yQAAAC4ygUAAImDAAAAAIvji9OLAlC4
+AAAAAP/QugQAAAAD04kCuAAAAAC6BAAAAAPTOQIPhAQCAAC4AgAAAImDFAAAAIvjugQAAAAD04sC
+UOg9CAAAugwAAAAD04kCi+O6DAAAAAPViwJQ6CMIAAC6EAAAAAPTiQK6DAAAAAPTiwK6FAAAAAPT
+AQK6EAAAAAPTiwK6FAAAAAPTAQKL47oYAAAAA9OLwlC6FAAAAAPTiwJQ6OQFAAC6CAAAAAPTiQK4
+AAAAALoIAAAAA9M5Ag+FXQEAAIvjugwAAAAD04sCULoEAAAAA9OLAlC6GAAAAAPTiwJQuAAAAAD/
+0LoYAAAAA9OLArocAAAAA9OJAroMAAAAA9OLArocAAAAA9MBArAvuhwAAAAD04sSiAK6HAAAAAPT
+/wKL47oQAAAAA9OLAlC6DAAAAAPViwJQuhwAAAAD04sCULgAAAAA/9C6EAAAAAPTiwK6HAAAAAPT
+AQKwALocAAAAA9OLEogCi+NoAAAAALoYAAAAA9OLAlC4AAAAAP/QuiAAAAAD04kCuAAAAAC6IAAA
+AAPTOQIPhXcAAACL42gAAAAAuhQAAAAD1YsCULoQAAAAA9WLAlC6GAAAAAPTiwJQ6HcPAAC6CAAA
+AAPTiQKL47oYAAAAA9OLAlC4AAAAAP/QuAAAAAC6CAAAAAPTOQIPhBEAAACL47oIAAAAA9OLAlDo
+LxIAALoIAAAAA9OLAslbw7rPBQAAiwLJW8O6CAAAAAPTiwLJW8O6SgYAAIsCyVvDyVvDU1WL7Ivc
+gesIAAAAi+O6BAAAAAPTi8JQugwAAAAD1YsCUOgrAgAAi9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJ
+W8OL47oEAAAAA9OLAlC6EAAAAAPViwJQ6CMBAACL04kCi9OLAslbw8lbw1NVi+yL3IHrDAAAALgC
+AAAAugwAAAAD1TkCD47pAAAAuQQAAAC6DAAAAAPViwL36boMAAAAA9WJAroQAAAAA9WLAroMAAAA
+A9UBArgIAAAAuhAAAAAD1QECugwAAAAD1YsCuhAAAAAD1TkCD4SYAAAAuhAAAAAD1YsSiwK6BAAA
+AAPTiQK6EAAAAAPVgwIEugwAAAAD1YsCuhAAAAAD1TkCD4UKAAAAumQGAACLwslbw7oQAAAAA9WL
+EosCuggAAAAD04kCi+O6CAAAAAPTiwJQugQAAAAD04sCUOi2/v//i9OJArgAAAAAi9M5Ag+EBwAA
+AIvTiwLJW8O6EAAAAAPVgwIE6VD////HwAAAAADJW8PJW8NTVYvsi9yB6wAAAAC6DAAAAAPVixKK
+ArqMBgAAiAK6jAYAAA+2AsfBAAAAADvBD4SSAAAAuowGAAAPtgLHwTAAAAA7wQ+McgAAALoMAAAA
+A9X/AroMAAAAA9WLEg+2AsfBAAAAADvBD4VFAAAAsDC6jAYAACgCuowGAAAPtgLHwQMAAAA7wQ+P
+HAAAALqMBgAAD7YCuhAAAAAD1YsSiQLHwAAAAADJW8O6jQYAAIvCyVvDursGAACLwslbw7rnBgAA
+i8LJW8O6CgcAAIvCyVvDyVvDU1WL7IvcgesYAAAAuJEBAACJgwAAAAC4VAAAAImDBAAAAIvTiwK6
+BAAAAAPTAQKL47oMAAAAA9WLAlDotgMAALoIAAAAA9OJAroEAAAAA9OLAovTOQIPhLAAAACL04sS
+iwK6DAAAAAPTiQKL47oMAAAAA9OLAlDoegMAALoQAAAAA9OJAroQAAAAA9OLAroIAAAAA9M5Ag+F
+ZQAAAIvjuggAAAAD04sCULoMAAAAA9OLAlC6DAAAAAPViwJQ6IsCAAC6FAAAAAPTiQK4AAAAALoU
+AAAAA9M5Ag+FIwAAALhUAAAAi9MpAovTixKLAroQAAAAA9WLEokCx8AAAAAAyVvDi9ODAgTpPf//
+/7oiBwAAi8LJW8PJW8OLhCQEAAAAo0IHAACLhCQIAAAAo0YHAABTVYvsi9yB6wAAAAC6QgcAAIsS
+iwK6TgcAAIkCi+O6RgcAAIsCULpOBwAAiwJQuAAAAAD/0LpKBwAAiQK6UgcAAIsCukoHAAA5Ag+F
+CgAAALpvBwAAiwLJW8O6SgcAAIsCukIHAACLEokCunMHAACLAslbw8lbw1NVi+yL3IHrBAAAAIvj
+ugwAAAAD1YsCULgAAAAA/9CL04kCuAAAAACL0zkCD4QYAAAAi9OLAroQAAAAA9WLEokCx8AAAAAA
+yVvDuncHAACLwslbw8lbw4uEJAQAAACjhAcAAIuEJAgAAACjiAcAAFNVi+yL3IHrAAAAALqQBwAA
+iwK6iAcAAIsSiQKL47qEBwAAiwJQuogHAACLAlDoz/7//7qMBwAAiQK6jAcAAIsCyVvDyVvDi4Qk
+BAAAAKOUBwAAU1WL7IvcgesAAAAAi+O6oAcAAIsCULqUBwAAiwJQ6HL///+6mAcAAIkCuqgHAACL
+ArqYBwAAOQIPhQ8AAAC6nAcAAIsCyVvD6RkAAACL47qYBwAAiwJQ6JP3//+6pAcAAIsCyVvDyVvD
+i4QkBAAAAKOsBwAAU1WL7IvcgesAAAAAi+O6rAcAAIsCUOhk////urAHAACJArq0BwAAiwK6sAcA
+ADkCD4UKAAAAurQHAACLAslbw4vjuqwHAACLAlC6tAcAAIsCULqwBwAAiwJQuAAAAAD/0LqwBwAA
+iwLJW8PJW8OLhCQEAAAAo7gHAACLhCQIAAAAo7wHAACLhCQMAAAAo8AHAABTVYvsi9yB6wAAAAC6
+xAcAAIsCusAHAAA5Ag+EWAAAALq4BwAAixKKArrQBwAAiAK6vAcAAIsSigK60QcAAIgCutEHAACK
+ArrQBwAAOAIPhAoAAAC6zAcAAIsCyVvDurgHAAD/Arq8BwAA/wK6wAcAAP8K6ZT///+6yAcAAIsC
+yVvDyVvDi4QkBAAAAKPSBwAAU1WL7IvcgesAAAAAutwHAACLArrYBwAAiQK60gcAAIsSigK61wcA
+AIgCutYHAACKArrXBwAAOAIPhCMAAAC60gcAAP8CutgHAAD/ArrSBwAAixKKArrXBwAAiALpyf//
+/7rYBwAAiwLJW8PJW8NTVYvsi9yB6wAAAACL47oMAAAAA9WLAlDoaf///7rgBwAAiQKL47oQAAAA
+A9WLAlDoUf///7rgBwAAAQKL47oUAAAAA9WLAlDoOf///7rgBwAAAQK4AAAAALoYAAAAA9U5Ag+O
+LAAAALgKAAAAuuAHAAABArgBAAAAuhgAAAAD1TkCD44MAAAAuAoAAAC64AcAAAECi+O64AcAAIsC
+UOhL/f//uuQHAACJArroBwAAiwK65AcAADkCD4UKAAAAuugHAACLAslbw4vjuiAAAAAD1YsCULoc
+AAAAA9WLAlC6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlC65AcAAIsCULgAAAAA/9C65AcA
+AIsCyVvDyVvDi4QkBAAAAKPsBwAAi4QkCAAAAKPwBwAAU1WL7IvcgesAAAAAi+NoAAAAALrwBwAA
+iwJQuuwHAACLAlC69AcAAIsCUOig/v//uv0HAACLEokCugEIAACLArr9BwAAixI5Ag+FCgAAALrs
+BwAAiwLJW8O6/QcAAIsSiwLJW8PJW8OLhCQEAAAAowUIAACLhCQIAAAAowkIAACLhCQMAAAAow0I
+AABTVYvsi9yB6wgAAAC6DQgAAIsCugQAAAAD04kCuEAAAAC6BAAAAAPTIQK4AAAAALoEAAAAA9M5
+Ag+ECQAAALjtAQAAi9OJAovji9OLAlC6DQgAAIsCULoJCAAAiwJQuAAAAAD/0LoFCAAAixKJAroR
+CAAAiwK6BQgAAIsSOQIPhSgAAACL47oJCAAAiwJQuhkIAACLAlDowf7//7oVCAAAiQK6FQgAAIsC
+yVvDujEIAACLAslbw8lbw4uEJAQAAACjUggAAIuEJAgAAACjVggAAIuEJAwAAACjWggAAFNVi+yL
+3IHrCAAAAIvjuloIAACLAlC6VggAAIsCULpSCAAAiwJQuAAAAAD/0IvTiQK6WggAAIsCi9M5Ag+E
+JQAAALg1CAAAiYMEAAAAi+O6BAAAAAPTiwJQ6PLy///HwP/////JW8OL04sCyVvDyVvDi4QkBAAA
+AKNeCAAAi4QkCAAAAKNiCAAAi4QkDAAAAKNmCAAAU1WL7IvcgesIAAAAi+O6ZggAAIsCULpiCAAA
+iwJQul4IAACLAlC4AAAAAP/Qi9OJArpmCAAAiwKL0zkCD4QXAAAAuDUIAACJgwQAAAC6BAAAAAPT
+iwLJW8PHwAAAAADJW8PJW8OLhCQEAAAAo2oIAACLhCQIAAAAo24IAABTVYvsi9yB6wAAAAC6aggA
+AIsCunIIAACJArpuCAAAiwq6cggAAIsCD7rgH3MHuv/////rBboAAAAA9/m6cggAAIkCum4IAACL
+CrpyCAAAiwL36bpyCAAAiQK6cggAAIsCumoIAAApArp2CAAAiwK6aggAADkCD4UKAAAAunYIAACL
+Aslbw7pqCAAAiwK6bggAACkCum4IAACLAslbw8lbw4uEJAQAAACjeggAAIuEJAgAAACjfggAAFNV
+i+yL3IHrAAAAAIvjun4IAACLAlDo5Pn//7qCCAAAiQK6hggAAIsCuoIIAAA5Ag+FCgAAALqKCAAA
+iwLJW8OL47p+CAAAiwJQuoIIAACLAlC6eggAAIsCUOiy/f//uo4IAACJArqOCAAAiwLJW8PJW8OL
+hCQEAAAAo5IIAACLhCQIAAAAo5YIAACLhCQMAAAAo5oIAACLhCQQAAAAo54IAABTVYvsi9yB6wAA
+AAC6nggAAIsCuqYIAACJArqmCAAAiwq6pggAAIsCD7rgH3MHuv/////rBboAAAAA9/m6pggAAIkC
+up4IAACLArqmCAAAOQIPhRMAAAC6oggAAIsCuqYIAACJAukOAAAAup4IAACLArqmCAAAiQK6oggA
+AIsCupoIAAA5Ag+EgAAAAIvjupoIAACLAlC6lggAAIsCULqSCAAAiwJQ6MP8//+6qggAAIkCuq4I
+AACLArqqCAAAOQIPhQoAAAC6rggAAIsCyVvDi+O6nggAAIsCULqaCAAAiwJQ6KX9//+6pggAAIkC
+uqIIAACLArqmCAAAOQIPhQoAAAC6qggAAIsCyVvDi+O6pggAAIsCULqSCAAAiwJQ6CL+//+6qggA
+AIkCuqoIAACLAslbw8lbw4uEJAQAAACjsggAAIuEJAgAAACjtggAAIuEJAwAAACjuggAAFNVi+yL
+3IHrAAAAAIvjuroIAACLAlC6tggAAIsCUOgO/f//ur4IAACJAovjur4IAACLAlC6sggAAIsCUOip
+/f//usIIAACJArrCCAAAiwLJW8PJW8OKhCQEAAAAosYIAABTVYvsi9yB6wAAAAC6xwgAAIoCusYI
+AAA4Ag+FCgAAALrJCAAAiwLJW8O6yAgAAIoCusYIAAA4Ag+FCgAAALrJCAAAiwLJW8O6zQgAAIsC
+yVvDyVvDU1WL7IvcgesQAAAAi+O6DAAAAAPViwJQ6FH4//+L04kCugwAAAAD1YsCugQAAAAD04kC
+i9OLAroEAAAAA9MBArgAAAAAiYMIAAAAi9OLAroIAAAAA9M5Ag+NXQAAALoEAAAAA9P/CovjugQA
+AAAD04sSD7YCUOgk////ugwAAAAD04kCuAEAAAC6DAAAAAPTOQIPhRUAAAC6BAAAAAPT/wK6BAAA
+AAPTiwLJW8O6CAAAAAPT/wLpkP///7oMAAAAA9WLAslbw8lbw1NVi+yL3IHrBAAAAIvjugwAAAAD
+1YsCUOiH9///i9OJArrRCAAAiwKL0zkCD4UKAAAAutUIAACLAslbw4vjugwAAAAD1YsCULgAAAAA
+/9C62QgAAIkCutkIAACLAslbw8lbw4uEJAQAAACj3QgAAIuEJAgAAACj4QgAAIuEJAwAAACj5QgA
+AIuEJBAAAACj6QgAAFNVi+yL3IHrBAAAAIvjuv0IAACLAlC63QgAAIsCULr5CAAAiwJQ6Pj4//+6
+7QgAAIkCuvEIAACLArrtCAAAOQIPhAoAAAC67QgAAIsCyVvDi+O6CQkAAIsCUGgAAAAAuvUIAACL
+AlC4AAAAAP/QugEJAACJArj/////ugEJAAA5Ag+E9AAAAIvjugUJAACLAlBoAAAAALr1CAAAiwJQ
+uAAAAAD/0LrpCAAAiwK6AQkAAAECi+O65QgAAIsCULoBCQAAiwJQ6FD0//+67QgAAIkCuvEIAACL
+ArrtCAAAOQIPhZEAAAC65QgAAIsSiwK6DQkAAIkCuukIAACLAroNCQAAAQK6AQkAAIsCuuEIAACL
+EokCuukIAACLAroBCQAAKQKL47oBCQAAiwJQug0JAACLAlC69QgAAIsCULgAAAAA/9CL04kCugEJ
+AACLAovTOQIPhB8AAACL47rlCAAAixKLAlC4AAAAAP/QuBEJAAC67QgAAIkC6QwAAAC4IgkAALrt
+CAAAiQKL47r1CAAAiwJQuAAAAAD/0LrtCAAAiwLJW8PJW8OLhCQEAAAAoz4JAACLhCQIAAAAo0IJ
+AABTVYvsi9yB6wAAAAC6PgkAAIsCukYJAACJArpCCQAAiwq6PgkAAIsCD7rgH3MHuv/////rBboA
+AAAA9/m6PgkAAIkCukIJAACLCro+CQAAiwL36bo+CQAAiQK6PgkAAIsCukYJAAApArpGCQAAiwLJ
+W8PJW8OLhCQEAAAAo0oJAABTVYvsi9yB6wAAAAC6SgkAAIsCuk4JAACJArpOCQAAiwK6SgkAACkC
+uk4JAACLArpKCQAAKQK6SgkAAIsCyVvDyVvDU1WL7IvcgesAAAAAulYJAACLArpSCQAAixI5Ag+E
+IwAAAIvjulIJAACLEosCULgAAAAA/9C6VgkAAIsCulIJAACLEokCyVvDi4QkBAAAAKNaCQAAU1WL
+7IvcgesAAAAAi+O6WgkAAIsCUOiE6v//i+Poiv///8lbw4uEJAQAAACjXgkAAFNVi+yL3IHrAAAA
+ALpiCQAAiwK6XgkAADkCD44PAAAAupcJAACLAslbw+kKAAAAupsJAACLAslbw8lbw4uEJAQAAACj
+nwkAAIuEJAgAAACjowkAAFNVi+yL3IHrAAAAALqnCQAAiwK6nwkAAAECup8JAACLEosCuqMJAACL
+EokCyVvDU1WL7IvcgesAAAAAuAQAAAC6DAAAAAPVAQK6EAAAAAPViwK6DAAAAAPVixKJAslbw1NV
+i+yL3IHrAAAAALgEAAAAugwAAAAD1QECugwAAAAD1YsCuhAAAAAD1YsSiQLJW8OLhCQEAAAAo6sJ
+AACLhCQIAAAAo68JAABTVYvsi9yB6wAAAACL47q3CQAAiwJQuqsJAACLAlDoRgAAALqzCQAAixKL
+ArqvCQAAixKJAslbw1NVi+yL3IHrAAAAALgIAAAAugwAAAAD1QECuhAAAAAD1YsCugwAAAAD1YsS
+iQLJW8OLhCQEAAAAo7sJAACLhCQIAAAAo78JAABTVYvsi9yB6wAAAAC6wwkAAIsCursJAAABArq7
+CQAAiwK6vwkAAIsSiQLJW8NTVYvsi9yB6wAAAAC6DAAAAAPVixKLAroQAAAAA9WLEokCyVvDU1WL
+7IvcgesAAAAAuhAAAAAD1YsCugwAAAAD1YsSiQLJW8OLhCQEAAAAo8cJAACLhCQIAAAAo8sJAACL
+hCQMAAAAo88JAABTVYvsi9yB6wAAAACL47rPCQAAiwJQuscJAACLAlDoq/7//4vjussJAACLAlC6
+xwkAAIsCUOjr/f//yVvDi4QkBAAAAKPTCQAAi4QkCAAAAKPXCQAAU1WL7IvcgesEAAAAi+O61wkA
+AIsCULrTCQAAiwJQ6K39//+L44vTi8JQutMJAACLAlDoQv7//4vTiwK61wkAAIsSAQLJW8OLhCQE
+AAAAo98JAABTVYvsi9yB6wAAAAC67wkAAIsSiwK68wkAAIkCuvcJAACLArrzCQAAOQIPhSIAAAC6
++wkAAIsCut8JAAA5Ag+NDgAAALr/CQAAiwK63wkAAAECuusJAACLAroDCgAAiQK63wkAAIsKugMK
+AACLAvfpugMKAACJArrnCQAAiwK64wkAAIkCugMKAACLArrjCQAAAQK64wkAAIsCyVvDyVvDU1WL
+7IvcgesEAAAAuAwAAACL04kCugwAAAAD1YsKi9OLAvfpi9OJAroQAAAAA9WLAovTAQKL04sCyVvD
+yVvDi4QkBAAAAKMHCgAAi4QkCAAAAKMLCgAAi4QkDAAAAKMPCgAAi4QkEAAAAKMTCgAAU1WL7Ivc
+gesAAAAAuhMKAACLAroHCgAAAQKL47oPCgAAiwJQugcKAACLAlDooPr//7obCgAAiQKL47oPCgAA
+iwJQugsKAACLAlDogvr//7oXCgAAiQK6FwoAAIsCuhsKAAA5Ag+EbQAAALoXCgAAiwK6GwoAADkC
+D40hAAAAuhsKAACLAroXCgAAKQK6FwoAAIsCugcKAAABAuk4AAAAug8KAACLArofCgAAiQK6GwoA
+AIsCuh8KAAApArofCgAAiwK6BwoAAAECuhcKAACLAroHCgAAAQKL47oPCgAAiwJQuhcKAACLAlDo
+4/n//7ofCgAAiQK6IwoAAIsCuh8KAAA5Ag+EDgAAALoPCgAAiwK6BwoAAAECugcKAACLAslbw8lb
+w1NVi+yL3IHrAAAAALgCAAAAugwAAAAD1YsSiQK6JwoAAIvCyVvDyVvDU1WL7IvcgesMAAAAi+O6
+EAAAAAPViwJQugwAAAAD1YsCULoUAAAAA9WLAlDoQ/L//4vTiQK4AAAAAIvTOQIPhAcAAACL04sC
+yVvDi+O6BAAAAAPTi8JQ6Hv///+6CAAAAAPTiQKL47oEAAAAA9OLAlC6CAAAAAPTiwJQuhQAAAAD
+1YsCUOjq8f//i9OJAovTiwLJW8PJW8NTVYvsi9yB6wQAAACL47oQAAAAA9WLAlC6DAAAAAPViwJQ
+aAAAAABoAAAAAOgOAAAAi9OJAovTiwLJW8PJW8NTVYvsi9yB6wQAAAC4/////7oYAAAAA9U5Ag+E
+YwAAAIvjaAEAAAC6FAAAAAPVi8JQuhgAAAAD1YsCUOhd8f//i9OJArgAAAAAi9M5Ag+FKQAAAIvj
+uhgAAAAD1YsCULoQAAAAA9WLAlC6DAAAAAPViwJQ6LH+//+L04kCi9OLAslbw8fAAAAAAMlbw8lb
+w1NVi+yL3IHrBAAAAIvjuioKAACLEosCULoUAAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsCUOg2
+////i9OJAovTiwLJW8PJW8NTVYvsi9yB6wgAAACL47oMAAAAA9WLAlDoJO3//4vTiQKL47oQAAAA
+A9WLAlCL04sCULoMAAAAA9WLAlDodv///7oEAAAAA9OJAroEAAAAA9OLAslbw8lbw1NVi+yL3IHr
+CAAAALgAAAAAuhQAAAAD1TkCD4WPAAAAuBoBAACJgwQAAAC4AwAAALoEAAAAA9OLEjkCD4UkAAAA
+i+O6EAAAAAPViwJQugwAAAAD1YsCUOhL////i9OJAulDAAAAuAEAAAC6BAAAAAPTixI5Ag+FJAAA
+AIvjuhAAAAAD1YsCULoMAAAAA9WLAlDo8UIBAIvTiQLpCQAAAMfAAAAAAMlbw4vTiwLJW8OL47oQ
+AAAAA9WLAlC6DAAAAAPViwJQ6N3+//+L04kCuAAAAACL0zkCD4UfAAAAi+O6EAAAAAPViwJQugwA
+AAAD1YsCUOiPQgEAi9OJAovTiwLJW8PJW8NTVYvsi9yB6wQAAAC4AQAAALouCgAAixI5Ag+FMAAA
+AIvjuhQAAAAD1YsCULoQAAAAA9WLAlC6DAAAAAPViwJQ6BP+//+L04kCi9OLAslbw8fAAAAAAMlb
+w8lbw1NVi+yL3IHrBAAAALgBAAAAujIKAACLEjkCD4U6AAAAi+O6GAAAAAPViwJQuhQAAAAD1YsC
+ULoQAAAAA9WLAlC6DAAAAAPViwJQ6B79//+L04kCi9OLAslbw8fAAAAAAMlbw8lbw1NVi+yL3IHr
+BAAAAIvjugwAAAAD1YsCULo/CgAAi8JQujYKAACLwlC4AAAAAP/Qi+NoeAAAALo2CgAAi8JQ6Jz9
+//+L04kCi9OLAslbw8lbw1NVi+yL3IHrDAAAALoMAAAAA9WLEosCi9OJAroQAAAAA9WLEosCugQA
+AAAD04kCi+O6HAAAAAPViwJQuhgAAAAD1YsCULoQAAAAA9WLAlC6DAAAAAPViwJQuBQAAAADxf8Q
+uggAAAAD04kCukQKAACLAroIAAAAA9M5Ag+FIwAAAIvTiwK6DAAAAAPVixKJAroEAAAAA9OLAroQ
+AAAAA9WLEokCuggAAAAD04sCyVvDyVvDU1WL7IvcgesAAAAAuAEAAAC6SAoAAIsSOQIPhWcAAAC4
+AgAAALoYAAAAA9U5Ag+FUwAAALgEAAAAuhQAAAAD1QECi+O6DAAAAAPViwJQuhQAAAAD1YsCUOh+
+/P//uhwAAAAD1YsSiQK4AAAAALocAAAAA9WLEjkCD4UJAAAAx8AAAAAAyVvDuhAAAAAD1YsCyVvD
+yVvDU1WL7IvcgesEAAAAi+NoAAAAALocAAAAA9WLAlC6GAAAAAPViwJQuhQAAAAD1YsCULoQAAAA
+A9WLAlC6DAAAAAPViwJQ6A4AAACL04kCi9OLAslbw8lbw4uEJBAAAACjTAoAAFNVi+yL3IHrFAAA
+AIvjumwKAACLAlC6aAoAAIsCULoUAAAAA9WLAlDo3fb//7pgCgAAiwKL04kCumQKAACLAovTAQKL
+04sCumAKAAA5Ag+EIAMAALpgCgAAiwK6cAoAAIkCulgKAACLArpgCgAAAQK4AAAAALpMCgAAOQIP
+hKcBAAC6YAoAAIsSD7YCungKAACJArp0CgAAiwK6eAoAACECulAKAACLArp4CgAAOQIPhUsBAAC6
+cAoAAIsCuoAKAACJAroUAAAAA9WLArqECgAAOQIPhakAAAC6YAoAAIsSD7YCungKAACJArgCAAAA
+iYMIAAAAungKAACLAroIAAAAA9MhArgAAAAAuggAAAAD0zkCD4VkAAAAuEAAAAC6eAoAACECuAAA
+AAC6eAoAADkCD4U6AAAAi+O6TAoAAIsCULqICgAAixKLAlC6YAoAAIsCULqACgAAiwJQaGYAAADo
+of3//7qACgAAiQLpDAAAALgAAAAAuoAKAACJAulgAAAAuhQAAAAD1YsCunwKAAA5Ag+FSgAAAIvj
+aAAAAADoHvoAALoEAAAAA9OJAovjukwKAACLAlC6BAAAAAPTiwJQumAKAACLAlC6gAoAAIsCUGhj
+AAAA6Cv9//+6gAoAAIkCulAKAACLArqACgAAOQIPhAoAAAC6gAoAAIsCyVvDulgKAACLArpgCgAA
+AQKL47pgCgAAiwJQ6AXn//+6VAoAAIkC6SoBAAC6YAoAAIsCugwAAAAD04kCulgKAACLArpgCgAA
+AQKL47pgCgAAiwJQ6Mzm//+6VAoAAIkCuhAAAAAD1YsCulQKAAA5Ag+FjgAAAIvjuhAAAAAD1YsC
+ULoMAAAAA9WLAlC6YAoAAIsCUOjj5f//uowKAACJArpQCgAAiwK6jAoAADkCD4VQAAAAuAEAAAC6
+HAAAAAPVOQIPhTIAAAC6DAAAAAPTixKLArqQCgAAiQK6lAoAAIsCupAKAAAJArqQCgAAiwK6DAAA
+AAPTixKJArpwCgAAiwLJW8O4AAAAALogAAAAA9U5Ag+EPgAAALgCAAAAiYMQAAAAugwAAAAD04sS
+iwK6EAAAAAPTIQK4AAAAALoQAAAAA9M5Ag+FCwAAALogAAAAA9WLEv8CulwKAACLArpUCgAAAQK6
+VAoAAIsCumAKAAABAunP/P//ulAKAACLAslbw8lbw4uEJAQAAACjmAoAAIuEJAgAAACjnAoAAIuE
+JAwAAACjoAoAAIuEJBAAAACjpAoAAFNVi+yL3IHrBAAAAIvjaAEAAAC6pAoAAIsCULqgCgAAiwJQ
+upwKAACLAlC6mAoAAIsCUOiz+///i9OJAovTiwLJW8PJW8OLhCQEAAAAo6gKAACLhCQIAAAAo6wK
+AACLhCQMAAAAo7AKAABTVYvsi9yB6wAAAACL47q4CgAAiwJQaAAAAAC6sAoAAIsCULqsCgAAiwJQ
+uqgKAACLAlDoSfv//7q0CgAAiQK6tAoAAIsCyVvDyVvDi4QkBAAAAKO8CgAAi4QkCAAAAKPACgAA
+i4QkDAAAAKPECgAAU1WL7IvcgesAAAAAi+NoAAAAALrECgAAiwJQusAKAACLAlC6vAoAAIsCUOjG
+/v//usgKAACJArrICgAAiwLJW8PJW8NTVYvsi9yB6wgAAACL47oUAAAAA9WLAlDo3vL//7oEAAAA
+A9OJAovjugQAAAAD04sCULoQAAAAA9WLAlC6DAAAAAPViwJQ6E3///+L04kCi9OLAslbw8lbw4uE
+JAQAAACjzAoAAIuEJAgAAACj0AoAAIuEJAwAAACj1AoAAIuEJBAAAACj2AoAAFNVi+yL3IHrAAAA
+ALgAAAAAuuQKAACJArrsCgAAiwK65AoAADkCD42wAAAAi+O65AoAAIsCUOg38v//uuAKAACJAovj
+uhwAAAAD1YsCULrYCgAAiwJQuuAKAACLAlC60AoAAIsCULrMCgAAiwJQ6NH5//+63AoAAIkCuugK
+AACLArrcCgAAOQIPhEIAAAC66AoAAIsCutgKAAA5Ag+FJAAAALroCgAAiwK61AoAADkCD4QQAAAA
+uuQKAACLArrUCgAAixKJArrcCgAAiwLJW8O65AoAAP8C6Tz///+66AoAAIsCyVvDyVvDU1WL7Ivc
+gesMAAAAuAAAAACJgwgAAAC4BgAAALoIAAAAA9M5Ag+NigAAAIvjuhgAAAAD1YsCULoIAAAAA9OL
+AlDo7/H//7oEAAAAA9OJAovjaAAAAAC6BAAAAAPTiwJQuhAAAAAD1YsCULoMAAAAA9WLAlDox/z/
+/4vTiQK4AAAAAIvTOQIPhBsAAAC6CAAAAAPTiwK6FAAAAAPVixKJAovTiwLJW8O6CAAAAAPT/wLp
+Yv///8fAAAAAAMlbw8lbw1NVi+yL3IHrDAAAALgAAAAAiYMIAAAAuAYAAAC6CAAAAAPTOQIPjXEA
+AACL47oQAAAAA9WLAlC6CAAAAAPTiwJQ6C7x//+6BAAAAAPTiQKL47oMAAAAA9WLAlC6BAAAAAPT
+iwJQaAAAAABoAAAAAOgL/P//i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8O6CAAAAAPT/wLpe///
+/8fAAAAAAMlbw8lbw4uEJAQAAACj8AoAAIuEJAgAAACj9AoAAIuEJAwAAACj+AoAAFNVi+yL3IHr
+AAAAAIvjaAEAAABoAAAAALr4CgAAiwJQuvQKAACLAlC68AoAAIsCUOgl/f//uvwKAACJArr8CgAA
+iwLJW8PJW8OLhCQEAAAAowALAACLhCQIAAAAowQLAACLhCQMAAAAowgLAABTVYvsi9yB6wAAAACL
+42gAAAAAaAAAAAC6CAsAAIsCULoECwAAiwJQugALAACLAlDouPz//7oMCwAAiQK6DAsAAIsCyVvD
+yVvDU1WL7IvcgesAAAAAuikLAACLAslbw8lbw1NVi+yL3IHrBAAAAIvjaAAAAAC6HAAAAAPViwJQ
+uhgAAAAD1YsCULoUAAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsCUOgOAAAAi9OJAovTiwLJW8PJ
+W8NTVYvsi9yB6xAAAACL47oEAAAAA9OLwlC6EAAAAAPVi8JQugwAAAAD1YsCUOgbAgAAuhwAAAAD
+1YsSiQK4AAAAALogAAAAA9U5Ag+FLwAAAIvjujELAACLAlC6EAAAAAPViwJQugwAAAAD1YsCUOhC
+/v//ukELAACJAuk0AAAAi+O6IAAAAAPViwJQujELAACLAlC6EAAAAAPViwJQugwAAAAD1YsCUOig
+/P//ukELAACJAro9CwAAiwK6QQsAADkCD4USAAAAi+Powf7//4vTiQKL04sCyVvDukELAACLAroU
+AAAAA9WLEokCi+PoMHgAALoIAAAAA9OJArpFCwAAiwK6LQsAADkCD4VqAAAAujkLAACLArocAAAA
+A9WLEjkCD4UKAAAAuncLAACLAslbw7gAAAAAuggAAAAD04sSOQIPhRcAAAC6OQsAAIsCuhgAAAAD
+1YsSiQLpEgAAALo1CwAAiwK6GAAAAAPVixKJAsfAAAAAAMlbw4vjuhQAAAAD1YsCULoEAAAAA9OL
+AlC6LQsAAIsCUOg+AwAAugwAAAAD04kCujULAACLAroMAAAAA9M5Ag+FFwAAALo1CwAAiwK6GAAA
+AAPVixKJAuluAAAAujkLAACLArocAAAAA9WLEjkCD4VEAAAAuAAAAAC6CAAAAAPTixI5Ag+FFwAA
+ALo5CwAAiwK6GAAAAAPVixKJAukSAAAAujULAACLAroYAAAAA9WLEokC6RIAAAC6NQsAAIsCuhgA
+AAAD1YsSiQLHwAAAAADJW8PJW8NTVYvsi9yB6wAAAAC6EAAAAAPVixKLAroMAAAAA9UBAroMAAAA
+A9X/CroMAAAAA9WLEg+2AsfBIwAAADvBD4RiAAAAugwAAAAD1YsSD7YCx8FeAAAAO8EPhS8AAACL
+47oQAAAAA9WLAlC6DAAAAAPViwJQ6FQAAAC6FAAAAAPVixKJAsfAAQAAAMlbw7j9////uhQAAAAD
+1YsSiQLHwAAAAADJW8O6EAAAAAPVixL/Crj9////uhQAAAAD1YsSiQLHwAEAAADJW8PJW8NTVYvs
+i9yB6wQAAAC4AwAAALoQAAAAA9WLEjkCD4y/AAAAugwAAAAD1f8KugwAAAAD1YsSD7YCi9OJArhh
+AAAAi9M5Ag+MCQAAALggAAAAi9MpArhWAAAAi9M5Ag+FBQAAAOkxAAAAuEQAAACL0zkCD4UFAAAA
+6R0AAAC4UwAAAIvTOQIPhQUAAADpCQAAALj9////i9OJArj9////i9M5Ag+EOgAAALoMAAAAA9X/
+CroMAAAAA9WLEg+2AsfBIwAAADvBD4UXAAAAuAMAAAC6EAAAAAPVixIpAovTiwLJW8PHwP3////J
+W8PJW8NTVYvsi9yB6wgAAACwAboMAAAAA9WLEjACuAEAAACJgwAAAAC6DAAAAAPVixKKAovTIAK4
+AAAAAIvTOQIPhRcAAAC6FAAAAAPViwK6DAAAAAPViQLpCQAAALoMAAAAA9X/AroQAAAAA9WLEosC
+ugQAAAAD04kCugwAAAAD1YsCuhAAAAAD1YsSiQK6BAAAAAPTixKLAroMAAAAA9WLEokCuAQAAAC6
+DAAAAAPVAQK4BAAAALoEAAAAA9MBAroEAAAAA9OLEosCugwAAAAD1YsSiQLJW8NTVYvsi9yB6wQA
+AAC4/f///7oQAAAAA9U5Ag+FTAAAALp7CwAAiwK6DAAAAAPVOQIPhQ4AAADHwAEAAADJW8PpHwAA
+ALp/CwAAiwK6DAAAAAPVOQIPhQkAAADHwAEAAADJW8PHwAAAAADJW8O4UwAAALoQAAAAA9U5Ag+E
+cQAAAIvjuowLAACLwlC6FAAAAAPViwJQuoMLAACLwlDoiv7//7oUAAAAA9WLEosCi9OJArgEAAAA
+i9MBArhEAAAAuhAAAAAD1TkCD4UQAAAAuH////+L04sSIQLpCwAAALiAAAAAi9OLEgkCx8AAAAAA
+yVvDx8ABAAAAyVvDyVvDi4QkBAAAAKOUCwAAi4QkCAAAAKOYCwAAi4QkDAAAAKOcCwAAU1WL7Ivc
+gesAAAAAupQLAACLEosCuqALAACJArqYCwAAixKLArqkCwAAiQK6nAsAAIsCuqALAAABArqoCwAA
+iwK6nAsAADkCD40WAAAAi+O6nAsAAIsCUOj25P//upwLAACJArqcCwAAiwK6pAsAACkCuqALAACL
+ArqUCwAAixKJArqkCwAAiwK6mAsAAIsSiQLJW8OLhCQEAAAAo6wLAACLhCQIAAAAo7ALAABTVYvs
+i9yB6wAAAACL47q0CwAAiwJQurALAACLAlC6rAsAAIsCUOgE////yVvDi4QkBAAAAKO4CwAAi4Qk
+CAAAAKO8CwAAi4QkDAAAAKPACwAAU1WL7IvcgesAAAAAi+O6wAsAAIsCUOgY2f//usgLAACJArrI
+CwAAiwK6vAsAADkCD40KAAAAurwLAACLAslbw7q4CwAAiwK6zAsAAIkCurwLAACLArrQCwAAiQK6
+yAsAAIsCutALAAA5Ag+MdgAAAIvjusgLAACLAlC6wAsAAIsCULrMCwAAiwJQ6PvX//+61AsAAIkC
+usQLAACLArrUCwAAOQIPhRUAAAC60AsAAIsCusgLAACJArrICwAA/wK6xAsAAIsCutQLAAA5Ag+E
+DgAAALrMCwAA/wK60AsAAP8K6Xb///+6xAsAAIsCutQLAAA5Ag+FGAAAALq4CwAAiwK6zAsAACkC
+uswLAACLAslbw7q8CwAAiwLJW8PJW8OLhCQEAAAAo9gLAACLhCQIAAAAo9wLAACLhCQMAAAAo+AL
+AABTVYvsi9yB6wAAAACL47rgCwAAiwJQ6NXX//+65AsAAIkCutwLAACLEosCuugLAACJArrYCwAA
+ixKLArrsCwAAiQK65AsAAIsCuugLAAA5Ag+NCgAAALrwCwAAiwLJW8O65AsAAIsCuvgLAACJArrw
+CwAAiwK6+AsAADkCD4SJAAAAuuwLAACLEooCuv4LAACIArr8CwAAigK6/gsAADgCD4wdAAAAuv0L
+AACKArr+CwAAOAIPjwkAAACwILr+CwAAKAK64AsAAIsSigK6/wsAAIgCuv8LAACKArr+CwAAOAIP
+hAoAAAC68AsAAIsCyVvDuuwLAAD/ArrgCwAA/wK6+AsAAP8K6WP///+67AsAAIsCutgLAACLEokC
+uuQLAACLArroCwAAKQK66AsAAIsCutwLAACLEokCuvQLAACLAslbw8lbw1NVi+yL3IHrBAAAALoQ
+AAAAA9WLAroMAAAAA9U5Ag+EQQAAAIvjugwAAAAD1YsSD7YCUOhHAQAAi9OJArgAAAAAi9M5Ag+F
+DAAAALoMAAAAA9WLAslbw7oMAAAAA9X/Aumn////ugwAAAAD1YsCyVvDyVvDU1WL7IvcgesMAAAA
+ugwAAAAD1YsCi9OJAroQAAAAA9WLAovTAQK6DAAAAAPViwK6BAAAAAPTiQKL04sCugwAAAAD1TkC
+D4SfAAAAugwAAAAD1YsSigK6AAwAAIgCugAMAAAPtgLHwSMAAAA7wQ+FHgAAALoEAAAAA9OLAroM
+AAAAA9UpAroMAAAAA9WLAslbw4vjugAMAAAPtgJQ6GoAAAC6CAAAAAPTiQK4AQAAALoIAAAAA9M5
+Ag+FHgAAALoEAAAAA9OLAroMAAAAA9UpAroMAAAAA9WLAslbw7oMAAAAA9X/AulO////ugQAAAAD
+04sCugwAAAAD1SkCugwAAAAD1YsCyVvDyVvDioQkBAAAAKIBDAAAU1WL7IvcgesAAAAAugEMAAAP
+tgLHwSAAAAA7wQ+FCQAAAMfAAQAAAMlbw7oBDAAAD7YCx8EJAAAAO8EPhQkAAADHwAEAAADJW8PH
+wAAAAADJW8PJW8NTVYvsi9yB6wwAAAC4NQEAAImDAAAAALgBAAAAi9OLEjkCD4WNAAAAuAAAAAC6
+BgwAAIsSOQIPhU4AAAC6EAAAAAPViwK6DAAAAAPVAQKL47oMAAAAA9WLAlC6CgwAAIvCUOj01f//
+ugQAAAAD04kCi+O6BAAAAAPTiwJQ6ADg//+6BgwAAIsS/wK4LQEAAImDCAAAALgBAAAAuggAAAAD
+04sSOQIPhQoAAAC6IgwAAIvCyVvDx8AAAAAAyVvDyVvDU1WL7IvcgesEAAAAuAAAAAC6FAAAAAPV
+OQIPhSYAAACL47oQAAAAA9WLAlC6DAAAAAPViwJQ6AT///+L04kCi9OLAslbw8fAAAAAAMlbw8lb
+w1NVi+yL3IHrCAAAALoMAAAAA9WLAovTiQK6EAAAAAPViwKL0wECi9OLAroMAAAAA9U5Ag+EUAAA
+AIvjugwAAAAD1YsSD7YCUOg+/v//ugQAAAAD04kCuAEAAAC6BAAAAAPTOQIPhQ4AAAC6DAAAAAPV
+/wLpDAAAALoMAAAAA9WLAslbw+md////ugwAAAAD1YsCyVvDyVvDU1WL7IvcgesEAAAAugwAAAAD
+1YsSiwKL04kCi+O6EAAAAAPVixKLAlC6DAAAAAPVixKLAlDoLv///7oMAAAAA9WLEokCi9OLAroM
+AAAAA9WLEjkCD4UJAAAAx8AAAAAAyVvDugwAAAAD1YsSiwKL0ykCi9OLAroQAAAAA9WLEgECx8AB
+AAAAyVvDyVvDi4QkBAAAAKMjDAAAi4QkCAAAAKMnDAAAi4QkDAAAAKMrDAAAi4QkEAAAAKMvDAAA
+i4QkFAAAAKMzDAAAi4QkGAAAAKM3DAAAU1WL7IvcgesAAAAAuiMMAACLEosCujsMAACJAronDAAA
+ixKLAro/DAAAiQKL47orDAAAiwJQuksMAACLAlC6RwwAAIsCUOjq+f//ukMMAACJArpPDAAAiwK6
+QwwAADkCD4UKAAAAuk8MAACLAslbw7pPDAAAiwK6MwwAADkCD4RcAAAAi+O6MwwAAIsCULpLDAAA
+iwJQukcMAACLAlDokvn//7o3DAAAixKJArgBAAAAujcMAACLEjkCD4UgAAAAujsMAACLArojDAAA
+ixKJAro/DAAAiwK6JwwAAIsSiQK6UwwAAIsCui8MAAA5Ag+FPAAAAIvjuksMAACLAlC6RwwAAIsC
+UOgg/v//ukMMAACJArpPDAAAiwK6QwwAADkCD4UKAAAAuk8MAACLAslbw7o7DAAAiwK6IwwAAIsS
+iQK6PwwAAIsCuicMAACLEokCulMMAACLAslbw8lbw4uEJAQAAACjVwwAAIuEJAgAAACjWwwAAIuE
+JAwAAACjXwwAAIuEJBAAAACjYwwAAFNVi+yL3IHrAAAAAIvjumcMAACLAlC6ZwwAAIsCULpjDAAA
+iwJQul8MAACLAlC6WwwAAIsCULpXDAAAiwJQ6Oj9//+6awwAAIkCumsMAACLAslbw8lbw4uEJAQA
+AACjbwwAAIuEJAgAAACjcwwAAIuEJAwAAACjdwwAAFNVi+yL3IHrAAAAALpvDAAAixKLArp7DAAA
+iQK6ewwAAIsSigK6gwwAAIgCuoQMAACKArqDDAAAOAIPhAsAAAC6gwwAAA+2Aslbw7pzDAAAixKL
+Arp/DAAAiQK6fwwAAP8KuoUMAACLArp/DAAAOQIPhQsAAAC6gwwAAA+2Aslbw7p7DAAA/wK6ewwA
+AIsSigK6gwwAAIgCunsMAACLArpvDAAAixKJArp/DAAAiwK6cwwAAIsSiQK6hQwAAIsCuncMAAA5
+Ag+ECQAAALp3DAAAixL/ArqDDAAAD7YCyVvDyVvDi4QkBAAAAKOJDAAAi4QkCAAAAKONDAAAi4Qk
+DAAAAKORDAAAi4QkEAAAAKOVDAAAU1WL7IvcgesAAAAAi+O6mwwAAIsCULqNDAAAiwJQuokMAACL
+AlDo7/b//7qfDAAAiQK6owwAAIsCup8MAAA5Ag+FCgAAALqjDAAAiwLJW8O6iQwAAIsSiwK6qwwA
+AIkCuo0MAACLEosCuq8MAACJArqjDAAAiwK6lQwAAIsSiQK6owwAAIsCuq8MAAA5Ag+E3AAAALqV
+DAAAixKLArq7DAAAiQKL47qVDAAAiwJQurcMAACLAlC6swwAAIsCUOgG/v//usMMAACIArqZDAAA
+igK6wwwAADgCD4VhAAAAupUMAACLEosCur8MAACJArq/DAAAiwK6uwwAADkCD4U4AAAAuokMAACL
+EosCusUMAACJArrFDAAAiwK6qwwAACkCuqsMAACLArqRDAAAixKJArqnDAAAiwLJW8PpHgAAALrE
+DAAAigK6wwwAADgCD4UKAAAAuqMMAACLAslbw7qrDAAA/wK6rwwAAP8K6RD///+6owwAAIsCyVvD
+yVvDi4QkBAAAAKPJDAAAi4QkCAAAAKPNDAAAi4QkDAAAAKPRDAAAi4QkEAAAAKPVDAAAU1WL7Ivc
+gesAAAAAi+O61QwAAIsCULrRDAAAiwJQus0MAACLAlC6yQwAAIsCUOjw/f//utkMAACJArrdDAAA
+iwK62QwAADkCD4UKAAAAujcNAACLAslbw7o7DQAAiwLJW8PJW8OLhCQEAAAAoz8NAACLhCQIAAAA
+o0MNAABTVYvsi9yB6wAAAACL47o/DQAAiwJQ6OnM//+6Rw0AAIkCi+O6Qw0AAIsCUOjTzP//uksN
+AACJArpLDQAAiwK6Rw0AAAECukcNAAD/AovjukcNAACLAlDokdj//7pPDQAAiQK6Tw0AAIsCyVvD
+yVvDU1WL7IvcgesMAAAAugwAAAAD1YsSiwKL04kCuAAAAACJgwQAAACL0/8CuhAAAAAD1YsCi9M5
+Ag+FCgAAALpUDQAAiwLJW8O4AAAAAImDCAAAALpTDQAAigKL04sSOAIPhBwBAAC6cA0AAIoCi9OL
+EjgCD4VbAAAAuAAAAAC6BAAAAAPTOQIPhRMAAAC4AQAAALoEAAAAA9OJAukOAAAAuAAAAAC6BAAA
+AAPTiQKL0/8CuhAAAAAD1YsCi9M5Ag+FCgAAALpUDQAAiwLJW8Ppkv///7pxDQAAigKL04sSOAIP
+hTcAAAC4AAAAALoUAAAAA9U5Ag+EIwAAALoIAAAAA9P/AovTiwK6GAAAAAPVixKJAroYAAAAA9WL
+Ev8CuAEAAAC6BAAAAAPTOQIPhRcAAACL0/8CuAAAAAC6BAAAAAPTiQLpFwAAALpTDQAAigKL04sS
+OAIPhAQAAACL0/8CuhAAAAAD1YsCi9M5Ag+FCgAAALpUDQAAiwLJW8Pp0f7//4vT/wKL04sCugwA
+AAAD1YsSiQK4AAAAALoUAAAAA9U5Ag+EFAAAALoIAAAAA9OLAroUAAAAA9WLEokCx8AAAAAAyVvD
+yVvDi4QkBAAAAKNyDQAAi4QkCAAAAKN2DQAAioQkDAAAAKJ6DQAAi4QkEAAAAKN7DQAAU1WL7Ivc
+gesAAAAAunYNAACLArp/DQAAiQK6hA0AAIsCunYNAAA5Ag+FCgAAALp2DQAAiwLJW8O6iA0AAIsC
+unsNAAA5Ag+FBwAAALpyDQAA/wq6cg0AAIsSigK6gw0AAIgCunoNAACKArqDDQAAOAIPhGoAAAC6
+iA0AAIsCunsNAAA5Ag+EDAAAALpyDQAA/wLpBwAAALpyDQAA/wq6dg0AAP8KuoQNAACLArp2DQAA
+OQIPhRMAAAC6eg0AAIoCuoMNAACIAukQAAAAunINAACLEooCuoMNAACIAumC////unYNAACLArp/
+DQAAKQK6fw0AAIsCyVvDyVvDi4QkBAAAAKOMDQAAi4QkCAAAAKOQDQAAioQkDAAAAKKUDQAAU1WL
+7IvcgesAAAAAi+O6mQ0AAIsCULqUDQAAD7YCULqQDQAAiwJQuowNAACLAlDofP7//7qVDQAAiQK6
+lQ0AAIsCyVvDyVvDi4QkBAAAAKOdDQAAi4QkCAAAAKOhDQAAioQkDAAAAKKlDQAAi4QkEAAAAKOm
+DQAAU1WL7IvcgesAAAAAi+O6pQ0AAA+2AlC6oQ0AAIsCULqdDQAAiwJQ6Dj///+6qg0AAIkCuqoN
+AACLArqmDQAAixKJArqqDQAAiwLJW8PJW8NTVYvsi9yB6wAAAAC48AAAALoMAAAAA9U5Ag+FCQAA
+AMfADAAAAMlbw7kQAAAAugwAAAAD1YsCD7rgH3MHuv/////rBboAAAAA9/m6DAAAAAPViQK4CQAA
+ALoMAAAAA9U5Ag+MSgAAALgMAAAAugwAAAAD1TkCD4wTAAAAuAYAAAC6DAAAAAPVKQLpDgAAALgJ
+AAAAugwAAAAD1SkCuAEAAAC6EAAAAAPVixKJAukQAAAAuAAAAAC6EAAAAAPVixKJAroMAAAAA9WL
+Aslbw8lbw4uEJAQAAACj2BQAAIuEJAgAAACj3BQAAIuEJAwAAACj4BQAAIuEJBAAAACj5BQAAIuE
+JBQAAACj6BQAAFNVi+yL3IHrFAAAALroFAAAixKLArr4FAAAiQK67BQAAIsCuvgUAAA5Ag+EdQIA
+ALr4FAAAixKLAroEFQAAiQK6ABUAAIsCuvgUAAABArr4FAAAixKLArrwFAAAiQK6ABUAAIsCuvgU
+AAABArr4FAAAixKLArrgFAAAixKJAroAFQAAiwK6+BQAAAECuvgUAACLEosCuggVAACJArgAAAAA
+iYMAAAAAuAAAAACJgwQAAAC4BAAAAAPDiYMIAAAAuBABAAC68BQAADkCD4UQAAAAuhEVAACLAovT
+iQLpSQAAALgwAwAAuvAUAAA5Ag+FNwAAAIvjuuAUAACLEosCUOgcjAAAugwAAAAD04kCuAEAAAC6
+DAAAAAPTOQIPhQkAAAC4FRUAAIvTiQKL47oIAAAAA9OLAlCL04sCULoIFQAAiwJQugQVAACLAlC6
+3BQAAIsCULrYFAAAiwJQ6Lbz//+69BQAAIkCuvwUAACLAroEAAAAA9M5Ag+F5wAAALgQAQAAuvAU
+AAA5Ag+FfQAAALgAAACAuuAUAACLEgkCuAAAAAC69BQAADkCD4VYAAAAi+O6CBUAAIsCULoXFQAA
+i8JQutwUAACLAlC62BQAAIsCUOjl9P//uvQUAACJArgBAAAAuvQUAAA5Ag+FEwAAALgAAABAuuAU
+AACLEgkC6QUAAADpngAAAOlJAAAAuAAAAAC69BQAADkCD4UFAAAA6YIAAACL4+iR2QAAuhAAAAAD
+04kCuAEAAAC6EAAAAAPTOQIPhQ4AAAC4AAAAgLrgFAAAixIJArrwFAAAiwLJW8PpHgAAALr8FAAA
+iwK69BQAADkCD4UKAAAAuvAUAACLAslbw7oAFQAAiwK66BQAAAECuugUAACLEosCuvgUAACJAul3
+/f//ukAVAACLArrkFAAAixKJAslbw1NVi+yL3IHrBAAAALgAAAAAiYMAAAAAuhAAAAAD1YsCi9M5
+Ag+NbQAAALoUAAAAA9WLAroMAAAAA9WLEokCukQVAACLAroMAAAAA9UBArpEFQAAiwK6FAAAAAPV
+AQK6RBUAAIsCuhQAAAAD1QECukQVAACLAroUAAAAA9UBArpEFQAAiwK6FAAAAAPVAQKL0/8C6YD/
+//+4AAAAALoMAAAAA9WLEokCyVvDU1WL7IvcgesAAAAAi+O6SBUAAIsCULpQFQAAiwJQukwVAACL
+AlDoK////4vjulQVAACLAlC6XBUAAIsCULpYFQAAiwJQ6Az////JW8NTVYvsi9yB6wAAAAC6DAAA
+AAPViwK6EAAAAAPVixIBArgAAAAAuhAAAAAD1YsSOQIPjQoAAAC6YBUAAIvCyVvDx8AAAAAAyVvD
+yVvDi4QkBAAAAKOgFQAAi4QkCAAAAKOkFQAAi4QkDAAAAKOoFQAAU1WL7IvcgesEAAAAi+O6tBUA
+AIsCULqoFQAAiwJQ6MDQ//+6qBUAAIsSiwK6rBUAAIkCurAVAACLEosCurwVAACJArqsFQAAiwK6
+wBUAAIkCurwVAACLArrAFQAAKQK6pBUAAIsCusAVAAA5Ag+NywEAALrcFQAAiwK65BUAAIkCutgV
+AACLArrUFQAAixI5Ag+FEwAAALrgFQAAiwK65BUAAIkC6XAAAAC6yBUAAIsCuqgVAAA5Ag+FEwAA
+ALrgFQAAiwK65BUAAIkC6UkAAAC6zBUAAIsCuqgVAAA5Ag+FEwAAALrgFQAAiwK65BUAAIkC6SIA
+AAC60BUAAIsCuqgVAAA5Ag+FDgAAALrgFQAAiwK65BUAAIkCutwVAACLArrkFQAAOQIPhQ8AAAC6
+/BUAAIsCyVvD6QEBAAC6vBUAAIsCugAWAACJAovjugAWAACLwlC6pBUAAIsCUOgu/v//i9OJArrE
+FQAAiwKL0zkCD4QHAAAAi9OLAslbw7oIFgAAixKLAroMFgAAiQKL47oMFgAAiwJQugAWAACLAlDo
+8MX//7oEFgAAiQKL47oAFgAAi8JQugQWAACLAlDozf3//4vTiQK6xBUAAIsCi9M5Ag+EBwAAAIvT
+iwLJW8O6qBUAAIsCuhQWAACJAroQFgAAiwK6FBYAAAECi+O6ABYAAIsCULoUFgAAiwJQ6Jm+//+L
+04kCusQVAACLAovTOQIPhAcAAACL04sCyVvDugAWAACLArqoFQAAixKJArq4FQAAiwK6oBUAADkC
+D4RGAAAAi+O6HBYAAIsCULqoFQAAiwJQ6FDN//+6vBUAAIsCuhgWAAABAovjuqQVAACLAlC6oBUA
+AIsCULoYFgAAiwJQuAAAAAD/0LqkFQAAiwK6vBUAAAECurwVAACLArqwFQAAixKJArrEFQAAiwLJ
+W8PJW8NTVYvsi9yB6wQAAACL47ogFgAAiwJQuhAAAAAD1YsCULoMAAAAA9WLAlDo6vz//4vTiQK4
+AAAAAIvTOQIPhAcAAACL04sCyVvDi+O6JBYAAIvCULogFgAAiwJQ6D/N//+6JBYAAIsCuigWAACL
+EokCx8AAAAAAyVvDyVvDi4QkBAAAAKMsFgAAi4QkCAAAAKMwFgAAi4QkDAAAAKM0FgAAU1WL7Ivc
+gesAAAAAi+O6NBYAAIsCULowFgAAiwJQuiwWAACLAlDoTvz//7o4FgAAiQK6PBYAAIsCujgWAAA5
+Ag+ECgAAALo4FgAAiwLJW8OL47o0FgAAiwJQukEWAACLAlC6RRYAAIsCUOgK/P//ujgWAACJAro4
+FgAAiwLJW8PJW8NTVYvsi9yB6wQAAAC4MAAAALoMAAAAA9U5Ag+NDgAAAMfAAAAAAMlbw+kdAAAA
+uDkAAAC6DAAAAAPVOQIPjwkAAADHwAEAAADJW8OL47oMAAAAA9WLAlDoDgAAAIvTiQKL04sCyVvD
+yVvDU1WL7IvcgesAAAAAuEAAAAC6DAAAAAPVOQIPhQ4AAADHwAEAAADJW8PppQAAALhBAAAAugwA
+AAAD1TkCD40OAAAAx8AAAAAAyVvD6YMAAAC4WgAAALoMAAAAA9U5Ag+PDgAAAMfAAQAAAMlbw+lh
+AAAAuF8AAAC6DAAAAAPVOQIPhQ4AAADHwAEAAADJW8PpPwAAALhhAAAAugwAAAAD1TkCD40OAAAA
+x8AAAAAAyVvD6R0AAAC4egAAALoMAAAAA9U5Ag+PCQAAAMfAAQAAAMlbw8fAAAAAAMlbw8lbw4uE
+JAQAAACjSRYAAIuEJAgAAACjTRYAAIuEJAwAAACjURYAAIuEJBAAAACjVRYAAIuEJBQAAACjWRYA
+AIuEJBgAAACjXRYAAFNVi+yL3IHrFAAAALpNFgAAixKLAovTiQKL44vTixIPtgJQ6LH+//+6BAAA
+AAPTiQK4AQAAALoEAAAAA9M5Ag+ECgAAALrPFgAAiwLJW8OL04sCuggAAAAD04kCulUWAACLAroI
+AAAAA9MBAovT/wK6CAAAAAPTiwKL0zkCD4RPAAAAi9OLEooCumEWAACIAovjumEWAAAPtgJQ6M/9
+//+6BAAAAAPTiQK60xYAAIsCugQAAAAD0zkCD4UKAAAAus8WAACLAslbw4vT/wLpnv///7gAAAAA
+utcWAACLEjkCD4UMAAAAuAEAAAC6XRYAAAkCi+O6WRYAAIsCUOi4y///ugwAAAAD04kCi+O6VRYA
+AIsCULpNFgAAixKLAlC6XRYAAIsCULpJFgAAiwJQugwAAAAD04sCUOhXAAAAuhAAAAAD04kCuAAA
+AAC6EAAAAAPTOQIPhAwAAAC6EAAAAAPTiwLJW8OL47pVFgAAiwJQulEWAACLAlC6TRYAAIsCUOg2
+4v//uhAAAAAD04sCyVvDyVvDU1WL7IvcgesEAAAAi+O6DAAAAAPViwJQaAQAAAC6EAAAAAPVi8JQ
+6KX4//+L04kCuAAAAACL0zkCD4QHAAAAi9OLAslbw4vjugwAAAAD1YsCUGgEAAAAuhQAAAAD1YvC
+UOhr+P//i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL47oMAAAAA9WLAlC6HAAAAAPViwJQuhgA
+AAAD1YsCUOiP+///i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8PHwAAAAADJW8PJW8NTVYvsi9yB
+6wQAAACL47rfFgAAiwJQuhwAAAAD1YsCUOhnyP//uhQAAAAD1YsCuusWAACJArrrFgAAiwKL04kC
+uhgAAAAD1YsCuusWAAApArrrFgAA/wK65xYAAIsCuuMWAACJArrnFgAAiwK6IAAAAAPVOQIPhDUA
+AAC66xYAAIsCuuMWAACJArgBAAAAuuMWAAAhArrnFgAAiwK64xYAADkCD4QHAAAAuusWAAD/Aovj
+uhwAAAAD1YsCULrrFgAAiwJQaAAAAADoOPf//7rzFgAAiQK67xYAAIsCuvMWAAA5Ag+ECgAAALrz
+FgAAiwLJW8OL47r7FgAAiwJQuhwAAAAD1YsCUOjXxv//utsWAACLArr3FgAAAQK6DAAAAAPVixKL
+AovTAQKL04sCugwAAAAD1YsSOQIPhGEAAACL47rnFgAAiwJQuhAAAAAD1YsCULoMAAAAA9WLAlDo
+7On//7r/FgAAiAK6/xYAAIoCuvcWAACLEogCuvcWAAD/AovjuhAAAAAD1YsCULoMAAAAA9WLAlDo
+e+D//+mK////uucWAACKArr3FgAAixKIArrnFgAAiwK64xYAADkCD4QXAAAAuvcWAAD/ArrnFgAA
+igK69xYAAIsSiAK67xYAAIsCyVvDyVvDioQkBAAAAKIAFwAAU1WL7IvcgesAAAAAugEXAACKAroA
+FwAAOAIPjQ8AAAC6AxcAAIsCyVvD6R4AAAC6AhcAAIoCugAXAAA4Ag+OCgAAALoDFwAAiwLJW8O6
+BxcAAIsCyVvDyVvDi4QkBAAAAKMLFwAAi4QkCAAAAKMPFwAAi4QkDAAAAKMTFwAAi4QkEAAAAKMX
+FwAAU1WL7IvcgesAAAAAuAAAAAC6GxcAAIkCuAEAAAC6IxcAAIkCug8XAACLAroLFwAAAQK4AAAA
+ALoPFwAAOQIPhJABAAC6CxcAAP8Kug8XAAD/CroLFwAAixKKArorFwAAiAKL47orFwAAD7YCUOj4
+/v//uicXAACJArgAAAAAuicXAAA5Ag+FCQAAAMfAAAAAAMlbw7AwuisXAAAoArorFwAAD7YCuh8X
+AACJArgAypo7uiMXAAA5Ag+F1wAAALgAAAAAug8XAAA5Ag+ERgAAALgAAAAAug8XAAA5Ag+ENAAA
+ALoLFwAA/wq6DxcAAP8KugsXAACLEg+2AsfBMAAAADvBD4QJAAAAx8AAAAAAyVvD6br///+4AgAA
+ALofFwAAOQIPjg4AAADHwAAAAADJW8PpXwAAALgCAAAAuh8XAAA5Ag+FTQAAALgAbMoIuhsXAAA5
+Ag+ODgAAAMfAAAAAAMlbw+ktAAAAuABsygi6GxcAADkCD4UbAAAAuAAAAAC6FxcAADkCD4UJAAAA
+x8AAAAAAyVvDuiMXAACLCrofFwAAiwL36bofFwAAiQK5CgAAALojFwAAiwL36bojFwAAiQK6HxcA
+AIsCuhsXAAABAule/v//uhsXAACLAroTFwAAixKJAsfAAQAAAMlbw8lbw4qEJAQAAACiLBcAAFNV
+i+yL3IHrAAAAALotFwAAigK6LBcAADgCD40OAAAAx8D/////yVvD6d4AAAC6LhcAAIoCuiwXAAA4
+Ag+PEwAAALotFwAAigK6LBcAACgC6bcAAAC6LxcAAIoCuiwXAAA4Ag+NDgAAAMfA/////8lbw+mV
+AAAAujAXAACKArosFwAAOAIPjyEAAAC6LxcAAIoCuiwXAAAoArozFwAAigK6LBcAAAAC6WAAAAC6
+MRcAAIoCuiwXAAA4Ag+NDgAAAMfA/////8lbw+k+AAAAujIXAACKArosFwAAOAIPjyEAAAC6MRcA
+AIoCuiwXAAAoArozFwAAigK6LBcAAAAC6QkAAADHwP/////JW8O6LBcAAA+2Aslbw8lbw4uEJAQA
+AACjNBcAAIuEJAgAAACjOBcAAIuEJAwAAACjPBcAAFNVi+yL3IHrAAAAALpAFwAAiwK6SBcAAIkC
+ukQXAACLArpMFwAAiQK6TBcAAIsCujgXAAA5Ag+NCgAAALpQFwAAiwLJW8O6WBcAAIsCukwXAAAB
+Aro4FwAAiwK6TBcAADkCD40KAAAAulAXAACLAslbw7pxFwAAiwK6dRcAAIkCi+O6eRcAAIvCULpg
+FwAAiwJQulwXAACLAlDoSN3//7pkFwAAiQK6UBcAAIsCumQXAAA5Ag+FCgAAALpQFwAAiwLJW8O6
+OBcAAIsCujQXAAABArpoFwAAiwK6OBcAADkCD4SSAAAAujQXAAD/Cro4FwAA/wq6NBcAAIsSigK6
+bBcAAIgCi+O6bBcAAA+2AlDoov3//7ptFwAAiQK4/////7ptFwAAOQIPhQoAAAC6UBcAAIsCyVvD
+unUXAACLCrptFwAAiwL36bptFwAAiQK6bRcAAIsCukgXAAABArp8FwAAiwq6dRcAAIsC9+m6dRcA
+AIkC6Vr///+6SBcAAIsCujwXAACLEokCulQXAACLAslbw8lbw4uEJAQAAACjgBcAAIuEJAgAAACj
+hBcAAIuEJAwAAACjiBcAAIuEJBAAAACjjBcAAFNVi+yL3IHrBAAAALqUFwAAigK6gBcAAIsSOAIP
+hdkAAAC4AQAAALqEFwAAOQIPhRkAAACL4+hOXwAAuogXAACLEokCx8AAAAAAyVvDuAIAAAC6hBcA
+ADkCD4WNAAAAuoAXAAD/ArqAFwAAixKKAro4AQAAiAK6OAEAAA+2AsfBeAAAADvBD4QJAAAAsCC6
+OAEAAAACujgBAAAPtgLHwXgAAAA7wQ+FNwAAALgBAAAAupUXAACLEjkCD4UZAAAAi+Pof14AALqI
+FwAAixKJAsfAAAAAAMlbw7qZFwAAi8LJW8O6BRgAAIvCyVvDuhQYAACLAslbw+l2AAAAuk4YAACK
+ArqAFwAAixI4Ag+FYAAAALgBAAAAuoQXAAA5Ag+ECgAAALpPGAAAi8LJW8OL4+gWxwAAi9OJArgA
+AAAAi9M5Ag+FEwAAALgEAAAAuogXAACLEokC6Q4AAAC4CAAAALqIFwAAixKJAsfAAAAAAMlbw4vj
+uowXAACLAlC6iBcAAIsCULqEFwAAiwJQuoAXAACLAlDoOfn//7qQFwAAiQK4AAAAALqQFwAAOQIP
+hUIAAACL47qIFwAAiwJQuoQXAACLAlC6gBcAAIsCUOhH/P//upAXAACJArgAAAAAupAXAAA5Ag+F
+CgAAALqzGAAAiwLJW8PHwAAAAADJW8PJW8OLhCQEAAAAo7cYAACLhCQIAAAAo7sYAACLhCQMAAAA
+o78YAABTVYvsi9yB6xAAAAC4AAAAALq7GAAAOQIPjwoAAAC6wxgAAIsCyVvDuAAAAACJgwAAAAC6
+9BgAAIoCurcYAACLEjgCD4UzAAAAuAEAAACL04kCurcYAAD/Arq7GAAA/wq4AAAAALq7GAAAOQIP
+jwoAAAC6wxgAAIsCyVvDuAAAAACJgwQAAAC6txgAAIsSD7YCx8EtAAAAO8EPhTgAAAC4AQAAALoE
+AAAAA9OJArq3GAAA/wK6uxgAAP8KuAAAAAC6uxgAADkCD48KAAAAusMYAACLAslbw4vjurcYAACL
+Eg+2AlDo8vH//7oIAAAAA9OJArgAAAAAuggAAAAD0zkCD4U3AAAAi+O6BAAAAAPTiwJQur8YAACL
+AlC6uxgAAIsCULq3GAAAiwJQ6H78//+6DAAAAAPTiQLpYgAAAIvjuvUYAACLAlC6uxgAAIsCULq3
+GAAAiwJQ6PzL//+6+RgAAIkCuAAAAAC6+RgAADkCD4UKAAAAuhYZAACLAslbw7r5GAAAixKLArq/
+GAAAixKJArgAAAAAugwAAAAD04kCuAAAAAC6DAAAAAPTOQIPhUUAAAC4AQAAAIvTOQIPhQkAAAC6
+vxgAAIsS9xK4AQAAALoEAAAAA9M5Ag+FGQAAALn/////ur8YAACLEosC9+m6vxgAAIsSiQK6DAAA
+AAPTiwLJW8PJW8NTVYvsi9yB6xAAAAC4AQAAAImDAAAAALoMAAAAA9WLAroEAAAAA9OJAroMAAAA
+A9WLAroIAAAAA9OJAroQAAAAA9WLAroIAAAAA9MBAroIAAAAA9OLAroMAAAAA9U5Ag+EEQEAALoM
+AAAAA9WLEg+2AsfBIgAAADvBD4VJAAAAi+NoAAAAALoIAAAAA9OLAlC6DAAAAAPVi8JQ6Nni//+6
+DAAAAAPTiQK4AAAAALoMAAAAA9M5Ag+EDAAAALoMAAAAA9OLAslbw7oIAAAAA9OLAroMAAAAA9U5
+Ag+FCgAAALpJGQAAiwLJW8O6ThkAAIoCugwAAAAD1YsSOAIPhUoAAACL0/8KuhoZAACLAovTOQIP
+hTAAAAC6BAAAAAPTiwK6DAAAAAPVKQK6DAAAAAPViwK6FAAAAAPVixKJAroeGQAAiwLJW8PpHAAA
+ALpNGQAAigK6DAAAAAPVixI4Ag+FBAAAAIvT/wK6DAAAAAPV/wLp1/7//7pJGQAAiwLJW8PJW8NT
+VYvsi9yB6wQAAAC6UxkAAIoCugwAAAAD1YsSOAIPhAoAAAC6TxkAAIsCyVvDugwAAAAD1f8CuhAA
+AAAD1f8Ki+O6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlDoGP7//4vTiQK6TxkAAIsCi9M5
+Ag+EBwAAAIvTiwLJW8O6VBkAAIsCuhQAAAAD1YsSAQKL04sCyVvDyVvDU1WL7IvcgesEAAAAi+O6
+DAAAAAPViwJQulgZAACLwlC6EAAAAAPViwJQuAAAAAD/0IvTiQKL04sCyVvDyVvDU1WL7IvcgesM
+AAAAuD8AAACJgwAAAACL04sCugwAAAAD1YsSOQIPjmoAAAC4LQEAAImDBAAAALgBAAAAugQAAAAD
+04sSOQIPhSsAAAC4MQEAAImDCAAAALgBAAAAuggAAAAD04sSOQIPhQoAAAC6WxkAAIsCyVvDi+O6
+WxkAAIsCUOiJo///i9OLAroMAAAAA9WLEokCx8AAAAAAyVvDyVvDU1WL7IvcgesEAAAAi+O6EAAA
+AAPVi8JQ6EH///+L04kCuAAAAACL0zkCD4QHAAAAi9OLAslbw7gAAAAAuhAAAAAD1TkCD44ZAAAA
+uhAAAAAD1f8KugwAAAAD1YsS0Trp0////8fAAAAAAMlbw8lbw1NVi+yL3IHrBAAAAIvjuhAAAAAD
+1YvCUOjR/v//i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8O4AAAAALoQAAAAA9U5Ag+OGQAAALoQ
+AAAAA9X/CroMAAAAA9WLEtEi6dP////HwAAAAADJW8PJW8NTVYvsi9yB6wwAAACLw4mDBAAAALoM
+AAAAA9WLEg+2AsfBKAAAADvBD4QzAAAAi+O6BAAAAAPTiwJQuhAAAAAD1YsCULoMAAAAA9WLAlDo
+ofn//7oIAAAAA9OJAulUAAAAugwAAAAD1f8CuAIAAAC6EAAAAAPVKQKL42gAAAAAugQAAAAD04sC
+ULoQAAAAA9WLAlC6EAAAAAPVi8JQugwAAAAD1YvCUOhPBwAAuggAAAAD04kCunYZAACLAroIAAAA
+A9M5Ag+EDAAAALoIAAAAA9OLAslbw4vji9OLAlC6GAAAAAPViwJQuhQAAAAD1YsCUOgYAAAAuggA
+AAAD04kCuggAAAAD04sCyVvDyVvDU1WL7IvcgesMAAAAugwAAAAD1YsSiwK6BAAAAAPTiQK4KwAA
+ALoQAAAAA9U5Ag+FFwAAALoUAAAAA9WLAroEAAAAA9MBAul6BAAAuC0AAAC6EAAAAAPVOQIPhRcA
+AAC6FAAAAAPViwK6BAAAAAPTKQLpTwQAALgqAAAAuhAAAAAD1TkCD4UiAAAAuhQAAAAD1YsKugQA
+AAAD04sC9+m6BAAAAAPTiQLpGQQAALgvAAAAuhAAAAAD1TkCD4VUAAAAunoZAACLAroUAAAAA9U5
+Ag+FCgAAALqTGQAAiwLJW8O6FAAAAAPViwq6BAAAAAPTiwIPuuAfcwe6/////+sFugAAAAD3+boE
+AAAAA9OJAumxAwAAuCYAAAC6EAAAAAPVOQIPhRcAAAC6FAAAAAPViwK6BAAAAAPTIQLphgMAALh8
+AAAAuhAAAAAD1TkCD4UXAAAAuhQAAAAD1YsCugQAAAAD0wkC6VsDAAC4XgAAALoQAAAAA9U5Ag+F
+FwAAALoUAAAAA9WLAroEAAAAA9MxAukwAwAAuCQAAAC6EAAAAAPVOQIPhQsBAAC4AAAAALoUAAAA
+A9U5Ag+NTwAAALgAAAAAugQAAAAD0zkCD4UPAAAAupMZAACLAslbw+knAAAAuAEAAAC6BAAAAAPT
+OQIPhQUAAADpDgAAALgAAAAAugQAAAAD04kC6aMAAAC4AAAAALoUAAAAA9U5Ag+FEwAAALgBAAAA
+ugQAAAAD04kC6XwAAACL47oUAAAAA9WLwlDoK/v//4vTiQK4AAAAAIvTOQIPhAcAAACL04sCyVvD
+ugQAAAAD04sCuggAAAAD04kCuAEAAAC6FAAAAAPVOQIPhCsAAAC6CAAAAAPTiwq6BAAAAAPTiwL3
+6boEAAAAA9OJAroUAAAAA9X/CunB////6RECAAC4JQAAALoQAAAAA9U5Ag+FVAAAALp6GQAAiwK6
+FAAAAAPVOQIPhQoAAAC6kxkAAIsCyVvDuhQAAAAD1YsKugQAAAAD04sCD7rgH3MHuv/////rBboA
+AAAA9/m5BAAAAAPLiRHpqQEAALgsAAAAuhAAAAAD1TkCD4V7AAAAuAAAAAC6FAAAAAPVOQIPjS0A
+AAC6FAAAAAPV9xqL47oUAAAAA9WLAlC6BAAAAAPTi8JQ6Kn6//+L04kC6R8AAACL47oUAAAAA9WL
+AlC6BAAAAAPTi8JQ6PX6//+L04kCuAAAAACL0zkCD4QHAAAAi9OLAslbw+kaAQAAuC4AAAC6EAAA
+AAPVOQIPhXsAAAC4AAAAALoUAAAAA9U5Ag+NLQAAALoUAAAAA9X3GovjuhQAAAAD1YsCULoEAAAA
+A9OLwlDoivr//4vTiQLpHwAAAIvjuhQAAAAD1YsCULoEAAAAA9OLwlDo9vn//4vTiQK4AAAAAIvT
+OQIPhAcAAACL04sCyVvD6YsAAAC4PAAAALoQAAAAA9U5Ag+FPgAAALoUAAAAA9WLAroEAAAAA9M5
+Ag+NEwAAALgBAAAAugQAAAAD04kC6Q4AAAC4AAAAALoEAAAAA9OJAuk5AAAAuhQAAAAD1YsCugQA
+AAAD0zkCD44TAAAAuAEAAAC6BAAAAAPTiQLpDgAAALgAAAAAugQAAAAD04kCugQAAAAD04sCugwA
+AAAD1YsSiQLHwAAAAADJW8PJW8OKhCQEAAAAopcZAABTVYvsi9yB6wAAAAC6lxkAAA+2AsfBKwAA
+ADvBD4UFAAAA6RgBAAC6lxkAAA+2AsfBLQAAADvBD4UFAAAA6f0AAAC6lxkAAA+2AsfBKgAAADvB
+D4UFAAAA6eIAAAC6lxkAAA+2AsfBLwAAADvBD4UFAAAA6ccAAAC6lxkAAA+2AsfBJgAAADvBD4UF
+AAAA6awAAAC6lxkAAA+2AsfBfAAAADvBD4UFAAAA6ZEAAAC6lxkAAA+2AsfBXgAAADvBD4UFAAAA
+6XYAAAC6lxkAAA+2AsfBJAAAADvBD4UFAAAA6VsAAAC6lxkAAA+2AsfBJQAAADvBD4UFAAAA6UAA
+AAC6lxkAAA+2AsfBPAAAADvBD4UFAAAA6SUAAAC6lxkAAA+2AsfBPgAAADvBD4UFAAAA6QoAAAC6
+mBkAAIsCyVvDupcZAAAPtgK6EAAAAAPVixKJArqcGQAAiwLJW8PJW8NTVYvsi9yB6wgAAAC6FAAA
+AAPViwKL04kCuhAAAAAD1YsCi9MpAovjuhwAAAAD1YsCULoYAAAAA9WLAlCL04sCULoQAAAAA9WL
+AlDoUfj//7oEAAAAA9OJArqgGQAAiwK6BAAAAAPTOQIPhCAAAAC6EAAAAAPViwK6DAAAAAPVixKJ
+AroEAAAAA9OLAslbw7qgGQAAiwLJW8PJW8NTVYvsi9yB6zwAAAC4DAAAAAPDiYMQAAAAugwAAAAD
+1YsSiwKL04kCi9OLAroEAAAAA9OJArgrAAAAuggAAAAD04kCuqQZAACLAroMAAAAA9OJArgcAAAA
+A8OJgyAAAACL04sCuigAAAAD04kCuhQAAAAD1YsCuigAAAAD0wECuqwZAACLAroYAAAAA9OJAroo
+AAAAA9OLAovTOQIPhNUBAACL47ogAAAAA9OLAlCL04sSD7YCUOg+/f//uiQAAAAD04kCurAZAACL
+ArokAAAAA9M5Ag+FuQAAAIvTiwK6BAAAAAPTOQIPhKEAAACL47oIAAAAA9OLAlC6EAAAAAPTiwJQ
+i9OLAlC6BAAAAAPTiwJQugwAAAAD1YsCUOhD/v//uhQAAAAD04kCuqgZAACLAroUAAAAA9M5Ag+E
+DAAAALoUAAAAA9OLAslbw4vjuigAAAAD04sCUIvTi8JQuiAAAAAD04sCUOhRAgAAuhwAAAAD04sC
+uggAAAAD04kCurAZAACLAroYAAAAA9OJAumOAAAAi9OLEg+2AsfBKAAAADvBD4V5AAAAi9P/Aroo
+AAAAA9OLArosAAAAA9OJAovTiwK6LAAAAAPTKQKL47owAAAAA9OLwlC6LAAAAAPTiwJQi9OLAlDo
+OfL//7oUAAAAA9OJArgAAAAAuhQAAAAD0zkCD4QMAAAAuhQAAAAD04sCyVvDujAAAAAD04sCi9MB
+AovT/wK6sBkAAIsCuhgAAAAD0zkCD4U3AAAAi+O6KAAAAAPTiwJQi9OLAlDoNcv//4vTiQKL04sC
+ugQAAAAD04kCuqwZAACLAroYAAAAA9OJAukY/v//uAEAAAC6HAAAAAPVOQIPhWcAAAC6KAAAAAPT
+iwK6NAAAAAPTiQK6BAAAAAPTiwK6NAAAAAPTKQKL47o0AAAAA9OLAlC6BAAAAAPTiwJQ6DDL//+6
+OAAAAAPTiQK6OAAAAAPTiwK6NAAAAAPTKQK6NAAAAAPTiwKL0ykCi+O6CAAAAAPTiwJQuhAAAAAD
+04sCUIvTiwJQugQAAAAD04sCULoMAAAAA9WLAlDoPvz//7oUAAAAA9OJArqoGQAAiwK6FAAAAAPT
+OQIPhAwAAAC6FAAAAAPTiwLJW8O6DAAAAAPTiwK6GAAAAAPVixKJArgBAAAAuhwAAAAD1TkCD4US
+AAAAujQAAAAD04sCuhQAAAAD1SkCi+O6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlDoKsb/
+/7qoGQAAiwLJW8PJW8NTVYvsi9yB6wgAAAC6DAAAAAPVixIPtgKL04kCuDwAAACL0zkCD4QSAAAA
+uD4AAACL0zkCD4QDAAAAyVvDuhAAAAAD1YsSiwK6BAAAAAPTiQK6BAAAAAPT/wK6FAAAAAPViwK6
+BAAAAAPTOQIPhQMAAADJW8O6BAAAAAPTixIPtgLHwTwAAAA7wQ+FKgAAALg8AAAAi9M5Ag+FGwAA
+ALAsugwAAAAD1YsSiAK6EAAAAAPVixL/Aslbw7oEAAAAA9OLEg+2AsfBPgAAADvBD4UnAAAAuD4A
+AACL0zkCD4UYAAAAsC66DAAAAAPVixKIAroQAAAAA9WLEv8CyVvDi4QkBAAAAKO0GQAAi4QkCAAA
+AKO4GQAAi4QkDAAAAKO8GQAAU1WL7IvcgesAAAAAi+O6vBkAAIsCULrAGQAAiwJQ6Ams//+L47rA
+GQAAiwJQurgZAACLAlC6tBkAAIsCUOjH3v//usQZAACJArrEGQAAiwLJW8PJW8OLhCQEAAAAo8gZ
+AACLhCQIAAAAo8wZAABTVYvsi9yB6wAAAACL47rIGQAAiwJQ6Mme//+60BkAAIkCi+O6zBkAAIsC
+ULrQGQAAiwJQusgZAACLAlDoLf///7rUGQAAiQK61BkAAIsCyVvDyVvDU1WL7IvcgesEAAAAi+Po
+kLIAAIvTiQK4AQAAAIvTOQIPhcoAAAC6DAAAAAPViwK6ABoAAIkCuhAAAAAD1YsCugQaAACJAroU
+AAAAA9WLAroIGgAAiQK6MAAAAAPViwK6EBoAAIkCuhgAAAAD1YsCuhgaAACJArocAAAAA9WLArog
+GgAAiQK6IAAAAAPViwK6KBoAAIkCuiQAAAAD1YsCuiwaAACJArooAAAAA9WLArowGgAAiQK6LAAA
+AAPViwK6OBoAAIkCi+O6NAAAAAPViwJQaEAAAAC6ABoAAIvCUOj/2f//ukAaAACJAunFAAAAugwA
+AAAD1YsCutgZAACJAroQAAAAA9WLArrcGQAAiQK6FAAAAAPViwK64BkAAIkCujAAAAAD1YsCuuQZ
+AACJAroYAAAAA9WLArroGQAAiQK6HAAAAAPViwK67BkAAIkCuiAAAAAD1YsCuvAZAACJArokAAAA
+A9WLArr0GQAAiQK6KAAAAAPViwK6+BkAAIkCuiwAAAAD1YsCuvwZAACJAovjujQAAAAD1YsCUGgo
+AAAAutgZAACLwlDoNdn//7pAGgAAiQK6QBoAAIsCyVvDyVvDU1WL7IvcgesEAAAAi+O6RBoAAIsC
+UGgAAAAAaAAAAABoAAAAAGgAAAAAaAAAAABoAAAAAGgAAAAAaAAAAABoAAAAAGgAAAAA6PH9//+L
+04kCi9OLAslbw8lbw1NVi+yL3IHrBAAAAIvjukgaAACLAlBoAAAAAGgAAAAAuiAAAAAD1YsCUGgA
+AAAAaAAAAAC6HAAAAAPViwJQuhgAAAAD1YsCULoUAAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsC
+UOh4/f//i9OJAovTiwLJW8PJW8OLhCQEAAAAo0waAACLhCQIAAAAo1AaAACLhCQMAAAAo1QaAACL
+hCQQAAAAo1gaAACLhCQUAAAAo1waAACLhCQYAAAAo2AaAACLhCQcAAAAo2QaAACLhCQgAAAAo2ga
+AACLhCQkAAAAo2waAABTVYvsi9yB6wgAAACL44vTi8JQulwaAACLAlDoR6j//4vjunAaAACLAlBo
+AAAAALpsGgAAiwJQumgaAACLAlC6ZBoAAIsCULpgGgAAiwJQi9OLAlC6WBoAAIsCULpUGgAAiwJQ
+ulAaAACLAlC6TBoAAIsCUOiF/P//ugQAAAAD04kCugQAAAAD04sCyVvDyVvDi4QkBAAAAKN0GgAA
+i4QkCAAAAKN4GgAAi4QkDAAAAKN8GgAAi4QkEAAAAKOAGgAAi4QkFAAAAKOEGgAAi4QkGAAAAKOI
+GgAAi4QkHAAAAKOMGgAAi4QkIAAAAKOQGgAAi4QkJAAAAKOUGgAAU1WL7IvcgesMAAAAuAQAAAAD
+w4mDCAAAAIvjuggAAAAD04sCULp0GgAAiwJQ6GL7//+L04kCuAAAAACL0zkCD4VVAAAAi+O6lBoA
+AIsCULqQGgAAiwJQuowaAACLAlC6iBoAAIsCULqEGgAAiwJQuoAaAACLAlC6fBoAAIsCULp4GgAA
+iwJQugQAAAAD04sCUOgB/v//i9OJAovTiwLJW8PJW8OLhCQEAAAAo5gaAACLhCQIAAAAo5waAACL
+hCQMAAAAo6AaAACKhCQQAAAAoqQaAACKhCQUAAAAoqUaAACLhCQYAAAAo6YaAACLhCQcAAAAo6oa
+AABTVYvsi9yB6wgAAACxELqlGgAAigL26YgCuqUaAACKArqkGgAACAKL4+h+rQAAugQAAAAD04kC
+uAEAAAC6BAAAAAPTOQIPhX4AAAC6mBoAAIsCurYaAACJArqcGgAAiwK6vhoAAIkCuqAaAACLArrG
+GgAAiQK6pBoAAIoCuroaAACIAovjurIaAACLAlC6rhoAAIsCULq8GgAAi8JQuAAAAAD/0Ivjuqoa
+AACLAlBoGAAAALq2GgAAi8JQ6CzV//+L04kC6XkAAAC6mBoAAIsCus4aAACJArqcGgAAiwK60hoA
+AIkCuqAaAACLArrWGgAAiQK6pBoAAIoCutoaAACIAovjurIaAACLAlC6rhoAAIsCULrcGgAAi8JQ
+uAAAAAD/0IvjuqoaAACLAlBoEAAAALrOGgAAi8JQ6K7U//+L04kCi9OLAslbw8lbw4uEJAQAAACj
+3hoAAIuEJAgAAACj4hoAAIuEJAwAAACj5hoAAIuEJBAAAACj6hoAAIqEJBQAAACi7hoAAIqEJBgA
+AACi7xoAAIuEJBwAAACj8BoAAIuEJCAAAACj9BoAAFNVi+yL3IHrAAAAAIvjuvwaAACLAlC64hoA
+AIsCULreGgAAiwJQ6Ev4//+6ABsAAIkCugQbAACLAroAGwAAOQIPhUgAAACL47r0GgAAiwJQuvAa
+AACLAlC67xoAAA+2AlC67hoAAA+2AlC66hoAAIsCULrmGgAAiwJQuvgaAACLAlDoef3//7oAGwAA
+iQK6ABsAAIsCyVvDyVvDi4QkBAAAAKMIGwAAi4QkCAAAAKMMGwAAi4QkDAAAAKMQGwAAioQkEAAA
+AKIUGwAAioQkFAAAAKIVGwAAi4QkGAAAAKMWGwAAi4QkHAAAAKMaGwAAU1WL7IvcgesAAAAAi+O6
+CBsAAIsCUOjilv//uh4bAACJAovjuhobAACLAlC6FhsAAIsCULoVGwAAD7YCULoUGwAAD7YCULoQ
+GwAAiwJQugwbAACLAlC6HhsAAIsCULoIGwAAiwJQ6Eb+//+6IhsAAIkCuiIbAACLAslbw8lbw1NV
+i+yL3IHrCAAAAIvj6H+qAAC6BAAAAAPTiQK4AQAAALoEAAAAA9M5Ag+FVwAAALoMAAAAA9WLAro+
+GwAAiQK6EAAAAAPViwK6ShsAAIkCuhQAAAAD1YsCuk4bAACJAovjuhgAAAAD1YsCUGgYAAAAuj4b
+AACLwlDoVNL//4vTiQLpYgAAALoMAAAAA9WLArpWGwAAiQKL42gDAAAAuhAAAAAD1YvCULpbGwAA
+i8JQuAAAAAD/0LoUAAAAA9WLArpeGwAAiQKL47oYAAAAA9WLAlBoDAAAALpWGwAAi8JQ6O3R//+L
+04kCi9OLAslbw8lbw1NVi+yL3IHrBAAAAIvjuhQAAAAD1YsCUGgAAAAAuhAAAAAD1YsCULoMAAAA
+A9WLAlDo1/7//4vTiQKL04sCyVvDyVvDU1WL7IvcgesAAAAAunYbAACLAroMAAAAA9U5Ag+FEwAA
+ALpuGwAAiwK6ehsAAIkC6Q4AAAC6chsAAIsCunobAACJAovjumobAACLAlC6ehsAAIsCUOjHof//
+uhAAAAAD1YsCumYbAAABAovjugwAAAAD1YsCULoYAAAAA9WLAlC6FAAAAAPViwJQumYbAACLAlDo
+Mv7//7piGwAAiQK6YhsAAIsCyVvDyVvDU1WL7IvcgesAAAAAuAQAAAC6DAAAAAPVAQK6DAAAAAPV
+ixKLAroQAAAAA9UhAroQAAAAA9WLAslbw8lbw1NVi+yL3IHrBAAAAIvjaAIAAAC6DAAAAAPViwJQ
+6KH///+L04kCi9OLAslbw8lbw1NVi+yL3IHrBAAAAIvjaAQAAAC6DAAAAAPViwJQ6HH///+L04kC
+i9OLAslbw8lbw1NVi+yL3IHrBAAAAIvjaAgAAAC6DAAAAAPViwJQ6EH///+L04kCi9OLAslbw8lb
+w1NVi+yL3IHrBAAAAIvjaAgAAAC6DAAAAAPViwJQ6BH///+L04kCi9OLAslbw8lbw1NVi+yL3IHr
+BAAAAIvjaBAAAAC6DAAAAAPViwJQ6OH+//+L04kCi9OLAslbw8lbw1NVi+yL3IHrBAAAALgBAAAA
+un4bAACLEjkCD4UhAAAAi+NoEAAAALoMAAAAA9WLAlDonf7//4vTiQKL04sCyVvDx8AAAAAAyVvD
+yVvDU1WL7IvcgesEAAAAi+NogAAAALoMAAAAA9WLAlDoZP7//4vTiQKL04sCyVvDyVvDU1WL7Ivc
+gesEAAAAi+NoAAEAALoMAAAAA9WLAlDoNP7//4vTiQKL04sCyVvDyVvDU1WL7IvcgesEAAAAugwA
+AAAD1YsCi9OJArgEAAAAi9MBAovTixKLAovTiQK4CAAAAIvTIQK4AAAAAIvTOQIPhQkAAADHwAMA
+AADJW8PHwAUAAADJW8PJW8OLhCQEAAAAo4IbAACLhCQIAAAAo4YbAABTVYvsi9yB6wAAAAC6ghsA
+AIsCuoobAACJArqSGwAAiwK6jhsAAIkCuoYbAACLArqOGwAAOQIPjSMAAAC6lhsAAIsKuoobAACL
+AvfpuoobAACJArqOGwAA/wLpyf///7qKGwAAiwLJW8PJW8OLhCQEAAAAo5obAACLhCQIAAAAo54b
+AACLhCQMAAAAo6IbAABTVYvsi9yB6wAAAAC6rhsAAIsCurIbAACJArqiGwAAiwK6thsAAIkCi+O6
+phsAAIsCULqyGwAAiwJQ6Bn///+6shsAAIkCurIbAACLArq6GwAAiQK6nhsAAIsKurobAACLAvfp
+urobAACJArq6GwAAiwK6thsAAAkCi+O6qhsAAIsCULqyGwAAiwJQ6Mj+//+6shsAAIkCurIbAACL
+Arq6GwAAiQK6mhsAAIsKurobAACLAvfpurobAACJArq6GwAAiwK6thsAAAkCurYbAACLAslbw8lb
+w1NVi+yL3IHrBAAAALC4ur4bAACIAroMAAAAA9WKArq+GwAAAAK6EAAAAAPViwK6vxsAAIkCi+O6
+wxsAAIsCULrHGwAAiwJQur4bAACLwlDo6sz//4vTiQKL04sCyVvDyVvDU1WL7IvcgesIAAAAuAEA
+AAC6yxsAAIsSOQIPhVQAAACL42gBAAAA6Be2AACL04kCi+NoAQAAALoQAAAAA9WLwlCL04sCUOjT
+AAAAugQAAAAD04kCuAAAAAC6BAAAAAPTOQIPhAwAAAC6BAAAAAPTiwLJW8OL47oQAAAAA9WLAlC6
+DAAAAAPViwJQ6BgAAAC6BAAAAAPTiQK6BAAAAAPTiwLJW8PJW8NTVYvsi9yB6wQAAACL4+jOtQAA
+i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL47oQAAAAA9WLAlC6DAAAAAPViwJQ6K/+//+L04kC
+uAAAAACL0zkCD4QHAAAAi9OLAslbw4vj6J+2AACL04kCi9OLAslbw8lbw1NVi+yL3IHrBAAAAIvj
+uhAAAAAD1YsSiwJQuhQAAAAD1YsCULoMAAAAA9WLAlC6zxsAAIsCUOjo+f//i9OJArgAAAAAi9M5
+Ag+FEQAAAIvjuhAAAAAD1YsCUOjioQAAi9OLAslbw8lbw1NVi+yL3IHrHAAAALoQAAAAA9WLEosC
+i9OJAovjuhAAAAAD1YsCUOim+v//ugQAAAAD04kCuAAAAAC6BAAAAAPTOQIPhTwCAAC4AQAAALrX
+GwAAixI5Ag+FBgIAAIvjaAEAAADoU7QAALrfGwAAiQKL4+gSIwAAuggAAAAD04kCuAAAAAC6CAAA
+AAPTixI5Ag+FlQAAAIvjuhAAAAAD1YsCUOjr+v//uhAAAAAD04kCuAAAAAC6EAAAAAPTOQIPhBMA
+AAC4AwAAALoMAAAAA9OJAukOAAAAuAEAAAC6DAAAAAPTiQKL47oMAAAAA9OLAlCL04vCULrfGwAA
+iwJQ6JT+//+60xsAAIkCuAAAAAC60xsAADkCD4QKAAAAutMbAACLAslbw+k4AQAAuAAAAAC6CAAA
+AAPTixKJAovjuhAAAAAD1YsCUOhW+f//uhQAAAAD04kCi+O6EAAAAAPViwJQuhQAAAAD04sCUOjN
+0QAAi9OJAovjuhAAAAAD1YsCUIvTi8JQuhQAAAAD04sCUOj30QAAuhgAAAAD04kCi+OL04sCULoY
+AAAAA9OLAlC63xsAAIsCULrbGwAAiwJQ6Pf3//+60xsAAIkCuAAAAAC60xsAADkCD4QKAAAAutMb
+AACLAslbw7gAAAAAuhQAAAAD0zkCD4VpAAAAi+O62xsAAIsCUOh0NgAAutMbAACJArgAAAAAutMb
+AAA5Ag+ECgAAALrTGwAAiwLJW8OL47rfGwAAiwJQi9OLwlDo058AALrTGwAAiQK4AAAAALrTGwAA
+OQIPhAoAAAC60xsAAIsCyVvDi+OL04sCULoMAAAAA9WLAlDop/z//7rTGwAAiQLp8QAAAIvjuhAA
+AAAD1YsCUOip+f//uuMbAACIAovjuuMbAAAPtgJQugwAAAAD1YsCULrkGwAAD7YCUOhc+v//uuYb
+AACIArgAAAAAi9M5Ag+ERwAAAIvji9OLAlC6DAAAAAPViwJQ6Cv7//+60xsAAIkCuAAAAAC60xsA
+ADkCD4QKAAAAutMbAACLAslbw7ADuuUbAACIAukJAAAAsIu65RsAAIgCi+PofaIAALrTGwAAiQK4
+AAAAALrTGwAAOQIPhAoAAAC60xsAAIsCyVvDi+O67xsAAIsCULrrGwAAiwJQuucbAACLAlDo5sf/
+/7rTGwAAiQK60xsAAIsCyVvDyVvDU1WL7IvcgesIAAAAi+O6EAAAAAPViwJQugwAAAAD1YsCUOhW
+/P//i9OJArgAAAAAi9M5Ag+FNgEAAIvjuhAAAAAD1YsCUOhB+P//ugQAAAAD04kCuAAAAAC6BAAA
+AAPTOQIPhAgBAAC4CAAAALoQAAAAA9UBAroQAAAAA9WLEosCuvUbAACJArgAAAAAuvUbAAA5Ag+N
+CgAAALr5GwAAi8LJW8OL4+h8oQAAi9OJArgAAAAAi9M5Ag+FsgAAAIvjugwAAAAD1YsCULoMAAAA
+A9WLAlBoAAAAAOi7+P//ujwcAACIAovjuj0cAACLAlBoAgAAALo7HAAAi8JQ6NHG//+L04kCuAAA
+AACL0zkCD4VcAAAAi+PoDKEAAIvTiQK4AAAAAIvTOQIPhUIAAACL47oMAAAAA9WLAlBoAAAAAGgD
+AAAA6FD4//+69BsAAIgCi+O6PRwAAIsCUGgGAAAAuvMbAACLwlDoZsb//4vTiQKL04sCyVvDyVvD
+U1WL7IvcgesUAAAAi+O6EAAAAAPViwJQuhgAAAAD1YsCUOhf/v//ukEcAACJArpFHAAAiwK6QRwA
+ADkCD4QbAAAAukEcAACLAroMAAAAA9WLEokCx8AAAAAAyVvDi+O6EAAAAAPViwJQ6OEBAACL04kC
+uAEAAAC6FAAAAAPVOQIPhcYAAACL04sCuggAAAAD04kCuAEAAACL0zkCD4V/AAAAuAEAAAC6HAAA
+AAPVOQIPhQ4AAAC4AAAAAIvTiQLpXQAAAIvjuhAAAAAD1YsCUOgN9v//ugwAAAAD04kCuAAAAAC6
+DAAAAAPTOQIPhS8AAACL4+gAIgAAugQAAAAD04kCuAAAAAC6BAAAAAPTixI5Ag+FCQAAALgAAAAA
+i9OJAovjuggAAAAD04sCULoYAAAAA9WLAlDofQAAALoMAAAAA9WLEokC6WMAAACL4+jFnAAAuhAA
+AAAD04kCuAEAAAC6EAAAAAPTOQIPhS8AAACL4+iCIQAAugQAAAAD04kCuAAAAAC6BAAAAAPTixI5
+Ag+ECQAAALgBAAAAi9OJArgAAAAAugwAAAAD1YsSiQKL04sCyVvDyVvDU1WL7IvcgesEAAAAuAEA
+AAC6EAAAAAPVOQIPhSIAAACL44vTi8JQ6JKeAAC4AAAAAIvTOQIPhAcAAACL04sCyVvDi+O6DAAA
+AAPViwJQugwAAAAD1YsCUGgAAAAA6AT2//+6ThwAAIgCi+O6SRwAAIsCULpTHAAAiwJQuk8cAACL
+AlDoF8T//4vTiQKL04sCyVvDyVvDU1WL7IvcgesIAAAAi+O6DAAAAAPViwJQ6B+fAACL04kCuAAA
+AACL0zkCD4QcAAAAi+PokpsAALoEAAAAA9OJAroEAAAAA9OLAslbw8fAAAAAAMlbw8lbw1NVi+yL
+3IHrDAAAAIvj6PKfAACL04kCuAEAAACL04sSOQIPhTYAAACL47pbHAAAi8JQ6JmdAAC4AAAAALpb
+HAAAOQIPhAoAAAC6WxwAAIsCyVvDuAAAAACL04sSiQK4AAAAAImDBAAAALgBAAAAuhAAAAAD1TkC
+D4VGAAAAi+O6VxwAAIsCUGgBAAAAumccAACLwlDoGMP//7pbHAAAiQK6XxwAAIsCulscAAA5Ag+E
+CgAAALpbHAAAiwLJW8PpRAAAAIvj6IgfAAC6CAAAAAPTiQK4AAAAALoIAAAAA9OLEjkCD4QeAAAA
+uAMAAAC6BAAAAAPTiQK4AAAAALoIAAAAA9OLEokCugwAAAAD1YoCumgcAACIAovjuhgAAAAD1YsC
+ULoUAAAAA9WLAlC6BAAAAAPTiwJQ6Dz0//+6aRwAAIgCi+O6VxwAAIsCULpjHAAAiwJQumgcAACL
+wlDoT8L//7pbHAAAiQK6WxwAAIsCyVvDyVvDU1WL7IvcgesMAAAAi+O6IAAAAAPViwJQuhwAAAAD
+1YsCULoUAAAAA9WLAlC6DAAAAAPViwJQi9OLwlDoo/v//7oEAAAAA9OJArgAAAAAi9M5Ag+EBwAA
+AIvTiwLJW8OL4+gpngAAuggAAAAD04kCugQAAAAD04sCuggAAAAD04sSiQKL47ocAAAAA9WLAlC6
+GAAAAAPViwJQaAAAAAC6EAAAAAPViwJQ6N39//+L04kCi9OLAslbw8lbw1NVi+yL3IHrAAAAAIvj
+uhwAAAAD1YsCULpuHAAAiwJQuhgAAAAD1YsCULoUAAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsC
+UOj4/v//umocAACJArpqHAAAiwLJW8PJW8NTVYvsi9yB6wQAAACL47oMAAAAA9WLAlC6GAAAAAPV
+iwJQ6KP1//+L04kCuAAAAACL0zkCD4UuAAAAi+O6GAAAAAPViwJQuhQAAAAD1YsCUGgAAAAAuhAA
+AAAD1YsCUOgK/f//i9OJAovTiwLJW8PJW8NTVYvsi9yB6wQAAACL47oQAAAAA9WLAlC6DAAAAAPV
+iwJQ6JWq//+6FAAAAAPV/wq6FAAAAAPV/wqL42gAAAAAuhgAAAAD1YsCULoUAAAAA9WLAlC6EAAA
+AAPViwJQugwAAAAD1YsCUOi83///i9OJAovTiwLJW8PJW8NTVYvsi9yB6wgAAAC6DAAAAAPVixKL
+AovTiQKL04sSD7YCx8EoAAAAO8EPhDUAAACL47oYAAAAA9WLAlC6FAAAAAPViwJQi9OLAlDoV9H/
+/7oEAAAAA9OJAroEAAAAA9OLAslbw4vjuhgAAAAD1YsCULoUAAAAA9WLAlC6chwAAIsCULoQAAAA
+A9WLAlC6DAAAAAPViwJQ6HOY//+6BAAAAAPTiQK6BAAAAAPTiwLJW8PJW8OLhCQEAAAAo3YcAACL
+hCQIAAAAo3ocAACLhCQMAAAAo34cAACLhCQQAAAAo4IcAABTVYvsi9yB6wQAAACL47qCHAAAiwJQ
+un4cAACLAlC6ehwAAIsCULp2HAAAiwJQ6On+//+L04kCuo4cAACLAovTOQIPhAcAAACL04sCyVvD
+upIcAACLArqKHAAAiQK6jhwAAIsCyVvDyVvDU1WL7IvcgesAAAAAupocAACLArqWHAAAixKJAslb
+w1NVi+yL3IHrAAAAALqiHAAAiwK6nhwAAIsSiQLJW8NTVYvsi9yB6wAAAAC6phwAAIsSiwLJW8PJ
+W8NTVYvsi9yB6wAAAAC6rhwAAIsCuqocAACLEokCyVvDU1WL7IvcgesAAAAAurIcAACLEosCyVvD
+yVvDU1WL7IvcgesAAAAAurocAACLEosCurYcAACJAslbw1NVi+yL3IHrAAAAALq+HAAAixKLArrC
+HAAAixKJAslbw1NVi+yL3IHrAAAAALrGHAAAixKLAslbw8lbw1NVi+yL3IHrAAAAALrOHAAAiwK6
+yhwAAIsSOQIPhSAAAAC6zhwAAIsCutIcAACLEokCutYcAACLArrKHAAAixKJAslbw1NVi+yL3IHr
+BAAAALoQAAAAA9WKArraHAAAiAK6DAAAAAPViwK62xwAAIkCi+O65xwAAIsCULrjHAAAiwJQut8c
+AACLAlDoZr3//4vTiQKL4+jQ/v//i9OLAslbw8lbw1NVi+yL3IHrCAAAAIvj6JOXAACL04kCuAAA
+AACL0zkCD4VyAAAAi+O66xwAAIsCUGgBAAAAuu8cAACLwlDoD73//4vTiQK4AAAAAIvTOQIPhUMA
+AACL47oQAAAAA9WLAlBoAAAAAGgDAAAA6Kju//+6BAAAAAPTiQKL47oEAAAAA9OLAlC6DAAAAAPV
+iwJQ6Az///+L04kCi9OLAslbw8lbw1NVi+yL3IHrDAAAALgAAAAAuhQAAAAD1TkCD4WSAAAAi+O6
+HAAAAAPViwJQuhgAAAAD1YsCUOj8agAAugQAAAAD04kCuAAAAAC6BAAAAAPTOQIPhTQAAAC4uAAA
+ALoQAAAAA9UBAovjuhAAAAAD1YsCULoMAAAAA9WLAlDoff7//4vTiQKL04sCyVvDi+O6EAAAAAPV
+iwJQugwAAAAD1YsCUOi3/v//i9OJAovTiwLJW8O48BwAAImDCAAAALCwuggAAAAD04sSiAK6EAAA
+AAPVigK6CAAAAAPTixIAAroIAAAAA9P/AroMAAAAA9WKAroIAAAAA9OLEogCuggAAAAD0/8Ki+O6
+8hwAAIsCUGgCAAAAuggAAAAD04sCUOiNu///i9OJAovTiwLJW8PJW8NTVYvsi9yB6wAAAACL47oU
+AAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsCUOikpP//i+O6EAAAAAPViwJQugwAAAAD1YsCUOjB
+q///uvYcAACLAroQAAAAA9WLEjkCD4QKAAAAuvocAACLAslbw7oXHQAAiwLJW8PJW8NTVYvsi9yB
+6wgAAACL47obHQAAD7YCULoQAAAAA9WLAlC6DAAAAAPViwJQ6OC0//+L04kCi+O6HR0AAA+2AlC6
+EAAAAAPViwJQugwAAAAD1YsCUOi4tP//ugQAAAAD04kCugQAAAAD04sCi9M5Ag+NFAAAAIvTiwK6
+FAAAAAPVixKJAukUAAAAugQAAAAD04sCuhQAAAAD1YsSiQK4AAAAALoUAAAAA9WLEjkCD4UKAAAA
+uh4dAACLwslbw8fAAAAAAMlbw8lbw1NVi+yL3IHrPAAAALgAAAAAuhQAAAAD1TkCD4UKAAAAujgd
+AACLwslbw7oMAAAAA9WLEosCi9OJAroQAAAAA9WLEosCugQAAAAD04kCujcdAACKAovTixI4Ag+F
+zQEAAIvjuhQAAAAD04vCULoQAAAAA9OLwlC6BAAAAAPTi8JQi9OLwlDora///7oIAAAAA9OJArgA
+AAAAuggAAAAD0zkCD4QMAAAAuggAAAAD04sCyVvDuAEAAAC6GAAAAAPVOQIPhFUAAAC4/////7oY
+AAAAA9U5Ag+FMgAAALoUAAAAA9OLAroQAAAAA9MpAroQAAAAA9OLArpYHQAAixIBArpYHQAAixL/
+AukKAAAAulwdAACLwslbw+kMAQAAuG0AAACJgxgAAACL47ogAAAAA9WLAlC6GAAAAAPTiwJQ6NeI
+//+6IAAAAAPVixKLArocAAAAA9OJAovj6N4nAAC6HAAAAAPTixKJAovjaAAAAAC6gh0AAIsCULoU
+AAAAA9OLAlC6EAAAAAPTiwJQugQAAAAD04vCUIvTi8JQ6JfA//+6CAAAAAPTiQK4AAAAALoIAAAA
+A9M5Ag+EDAAAALoIAAAAA9OLAslbw7gCAAAAuhQAAAAD1YkCuhAAAAAD04sCuhQAAAAD1QECuAAA
+AAC6JAAAAAPVixKJArgAAAAAuigAAAAD1YsSiQKL4+jOFAAAugwAAAAD04kCuAEAAAC6DAAAAAPT
+ixKJAunTBQAAuP////+6GAAAAAPVOQIPhL8FAACL47oUAAAAA9WLwlC6FAAAAAPViwJQi9OLAlDo
+1/z//7oIAAAAA9OJArgAAAAAuggAAAAD0zkCD4QMAAAAuggAAAAD04sCyVvDuP7///+6GAAAAAPV
+OQIPhGIFAACL44vTixIPtgJQ6NwPAAC6IAAAAAPTiQK4AQAAALogAAAAA9M5Ag+F+QAAAIvj6MX4
+//+6JAAAAAPTiQK6VB0AAIsCuiQAAAAD0zkCD4UKAAAAuoYdAACLAslbw7gUAAAAA8WJgygAAACL
+47ooAAAAA9OLAlC6BAAAAAPTiwJQi9OLAlDoOMz//7oIAAAAA9OJArpQHQAAiwK6CAAAAAPTOQIP
+hAwAAAC6CAAAAAPTiwLJW8OL47ogAAAAA9WLAlC6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WL
+AlDoPff//7oIAAAAA9OJArpQHQAAiwK6CAAAAAPTOQIPhAwAAAC6CAAAAAPTiwLJW8O6VB0AAIsC
+uiQAAAAD1YsSiQLpPQQAAIvTixIPtgLHwSMAAAA7wQ+FKQEAAIvj6P4SAAC6DAAAAAPTiQK4AQAA
+ALoMAAAAA9OLEokCi9P/AroUAAAAA9WLArosAAAAA9OJArosAAAAA9P/CovjaDoAAAC6LAAAAAPT
+iwJQi9OLAlDoFrD//7owAAAAA9OJArosAAAAA9OLArowAAAAA9M5Ag+ETAAAAIvjuigAAAAD1YsC
+ULokAAAAA9WLAlC6IAAAAAPViwJQujAAAAAD04sCULosAAAAA9OLAlCL04sCUOj3BAAAuggAAAAD
+04kC6T0AAACL47ooAAAAA9WLAlC6JAAAAAPViwJQuiAAAAAD1YsCULosAAAAA9OLAlCL04sCUOjh
+CwAAuggAAAAD04kCuAAAAAC6CAAAAAPTOQIPhAwAAAC6CAAAAAPTiwLJW8Pp/wIAAIvjaDoAAAC6
+FAAAAAPViwJQi9OLAlDoLK///7owAAAAA9OJAroUAAAAA9WLArowAAAAA9M5Ag+EbAAAAIvjuigA
+AAAD1YsCULokAAAAA9WLAlC6IAAAAAPViwJQujAAAAAD04sCULoUAAAAA9WLAlCL04sCUOgNBAAA
+uggAAAAD04kCuAAAAAC6CAAAAAPTOQIPhAwAAAC6CAAAAAPTiwLJW8PpVwIAAIvjaC4AAAC6FAAA
+AAPViwJQi9OLAlDohK7//7owAAAAA9OJAroUAAAAA9WLArowAAAAA9M5Ag+EbAAAAIvjuigAAAAD
+1YsCULokAAAAA9WLAlC6IAAAAAPViwJQujAAAAAD04sCULoUAAAAA9WLAlCL04sCUOhlAgAAuggA
+AAAD04kCuAAAAAC6CAAAAAPTOQIPhAwAAAC6CAAAAAPTiwLJW8PprwEAALgBAAAAur4dAACLEjkC
+D4U+AQAAi+O6wh0AAIsCULoUAAAAA9WLAlCL04sCUOiqkv//uiAAAAAD1YsSiQK4AAAAALogAAAA
+A9WLEjkCD4WaAAAAi+O6KAAAAAPViwJQuiQAAAAD1YsCULogAAAAA9WLAlC6FAAAAAPViwJQi9OL
+AlDoi5b//7oIAAAAA9OJArgAAAAAuggAAAAD0zkCD4REAAAAi+PoTpb//7o0AAAAA9OJAro0AAAA
+A9OLAroIAAAAA9M5Ag+FEAAAAIvj6Oe6AAC6CAAAAAPTiQK6CAAAAAPTiwLJW8PpYAAAALgAAAAA
+uiQAAAAD1YsSiQK4AAAAALooAAAAA9WLEokCi+PoCwsAALo4AAAAA9OJArgBAAAAujgAAAAD04sS
+iQKL4+hYDwAAugwAAAAD04kCuAEAAAC6DAAAAAPTixKJAuldAAAAi+O6KAAAAAPViwJQuiQAAAAD
+1YsCULogAAAAA9WLAlC6FAAAAAPViwJQi9OLAlDojJX//7oIAAAAA9OJArgAAAAAuggAAAAD0zkC
+D4QMAAAAuggAAAAD04sCyVvDuAEAAAC6HAAAAAPVOQIPhS8AAACL47oUAAAAA9WLAlC6EAAAAAPV
+iwJQugwAAAAD1YsCUOhZm///ulAdAACLAslbw4vjuhQAAAAD1YsCULrGHQAAiwJQuhAAAAAD1YsC
+ULoMAAAAA9WLAlDoqYr//7oIAAAAA9OJAroIAAAAA9OLAslbw8lbw1NVi+yL3IHrDAAAAIvjugQA
+AAAD04vCULoUAAAAA9WLAlC6EAAAAAPVi8JQugwAAAAD1YvCUOjqCAAAi9OJArgAAAAAi9M5Ag+E
+BwAAAIvTiwLJW8OL47oEAAAAA9OLAlC6IAAAAAPViwJQuhwAAAAD1YsCULoYAAAAA9WLAlC6EAAA
+AAPViwJQugwAAAAD1YsCUOiblP//i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL47oYAAAAA9WL
+EosCUOhs4P//uggAAAAD04kCuAAAAAC6CAAAAAPTOQIPhQkAAADHwAAAAADJW8OL4+gaCAAAi9OJ
+AovTiwLJW8PJW8NTVYvsi9yB60gAAAC4AAAAAImDAAAAALgAAAAAuhQAAAAD1TkCD4RWAAAAuP//
+//+JgwQAAAC6DAAAAAPViwK6BAAAAAPTAQK6FAAAAAPViwK6BAAAAAPTAQK6BAAAAAPTixIPtgLH
+wSMAAAA7wQ+FDQAAALoUAAAAA9X/CovT/wKL42guAAAAuhQAAAAD1YsCULoMAAAAA9WLAlDoH6r/
+/7oYAAAAA9OJAroUAAAAA9WLAroQAAAAA9UpAroUAAAAA9WLAroYAAAAA9M5Ag+EAwEAAIvjuhAA
+AAAD04vCULoYAAAAA9OLAlC6FAAAAAPVi8JQugwAAAAD1YvCUOgiBwAAugwAAAAD04kCuAAAAAC6
+DAAAAAPTOQIPhAwAAAC6DAAAAAPTiwLJW8OL47oQAAAAA9OLAlC6HAAAAAPTi8JQuhQAAAAD1YsC
+ULoMAAAAA9WLAlDoJJD//7oIAAAAA9OJArgAAAAAuggAAAAD0zkCD4UcAAAAi+PoQ5L//7oMAAAA
+A9OJAroMAAAAA9OLAslbw7gDAAAAuhwAAAAD0zkCD4wcAAAAi+PoXQYAALoMAAAAA9OJAroMAAAA
+A9OLAslbw7gAAAAAuhQAAAAD04kC6X0AAACL42gBAAAAaAAAAABoAAAAALoUAAAAA9WLAlC6DAAA
+AAPViwJQ6GWO//+6CAAAAAPTiQK4AAAAALoIAAAAA9M5Ag+FHAAAAIvj6J2R//+6DAAAAAPTiQK6
+DAAAAAPTiwLJW8OL47oIAAAAA9OLAlDo5t3//7oUAAAAA9OJAroUAAAAA9WLAroMAAAAA9UBAovj
+i9OLAlC6EAAAAAPVi8JQugwAAAAD1YvCUOiEl///i+O6EAAAAAPVi8JQugwAAAAD1YvCUOgimP//
+i+NoLgAAALoQAAAAA9WLAlC6DAAAAAPViwJQ6P+n//+6FAAAAAPViQK6EAAAAAPViwK6FAAAAAPV
+OQIPhHQBAACL47oQAAAAA9OLwlC6FAAAAAPViwJQuhAAAAAD1YvCULoMAAAAA9WLwlDoFAUAALoM
+AAAAA9OJArgAAAAAugwAAAAD0zkCD4QMAAAAugwAAAAD04sCyVvDi+O6EAAAAAPTiwJQuiAAAAAD
+1YsCULocAAAAA9WLAlC6GAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlDotpD//7oMAAAAA9OJ
+ArgAAAAAugwAAAAD0zkCD4QMAAAAugwAAAAD04sCyVvDi+O6GAAAAAPVixKLAlDoeNz//7okAAAA
+A9OJArgAAAAAuiQAAAAD0zkCD4VhAAAAuDAAAACJgygAAAC6KAAAAAPTiwK6EAAAAAPTOQIPhCkA
+AACL47oYAAAAA9WLAlC6EAAAAAPTiwJQ6ADEAAC6IAAAAAPTiQLpEAAAAIvj6OQaAAC6IAAAAAPT
+iQLpGgAAAIvjuhgAAAAD1YsCUOg8iAAAuiAAAAAD04kC6TIBAACL47ogAAAAA9WLAlC6HAAAAAPV
+iwJQuhgAAAAD1YsCULoQAAAAA9WLAlC6DAAAAAPViwJQ6EyP//+6DAAAAAPTiQK4AAAAALoMAAAA
+A9M5Ag+EDAAAALoMAAAAA9OLAslbw4vjuhgAAAAD1YsSiwJQ6Gbb//+6JAAAAAPTiQK4AAAAALok
+AAAAA9M5Ag+FhgAAALjbCQAAiYMsAAAAuAEAAAC6LAAAAAPTixI5Ag+FUAAAALgBAgAAiYMwAAAA
+i+O6MAAAAAPTixKLAlDoOb8AALoQAAAAA9OJAovjuhgAAAAD1YsCULoQAAAAA9OLAlDoycIAALog
+AAAAA9OJAukQAAAAi+PorRkAALogAAAAA9OJAukaAAAAi+O6GAAAAAPViwJQ6AWHAAC6IAAAAAPT
+iQKL47rXHQAAi8JQuhgAAAAD1YsCULrKHQAAi8JQ6I+S//+6GAAAAAPVixKLAro0AAAAA9OJArog
+AAAAA9OLAro0AAAAA9OLEikCuAQAAACJgzgAAAC4BAAAAImDPAAAALo0AAAAA9OLAro4AAAAA9MB
+AroIAAAAA9OLAro8AAAAA9MBArgAAAAAuhQAAAAD0zkCD4Q1AAAAuBwAAAC6QAAAAAPTiQK6PAAA
+AAPTixKLArpAAAAAA9MhArjj////ukQAAAAD04kC6TAAAAC4FAAAALpAAAAAA9OJAro8AAAAA9OL
+EosCukAAAAAD0yECuOv///+6RAAAAAPTiQK6RAAAAAPTiwK6OAAAAAPTixIhArpAAAAAA9OLAro4
+AAAAA9OLEgkCuAAAAACL0zkCD4RPAAAAuAABAAC6OAAAAAPTixIJArgEAAAAujgAAAAD0wECujQA
+AAAD04sSiwK6OAAAAAPTixKJAroIAAAAA9OLEosCujQAAAAD04sSiQLpFgAAALoIAAAAA9OLEosC
+ujQAAAAD04sSAQLHwAAAAADJW8PJW8NTVYvsi9yB6wgAAACL42guAAAAuhAAAAAD1YsCULoMAAAA
+A9WLAlDoaKP//7oEAAAAA9OJAroQAAAAA9WLAroEAAAAA9M5Ag+ETAAAAIvjuhwAAAAD1YsCULoY
+AAAAA9WLAlC6FAAAAAPViwJQugQAAAAD04sCULoQAAAAA9WLAlC6DAAAAAPViwJQ6ET3//+L04kC
+6T0AAACL47ocAAAAA9WLAlC6GAAAAAPViwJQuhQAAAAD1YsCULoQAAAAA9WLAlC6DAAAAAPViwJQ
+6N2L//+L04kCi9OLAslbw8lbw1NVi+yL3IHrAAAAALrjHQAAi8LJW8PJW8NTVYvsi9yB6wgAAAC4
+AAAAAImDBAAAAIvjugQAAAAD04vCUGgBAAAAaAAAAAC6GB4AAIsCULoUAAAAA9WLAlC6DAAAAAPV
+ixKLAlDovYL//4vTiQK4AAAAAIvTOQIPhQoAAAC6HB4AAIvCyVvDuhQAAAAD1f8Ci+O6FAAAAAPV
+iwJQuhAAAAAD1YsCULoMAAAAA9WLAlDoSpH//4vjugQAAAAD04sCUOiPuwAAuhgAAAAD1YsSiQLH
+wAAAAADJW8PJW8NTVYvsi9yB6wAAAAC6NR4AAIvCyVvDyVvDU1WL7IvcgesAAAAAuCEAAAC6DAAA
+AAPVOQIPhQ4AAADHwAEAAADJW8PpxwAAALgoAAAAugwAAAAD1TkCD4UOAAAAx8ABAAAAyVvD6aUA
+AAC4LQAAALoMAAAAA9U5Ag+FDgAAAMfAAQAAAMlbw+mDAAAAuDAAAAC6DAAAAAPVOQIPjQ4AAADH
+wAAAAADJW8PpYQAAALg5AAAAugwAAAAD1TkCD48OAAAAx8ABAAAAyVvD6T8AAAC4OgAAALoMAAAA
+A9U5Ag+FDgAAAMfAAQAAAMlbw+kdAAAAuH4AAAC6DAAAAAPVOQIPhQkAAADHwAEAAADJW8PHwAAA
+AADJW8PJW8NTVYvsi9yB6wQAAAC6EAAAAAPVixKLAovTiQKL47ocAAAAA9WLAlC6GAAAAAPViwJQ
+uhQAAAAD1YsCULogAAAAA9WLAlC6JAAAAAPViwJQi9OLAlC6EAAAAAPViwJQugwAAAAD1YsCUOgJ
+7P//ujkeAACJAro5HgAAiwLJW8PJW8NTVYvsi9yB6wQAAACL47okAAAAA9WLAlC6IAAAAAPViwJQ
+uhwAAAAD1YsCULoYAAAAA9WLAlC6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlDoOAAAAIvT
+iQK4AAAAAIvTOQIPhRsAAACL47oUAAAAA9WLAlC6EAAAAAPViwJQ6DiW//+L04sCyVvDyVvDU1WL
+7IvcgesEAAAAuj0eAACLAroMAAAAA9U5Ag+FYwAAAIvj6LLm//+L47okAAAAA9WLAlC6RR4AAIsC
+ULogAAAAA9WLAlC6HAAAAAPViwJQuhgAAAAD1YsCULoUAAAAA9WLAlC6EAAAAAPViwJQ6Hr+//+6
+QR4AAIkCukEeAACLAslbw4vj6DDm//+6EAAAAAPVixKLArpJHgAAiQK6FAAAAAPVixKLArpNHgAA
+iQK6oB4AAIsCupweAACJArqcHgAAixKKArqkHgAAiAK6mx4AAIoCuqQeAAA4Ag+ESAEAAIvjupwe
+AACLAlC6TR4AAIsCULpJHgAAiwJQ6PSO//+6UR4AAIkCuk0eAACLArpRHgAAOQIPhMkAAAC6nB4A
+AIsCugwAAAAD1YsSiQK6SR4AAIsCi9OJArpRHgAAiwKL0wECi+O6IAAAAAPViwJQuhwAAAAD1YsC
+ULoYAAAAA9WLAlC6RR4AAIsCULokAAAAA9WLAlC6UR4AAIsCULoUAAAAA9WLAlC6EAAAAAPViwJQ
+6M3p//+6pR4AAIkCuqkeAACLArqlHgAAOQIPhAoAAAC6pR4AAIsCyVvDuhAAAAAD1YsSiwKL0zkC
+D4QKAAAAuq0eAACLAslbw7qpHgAAiwLJW8OL47qcHgAAiwJQ6Fhn//+65h4AAIkCuuYeAACLArqc
+HgAAAQK4BQAAALqcHgAAAQK6nB4AAIsSigK6pB4AAIgC6aT+//+6Bh8AAIsCyVvDukEeAACLAslb
+w8lbw1NVi+yL3IHrAAAAALoOHwAAiwLJW8PJW8OLhCQEAAAAoxIfAABTVYvsi9yB6wgAAACL4+g8
+ewAAi9OJArgBAAAAi9M5Ag+FQAAAAIvjaAAAAADodX8AALoEAAAAA9OJArgGAAAAugQAAAAD0zkC
+D4UXAAAAuBYfAAC6Eh8AAIsSiQLHwAkAAADJW8O6Ih8AAIsCuhIfAACLEokCuiYfAACLAslbw8lb
+w1NVi+yL3IHrBAAAAIvjujcfAACLAlC6Mx8AAIsCULovHwAAiwJQ6Iyi//+L04kCuAAAAACL0zkC
+D4QHAAAAi9OLAslbw7g7HwAAugwAAAAD1YsSiQK4AgAAALoQAAAAA9WLEokCx8AAAAAAyVvDyVvD
+U1WL7IvcgesEAAAAi+PoT+P//7CLuhAAAAAD1YsSiAK4AQAAALoUAAAAA9WLEokCuAEAAAC6DAAA
+AAPVOQIPhTgAAAC6PR8AAIsCuiAAAAAD1YsSiQKL47ocAAAAA9WLAlC6GAAAAAPViwJQ6B7///+L
+04kCi9OLAslbw7gAAAAAuiAAAAAD1YsSiQKL47oYAAAAA9WLAlDoY/7//7ocAAAAA9WLEokCx8AA
+AAAAyVvDyVvDi4QkBAAAAKNBHwAAi4QkCAAAAKNFHwAAi4QkDAAAAKNJHwAAi4QkEAAAAKNNHwAA
+U1WL7IvcgesQAAAAulEfAACLArpZHwAAiQK6Xh8AAIsCumYfAACJArp2HwAAiwK6SR8AADkCD4W1
+AgAAi+PoWuL//7gAAAAAuk0fAAA5Ag+FZwAAAIvj6I8+AACL04kCi+O6bh8AAIvCULpmHwAAi8JQ
+umIfAACLwlC6WR8AAIvCULpdHwAAi8JQi9OLAlDoiP7//7pyHwAAiQK4AAAAALpyHwAAOQIPhAoA
+AAC6ch8AAIsCyVvD6TACAAC4IAAAALpNHwAAOQIPhR8AAAC6eh8AAIoCul0fAACIArgAAAAAum4f
+AACJAun/AQAAuEAAAAC6TR8AADkCD4UiAAAAunsfAACKArpdHwAAiAK6fB8AAA+2ArpuHwAAiQLp
+ywEAALgwAAAAuk0fAAA5Ag+PkAAAALCDul0fAACIArgQAAAAuk0fAAA5Ag+FEQAAALgAAAAAum4f
+AACJAukMAAAAuAUAAAC6bh8AAIkCi+PosHcAALoEAAAAA9OJArgAAAAAugQAAAAD0zkCD4UOAAAA
+sAS6fR8AAIgC6QkAAACwCLp9HwAAiAK4fR8AALpiHwAAiQK4AQAAALpmHwAAiQLpKQEAALhQAAAA
+uk0fAAA5Ag+FGgAAALD3ul0fAACIArgDAAAAum4fAACJAun9AAAAuGAAAAC6TR8AADkCD4UiAAAA
+un4fAACKArpdHwAAiAK6fx8AAA+2ArpuHwAAiQLpyQAAALiQAAAAuk0fAAA5Ag+PYAAAALDRul0f
+AACIArhwAAAAuk0fAAA5Ag+FEQAAALgEAAAAum4fAACJAukvAAAAuIAAAAC6TR8AADkCD4URAAAA
+uAUAAAC6bh8AAIkC6QwAAAC4BwAAALpuHwAAiQLpVwAAAIvjum4fAACLwlC6Zh8AAIvCULpiHwAA
+i8JQulkfAACLwlC6XR8AAIvCUGgBAAAA6FP8//+6ch8AAIkCuAAAAAC6ch8AADkCD4QKAAAAunIf
+AACLAslbw+kHAAAAi+Poht///4vjaAEAAAC6SR8AAIsCULqUHwAAiwJQuoQfAACLAlC6jB8AAIsC
+ULpFHwAAiwJQukEfAACLAlDofPf//7pyHwAAiQK4AAAAALpyHwAAOQIPhAoAAAC6ch8AAIsCyVvD
+i+PomN///7oIAAAAA9OJArpRHwAAiwK6CAAAAAPTOQIPhfUAAAC6dh8AAIsCukkfAAA5Ag+EOwAA
+ALqYHwAAigK6XR8AAIgCuAAAAAC6bh8AAIkCup4fAACLArpiHwAAiQK6mh8AAIsCumYfAACJAukv
+AAAAulUfAACLArqAHwAAOQIPhRsAAAC6UR8AAIsCulkfAAA5Ag+FBwAAALpdHwAA/gqL47pdHwAA
+D7YCULqQHwAAiwJQuogfAACLAlC6gB8AAIsCUOgNAQAAugwAAAAD04kCi+O6DAAAAAPTiwJQuoAf
+AACLAlC6bh8AAIsCULqQHwAAiwJQul0fAAAPtgJQuogfAACLAlDoUk0AALpyHwAAiQLpUgAAALp2
+HwAAiwK6SR8AADkCD4QgAAAAi+NoaAAAALqIHwAAiwJQ6Bff//+6ch8AAIkC6R4AAACL47puHwAA
+iwJQuogfAACLAlDoVN///7pyHwAAiQK4AAAAALpyHwAAOQIPhAoAAAC6ch8AAIsCyVvDul4fAACL
+ArpmHwAAOQIPhDAAAACL47pqHwAAiwJQumYfAACLAlC6Yh8AAIsCUOhPnP//unIfAACJArpyHwAA
+iwLJW8PHwAAAAADJW8PJW8NTVYvsi9yB6xAAAAC4iwAAALoYAAAAA9U5Ag+F3QAAALgAAAAAugwA
+AAAD1TkCD4WGAAAAi+PomPj//4vTiQK4AAAAAIvTixI5Ag+FZQAAAIvjuhQAAAAD1YsCULoQAAAA
+A9WLAlDoa3YAALoEAAAAA9OJArgAAAAAugQAAAAD0zkCD4UtAAAAi+PoY3MAALoIAAAAA9OJArgB
+AAAAuggAAAAD0zkCD4UJAAAAx8ABAAAAyVvD6UMAAACL4+gxcwAAugwAAAAD04kCuAEAAAC6DAAA
+AAPTOQIPhRYAAACL4+ihdwAAi9OJArgBAAAAi9OLEokCx8ACAAAAyVvDx8D/////yVvDyVvDi4Qk
+BAAAAKOiHwAAi4QkCAAAAKOmHwAAU1WL7IvcgesAAAAAuq4fAACLArqiHwAAOQIPhSoAAACL47qy
+HwAAiwJQuqYfAACLAlDoYGv//7q2HwAAiwK6qh8AACkC6QoAAAC6qh8AAIsCyVvDyVvDi4QkBAAA
+AKO6HwAAi4QkCAAAAKO+HwAAU1WL7IvcgesAAAAAusofAACLArq+HwAAixKJArrCHwAAiwK6uh8A
+ADkCD4wyAAAAusYfAACLArq6HwAAOQIPjR4AAAC6wh8AAIsCurofAAApArrOHwAAiwK6vh8AAIsS
+iQK6uh8AAIsCyVvDyVvDU1WL7IvcgesAAAAAi+O61h8AAIsCULraHwAAiwJQ6O1p//+L47reHwAA
+iwJQ6Nj+//+60h8AAAECutIfAACLAslbw8lbw1NVi+yL3IHrBAAAAIvj6Kf///+64h8AAIkCuuIf
+AACLEosCi9OJAovjuuIfAACLAlC6DAAAAAPViwJQ6GGZ//+6EAAAAAPVixKJAovTiwLJW8PJW8NT
+VYvsi9yB6wQAAACL42gEAAAA6AJ1AACL04kCi+O6DAAAAAPViwJQi9OLAlDoef///7rmHwAAiQK6
+5h8AAIsCyVvDyVvDU1WL7IvcgesAAAAAi+PoDP///7rqHwAAiQK66h8AAIsSiwLJW8PJW8NTVYvs
+i9yB6wQAAACL47ruHwAAiwJQaAIAAAC68h8AAIvCUOgBmf//i9OJArgAAAAAi9M5Ag+EBwAAAIvT
+iwLJW8OL4+g1cwAAi9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL47ruHwAAiwJQaAIAAAC69B8A
+AIvCUOiqmP//i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL4+jecgAAi9OJArgAAAAAi9M5Ag+E
+BwAAAIvTiwLJW8OL47ruHwAAiwJQaAIAAAC69h8AAIvCUOhTmP//i9OJArgAAAAAi9M5Ag+EBwAA
+AIvTiwLJW8OL4+iHcgAAi9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL47ruHwAAiwJQaAYAAAC6
++B8AAIvCUOj8l///i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8O4AAAAAIvTOQIPhSIAAACL47ru
+HwAAiwJQuv4fAACLAlDok/z//4vj6I6IAACL04kCi9OLAslbw8lbw1NVi+yL3IHrAAAAALoGIAAA
+iwK6AiAAAIsSOQIPhS0AAAC6BiAAAIsCugogAACLEjkCD4QXAAAAug4gAACLAroCIAAAixKJAovj
+6C/+///JW8NTVYvsi9yB6wQAAAC4AQAAALoMAAAAA9U5Ag+FIgAAAIvji9OLwlDoSHEAALgAAAAA
+i9M5Ag+EBwAAAIvTiwLJW8OL44vTi8JQ6G/9//+6FCAAAIkCuAAAAACL0zkCD4UjAAAAi+O6ICAA
+AIsCULocIAAAiwJQuhggAACLAlDo0pb//4vTiQKL04sCyVvDyVvDU1WL7IvcgesEAAAAi+O6DAAA
+AAPViwJQaAAAAADoTcv//4vTiQK6JCAAAIsCi9M5Ag+EBwAAAIvTiwLJW8OL47oQAAAAA9WLAlDo
+IP///4vTiQKL04sCyVvDyVvDU1WL7IvcgesEAAAAi+PoAIAAAIvTiQK4AAAAAIvTOQIPhAcAAACL
+04sCyVvDugwAAAAD1YsCuikgAACJAovjui0gAACLAlBoBQAAALooIAAAi8JQ6A6W//+L04kCuAAA
+AACL0zkCD4QHAAAAi9OLAslbw4vjuhQAAAAD1YsCULotIAAAiwJQ6BWAAACL04kCuAAAAACL0zkC
+D4QHAAAAi9OLAslbw4vjuhAAAAAD1YsCUOhb/v//i9OJAovTiwLJW8PJW8NTVYvsi9yB6xQAAAC4
+AAAAALoQAAAAA9U5Ag+ESwEAALoMAAAAA9WLEosCi9OJArgIAAAAA8OJgwwAAACL47oMAAAAA9OL
+AlCL04sCUOgtZf//uAQAAAC6DAAAAAPVAQK6DAAAAAPVixKLAroEAAAAA9OJAroEAAAAA9OLAroI
+AAAAA9MBAovjujUgAACLAlC6OSAAAIsCUOjiZP//uggAAAAD04sSiwK6MSAAAAECujEgAACLEosC
+uhAAAAAD04kCuAQAAAC6DAAAAAPVAQK4AQAAALoMAAAAA9WLEjkCD4U/AAAAuAQAAAC6BAAAAAPT
+AQK6EAAAAAPTiwK6BAAAAAPTKQKL47oEAAAAA9OLAlDoWWP//7oEAAAAA9OJAukSAAAAuhAAAAAD
+04sCugQAAAAD04kCugQAAAAD04sCuggAAAAD04sSiQK4BAAAALoMAAAAA9UBArgMAAAAuhAAAAAD
+1SkC6aH+///JW8NTVYvsi9yB6wgAAACLw4mDBAAAAIvjugQAAAAD04sCULo9IAAAiwJQ6ORj//+L
+04sCugwAAAAD1SkCugwAAAAD1YsCuhAAAAAD1YsSiQLJW8NTVYvsi9yB6wwAAAC4QSAAAImDAAAA
+ALhFIAAAiYMEAAAAi+O6BAAAAAPTiwJQuhAAAAAD1YsCUOgsZP//ugwAAAAD1YsCukUgAAABAroQ
+AAAAA9WLArpBIAAAiQK6FAAAAAPViwK6SSAAAIkCi+O6TSAAAIsCUGgMAAAAi9OLAlDoXZP//7oI
+AAAAA9OJAroIAAAAA9OLAslbw8lbw1NVi+yL3IHrBAAAAIvjaAEAAAC6EAAAAAPViwJQugwAAAAD
+1YsCUOg2////i9OJArgAAAAAi9M5Ag+EBwAAAIvTiwLJW8OL47oYAAAAA9WLAlC6FAAAAAPViwJQ
+6LD+///HwAAAAADJW8PJW8NTVYvsi9yB6wgAAACL4+iFagAAi9OJArgBAAAAi9M5Ag+FKQAAAIvj
+aAAAAAC6DAAAAAPViwJQaPj////otP7//7oEAAAAA9OJAukkAAAAi+NoAAAAALoMAAAAA9WLAlBo
+/P///+iL/v//ugQAAAAD04kCugQAAAAD04sCyVvDyVvDi4QkBAAAAKNRIAAAi4QkCAAAAKNVIAAA
+U1WL7IvcgesAAAAAi+O6WSAAAIsCULpVIAAAiwJQulEgAACLAlDotHT//7pdIAAAiQK6ZSAAAIsC
+ul0gAAA5Ag+FRAAAAIvjumkgAACLAlC6VSAAAIsCULpRIAAAiwJQ6Fpw//+6XSAAAIkCumUgAACL
+ArpdIAAAOQIPhQoAAAC6YSAAAIsCyVvDupggAACLAslbw8lbw1NVi+yL3IHrAAAAALqkIAAAixKL
+ArqcIAAAiQK6qCAAAIsSiwK6oCAAAIkCuqAgAACLArqcIAAAAQK6nCAAAIsCyVvDyVvDU1WL7Ivc
+gesAAAAAuqwgAACLEosCyVvDyVvDU1WL7IvcgesEAAAAurAgAACLEosCi9OJArgBAAAAurQgAACL
+EjkCD4UNAAAAurggAACLEosCi9MpAovTiwLJW8PJW8NTVYvsi9yB6wQAAACL4+hH////i9OJAovj
+6IP///+L0wECi9OLAslbw8lbw1NVi+yL3IHrBAAAAIvj6Bv///+L04kCi+Pocv///4vTAQKL04sC
+yVvDyVvDU1WL7IvcgesEAAAAugwAAAAD1YsSiwK6vCAAAIkCusQgAACLAroYAAAAA9U5Ag+EZgEA
+AIvjuhQAAAAD1YsCULq8IAAAiwJQ6Ab+//+6zCAAAIkCutAgAACLArrMIAAAOQIPhAoAAAC6zCAA
+AIsCyVvDi+O63CAAAIsCULoYAAAAA9WLAlDoZPX//7rUIAAAiwK62CAAADkCD4VIAAAAuAEAAAC6
+JAAAAAPVOQIPhSEAAACL4+ga////usggAACJArgQAAAAuhwAAAAD1QkC6Q4AAACL4+jN/v//usgg
+AACJAumuAAAAusAgAACLArogAAAAA9U5Ag+FEwAAAIvj6FP2//+6yCAAAIkC6R4AAAC6IAAAAAPV
+iwK6yCAAAIkCuAgAAAC6HAAAAAPVCQK4BAAAALocAAAAA9UJArgFAAAAuhgAAAAD1TkCD4UOAAAA
+uAEAAACL04kC6RoAAACL47oYAAAAA9WLAlBoAAAAAOh3ZgAAi9OJArgBAAAAi9M5Ag+FDgAAALiA
+AAAAuhwAAAAD1QkC6VwAAACL47rEIAAAiwJQ6FRh//+64CAAAIkCi+O64CAAAIsCULoUAAAAA9WL
+AlC6vCAAAIsCUOjJbf//uuQgAACJArrAIAAAiwK65CAAADkCD4QKAAAAugohAACLAslbw4vjuhwA
+AAAD1YsCULoYAAAAA9WLAlC6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlC6yCAAAIsCUOjF
+k///uswgAACJArrMIAAAiwLJW8PJW8NTVYvsi9yB6wQAAAC6FiEAAIsCuhQAAAAD1TkCD4UKAAAA
+uj8hAACLAslbw7oMAAAAA9WLEosCukMhAACJArpDIQAAixKKArpHIQAAiAK6SCEAAIoCukchAAA4
+Ag+EQAEAALpHIQAAD7YCx8FeAAAAO8EPhXUAAAC4DAAAALoYAAAAA9U5Ag+FCgAAALpKIQAAi8LJ
+W8O6FAAAAAPV/wq6FiEAAIsCuhQAAAAD1TkCD4UKAAAAuj8hAACLAslbw7ggAAAAuhwAAAAD1QkC
+i+O6EAAAAAPViwJQugwAAAAD1YsCUOiFd///6T4AAAC4DAAAALoYAAAAA9U5Ag+EKgAAAIvj6MYq
+AACL04kCuAAAAACL04sSOQIPhQ4AAAC4IAAAALocAAAAA9UJAovjuiQAAAAD1YsCULogAAAAA9WL
+AlC6HAAAAAPViwJQuhgAAAAD1YsCULoUAAAAA9WLAlC6EAAAAAPViwJQugwAAAAD1YsCUOg9/P//
+ug4hAACJAroSIQAAiwK6DiEAADkCD4QKAAAAug4hAACLAslbw+lNAAAAuAwAAAC6GAAAAAPVOQIP
+hQoAAAC6viEAAIsCyVvDi+O6FAAAAAPViwJQuhAAAAAD1YsCULoMAAAAA9WLAlDoz3X//7oSIQAA
+iwLJW8PJW8OLhCQEAAAAo8IhAACLhCQIAAAAo8YhAACLhCQMAAAAo8ohAACLhCQQAAAAo84hAACL
+hCQUAAAAo9IhAACLhCQYAAAAo9YhAACLhCQcAAAAo9ohAABTVYvsi9yB6wAAAACL47rOIQAAiwJQ
+uuohAAAPtgJQusYhAACLAlC6wiEAAIsCUOhchv//uuYhAACJArrGIQAAiwK65iEAADkCD4QaAAAA
+uuohAACKArrKIQAAixKIArriIQAAiwLJW8OL47rOIQAAiwJQuushAAAPtgJQusYhAACLAlC6wiEA
+AIsCUOj/hf//uuYhAACJArrGIQAAiwK65iEAADkCD4Q4AAAAuuwhAACLArrSIQAAOQIPhQoAAAC6
+JyIAAIsCyVvDuushAACKArrKIQAAixKIArriIQAAiwLJW8OL47rOIQAAiwJQui8iAAAPtgJQusYh
+AACLAlC6wiEAAIsCUOiEhf//uuYhAACJArrGIQAAiwK65iEAADkCD4RuAAAAuisiAACLArrSIQAA
+OQIPhRwAAAC4AAAAALrWIQAAOQIPhQoAAAC6ZyIAAIsCyVvDui8iAACKArrKIQAAixKIArrsIQAA
+iwK60iEAADkCD4QQAAAAut4hAACLArraIQAAixKJArriIQAAiwLJW8OL47rOIQAAiwJQumsiAAAP
+tgJQusYhAACLAlC6wiEAAIsCUOjThP//uuYhAACJArrGIQAAiwK65iEAADkCD4R9AAAAuisiAACL
+ArrSIQAAOQIPhSEAAAC4AAAAALrWIQAAOQIPhQoAAAC6rCIAAIsCyVvD6R4AAAC67CEAAIsCutIh
+AAA5Ag+FCgAAALqsIgAAiwLJW8O66iEAAIoCusohAACLEogCut4hAACLArraIQAAixKJArriIQAA
+iwLJW8O63iEAAIsCutYhAAA5Ag+FGgAAALqwIgAAigK6yiEAAIsSiAK64iEAAIsCyVvDutkiAACL
+Aslbw8lbw1NVi+yL3IHrKAAAALgAAAAAuhQAAAAD1TkCD4UKAAAAuvwiAACLAslbw7gUAAAAA8W6
+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
+iQK6MDcAAIsCujg3AAApArooNwAAiwK6ODcAACkCi+O6ODcAAIsCULpANwAAiwJQuiQ3AACLAlC4
+AAAAAP/Qukg3AACLArpENwAAixKJAroiAAAAiwK6RDcAAAECukQ3AACLArpQNwAAiQK6TDcAAIsC
+ukQ3AACLEokCuiIAAACLArpENwAAAQK6DgAAAIsCukQ3AACLEokCuiYAAACLArpENwAAAQK6DgAA
+AIsCukQ3AACLEokCuiYAAACLArpENwAAAQK6DgAAAIsCukQ3AACLEokCuiYAAACLArpENwAAAQK6
+VDcAAIsCukQ3AACLEokCuiIAAACLArpENwAAAQK6WDcAAIsCulw3AACJAovjuiIAAACLAlC6YDcA
+AIsCULpENwAAiwJQuAAAAAD/0IvjuiIAAACLAlC6bDcAAIsCULpkNwAAiwJQuAAAAAD/0IvjuiIA
+AACLAlC64QAAAIsCULpwNwAAiwJQuAAAAAD/0Ivjung3AACLAlC6DgAAAIsCULp0NwAAiwJQuAAA
+AAD/0LrFAgAAiwK63QIAAIkCuuAAAACLArqNAwAAiQK62AAAAIsCupUDAACJArqVAwAAiwK6rQIA
+AIkCupUDAACLArrdAgAAAQK63QIAAIsCurkCAACJArrkAAAAiwK6qQIAAIkCurkCAACLAroKAQAA
+AQK6CgEAAIsCurUCAACJArrsAAAAiwK6tQMAAIkCurkCAACLArq5AwAAiQK63QIAAIsCusEDAACJ
+ArqpAgAAiwK6vQMAAIkCur0DAACLArrdAgAAAQK6fDcAAIsCuuECAACJArqANwAAiwK6qQAAAIkC
+uuECAACLArqtAAAAiQK6uQMAAIsCuqUAAACJArqZAAAAiwK6pQAAAAECuhIAAACLArrtKAAAOQIP
+hSQDAAC63QIAAIsCuuEDAACJArrdAgAAiwK66QMAAIkCuoQ3AACLArqINwAAiQK6jDcAAIsCuog3
+AAABArrhAwAAiwK6iDcAAIsSiQK6JgAAAIsCuog3AAABArr4AAAAiwK6lDcAAIkCi+O6yQAAAIsC
+ULqQNwAAiwJQaAAAAADoJaL+/7pIAAAAiQK6UAAAAIsCukgAAAA5Ag+EDwAAAIvjukgAAACLAlDo
+oK///7r0AAAAiwK6lDcAAAECi+O6kDcAAIsCULoOAAAAiwJQupQ3AACLAlC4AAAAAP/QuvgAAACL
+ArqINwAAixKJArrlAwAAiwK6rQIAAAECuuUDAACLArrdAgAAAQK6UDcAAIsS/wK6nDcAAIsCuuEC
+AAABArqcNwAAiwK6rQAAAAECupg3AACLArqxAAAAiQK6nDcAAIsCurUAAACJArrhAwAAiwK6oQAA
+AIkCuqA3AACLArqhAAAAAQK6mQAAAIsCuqEAAAABArrhAwAAiwK6oDcAAAECuuEDAACLArqkNwAA
+AQK69AAAAIsCuqg3AACJArr4AAAAiwK6qDcAAAECupA3AACLArqoNwAAKQK6qDcAAIsCuvQAAAA5
+Ag+E1QAAALomAAAAiwK6qDcAACkCuqg3AACLEosCuqw3AACJArqgNwAAiwK6rDcAAAECuqw3AACL
+ArqoNwAAixKJAromAAAAiwK6qDcAACkCuqg3AACLEosCuqw3AACJArqkNwAAiwK6rDcAAAECuqw3
+AACLArqoNwAAixKJAromAAAAiwK6qDcAACkCuiYAAACLArqoNwAAKQK6JgAAAIsCuqg3AAApArqo
+NwAAixKLArqsNwAAiQK6oDcAAIsCuqw3AAABArqsNwAAiwK6qDcAAIsSiQLpF////7oAAQAAiwK6
+sDcAAIkCugQBAACLArqwNwAAAQK6sDcAAIsCugABAAA5Ag+EVQAAALomAAAAiwK6sDcAACkCurA3
+AACLEosCuqw3AACJArouAAAAiwK6rDcAADkCD4QeAAAAuqQ3AACLArqsNwAAAQK6rDcAAIsCurA3
+AACLEokC6Zf///+L47rJAgAAiwJQuuECAACLAlDoI2f+/7q0NwAAiQK6tDcAAIsCuuECAAABAunT
+DgAAuhYAAACLArq5AAAAOQIPhV0IAAC64AAAAIsCuqMEAACJArrgAAAAiwK6pwQAAIkCupcEAACL
+Arq3BAAAiQK64AAAAIsCurcEAAABArqbBAAAiwK6uwQAAIkCi+O64AAAAIsCULqVAAAAiwJQurcE
+AACLAlC6uwQAAIsCUOgOcv7/ursEAACJArq7BAAAiwK6vwQAAIkCuuwAAACLArrDBAAAiQK67AAA
+AIsCuscEAACJAovjuiIAAACLAlC6vDcAAIsCULo9BAAAiwJQuAAAAAD/0Lq7BAAAiwK6CgEAAAEC
+ugoBAACLAroZBAAAiQK6OQQAAIsCuh0EAACJAovjuiIAAACLAlC6xDcAAIsCULpFBAAAiwJQuAAA
+AAD/0Lq7BAAAiwK6pQAAAIkCujUEAACLArqpAAAAiQK6OQQAAIsCuq0AAACJAroWAAAAiwK67SgA
+ADkCD4VHAAAAi+O6IgAAAIsCULoyAAAAi8JQukkEAACLAlC4AAAAAP/Qi+O6IgAAAIsCULrhAAAA
+iwJQuk0EAACLAlC4AAAAAP/Q6W8GAACL47oiAAAAiwJQujoAAACLwlC6SQQAAIsCULgAAAAA/9CL
+47rINwAAi8JQuuEAAACLAlDoJcL+/7pIAAAAiQKL47rUNwAAi8JQusw3AACLwlDoB8L+/7pIAAAA
+iQK6UAAAAIsCukgAAAA5Ag+EDwAAAIvjukgAAACLAlDo0qr//4vjuuE3AACLwlC62DcAAIvCUOjG
+wf7/ukgAAACJArpQAAAAiwK6SAAAADkCD4QPAAAAi+O6SAAAAIsCUOiRqv//i+O6IgAAAIsCULoy
+AAAAi8JQuk0EAACLAlC4AAAAAP/Qui0EAAD+Arq3BAAAiwK63wQAAIkCuuwAAACLArrfBAAAAQK6
+uwQAAIsCuuMEAACJArrsAAAAiwK64wQAAAECuuMEAACLArrnBAAAiQKL47pWBQAAiwJQ6Btg/v+6
+WgUAAIkCuloFAAD/ArpaBQAAiwK66wQAAIkCuloFAACLArrvBAAAiQK6LQQAAP4Cut8EAACLArr/
+BAAAiQK6WgUAAIsCuv8EAAABArrjBAAAiwK6AwUAAIkCuloFAACLAroDBQAAAQK64wQAAIsCuuU3
+AACJArqVAAAAiwq65TcAAIsCD7rgH3MHuv/////rBboAAAAA9/m65TcAAIkCugMFAACLArrpNwAA
+iQK6lQAAAIsKuuk3AACLAg+64B9zB7r/////6wW6AAAAAPf5uuk3AACJArrlNwAAiwK66TcAADkC
+D4UOAAAAupUAAACLAroDBQAAAQK6AwUAAIsCugcFAACJArr4AAAAiwK6CwUAAIkCuqYFAACLAroL
+BQAAAQK6CwUAAIsCug8FAACJArotBAAA/gK6/wQAAIsCuh8FAACJArofBQAAiwK67TcAAIkCugsF
+AACLArrtNwAAAQK6AwUAAIsCuiMFAACJArojBQAAiwK6JwUAAIkCuiMFAACLArpiBQAAiQK6CwUA
+AIsCumIFAAABArq2BQAAiwK6KwUAAIkCugQBAACLArquBQAAiQK6cgUAAIsKuq4FAACLAg+64B9z
+B7r/////6wW6AAAAAPf5uq4FAACJArouAAAAiwK68TcAAIkCuq4FAACLArrxNwAAOQIPjVUAAACL
+47rFAAAAiwJQuiYAAACLAlC69TcAAIsCUOhPmv7/ukgAAACJArpQAAAAiwK6SAAAADkCD4QPAAAA
+i+O6SAAAAIsCUOjKp///uvE3AAD/AumX////uhQAAACLArq+BQAAiQK6vgUAAIsCuisFAAABArpi
+BQAAiwK6agUAAIkCurYFAACLArpqBQAAAQK6vgUAAIsCumoFAAABAroEAQAAiwK6KwUAAAECumoF
+AACLArp6BQAAiQK6BAEAAIsCunoFAAABAroQAQAAiwK6ggUAAIkCuisFAACLArrtNwAAAQK6EAEA
+AIsCuisFAAABArp6BQAAiwK6igUAAIkCuhABAACLArqKBQAAAQK6rgUAAIsCupIFAACJArqaBQAA
+iwq6kgUAAIsC9+m6kgUAAIkCupIFAACLArorBQAAAQK6igUAAIsCuvk3AACJArqSBQAAiwK6+TcA
+AAECui4AAACLArr9NwAAiQK6rgUAAIsCuv03AAA5Ag+NYwAAAIvjusUAAACLAlC6/TcAAIsCULr5
+NwAAiwJQ6PTG/v+6SAAAAIkCulAAAACLArpIAAAAOQIPhA8AAACL47pIAAAAiwJQ6E6m//+6/TcA
+AP8CuiYAAACLArr5NwAAAQLpif///7oUAAAAiwK6wgUAAIkCur4FAACLArrCBQAAKQK6rgUAAIsC
+usYFAACJAromAAAAiwq6xgUAAIsC9+m6xgUAAIkCi+O6xQAAAIsCULrGBQAAiwJQaAAAAADoMpj+
+/7pIAAAAiQK6UAAAAIsCukgAAAA5Ag+EDwAAAIvjukgAAACLAlDoraX//7oQAAAAiwK6ATgAAIkC
+uhQAAACLAroBOAAAAQK6LgAAAIsCuvE3AACJArquBQAAiwK68TcAADkCD40qAAAAuiYAAACLAroB
+OAAAKQK6LgAAAIsCugE4AACLEokCuvE3AAD/AunC////ujsFAACLArqxAAAAiQK6PwUAAIsCurUA
+AACJArpiBQAAiwK6oQAAAIkCuisFAACLArqhAAAAAQK6xgUAAIsCuisFAAABAroLBQAAiwK6KwUA
+AAECuisFAACLArovBQAAiQK4IAAAAImDpAAAALotBAAAD7YKuqQAAAAD04sC9+m6pAAAAAPTiQK6
+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
+NQAAbjUAAAEBAABmNQAAejUAAAEBAAByNQAArjUAAAEBAAB+NQAAszUAAAEBAACyNQAA4DUAAAEB
+AAC/NQAAMjYAAAEBAAA2NgAAUDYAAAEBAABUNgAAsTYAAAEBAACsNgAAuDYAAAEBAAC1NgAAwDYA
+AAEBAAANAgAAxDYAAAEBAAANAgAAzzYAAAEBAADMNgAAJDcAAAEBAABNAgAAKDcAAAEBAADxNgAA
+LDcAAAEBAADjNgAANDcAAAEBAADxNgAAQDcAAAEBAAAZNwAARDcAAAEBAACRAgAAYDcAAAEBAABc
+NwAAZDcAAAEBAAClAgAAbDcAAAEBAABoNwAAcDcAAAEBAADrAgAAdDcAAAEBAAAFAwAAgDcAAAEB
+AAANAgAAhDcAAAEBAAAFAwAAmDcAAAEBAADVAwAAvDcAAAEBAAC4NwAAxDcAAAEBAADANwAA9TcA
+AAEBAADxNwAACTgAAAEBAAAFOAAALDgAAAEBAAAkOAAAQzgAAAEBAAA4OAAAUjgAAAEBAABHOAAA
+XjgAAAEBAABWOAAAcjgAAAEBAABuOAAAqTgAAAEBAACCOAAAuTgAAAEBAABeBQAAvTgAAAEBAACq
+BQAACAAAAAEBAAAAAAAAGQAAAAETAAAAAAAAMAAAAAEBAAAGAAAAPQAAAAESAAAAAAAARgAAAAEB
+AAAAAAAAUwAAAAESAAAAAAAAXAAAAAEBAAAGAAAAaQAAAAESAAAAAAAADwEAAAEBAADKBQAAIQEA
+AAEUAAAAAAAAAAIAAAEKAAAAAAAAYQIAAAEKAAAAAAAAmAIAAAEVAAAAAAAA+wIAAAEGAAAAAAAA
+MwMAAAEBAADPBQAASQMAAAEBAABKBgAAZwQAAAEBAABkBgAA7AQAAAEBAACMBgAA8wQAAAEBAACM
+BgAACQUAAAEBAACMBgAARAUAAAEBAACMBgAASwUAAAEBAACMBgAAYQUAAAEBAACMBgAAfQUAAAEB
+AACNBgAAhwUAAAEBAAC7BgAAkQUAAAEBAADnBgAAmwUAAAEBAAAKBwAAtAUAAAEBAACRAQAAtAYA
+AAEBAAAiBwAAyAYAAAEBAABCBwAA1AYAAAEBAABGBwAA5QYAAAEBAABCBwAA7gYAAAEBAABOBwAA
+9wYAAAEBAABGBwAA/wYAAAEBAABOBwAABwcAAAEEAAAAAAAADgcAAAEBAABKBwAAFQcAAAEBAABS
+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
+JwAAWgABAAEBAAAJJwAAZgABAAEBAAANJwAAeQABAAEBAAAVJwAAhgABAAEBAAAJJwAAjgABAAEB
+AAAFJwAAmwABAAEBAAAZJwAAogABAAEBAAAdJwAAqQABAAEBAAAZJwAAtgABAAEBAAAZJwAAwgAB
+AAEBAAANJwAAzwABAAEBAAAZJwAA1gABAAEBAAAZJwAA8QABAAEBAAAlJwAA+QABAAEBAAApJwAA
+BgEBAAEBAAAtJwAADQEBAAEBAAAhJwAAGgEBAAEBAABlJwAAJAEBAAEBAABpJwAAOAEBAAEBAABt
+JwAASQEBAAEBAABtJwAAUAEBAAEBAAB6JwAAWwEBAAEBAACGJwAAYwEBAAEBAAB2JwAAawEBAAEB
+AAB+JwAAeAEBAAEBAACCJwAAfwEBAAEBAACCJwAAkwEBAAEBAACKJwAApgEBAAEBAACWJwAArgEB
+AAEBAACOJwAAwAEBAAEBAACSJwAAzwEBAAEBAADDJwAA2wEBAAEBAADLJwAA4wEBAAEBAADPJwAA
+8AEBAAEBAADTJwAA9wEBAAEBAACKJwAACQIBAAEBAADHJwAAEgIBAAEBAADbJwAAGgIBAAEBAACO
+JwAAJwIBAAEBAACSJwAAMAIBAAEBAADXJwAANwIBAAEBAADXJwAARAIBAAEBAADHJwAATAIBAAEB
+AACKJwAAVAIBAAEBAADXJwAAfgIBAAEBAADTJwAAhQIBAAEBAACKJwAAlAIBAAEBAADXJwAAnAIB
+AAEBAADHJwAA3QIBAAEBAADHJwAA5QIBAAEBAADXJwAA8gIBAAEBAADXJwAAAQMBAAEBAACSJwAA
+YwMBAAEBAADfJwAAeAMBAAEBAADfJwAAvQMBAAEBAADfJwAAygMBAAEBAAAZKAAAjgQBAAEKAAAA
+AAAAxwQBAAEKAAAAAAAAAQUBAAEKAAAAAAAANgUBAAEBAAApKAAAPgUBAAEBAAAhKAAAVgUBAAEB
+AAAdKAAAXQUBAAEBAAAdKAAAbQUBAAEBAAAdKAAAdAUBAAEBAAAlKAAAgAUBAAEBAAAlKAAAkAUB
+AAEBAAAlKAAA+QUBAAEBAAAtKAAABQYBAAEBAAAxKAAAFgYBAAEBAABBKAAAHQYBAAEBAAA9KAAA
+JAYBAAEBAAAtKAAAKwYBAAEBAABJKAAAMgYBAAEBAABBKAAAOQYBAAEBAAA9KAAASAYBAAEBAABJ
+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
+AAAAkRsBAAEBAAAVKwAAmBsBAAEBAAARKwAApxsBAAEBAAARKwAAtBsBAAEBAAAVKwAAuxsBAAEB
+AAARKwAAyBsBAAEBAAAZKwAAzxsBAAEBAABJKwAA1hsBAAEBAACRAQAABxwBAAEBAAAlKwAADxwB
+AAEBAAAdKwAALBwBAAEBAABJKwAANBwBAAEGAAAAAAAAXhwBAAEBAABNKwAAaBwBAAEBAABNKwAA
+gRwBAAEBAADlAQAAvBwBAAEBAADlAQAA2BwBAAEDAADkAAAAWR0BAAEBAABRKwAAjB0BAAEBAABR
+KwAApR0BAAEBAABVKwAA4R0BAAEBAABZKwAA+h0BAAEDAABBAQAAXx4BAAEBAABdKwAAvh8BAAEB
+AABhKwAAHyABAAEBAABlKwAALCABAAEBAABpKwAAUiIBAAEBAABqKwAAfyIBAAEBAABuKwAApyIB
+AAEBAABuKwAAtCIBAAEBAAByKwAAziIBAAEBAAB3KwAA6CIBAAEBAAB8KwAAAiMBAAEBAACBKwAA
+HCMBAAEBAACGKwAANiMBAAEBAACLKwAAZyMBAAEBAABuKwAAKCQBAAEBAACgKwAAOCUBAAEBAACQ
+KwAASyUBAAEBAABuKwAAVyUBAAEBAABuKwAAZiUBAAEBAAB+KwAAbyUBAAEBAACAKwAAeCUBAAEB
+AACDKwAAgSUBAAEBAACFKwAAiiUBAAEBAACKKwAAkyUBAAEBAACPKwAAnCUBAAEBAACiKwAApSUB
+AAEBAACkKwAAriUBAAEBAACnKwAAtyUBAAEBAACpKwAAwCUBAAEBAACuKwAAySUBAAEBAACzKwAA
+1yUBAAEBAAB+KwAA4CUBAAEBAACAKwAA6SUBAAEBAACDKwAA8iUBAAEBAACFKwAA+yUBAAEBAACK
+KwAABCYBAAEBAACPKwAADSYBAAEBAACiKwAAFiYBAAEBAACkKwAAHyYBAAEBAACnKwAAKCYBAAEB
+AACpKwAAMSYBAAEBAACuKwAAOiYBAAEBAACzKwAAKSkBAAEBAAC3KwAAOSkBAAEBAAC3KwAAQikB
+AAEBAAC3KwAAXikBAAEBAAC0KwAAqSkBAAEBAAC7KwAAvikBAAEBAAC7KwAAxykBAAEBAAC7KwAA
+4ykBAAEBAAC4KwAARioBAAEBAAC8KwAAeSoBAAEBAAC8KwAAhioBAAEBAADAKwAAwCoBAAEBAADF
+KwAAxyoBAAEBAADFKwAA0ioBAAEBAADPKwAA2yoBAAEBAADKKwAA5CoBAAEBAAC8KwAA8SoBAAEB
+AADDKwAAKSsBAAEBAAC8KwAANisBAAEBAADLKwAAfSsBAAEBAAC8KwAAxCsBAAEBAAC8KwAACywB
+AAEBAAC8KwAAUiwBAAEBAAC8KwAAmSwBAAEBAAC8KwAADS0BAAEBAAC8KwAAci0BAAEBAADnKwAA
+eS0BAAEBAADnKwAAgi0BAAEBAADKKwAAiy0BAAEBAAC8KwAAmC0BAAEBAADDKwAA0C0BAAEBAAC8
+KwAA3S0BAAEBAADkKwAA+i0BAAEBAAC8KwAABy4BAAEBAADwKwAAXi4BAAEBAAAMLAAAsi4BAAEB
+AAAZLAAAuS4BAAEBAAAZLAAAxC4BAAEBAAAqLAAAyy4BAAEBAAAqLAAA0i4BAAEDAADkAAAA7i4B
+AAEBAAAQLAAAHy8BAAEBAADpAQAAKi8BAAEBAABGGwAAZS8BAAEBAABGGwAAqi8BAAEBAABGGwAA
++y8BAAEBAABGGwAAODABAAEBAABGGwAA0TABAAEDAADkAAAALjEBAAEBAAA9LAAAqTEBAAEBAAA9
+LAAAzjEBAAEGAAAAAAAAbDIBAAEBAABFLAAAeTIBAAEBAABJLAAAszIBAAEBAABNLAAAGDQBAAEB
+AABRLAAA+jQBAAEBAABtLAAAHDUBAAEBAAA9LAAAODYBAAEBAAABAgAAQzYBAAEBAAA9LAAAAjcB
+AAEBAACCLAAAEDcBAAEBAACCLAAAGTcBAAEBAACILAAAJjcBAAEBAAB+LAAAYDcBAAEBAACkLAAA
+azcBAAEBAACoLAAAcjcBAAEBAACsLAAAgTcBAAEBAACwLAAAqTcBAAEBAADELAAAsjcBAAEBAADE
+LAAAujcBAAEBAADsLAAAwjcBAAEBAADoLAAA2TcBAAEBAADcLAAA4DcBAAEBAADgLAAA5zcBAAEB
+AADcLAAA9DcBAAEBAADcLAAADzgBAAEBAADwLAAAGzgBAAEBAAD0LAAAMTgBAAEBAADsLAAAOzgB
+AAERAAAAAAAAQjgBAAEBAAD4LAAATjgBAAEBAAD4LAAAWzgBAAEBAAD8LAAAdjgBAAEBAADsLAAA
+hTgBAAEBAADcLAAAjDgBAAEBAADgLAAAkzgBAAEBAADcLAAAoDgBAAEBAADcLAAAqjgBAAEBAADw
+LAAAszgBAAEBAAAOLQAAvDgBAAEBAADwLAAA1jgBAAEBAAAPLQAA3TgBAAEBAAATLQAA5DgBAAEB
+AAAPLQAA8TgBAAEBAAAXLQAA+zgBAAEBAAAOLQAAAjkBAAEBAADwLAAAKzkBAAEBAADcLAAAMjkB
+AAEBAADgLAAAOTkBAAEBAADcLAAARjkBAAEBAADcLAAAYTkBAAEBAAAoLQAAcTkBAAEBAAAsLQAA
+eDkBAAEBAAAoLQAAfzkBAAEBAAAsLQAAhjkBAAEBAADwLAAAjTkBAAEBAAAsLQAAlDkBAAEBAAAw
+LQAAmzkBAAEBAAA0LQAAojkBAAEBAAC4LAAAqTkBAAEBAAA0LQAAsDkBAAEBAAC0LAAAtzkBAAEB
+AAA4LQAAvjkBAAEBAAA0LQAAxTkBAAEBAAAsLQAA0jkBAAEBAAA0LQAA2TkBAAEBAAAsLQAA4DkB
+AAEBAAC4LAAA5zkBAAEBAAAsLQAA7jkBAAEBAAC4LAAA9TkBAAEBAAA4LQAA/DkBAAEBAABALQAA
+AzoBAAEBAAA8LQAADDoBAAEBAAAsLQAAFDoBAAEBAADwLAAAHDoBAAEBAAA8LQAAJDoBAAEKAAAA
+AAAAKzoBAAEBAAAsLQAAMjoBAAEBAAA8LQAAOToBAAEBAAC4LAAAQDoBAAEBAAA4LQAATToBAAEB
+AABELQAAVDoBAAEBAAA8LQAAXToBAAEBAAC4LAAAZDoBAAEBAAA8LQAAbToBAAEBAAA8LQAAeDoB
+AAEBAABGLQAAgDoBAAEBAABKLQAAiDoBAAEBAADkLAAAlToBAAEBAADcLAAAnDoBAAEBAADgLAAA
+ozoBAAEBAADcLAAAsDoBAAEBAADcLAAAujoBAAEBAABKLQAAwToBAAEBAABSLQAAyDoBAAEBAAAw
+LQAAzzoBAAEBAABSLQAA2DoBAAEBAABSLQAA4DoBAAEBAADkLAAA6DoBAAEBAABOLQAA8DoBAAEK
+AAAAAAAA+ToBAAEBAABaLQAAATsBAAEBAABGLQAADjsBAAEBAAAwLQAAFTsBAAEBAABWLQAAHDsB
+AAEBAABOLQAAIzsBAAEBAABeLQAAKjsBAAEBAABSLQAAMTsBAAEBAABeLQAAODsBAAEBAABWLQAA
+PzsBAAEBAABeLQAASDsBAAEBAADgLAAAjzwBAAEBAABzLQAApzwBAAEBAACDLQAArzwBAAEBAACH
+LQAA9TwBAAEBAABqLQAA/DwBAAEBAABuLQAAAz0BAAEBAABqLQAAED0BAAEBAABqLQAAhD0BAAEB
+AABqLQAA2D0BAAEBAABqLQAA3z0BAAEBAABuLQAA5j0BAAEBAABqLQAA8z0BAAEBAABqLQAA/T0B
+AAEBAAByLQAAFj4BAAEBAABqLQAAIz4BAAEBAABqLQAAfT4BAAEBAACLLQAAiT4BAAEBAACLLQAA
+lj4BAAEBAAC2LQAAoD4BAAEBAABiLQAApz4BAAEBAAC6LQAArj4BAAEBAADCLQAAtT4BAAEBAAC+
+LQAAwT4BAAEBAADiLQAAyD4BAAEBAABiLQAAzz4BAAEBAADmLQAA1j4BAAEBAABiLQAA3T4BAAEB
+AADqLQAA6T4BAAEBAADuLQAADz8BAAEBAADOLQAAFj8BAAEBAADOLQAAHz8BAAEBAADyLQAAJj8B
+AAEBAADyLQAAWT8BAAEBAACLLQAAYT8BAAEBAADOLQAAcz8BAAEBAACLLQAAgD8BAAEBAAC2LQAA
+ij8BAAEBAABmLQAAoD8BAAEBAADzLQAArz8BAAEBAAAPLgAAwz8BAAEBAAC+LQAAyj8BAAEBAADO
+LQAA0z8BAAEBAADyLQAA2j8BAAEBAAATLgAA4T8BAAEBAADyLQAA7j8BAAEBAAAVLgAA9T8BAAEB
+AADyLQAAAkABAAEBAAB3LQAAGEABAAEBAABiLQAALkABAAEBAABmLQAANUABAAEBAADmLQAAPEAB
+AAEBAABmLQAAQ0ABAAEBAADqLQAAc0ABAAEBAAB7LQAAiUABAAEBAABmLQAAkEABAAEBAADmLQAA
+skABAAEBAADGLQAAuUABAAEBAABiLQAA6EABAAEBAADGLQAA+UABAAEBAADGLQAAB0EBAAEBAADG
+LQAADkEBAAEBAABmLQAAJEEBAAEBAAAWLgAALkEBAAEBAABmLQAATkEBAAEBAABiLQAAikEBAAEB
+AABiLQAAkUEBAAEBAADmLQAAnkEBAAEBAACZLgAAw0EBAAEBAACLLQAA9EEBAAEBAADKLQAA/EEB
+AAEBAACLLQAAHUIBAAEBAABqLQAAJEIBAAEBAABuLQAAK0IBAAEBAABqLQAAOEIBAAEBAABqLQAA
+QkIBAAEBAAB3LQAAWEIBAAEBAABiLQAAc0IBAAEBAADiLQAAk0IBAAEBAABmLQAAq0IBAAEBAACL
+LQAA1UIBAAEBAABzLQAA60IBAAEBAADbLgAAG0MBAAEBAADOLQAALUMBAAEBAACLLQAANkMBAAEB
+AADjLgAAP0MBAAEBAACLLQAAR0MBAAEBAADOLQAAVEMBAAEBAADfLgAAW0MBAAEBAACLLQAAYkMB
+AAEBAADfLgAAb0MBAAEBAAAELwAAj0MBAAEBAAC+LQAAyUMBAAEBAABmLQAA0UMBAAEBAADfLgAA
+8kMBAAEBAABqLQAA+UMBAAEBAABuLQAAAEQBAAEBAABqLQAADUQBAAEBAABqLQAAYEQBAAEBAABm
+LQAAaEQBAAEBAADfLgAApEQBAAEBAABuLQAA50QBAAEBAADKLQAA70QBAAEBAACLLQAAEEUBAAEB
+AABqLQAAHEUBAAEBAABqLQAAPUUBAAEBAADGLQAAWEUBAAEBAABiLQAAgkUBAAEBAADGLQAAiUUB
+AAEBAAAILwAAmUUBAAEBAADGLQAApkUBAAEBAABqLQAAtEUBAAEBAABqLQAAvEUBAAEBAADGLQAA
+yUUBAAEBAABqLQAA7kUBAAEBAACLLQAAI0YBAAEBAADOLQAAKkYBAAEBAADeLQAAMUYBAAEBAAAM
+LwAAOEYBAAEBAADOLQAAUEYBAAEBAAAMLwAAfUYBAAEBAADOLQAAj0YBAAEBAACLLQAAmEYBAAEB
+AAAQLwAAoEYBAAEBAACLLQAAqEYBAAEBAADOLQAAtUYBAAEBAAAULwAAvEYBAAEBAADeLQAAw0YB
+AAEBAAAULwAA0kYBAAEBAAAULwAA30YBAAEBAAAYLwAA60YBAAEBAAAYLwAA+EYBAAEBAAAULwAA
+AUcBAAEBAADGLQAACkcBAAEBAAAULwAAOUcBAAEBAAC+LQAARUcBAAEBAABiLQAAVUcBAAEBAABi
+LQAAa0cBAAEBAABzLQAAg0cBAAEBAAAULwAAlUcBAAEBAABqLQAAnEcBAAEBAABuLQAAo0cBAAEB
+AABqLQAAsEcBAAEBAABqLQAAwUcBAAEBAADGLQAAykcBAAEBAADGLQAA3EcBAAEBAABqLQAA40cB
+AAEBAABuLQAA6kcBAAEBAABqLQAA90cBAAEBAABqLQAAZ0gBAAEBAABqLQAAbkgBAAEBAABuLQAA
+dUgBAAEBAABqLQAAgkgBAAEBAABqLQAAkUgBAAEBAAAULwAAmkgBAAEBAADGLQAApkgBAAEBAAAU
+LwAArUgBAAEBAAC6LQAAuUgBAAEBAABzLQAA1kgBAAEBAABqLQAA3UgBAAEBAABqLQAA6UgBAAEB
+AADaLQAA8UgBAAEBAACLLQAA+UgBAAEBAADOLQAABkkBAAEBAAAULwAADUkBAAEBAADeLQAAFEkB
+AAEBAAAULwAAKEkBAAEBAABqLQAAL0kBAAEBAABqLQAAO0kBAAEBAAAULwAASEkBAAEBAADuLQAA
+UUkBAAEBAAAULwAAWUkBAAEBAADuLQAAZkkBAAEBAADGLQAAbUkBAAEBAABiLQAAdEkBAAEBAAAc
+LwAAg0kBAAEBAABiLQAAikkBAAEBAADuLQAAl0kBAAEBAAAoLwAAnkkBAAEBAAAgLwAAqkkBAAEB
+AADeLQAAsUkBAAEBAAAMLwAAvkkBAAEBAAAsLwAAyEkBAAEBAAAMLwAAz0kBAAEBAAAkLwAA1kkB
+AAEBAAAgLwAA3UkBAAEBAABiLQAA80kBAAEBAADSLQAAA0oBAAEBAADeLQAAGEoBAAEBAADWLQAA
+KEoBAAEBAACELwAAOkoBAAEBAAAgLwAAW0oBAAEBAABqLQAAYkoBAAEBAABuLQAAaUoBAAEBAABq
+LQAAdkoBAAEBAABqLQAAh0oBAAEBAAAULwAAj0oBAAEBAADGLQAAl0oBAAEBAADuLQAApEoBAAEB
+AAC+LQAAq0oBAAEBAADeLQAAskoBAAEBAAAMLwAAv0oBAAEBAACILwAAy0oBAAEBAACLLQAA7EoB
+AAEBAABiLQAA80oBAAEBAADqLQAAAEsBAAEBAABzLQAAL0sBAAEBAADuLQAAPEsBAAEBAADlAQAA
+XUsBAAEBAABiLQAAeksBAAEBAADSLQAAjEsBAAEBAABqLQAAtEsBAAEBAADWLQAAy0sBAAEBAABq
+LQAA10sBAAEBAABqLQAA5EsBAAEBAABqLQAABEwBAAEBAAC6LQAAFkwBAAEBAAC+LQAAHkwBAAEB
+AADiLQAAJkwBAAEBAADKLQAAM0wBAAEBAABqLQAAOkwBAAEBAABuLQAAQUwBAAEBAABqLQAATkwB
+AAEBAABqLQAAX0wBAAEBAACrLwAAZ0wBAAEBAACHLQAAdEwBAAEBAAB/LQAAe0wBAAEBAACnLwAA
+gkwBAAEBAADGLQAAiUwBAAEBAACnLwAAkkwBAAEBAABmLQAAmUwBAAEBAADmLQAAskwBAAEBAADK
+LQAA00wBAAEBAABqLQAA9UwBAAEBAADSLQAAB00BAAEBAADGLQAAKE0BAAEBAABqLQAANE0BAAEB
+AABqLQAAQU0BAAEBAABqLQAAdE0BAAEBAADGLQAAe00BAAEBAADGLQAAtE0BAAEBAABuLQAAzU0B
+AAEBAACvLwAA4k4BAAEBAAADMAAAaVABAAEBAAB5KQAAkVABAAEBAAAHMAAAoFABAAEBAAAHMAAA
+9lABAAEBAAAHMAAAMFEBAAEIAAAAAAAATVEBAAEBAAALMAAAXlEBAAEDAAAAAAAAaVEBAAEBAABg
+AAAArVEBAAEBAAALMAAAvVIBAAEGAAAAAAAA1VIBAAEBAAATMAAA4lIBAAEBAAAbMAAA61IBAAEB
+AAAPMAAA8lIBAAEBAAAXMAAA+VIBAAEBAAAPMAAACFMBAAEBAAAPMAAAEFMBAAEMAAAAAAAAF1MB
+AAEBAAAfMAAAIFMBAAEBAAAPMAAAJ1MBAAEBAAAXMAAALlMBAAEBAAAPMAAAPVMBAAEBAAAPMAAA
+RVMBAAEMAAAAAAAAU1MBAAEBAAA5AQAAeFMBAAEGAAAAAAAAnlMBAAEBAAAjMAAAsVMBAAEBAAAj
+MAAA+FMBAAEJAAAAAAAADlQBAAEBAADtAQAAxFQBAAEBAAAnMAAALFUBAAEBAABNMAAAYFUBAAED
+AABFAQAA11UBAAEKAAAAAAAAOVYBAAEGAAAAAAAAVFYBAAEDAABFAQAAoVYBAAEBAAB0MAAAHFcB
+AAEDAAAwAAAAAlgBAAEGAAAAAAAAGlgBAAEGAAAAAAAAZlgBAAEBAAB0MAAACVkBAAEDAAAwAAAA
+qlkBAAEBAAB0MAAA/VkBAAEBAAB0MAAAT1oBAAEDAAB4AAAAaFsBAAEBAAB4MAAAuFsBAAEDAADM
+AAAA7VwBAAEBAAABAgAAyV0BAAEDAABGAQAA310BAAEDAABGAQAA810BAAEDAABGAQAAJV4BAAED
+AABGAQAAOV4BAAEDAABGAQAAdV4BAAEDAABKAQAAi14BAAEDAAAsAQAAp14BAAEBAAB8MAAA114B
+AAEDAABOAQAACF8BAAEDAABOAQAAQ18BAAEBAAB9MAAAb18BAAEDAABOAQAAd18BAAEDAABKAQAA
+o18BAAEDAABOAQAAHmABAAEDAABKAQAASWABAAEBAAAJAgAAZWABAAEDAAAsAQAAcmIBAAEBAAA+
+AAAAeWIBAAEBAABYAAAAgGIBAAEBAAA+AAAAh2IBAAEBAAD1AAAAkGIBAAEBAABgAAAAmGIBAAEB
+AAAOAAAAoGIBAAEBAAB+MAAAqGIBAAEIAAAAAAAAr2IBAAEBAAAOAAAAtmIBAAEBAADlAAAAwmIB
+AAEBAAA5AQAA1WIBAAEBAAA9LAAA4WIBAAEBAAB0MAAA/mIBAAEBAACjMAAAHGMBAAEBAACnMAAA
+JWMBAAEBAACvMAAALmMBAAEBAACnMAAARWMBAAEBAACwMAAATGMBAAEBAACnMAAAU2MBAAEBAACw
+MAAAaWMBAAEBAACrMAAAdWMBAAEBAAAOAAAAfGMBAAEBAACrMAAAhWMBAAEBAAC8MAAAjWMBAAEU
+AAAAAAAAlGMBAAEBAAC4MAAAm2MBAAEBAAAOAAAAomMBAAEBAAC4MAAAsWMBAAEBAADFMAAAxWMB
+AAEBAAC4MAAA0mMBAAEBAADfMAAA2WMBAAEBAAA+AAAA4GMBAAEBAAC0MAAA52MBAAEBAAAuAAAA
+7mMBAAEBAADfMAAA/WMBAAEBAADjMAAABmQBAAEBAADfMAAADmQBAAEBAAC4MAAAG2QBAAEBAADl
+MAAAImQBAAEBAADlMAAAKWQBAAEBAADpMAAAMGQBAAEBAADpMAAAN2QBAAEBAACnMAAAPmQBAAEB
+AADpMAAARWQBAAEBAADpMAAATmQBAAEBAADpMAAAW2QBAAEBAACrMAAAYmQBAAEBAAAOAAAAaWQB
+AAEBAACrMAAAdmQBAAEBAAAuAAAAfWQBAAEBAADfMAAAiWQBAAEBAAAOAAAAkGQBAAEBAADlMAAA
+nWQBAAEBAACrMAAApGQBAAEBAADtMAAArWQBAAEBAADlMAAAtWQBAAEBAAC4MAAAvWQBAAEBAADt
+MAAAxWQBAAEKAAAAAAAAzGQBAAEBAADlMAAA02QBAAEBAADtMAAA2mQBAAEBAADtMAAA4WQBAAEB
+AADtMAAA6mQBAAEBAADxMAAA8WQBAAEBAADtMAAA+GQBAAEBAACvMAAA/2QBAAEBAADxMAAADGUB
+AAEBAACvMAAAE2UBAAEBAADtMAAAHGUBAAEBAADtMAAAJWUBAAEBAACnMAAAN2UBAAEBAADtMAAA
+P2UBAAEKAAAAAAAARmUBAAEBAACnMAAATWUBAAEBAADtMAAAVGUBAAEBAAAOAAAAW2UBAAEBAADt
+MAAAZmUBAAEBAADyMAAAbmUBAAEBAACrMAAAdmUBAAEVAAAAAAAAfWUBAAEBAAC0MAAAhGUBAAEB
+AAAuAAAAi2UBAAEBAAC0MAAAmGUBAAEBAAAuAAAAn2UBAAEBAADfMAAArWUBAAEBAACrMAAAtWUB
+AAEGAAAAAAAAvGUBAAEBAAAOAAAAw2UBAAEBAACrMAAAymUBAAEBAADlMAAA0WUBAAEBAAC4MAAA
+2GUBAAEBAADlMAAA32UBAAEBAADfMAAA5mUBAAEBAADjMAAA7WUBAAEBAAC4MAAA/GUBAAEBAAC4
+MAAAA2YBAAEBAADfMAAAD2YBAAEBAAAOAAAAFmYBAAEBAACrMAAAJWYBAAEBAAD2MAAAOWYBAAEB
+AACrMAAAT2YBAAEBAACrMAAAXmYBAAEBAACrMAAAZmYBAAEGAAAAAAAAgWYBAAEBAABNMQAAmmYB
+AAEBAAAKMQAAsGYBAAEBAABUAAAA0mYBAAEBAABIAAAA3mYBAAEBAABIAAAA7WYBAAEBAABIAAAA
++mYBAAEBAAC7MQAAAWcBAAEDAAAAAAAACGcBAAEBAAC3MQAAD2cBAAEDAAAMAAAAFmcBAAEBAAC/
+MQAAHWcBAAEDAAAYAAAAJGcBAAEBAACzMQAAK2cBAAEDAAAkAAAAMmcBAAEBAACzMQAAOWcBAAED
+AAAwAAAAQGcBAAEBAACzMQAAR2cBAAEDAAA8AAAATmcBAAEBAACzMQAAVWcBAAEDAABIAAAAXGcB
+AAEBAACzMQAAY2cBAAEDAABUAAAAamcBAAEBAACzMQAAcWcBAAEDAABgAAAAeGcBAAEBAACzMQAA
+f2cBAAEDAABsAAAAhmcBAAEBAAC3MQAAjWcBAAEDAAB4AAAAlGcBAAEBAAC3MQAAm2cBAAEDAACE
+AAAAomcBAAEBAAC3MQAAqWcBAAEDAACQAAAAsGcBAAEBAAC3MQAAt2cBAAEDAACcAAAAvmcBAAEB
+AAC3MQAAxWcBAAEDAACoAAAAzGcBAAEBAAC3MQAA02cBAAEDAAC0AAAA2mcBAAEBAADDMQAA4WcB
+AAEDAADAAAAA6GcBAAEBAACzMQAA72cBAAEDAADMAAAA9mcBAAEBAACVAAAA/WcBAAEDAADYAAAA
+BGgBAAEBAACVAAAAC2gBAAEDAADkAAAAEmgBAAEBAADLMQAAGWgBAAEDAADwAAAAIGgBAAEBAADP
+MQAAJ2gBAAEDAAD8AAAALmgBAAEBAADHMQAANWgBAAEDAAAIAQAAPGgBAAEBAAC3MQAAQ2gBAAED
+AAAUAQAASmgBAAEBAACzMQAAUWgBAAEDAAAgAQAAXWgBAAEDAAAsAQAAZmgBAAEBAAASAAAAc2gB
+AAEBAABIAAAAemgBAAEBAABQAAAAgWgBAAEBAABIAAAAkGgBAAEBAABIAAAAn2gBAAEBAABUAAAA
+rGgBAAEBAADaMQAAs2gBAAEBAADaMQAAvGgBAAEBAADeMQAAw2gBAAEBAAAOAAAAymgBAAEBAADa
+MQAA1WgBAAEBAABUAAAA62gBAAEBAAAKAAAAA2kBAAEBAABUAAAAC2kBAAEBAADfMQAAGGkBAAEB
+AABIAAAAIWkBAAEBAABIAAAALmkBAAEBAADeMQAANWkBAAEBAADaMQAAQGkBAAEBAADaMQAATWkB
+AAEBAAD9MQAAVGkBAAEBAAD9MQAAXWkBAAEBAADWMQAAZWkBAAEBAADaMQAAcmkBAAEBAABIAAAA
+eWkBAAEBAABQAAAAgGkBAAEBAABIAAAAj2kBAAEBAABIAAAAnmkBAAEBAAAaAAAAq2kBAAEBAAA5
+AQAAsmkBAAEBAAAOAAAAuWkBAAEBAAA5AQAAz2kBAAEBAAAiAAAA12kBAAEBAADWMQAA32kBAAEB
+AAA5AQAA52kBAAEKAAAAAAAA7mkBAAEBAAA5AQAA9WkBAAEBAAABMgAA/GkBAAEBAAAiAAAAA2oB
+AAEBAAABMgAADGoBAAEBAAD9MQAAFGoBAAEBAADaMQAAHGoBAAEBAAABMgAAJGoBAAEKAAAAAAAA
+K2oBAAEBAAASAAAAMmoBAAEBAADxAAAAQWoBAAEBAAAKMgAASWoBAAEBAAA5AQAAVmoBAAEBAABI
+AAAAXWoBAAEBAABQAAAAZGoBAAEBAABIAAAAcWoBAAEBAAABMgAAeGoBAAEBAAAOMgAAf2oBAAEB
+AAD9MQAAhmoBAAEBAAAOMgAAjWoBAAEBAAAOMgAAlmoBAAEBAAAKMgAAo2oBAAEBAAASMgAAqmoB
+AAEBAAASMgAAs2oBAAEBAAASMgAAu2oBAAEBAAAKMgAAw2oBAAEBAAAOMgAAy2oBAAEKAAAAAAAA
+1GoBAAEBAADpAAAA3GoBAAEBAAA5AQAA5GoBAAEBAAD5AAAA8WoBAAEBAABIAAAA+GoBAAEBAABQ
+AAAA/2oBAAEBAABIAAAAGGsBAAERAAAAAAAAPGsBAAEBAAAWMgAAQWsBAAEBAABIAAAAaGsBAAEB
+AABIAAAAe2sBAAEGAAAAAAAAgmsBAAEBAAAOAAAAiWsBAAEBAAAOMgAAkmsBAAEBAABQAAAAmWsB
+AAEBAABIAAAAqGsBAAEBAABIAAAAtWsBAAEBAAAuAAAAvGsBAAEBAACMLAAAymsBAAEBAAA5AQAA
+12sBAAEBAABIAAAA3msBAAEBAABQAAAA5WsBAAEBAABIAAAA9GsBAAEBAABIAAAAAWwBAAEBAACJ
+AAAACGwBAAEBAACFAAAAFGwBAAEBAACRAAAAG2wBAAEBAAApMgAAImwBAAEBAACZAAAAKWwBAAEB
+AACVAAAAMGwBAAEBAACdAAAAN2wBAAEBAAAWAAAAPmwBAAEBAAC5AAAARWwBAAEBAAAWAAAATGwB
+AAEBAADbCQAAU2wBAAEBAAAuAAAAWmwBAAEBAAAKAQAAaGwBAAEBAAAyAAAAb2wBAAEBAAAGAQAA
+dmwBAAEBAAAWAAAAfWwBAAEBAADtKAAAqWwBAAEBAAB1AAAAxmwBAAEBAAB5AAAAIW0BAAEBAABF
+MgAALW0BAAEBAABFMgAAO20BAAEBAAACDAAAV20BAAEBAAD9AAAAZm0BAAEBAAABAQAAdG0BAAEB
+AAABAQAAe20BAAEBAABGGwAAm20BAAEBAAD1AQAAsm0BAAEBAAABAgAAxW0BAAEBAAB9AAAA/W0B
+AAEBAABNMgAAC24BAAEBAABhMgAAF24BAAEBAAAaAQAAHm4BAAEBAAAOAAAAJW4BAAEDAAAIAAAA
+Mm4BAAEDAAAEAAAAOW4BAAEBAABlMgAAQG4BAAEDAAAIAAAAR24BAAEBAABlMgAATm4BAAEBAABp
+MgAAVW4BAAEBAABlMgAAXG4BAAEBAABlMgAAZW4BAAEBAACQLAAAbG4BAAEBAABQAAAAc24BAAEB
+AABIAAAAgG4BAAEBAAAmAAAAh24BAAEBAABlMgAAjm4BAAEBAABlMgAAl24BAAEBAACULAAAnm4B
+AAEBAAAmAAAApW4BAAEBAABlMgAArG4BAAEBAABlMgAAtW4BAAEBAACYLAAAvG4BAAEBAAAmAAAA
+w24BAAEBAABlMgAAym4BAAEBAABlMgAA024BAAEBAACcLAAA2m4BAAEBAACcLAAA4W4BAAEBAABJ
+MgAA6m4BAAEBAAAmAAAA8W4BAAEBAABlMgAA+G4BAAEDAAAEAAAA/24BAAEBAABlMgAABm8BAAEB
+AABlMgAADW8BAAEBAACgLAAAFG8BAAEBAACQLAAAG28BAAEBAABRMgAAIm8BAAEBAACYLAAAKW8B
+AAEBAABRMgAAMG8BAAEBAACQLAAAN28BAAEBAABVMgAAPm8BAAEBAACULAAARW8BAAEBAABVMgAA
+TG8BAAEBAABVMgAAU28BAAEBAABRMgAAcm8BAAEBAABxMgAAfm8BAAEBAABhMgAAi28BAAEBAABR
+MgAAkm8BAAEBAAB1MgAAmW8BAAEBAAAeAAAAoG8BAAEBAAB6MgAAtG8BAAEBAABVMgAAvG8BAAEB
+AABRMgAABHABAAEBAABVMgAALXABAAEBAAB5MgAASnABAAEBAABhMgAAc3ABAAEBAABRMgAApHAB
+AAEBAAB+MgAAznABAAEBAAB6MgAA2nABAAEBAACcLAAA83ABAAEBAAB1MgAA+nABAAEBAABVMgAA
+EnEBAAEBAABVMgAAMnEBAAEBAABVMgAAdHEBAAEBAABRMgAAfXEBAAEBAABVMgAAhXEBAAEBAABR
+MgAA7nEBAAEBAAB1MgAAAHIBAAEBAABVMgAAF3IBAAEBAABIAAAAI3IBAAEBAABIAAAAh3IBAAEB
+AABhMgAA1XIBAAEBAABRMgAA+3IBAAEBAAB/MgAAA3MBAAEBAABMAAAAC3MBAAEBAAAWAQAAE3MB
+AAEBAABxMgAAG3MBAAEBAABtMgAAKHMBAAEBAAAOAQAAL3MBAAEBAABQAAAANnMBAAEBAABIAAAA
+SHMBAAEBAAAaAQAAWnMBAAEBAAAOAQAAbHMBAAEBAAAaAQAAfnMBAAEBAACRAAAAkHMBAAEBAAAO
+AQAAonMBAAEBAAAFAgAArnMBAAEBAACRAAAAunMBAAEBAAAOAQAA0XMBAAEBAAAOAQAA6HMBAAEB
+AAAOAQAA/3MBAAEBAAAOAQAAFnQBAAEBAAAOAQAALXQBAAEBAAAOAQAARHQBAAEBAAAOAQAAW3QB
+AAEBAAAOAQAAcnQBAAEBAAAOAQAAiXQBAAEBAAAOAQAAoHQBAAEBAAAOAQAAt3QBAAEBAAAOAQAA
+znQBAAEBAAAOAQAA5XQBAAEBAAAOAQAA9nQBAAEBAAAOAQAADXUBAAEBAAAOAQAAJHUBAAEBAAAO
+AQAAO3UBAAEBAAAOAQAAUnUBAAEBAAAOAQAAaXUBAAEBAAAOAQAAdXUBAAEBAAAOAQAAjnUBAAEB
+AABxMgAAlnUBAAEBAABtMgAAqHUBAAEBAAAaAQAAtXUBAAEBAABRMgAAAXYBAAEBAACgLAAACXYB
+AAEDAAAEAAAAFnYBAAEBAABIAAAAJ3YBAAEBAAAOAQAANnYBAAEBAAAaAQAAPnYBAAEBAAASAQAA
+UnYBAAEBAABxMgAAWnYBAAEBAABtMgAAZ3YBAAEBAABIAAAAeHYBAAEBAAAOAQAAinYBAAEBAAAa
+AQAAmXYBAAEBAAAaAQAApnYBAAEBAAAOAAAArnYBAAEBAAASAQAAtnYBAAEBAABxMgAAvnYBAAEB
+AABtMgAAy3YBAAEBAABIAAAA4HYBAAEBAAAOAAAA6HYBAAEBAAASAQAA8HYBAAEBAABxMgAA+HYB
+AAEBAABtMgAABXcBAAEBAABIAAAAFncBAAEBAAAOAQAAKHcBAAEBAAAaAQAAS3cBAAEBAABxMgAA
+U3cBAAEBAABtMgAAYHcBAAEBAABIAAAAdXcBAAEBAAASAQAAgncBAAEBAABxMgAAincBAAEBAABt
+MgAAl3cBAAEBAABIAAAAqHcBAAEBAAAOAQAAuncBAAEBAAAaAQAA0HcBAAEBAAASAQAA2HcBAAEB
+AACDMgAA4HcBAAEBAABxMgAA6HcBAAEBAABtMgAA9XcBAAEBAABIAAAABngBAAEBAAAOAQAAH3gB
+AAEBAAASAQAALngBAAEBAADZAAAANngBAAEBAAAmAAAAPngBAAEBAACLMgAAS3gBAAEBAABIAAAA
+UngBAAEBAABQAAAAWXgBAAEBAABIAAAAbXgBAAEBAABxMgAAdXgBAAEBAABtMgAAgngBAAEBAABI
+AAAAk3gBAAEBAAASAQAAongBAAEBAACPMgAAtHgBAAEBAABIAAAAxXgBAAEBAAASAQAA2XgBAAEB
+AABIAAAA6ngBAAEBAAASAQAA+XgBAAEBAACPMgAAC3kBAAEBAABIAAAAHHkBAAEBAAASAQAAMHkB
+AAEBAABIAAAAN3kBAAEBAABQAAAAPnkBAAEBAABIAAAAUnkBAAEBAABxMgAAWnkBAAEBAABtMgAA
+Z3kBAAEBAABIAAAAeHkBAAEBAAASAQAAlnkBAAEBAABIAAAAp3kBAAEBAAASAQAAu3kBAAEBAABI
+AAAAwnkBAAEBAABQAAAAyXkBAAEBAABIAAAA3XkBAAEBAABxMgAA5XkBAAEBAABtMgAA8nkBAAEB
+AABIAAAAA3oBAAEBAAASAQAAHHoBAAEBAABIAAAALXoBAAEBAAASAQAAQXoBAAEBAABIAAAAVHoB
+AAEBAABIAAAAZXoBAAEBAAAOAQAAd3oBAAEBAAAaAQAAhHoBAAEBAAAWAAAAi3oBAAEBAAC5AAAA
+mHoBAAEBAAAWAAAAn3oBAAEBAADtKAAArHoBAAEBAADcMgAAs3oBAAEBAABIAAAAunoBAAEBAABQ
+AAAAwXoBAAEBAABIAAAAznoBAAEBAACJAAAA1XoBAAEBAACFAAAA4noBAAEDAAAEAQAA6XoBAAEB
+AADgMgAA8noBAAEBAADRAAAA+noBAAEBAAAmAAAAAnsBAAEBAADkMgAAD3sBAAEBAABIAAAAFnsB
+AAEBAABQAAAAHXsBAAEBAABIAAAALHsBAAEBAADNAAAANHsBAAEBAAAiAAAAPHsBAAEBAADhAAAA
+SXsBAAEBAABIAAAAVXsBAAEBAAAWAAAAXHsBAAEBAAC5AAAAaXsBAAEDAAAEAQAAcHsBAAEBAADg
+MgAAfHsBAAEDAAD4AAAAg3sBAAEBAADgMgAAinsBAAEBAAAWAAAAkXsBAAEBAAC5AAAAnnsBAAEB
+AAByBQAApXsBAAEBAADgMgAAwHsBAAEBAADgMgAAx3sBAAEBAAAmAAAAznsBAAEBAADgMgAA13sB
+AAEBAADgMgAA4HsBAAEBAADRAAAA6HsBAAEBAAAOAAAA9XsBAAEBAAAqGwAA/XsBAAEBAAAOAAAA
+BXwBAAEBAAAOAAAADXwBAAEDAAAQAQAAGnwBAAEBAABIAAAAQXwBAAEBAADgMgAAXHwBAAEBAADg
+MgAAaHwBAAEBAAByBQAAb3wBAAEBAADgMgAAinwBAAEBAADgMgAAkXwBAAEBAABQAAAAmHwBAAEB
+AABIAAAAp3wBAAEBAACfMgAAr3wBAAEBAACbMgAAt3wBAAEBAABxMgAAv3wBAAEBAABtMgAAzHwB
+AAEBAABIAAAA03wBAAEBAABQAAAA2nwBAAEBAABIAAAA6XwBAAEBAACbMgAA8XwBAAEBAABxMgAA
++XwBAAEBAABtMgAABn0BAAEBAAASAAAADX0BAAEBAAC5AAAAHH0BAAEBAADJAAAAJH0BAAEBAAAO
+AAAAMX0BAAEBAAAmGwAAPn0BAAEBAAAuAAAARn0BAAEDAAAQAQAAU30BAAEBAABIAAAAWn0BAAEB
+AABQAAAAYX0BAAEBAABIAAAAbn0BAAEDAAAQAQAAgH0BAAEBAAASAAAAiH0BAAEBAADNAAAAkH0B
+AAEBAACXMgAAmH0BAAEBAACTMgAAoH0BAAEBAABxMgAAqH0BAAEBAABtMgAAtX0BAAEBAABIAAAA
+vH0BAAEBAABQAAAAw30BAAEBAABIAAAA0n0BAAEBAABxMgAA2n0BAAEBAABtMgAA6X0BAAEBAABx
+MgAA8X0BAAEBAABtMgAACn4BAAEBAABRMgAAIH4BAAEBAAAuAAAANn4BAAEBAAAuMwAAPX4BAAEB
+AABIAAAAVX4BAAEBAABRMgAAYn4BAAEBAABIAAAAaX4BAAEBAABQAAAAcH4BAAEBAABIAAAAgn4B
+AAEBAAACAQAAlH4BAAEBAAASAQAAoX4BAAEBAACXMgAAqH4BAAEBAACTMgAAr34BAAEDAAAMAQAA
+wX4BAAEBAAD1AAAAzn4BAAEBAACTMgAA5X4BAAEBAABIAAAA7H4BAAEBAABQAAAA834BAAEBAABI
+AAAAEH8BAAEBAAASAQAAMH8BAAEBAABFMgAAWX8BAAEBAAAyMwAAa38BAAEBAABxMgAAc38BAAEB
+AABtMgAAe38BAAEBAADgMgAAiH8BAAEBAABIAAAAoH8BAAEBAABxMgAAqH8BAAEBAABtMgAAv38B
+AAEBAAAOAQAAzH8BAAEBAAASAAAA038BAAEBAADbCQAA4H8BAAEBAABhMwAA538BAAEBAABIAAAA
+838BAAEDAADsAAAA+n8BAAEBAAAKAQAACYABAAEBAAApAQAAEYABAAEBAABBMgAAJYABAAEBAAAp
+AQAALYABAAEBAAA9MgAANYABAAEBAAC9MwAAQoABAAEBAADlAAAASYABAAEBAAAOAAAAUIABAAEB
+AADlAAAAZIABAAEBAADlAAAAa4ABAAEBAABIAAAAd4ABAAEBAAASAQAAmoABAAEBAAASAQAApoAB
+AAEBAAASAQAAy4ABAAEBAAASAQAAEoEBAAEBAAAaAQAAH4EBAAEBAAA2AAAAJoEBAAEBAAAGAQAA
+MoEBAAEBAADxAQAARIEBAAEBAAD1AQAAUIEBAAEBAAASAAAAV4EBAAEBAADbCQAAY4EBAAEBAABI
+AAAAhoEBAAEBAAASAQAAjoEBAAEBAADBMwAAloEBAAEBAABxMgAAnoEBAAEBAABtMgAAq4EBAAEB
+AABIAAAAvIEBAAEBAAAOAQAAzoEBAAEBAAAaAQAA24EBAAEBAAAWAAAA4oEBAAEBAADbCQAA74EB
+AAEBAADlMwAA9oEBAAEBAABIAAAAAoIBAAEBAAAWAAAACYIBAAEBAADbCQAAGoIBAAEBAAAaAQAA
+LoIBAAEBAABIAAAANYIBAAEBAABQAAAAPIIBAAEBAABIAAAAS4IBAAEBAADxMwAAWIIBAAEBAADt
+MwAAYYIBAAEBAADtMwAAaYIBAAEBAADpMwAAdoIBAAEBAABIAAAAfYIBAAEBAABQAAAAhIIBAAEB
+AABIAAAAk4IBAAEBAAABAgAAoIIBAAEBAABIAAAAp4IBAAEBAABQAAAAroIBAAEBAABIAAAAu4IB
+AAEBAAAuAAAAwoIBAAEBAABCAAAAzoIBAAEBAABCAAAA3YIBAAEBAABCAAAA6oIBAAEBAAD1MwAA
+84IBAAEBAAD9MwAA+4IBAAEBAAD1MwAACIMBAAEBAAAuAAAAD4MBAAEBAAD5MwAAGIMBAAEBAABC
+AAAAJIMBAAEBAAAWAAAAK4MBAAEBAADbCQAAMoMBAAEBAAABAgAAQ4MBAAEBAAAOAQAAloMBAAEB
+AABIAAAAooMBAAEBAABIAAAAsYMBAAEBAADBAAAA0oMBAAEBAABIAAAA+oMBAAEBAADBAAAAG4QB
+AAEBAABIAAAALIQBAAEBAAAOAQAAO4QBAAEBAAANNAAAQ4QBAAEBAAAJNAAAS4QBAAEBAABxMgAA
+U4QBAAEBAABtMgAAYIQBAAEBAABIAAAAZ4QBAAEBAABQAAAAboQBAAEBAABIAAAAgIQBAAEBAAD5
+AQAAjYQBAAEBAABRMgAAnYQBAAEBAAABNAAADIUBAAEBAABRMgAAN4UBAAEBAABRMgAAQIUBAAEB
+AAANNAAASIUBAAEBAAAJNAAAUIUBAAEBAABxMgAAWIUBAAEBAABtMgAAZYUBAAEBAABIAAAAbIUB
+AAEBAABQAAAAc4UBAAEBAABIAAAAgoUBAAEBAAAuAAAAioUBAAEBAADFAAAAkoUBAAEBAAAFNAAA
+moUBAAEBAAABNAAAooUBAAEBAABxMgAAqoUBAAEBAABtMgAAt4UBAAEBAABIAAAAvoUBAAEBAABQ
+AAAAxYUBAAEBAABIAAAA1IUBAAEBAABxMgAA3IUBAAEBAABtMgAA6YUBAAEBAAAyAAAA8IUBAAEB
+AACMLAAA/IUBAAEBAAD5AQAAC4YBAAEBAABxMgAAE4YBAAEBAABtMgAAIIYBAAEBAABIAAAAMYYB
+AAEBAAAOAQAAQ4YBAAEBAAAaAQAAUoYBAAEBAAAWAAAAWoYBAAEBAAAZNAAAYoYBAAEBAABxMgAA
+aoYBAAEBAABtMgAAd4YBAAEBAAARNAAAfoYBAAEBAAAWAAAAhYYBAAEBAAARNAAAlIYBAAEBAAAW
+AAAAnIYBAAEBAAAhNAAApIYBAAEBAABxMgAArIYBAAEBAABtMgAAuYYBAAEBAAARNAAAwIYBAAEB
+AAASAAAAx4YBAAEBAAARNAAA1IYBAAEBAACNAAAA24YBAAEBAACFAAAA7oYBAAEBAAAxNAAA9oYB
+AAEBAAAWAAAA/oYBAAEBAAApNAAABocBAAEBAABxMgAADocBAAEBAABtMgAAG4cBAAEBAAAtNAAA
+IocBAAEBAAASAAAAKYcBAAEBAAAtNAAAOIcBAAEBAAAWAAAAQIcBAAEBAAA0NAAASIcBAAEBAABx
+MgAAUIcBAAEBAABtMgAAZocBAAEBAAASAAAAgYcBAAEBAAB9KQAAkIcBAAEBAAD1AAAAoocBAAEB
+AABIAAAAqYcBAAEBAABQAAAAsIcBAAEBAABIAAAAe4gBAAEBAAASAAAAgogBAAEBAAC5AAAAi4gB
+AAEBAADJAAAAk4gBAAEBAAAOAAAAm4gBAAEBAAAOAAAAo4gBAAEBAAAOAAAAq4gBAAEBAAAOAAAA
+s4gBAAEBAAAOAAAAu4gBAAEBAADhAAAAyIgBAAEBAABIAAAAz4gBAAEBAABQAAAA1ogBAAEBAABI
+AAAA44gBAAEDAAAQAQAA6ogBAAEBAAAyGwAA84gBAAEBAADJAAAA+4gBAAEBAABBNAAACIkBAAEB
+AAAuGwAAEIkBAAEBAAAOAAAAGIkBAAEBAAAOAAAAIIkBAAEBAAA9NAAALYkBAAEBAABIAAAANIkB
+AAEBAABQAAAAO4kBAAEBAABIAAAASIkBAAEDAAAQAQAAT4kBAAEBAAA2GwAAWIkBAAEBAADJAAAA
+YIkBAAEBAABPNAAAbYkBAAEBAAAuGwAAdYkBAAEBAAAOAAAAfYkBAAEBAAAOAAAAhYkBAAEBAABL
+NAAAkokBAAEBAABIAAAApIkBAAEBAABQAAAAq4kBAAEBAABIAAAAvYkBAAEBAAAFAgAAyokBAAED
+AAAQAQAA0YkBAAEBAAA6GwAA2okBAAEBAADJAAAA7IkBAAEBAAAuGwAA9IkBAAEBAAAOAAAA/IkB
+AAEBAAAOAAAABIoBAAEBAABTNAAAEYoBAAEBAABIAAAAIYoBAAEBAAAOAAAAKIoBAAEBAACZAAAA
+L4oBAAEBAAAOAAAANooBAAEBAACdAAAAQooBAAEBAABZNAAASYoBAAEBAACZAAAAUIoBAAEBAAD9
+AwAAV4oBAAEBAACdAAAAY4oBAAEBAAAFAgAAdIoBAAEBAAAFAgAAe4oBAAEBAABQAAAAgooBAAEB
+AABIAAAAj4oBAAEBAAAWAAAAlooBAAEBAAARNAAAo4oBAAEBAAB3NAAAqooBAAEBAABIAAAAu4oB
+AAEBAACRAAAAyIoBAAEBAAC5NAAAz4oBAAEBAABIAAAA54oBAAEBAABxMgAA74oBAAEBAABtMgAA
+BosBAAEBAAAOAQAAGIsBAAEBAAAaAQAAOYsBAAEBAAC9NAAAPosBAAEBAABIAAAASosBAAEBAABt
+MgAAU4sBAAEBAADfNAAAY4sBAAEBAADjNAAAf4sBAAEBAAASAQAAkYsBAAEBAAC5AAAAnosBAAEB
+AADzNAAAo4sBAAEBAABIAAAAtIsBAAEBAADnNAAAwIsBAAEBAADrNAAAzIsBAAEBAADvNAAA34sB
+AAEBAABxMgAA54sBAAEBAABtMgAA+4sBAAEBAABxMgAABYwBAAEBAABtMgAAFIwBAAEBAABIAAAA
+IIwBAAEBAABIAAAAU4wBAAEBAABxMgAAW4wBAAEBAABtMgAAcowBAAEBAABIAAAAfowBAAEBAABI
+AAAAjYwBAAEBAAC9AAAAmowBAAEBAAAOAAAAp4wBAAEBAABIAAAAs4wBAAEBAABIAAAAxYwBAAEB
+AAC5AAAA9IwBAAEBAADnNAAAAI0BAAEBAADrNAAADI0BAAEBAADvNAAAGI0BAAEBAABIAAAAKo0B
+AAEBAAC5AAAAN40BAAEDAAD4AAAAk40BAAEBAAByBQAAxo0BAAEBAADJAAAAzo0BAAEBAADvNAAA
+4I0BAAEBAADrNAAA6I0BAAEBAADnNAAA8I0BAAEBAADjNAAA+I0BAAEBAADfNAAABY4BAAEBAABI
+AAAAFo4BAAEBAAASAQAAKI4BAAEDAADgAAAAO44BAAEBAABxMgAAQ44BAAEBAABtMgAAVY4BAAEB
+AABFMgAAaI4BAAEBAAAOAQAAd44BAAEBAAAbNQAAf44BAAEBAABxMgAAh44BAAEBAABtMgAAto4B
+AAEBAAAXNQAAxo4BAAEBAAAeNQAAzo4BAAEBAABxMgAA1o4BAAEBAABtMgAABY8BAAEBAAAXNQAA
+E48BAAEBAAAiNQAAGI8BAAEBAABIAAAAKY8BAAEBAAAOAQAASY8BAAEBAABxMgAAU48BAAEBAABt
+MgAAYo8BAAEBAABIAAAAbo8BAAEBAABIAAAAfY8BAAEBAAASAQAAo48BAAEBAABxMgAAq48BAAEB
+AABtMgAAuI8BAAEBAABIAAAAxI8BAAEBAABIAAAA048BAAEBAABxMgAA248BAAEBAABtMgAA9I8B
+AAEBAABxMgAA/I8BAAEBAABtMgAACZABAAEBAABIAAAAFZABAAEBAABIAAAAcZABAAEBAABIAAAA
+fZABAAEBAABIAAAAmJABAAEBAABCNQAAuZABAAEBAABTNQAAzJABAAEBAABIAAAA25ABAAEBAADB
+AAAA/JABAAEBAABIAAAACJEBAAEBAABIAAAANZEBAAEBAABIAAAARpEBAAEBAAAOAQAAX5EBAAEB
+AABRMgAAbJEBAAEBAABIAAAAfZEBAAEBAAAOAQAAj5EBAAEBAAAaAQAAnJEBAAEBAACJAAAAo5EB
+AAEBAACFAAAAsJEBAAEBAAASAAAAt5EBAAEBAADtKAAAy5EBAAEBAABIAAAA0pEBAAEBAABQAAAA
+2ZEBAAEBAABIAAAA7ZEBAAEBAABIAAAA+ZEBAAEBAAAWAAAAAJIBAAEBAAC5AAAADZIBAAEDAAAQ
+AQAAFJIBAAEBAAB2NQAAHZIBAAEBAADJAAAAJZIBAAEBAAC6BQAALZIBAAEBAAB6NQAAOpIBAAEB
+AABIAAAARpIBAAEBAACuNQAATZIBAAEBAABIAAAAVJIBAAEBAABQAAAAW5IBAAEBAABIAAAAapIB
+AAEBAABuNQAAcpIBAAEBAABqNQAAepIBAAEBAABxMgAAgpIBAAEBAABtMgAAj5IBAAEBAABIAAAA
+lpIBAAEBAABQAAAAnZIBAAEBAABIAAAArJIBAAEBAAASAAAAtJIBAAEBAADNAAAAvJIBAAEBAABm
+NQAAxJIBAAEBAABiNQAAzJIBAAEBAABxMgAA1JIBAAEBAABtMgAA4ZIBAAEBAABIAAAA6JIBAAEB
+AABQAAAA75IBAAEBAABIAAAA/pIBAAEBAABxMgAABpMBAAEBAABtMgAAE5MBAAEBAAASAAAAGpMB
+AAEBAADtKAAAMpMBAAEBAABxMgAAOpMBAAEBAABtMgAAUZMBAAEBAAAOAQAAe5MBAAEBAABxMgAA
+hZMBAAEBAABxMgAAjZMBAAEBAABtMgAAmpMBAAEBAABIAAAArZMBAAEBAAAuAAAAxZMBAAEBAADB
+AAAAzZMBAAEBAAAeAAAA1ZMBAAEBAACzNQAA4pMBAAEBAABIAAAA7pMBAAEBAABIAAAAAJQBAAEB
+AACRAAAAEpQBAAEBAACRAAAAGZQBAAEBAAA2AAAAIJQBAAEBAAAGAQAALZQBAAEDAAAEAAAANJQB
+AAEBAAC3NQAAO5QBAAEBAACgLAAAQpQBAAEBAAC3NQAAS5QBAAEBAAC7NQAAU5QBAAEBAAC3NQAA
+W5QBAAEBAAA9MgAAY5QBAAEKAAAAAAAAapQBAAEBAACcLAAAcZQBAAEBAABBMgAAeJQBAAEBAABB
+MgAAf5QBAAEBAAAuAAAAhpQBAAEBAAAGAQAAjZQBAAEBAAAuAAAApZQBAAEBAABxMgAArZQBAAEB
+AABtMgAAw5QBAAEBAAAuAAAA2ZQBAAEBAABRMgAA8ZQBAAEBAADgNQAA+JQBAAEBAABIAAAAEJUB
+AAEBAABxMgAAGJUBAAEBAABtMgAAQJUBAAEBAABhMgAASJUBAAEBAACgLAAAUJUBAAEDAAAEAAAA
+XZUBAAEBAABIAAAAaZUBAAEBAABRMgAAgZUBAAEBAABhMgAAiZUBAAEBAACgLAAAkZUBAAEDAAAE
+AAAAnpUBAAEBAABIAAAApZUBAAEBAABQAAAArJUBAAEBAABIAAAAwpUBAAEBAACcLAAAyZUBAAEB
+AAAuAAAA0JUBAAEBAADkNQAA15UBAAEBAABVMgAA3pUBAAEBAABRMgAA65UBAAEBAAB6MgAA8pUB
+AAEBAABRMgAA/pUBAAEBAABhMgAAC5YBAAEBAAAyAAAAEpYBAAEBAADkNQAAGZYBAAEBAADkNQAA
+IJYBAAEBAACcLAAAJ5YBAAEBAAAyAAAALpYBAAEBAACMLAAAO5YBAAEDAAAEAAAAQpYBAAEBAADo
+NQAASZYBAAEDAAAIAAAAUJYBAAEBAADoNQAAV5YBAAEBAABpMgAAXpYBAAEBAADoNQAAZZYBAAEB
+AABZMgAAbJYBAAEBAADoNQAAc5YBAAEBAABRMgAAepYBAAEBAADsNQAAgZYBAAEBAACQLAAAiJYB
+AAEBAADsNQAAj5YBAAEBAADsNQAAlpYBAAEBAADoNQAAn5YBAAEBAAAmAAAAppYBAAEBAADoNQAA
+rZYBAAEBAACcLAAAtJYBAAEBAADoNQAAxJYBAAEDAAAQAAAA0ZYBAAEBAABIAAAA2JYBAAEBAABQ
+AAAA35YBAAEBAABIAAAA7JYBAAEBAAB1MgAA85YBAAEBAABRMgAA+pYBAAEBAADkNQAAAZcBAAEB
+AACcLAAAEpcBAAEBAABJMgAAG5cBAAEBAACQLAAAIpcBAAEBAABRMgAAKZcBAAEBAABRMgAAMJcB
+AAEBAABVMgAAN5cBAAEBAACYLAAAPpcBAAEBAABRMgAARZcBAAEBAACULAAATJcBAAEBAABVMgAA
+U5cBAAEBAAAuAAAAWpcBAAEDAAAUAAAAYZcBAAEBAAAuAAAAaJcBAAEBAACMLAAAb5cBAAEBAABQ
+AAAAdpcBAAEBAABIAAAAiJcBAAEBAAAaAQAAmpcBAAEBAAAJAgAAqZcBAAEBAABVMgAAsZcBAAEB
+AABRMgAAuZcBAAEBAACcLAAAwZcBAAEDAADsAAAAzpcBAAEBAABIAAAA1ZcBAAEBAABQAAAA3JcB
+AAEBAABIAAAA6ZcBAAEDAAAEAAAA8JcBAAEBAADwNQAA95cBAAEBAACgLAAA/pcBAAEBAADwNQAA
+BZgBAAEBAABRMgAADJgBAAEBAAD0NQAAE5gBAAEBAAB1MgAAGpgBAAEBAAD0NQAAIZgBAAEBAAAy
+AAAAKJgBAAEBAACcLAAAL5gBAAEBAAAyAAAANpgBAAEBAAD0NQAAU5gBAAEBAAD0NQAAW5gBAAEB
+AACcLAAAaJgBAAEBAADwNQAAcJgBAAEBAABIAAAAeJgBAAEBAAD8NQAAhZgBAAEBAAD4NQAAk5gB
+AAEBAACcLAAAoJgBAAEBAADwNQAAqJgBAAEBAABIAAAAsJgBAAEBAAAaNgAAvZgBAAEBAAD4NQAA
+xJgBAAEBAAAOAAAAy5gBAAEBAAD4NQAA4ZgBAAEBAAD4NQAA8JgBAAEBAAD4NQAA+JgBAAEGAAAA
+AAAA/5gBAAEBAABVMgAABpkBAAEBAABRMgAAEpkBAAEBAABQAAAAGZkBAAEBAABIAAAALZkBAAEB
+AAABAQAANpkBAAEBAAAtNgAAQ5kBAAEBAABIAAAAT5kBAAEBAABIAAAAXpkBAAEBAABIAAAAcJkB
+AAEBAAASAAAAd5kBAAEBAAD9AAAAhpkBAAEBAACQLAAAjpkBAAEQAAAAAAAAlZkBAAEBAAAuNgAA
+nJkBAAEBAAAKAAAAo5kBAAEBAAAuNgAAsJkBAAEBAAAyNgAAt5kBAAEBAABIAAAAwJkBAAEBAABI
+AAAAzZkBAAEBAABpMgAA1JkBAAEDAAAIAAAA4JkBAAEBAABMNgAA7JkBAAEDAAAIAAAA/pkBAAEB
+AAAaAQAAEJoBAAEBAABIAAAAHZoBAAEBAAASAAAAJJoBAAEBAADbCQAAMZoBAAEBAABQNgAAOJoB
+AAEBAABIAAAAQZoBAAEBAABIAAAAWJoBAAEBAAAaAQAAZ5oBAAEBAAABAgAAdJoBAAEBAABIAAAA
+gJoBAAEBAAAaAQAAjJoBAAEBAABFMgAAlZoBAAEDAADgAAAAnJoBAAEBAAB9AAAAqJoBAAEDAADg
+AAAAr5oBAAEBAAB9AAAAtpoBAAEBAACBAAAAx5oBAAEBAAAaAQAA15oBAAEBAAABAgAA7poBAAEB
+AABIAAAA+poBAAEBAABIAAAAB5sBAAEDAAAEAAAADpsBAAEBAACPNgAAFZsBAAEBAABZMgAAHJsB
+AAEBAACPNgAAKpsBAAEBAACPNgAAM5sBAAEDAAAEAAAAOpsBAAEBAACPNgAAQZsBAAEBAABdMgAA
+SJsBAAEBAACPNgAAVJsBAAEBAACPNgAAXZsBAAEBAABpMgAAZJsBAAEDAAAIAAAAcJsBAAEBAABM
+NgAAfJsBAAEBAAABAgAAiJsBAAEBAABMNgAAl5sBAAEBAACQLAAAn5sBAAEGAAAAAAAAq5sBAAEB
+AABQAAAAspsBAAEBAABIAAAAzZsBAAEBAABIAAAA1JsBAAEBAABQAAAA25sBAAEBAABIAAAA6psB
+AAEBAABIAAAA95sBAAEBAACJAAAA/psBAAEBAACFAAAAC5wBAAEBAAASAAAAEpwBAAEBAADtKAAA
+JpwBAAEBAABIAAAALZwBAAEBAABQAAAANJwBAAEBAABIAAAAQ5wBAAEBAABIAAAAXJwBAAEBAABI
+AAAAcpwBAAEBAABQAAAAeZwBAAEBAABIAAAAnJwBAAEBAABIAAAAsJwBAAEBAAABMgAAt5wBAAEB
+AACbNgAAvpwBAAEBAAABMgAAxZwBAAEBAACTNgAAzpwBAAEBAAABMgAA25wBAAEBAACXNgAA4pwB
+AAEBAACXNgAA6ZwBAAEBAACTNgAA8JwBAAEBAACTNgAA95wBAAEBAACfNgAA/pwBAAEBAACjNgAA
+BZ0BAAEBAACbNgAADJ0BAAEBAACjNgAAE50BAAEBAACfNgAAGp0BAAEBAACfNgAAIZ0BAAEBAACb
+NgAALp0BAAEBAACfNgAAN50BAAEBAACnNgAAPp0BAAEBAABGAAAARZ0BAAEBAACnNgAAUp0BAAEB
+AACfNgAAWZ0BAAEBAACTNgAAYJ0BAAEBAACbNgAAZ50BAAEBAACfNgAAbp0BAAEBAACfNgAAdZ0B
+AAEBAACbNgAAgp0BAAEBAACjNgAAiZ0BAAEBAACfNgAAlZ0BAAEBAAAOAAAAnJ0BAAEBAACoNgAA
+o50BAAEBAACJAAAAqp0BAAEBAACFAAAAt50BAAEBAACxNgAAvp0BAAEBAACoNgAAyp0BAAEBAAAS
+AAAA0Z0BAAEBAAC5AAAA3p0BAAEBAAC4NgAA5Z0BAAEBAACoNgAA7J0BAAEBAAAOAAAA850BAAEB
+AACoNgAAAp4BAAEBAACoNgAAD54BAAEBAAC8NgAAGJ4BAAEBAACoNgAAIJ4BAAEBAAA5AQAALZ4B
+AAEBAABIAAAANJ4BAAEBAABQAAAAO54BAAEBAABIAAAASp4BAAEBAABIAAAAWZ4BAAEBAAC8NgAA
+YZ4BAAEBAACoNgAAaZ4BAAEBAACTNgAAcZ4BAAEKAAAAAAAAeJ4BAAEBAAC8NgAAf54BAAEBAACT
+NgAAhp4BAAEBAAAOAAAAjZ4BAAEBAACTNgAAmJ4BAAEDAADgAAAApZ4BAAEBAABIAAAAsZ4BAAEB
+AABIAAAAwJ4BAAEBAABIAAAAzZ4BAAEDAADgAAAA1J4BAAEBAAB9AAAA4J4BAAEBAAAFAgAA754B
+AAEBAAB9AAAA/J4BAAEBAABIAAAACJ8BAAEBAABIAAAAF58BAAEBAABIAAAAJJ8BAAEBAACJAAAA
+K58BAAEBAACFAAAAOp8BAAEBAADINgAAQp8BAAEBAAAOAAAASp8BAAEBAADENgAAUp8BAAEIAAAA
+AAAAW58BAAEBAAAiAAAAY58BAAEBAADPNgAAa58BAAEBAADENgAAc58BAAEKAAAAAAAAep8BAAEB
+AAAiAAAAgZ8BAAEBAADENgAAiJ8BAAEBAADTNgAAj58BAAEBAADENgAAmJ8BAAEBAAAiAAAAn58B
+AAEBAADENgAApp8BAAEBAADXNgAArZ8BAAEBAADENgAAtp8BAAEBAAAiAAAAvZ8BAAEBAADENgAA
+xJ8BAAEBAAAiAAAAy58BAAEBAADENgAA0p8BAAEBAADbNgAA2Z8BAAEBAADENgAA4p8BAAEBAADI
+NgAA6Z8BAAEBAADANgAA8J8BAAEBAAAmAAAA958BAAEBAADANgAA/p8BAAEBAADfNgAABaABAAEB
+AADANgAADqABAAEBAAAsNwAAFaABAAEBAAAoNwAAHqABAAEBAAAoNwAAJqABAAEBAAAsNwAALqAB
+AAEBAAAkNwAANqABAAEKAAAAAAAAPaABAAEBAAAoNwAARKABAAEBAAAkNwAATaABAAEBAAA0NwAA
+WqABAAEBAAAwNwAAY6ABAAEBAAAwNwAAa6ABAAEBAAA0NwAAc6ABAAEBAAAkNwAAe6ABAAEKAAAA
+AAAAgqABAAEBAAAwNwAAiaABAAEBAAAkNwAAkKABAAEBAAA8NwAAl6ABAAEBAAA4NwAAnqABAAEB
+AAAwNwAApaABAAEBAAA4NwAArKABAAEBAAAoNwAAs6ABAAEBAAA4NwAAvKABAAEBAAA4NwAAxKAB
+AAEBAABANwAAzKABAAEBAAAkNwAA1KABAAEKAAAAAAAA26ABAAEBAABINwAA4qABAAEBAABENwAA
+66ABAAEBAAAiAAAA8qABAAEBAABENwAA+aABAAEBAABENwAAAKEBAAEBAABQNwAAB6EBAAEBAABM
+NwAADqEBAAEBAABENwAAF6EBAAEBAAAiAAAAHqEBAAEBAABENwAAJaEBAAEBAAAOAAAALKEBAAEB
+AABENwAANaEBAAEBAAAmAAAAPKEBAAEBAABENwAAQ6EBAAEBAAAOAAAASqEBAAEBAABENwAAU6EB
+AAEBAAAmAAAAWqEBAAEBAABENwAAYaEBAAEBAAAOAAAAaKEBAAEBAABENwAAcaEBAAEBAAAmAAAA
+eKEBAAEBAABENwAAf6EBAAEBAABUNwAAhqEBAAEBAABENwAAj6EBAAEBAAAiAAAAlqEBAAEBAABE
+NwAAnaEBAAEBAABYNwAApKEBAAEBAABcNwAAraEBAAEBAAAiAAAAtaEBAAEBAABgNwAAvaEBAAEB
+AABENwAAxaEBAAEKAAAAAAAAzqEBAAEBAAAiAAAA1qEBAAEBAABsNwAA3qEBAAEBAABkNwAA5qEB
+AAEKAAAAAAAA76EBAAEBAAAiAAAA96EBAAEBAADhAAAA/6EBAAEBAABwNwAAB6IBAAEKAAAAAAAA
+EKIBAAEBAAB4NwAAGKIBAAEBAAAOAAAAIKIBAAEBAAB0NwAAKKIBAAEIAAAAAAAAL6IBAAEBAADF
+AgAANqIBAAEBAADdAgAAPaIBAAEDAADgAAAARKIBAAEBAACNAwAAS6IBAAEDAADYAAAAUqIBAAEB
+AACVAwAAWaIBAAEBAACVAwAAYKIBAAEBAACtAgAAZ6IBAAEBAACVAwAAbqIBAAEBAADdAgAAdaIB
+AAEBAADdAgAAfKIBAAEBAAC5AgAAg6IBAAEDAADkAAAAiqIBAAEBAACpAgAAkaIBAAEBAAC5AgAA
+mKIBAAEBAAAKAQAAn6IBAAEBAAAKAQAApqIBAAEBAAC1AgAAraIBAAEDAADsAAAAtKIBAAEBAAC1
+AwAAu6IBAAEBAAC5AgAAwqIBAAEBAAC5AwAAyaIBAAEBAADdAgAA0KIBAAEBAADBAwAA16IBAAEB
+AACpAgAA3qIBAAEBAAC9AwAA5aIBAAEBAAC9AwAA7KIBAAEBAADdAgAA86IBAAEBAAB8NwAA+qIB
+AAEBAADhAgAAAaMBAAEBAACANwAACKMBAAEBAACpAAAAD6MBAAEBAADhAgAAFqMBAAEBAACtAAAA
+HaMBAAEBAAC5AwAAJKMBAAEBAAClAAAAK6MBAAEBAACZAAAAMqMBAAEBAAClAAAAOaMBAAEBAAAS
+AAAAQKMBAAEBAADtKAAATaMBAAEBAADdAgAAVKMBAAEBAADhAwAAW6MBAAEBAADdAgAAYqMBAAEB
+AADpAwAAaaMBAAEBAACENwAAcKMBAAEBAACINwAAd6MBAAEBAACMNwAAfqMBAAEBAACINwAAhaMB
+AAEBAADhAwAAjKMBAAEBAACINwAAlaMBAAEBAAAmAAAAnKMBAAEBAACINwAAo6MBAAEDAAD4AAAA
+qqMBAAEBAACUNwAAs6MBAAEBAADJAAAAu6MBAAEBAACQNwAAzaMBAAEBAABIAAAA1KMBAAEBAABQ
+AAAA26MBAAEBAABIAAAA6qMBAAEBAABIAAAA96MBAAEDAAD0AAAA/qMBAAEBAACUNwAAB6QBAAEB
+AACQNwAAD6QBAAEBAAAOAAAAF6QBAAEBAACUNwAAH6QBAAEIAAAAAAAAJqQBAAEDAAD4AAAALaQB
+AAEBAACINwAANqQBAAEBAADlAwAAPaQBAAEBAACtAgAARKQBAAEBAADlAwAAS6QBAAEBAADdAgAA
+UqQBAAEBAABQNwAAW6QBAAEBAACcNwAAYqQBAAEBAADhAgAAaaQBAAEBAACcNwAAcKQBAAEBAACt
+AAAAd6QBAAEBAACYNwAAfqQBAAEBAACxAAAAhaQBAAEBAACcNwAAjKQBAAEBAAC1AAAAk6QBAAEB
+AADhAwAAmqQBAAEBAAChAAAAoaQBAAEBAACgNwAAqKQBAAEBAAChAAAAr6QBAAEBAACZAAAAtqQB
+AAEBAAChAAAAvaQBAAEBAADhAwAAxKQBAAEBAACgNwAAy6QBAAEBAADhAwAA0qQBAAEBAACkNwAA
+2aQBAAEDAAD0AAAA4KQBAAEBAACoNwAA56QBAAEDAAD4AAAA7qQBAAEBAACoNwAA9aQBAAEBAACQ
+NwAA/KQBAAEBAACoNwAAA6UBAAEBAACoNwAACqUBAAEDAAD0AAAAF6UBAAEBAAAmAAAAHqUBAAEB
+AACoNwAAJaUBAAEBAACoNwAALqUBAAEBAACsNwAANaUBAAEBAACgNwAAPKUBAAEBAACsNwAAQ6UB
+AAEBAACsNwAASqUBAAEBAACoNwAAU6UBAAEBAAAmAAAAWqUBAAEBAACoNwAAYaUBAAEBAACoNwAA
+aqUBAAEBAACsNwAAcaUBAAEBAACkNwAAeKUBAAEBAACsNwAAf6UBAAEBAACsNwAAhqUBAAEBAACo
+NwAAj6UBAAEBAAAmAAAAlqUBAAEBAACoNwAAnaUBAAEBAAAmAAAApKUBAAEBAACoNwAAq6UBAAEB
+AAAmAAAAsqUBAAEBAACoNwAAuaUBAAEBAACoNwAAwqUBAAEBAACsNwAAyaUBAAEBAACgNwAA0KUB
+AAEBAACsNwAA16UBAAEBAACsNwAA3qUBAAEBAACoNwAA7KUBAAEDAAAAAQAA86UBAAEBAACwNwAA
++qUBAAEDAAAEAQAAAaYBAAEBAACwNwAACKYBAAEBAACwNwAAD6YBAAEDAAAAAQAAHKYBAAEBAAAm
+AAAAI6YBAAEBAACwNwAAKqYBAAEBAACwNwAAM6YBAAEBAACsNwAAOqYBAAEBAAAuAAAAQaYBAAEB
+AACsNwAATqYBAAEBAACkNwAAVaYBAAEBAACsNwAAXKYBAAEBAACsNwAAY6YBAAEBAACwNwAAc6YB
+AAEBAADJAgAAe6YBAAEBAADhAgAAiKYBAAEBAAC0NwAAj6YBAAEBAAC0NwAAlqYBAAEBAADhAgAA
+oqYBAAEBAAAWAAAAqaYBAAEBAAC5AAAAtqYBAAEDAADgAAAAvaYBAAEBAACjBAAAxKYBAAEDAADg
+AAAAy6YBAAEBAACnBAAA0qYBAAEBAACXBAAA2aYBAAEBAAC3BAAA4KYBAAEDAADgAAAA56YBAAEB
+AAC3BAAA7qYBAAEBAACbBAAA9aYBAAEBAAC7BAAA/qYBAAEDAADgAAAABqcBAAEBAACVAAAADqcB
+AAEBAAC3BAAAFqcBAAEBAAC7BAAAI6cBAAEBAAC7BAAAKqcBAAEBAAC7BAAAMacBAAEBAAC/BAAA
+OKcBAAEDAADsAAAAP6cBAAEBAADDBAAARqcBAAEDAADsAAAATacBAAEBAADHBAAAVqcBAAEBAAAi
+AAAAXqcBAAEBAAC8NwAAZqcBAAEBAAA9BAAAbqcBAAEKAAAAAAAAdacBAAEBAAC7BAAAfKcBAAEB
+AAAKAQAAg6cBAAEBAAAKAQAAiqcBAAEBAAAZBAAAkacBAAEBAAA5BAAAmKcBAAEBAAAdBAAAoacB
+AAEBAAAiAAAAqacBAAEBAADENwAAsacBAAEBAABFBAAAuacBAAEKAAAAAAAAwKcBAAEBAAC7BAAA
+x6cBAAEBAAClAAAAzqcBAAEBAAA1BAAA1acBAAEBAACpAAAA3KcBAAEBAAA5BAAA46cBAAEBAACt
+AAAA6qcBAAEBAAAWAAAA8acBAAEBAADtKAAAAKgBAAEBAAAiAAAACKgBAAEBAAAyAAAAEKgBAAEB
+AABJBAAAGKgBAAEKAAAAAAAAIagBAAEBAAAiAAAAKagBAAEBAADhAAAAMagBAAEBAABNBAAAOagB
+AAEKAAAAAAAAR6gBAAEBAAAiAAAAT6gBAAEBAAA6AAAAV6gBAAEBAABJBAAAX6gBAAEKAAAAAAAA
+aKgBAAEBAADINwAAcKgBAAEBAADhAAAAfagBAAEBAABIAAAAhqgBAAEBAADUNwAAjqgBAAEBAADM
+NwAAm6gBAAEBAABIAAAAoqgBAAEBAABQAAAAqagBAAEBAABIAAAAuKgBAAEBAABIAAAAx6gBAAEB
+AADhNwAAz6gBAAEBAADYNwAA3KgBAAEBAABIAAAA46gBAAEBAABQAAAA6qgBAAEBAABIAAAA+agB
+AAEBAABIAAAACKkBAAEBAAAiAAAAEKkBAAEBAAAyAAAAGKkBAAEBAABNBAAAIKkBAAEKAAAAAAAA
+J6kBAAEBAAAtBAAALqkBAAEBAAC3BAAANakBAAEBAADfBAAAPKkBAAEDAADsAAAAQ6kBAAEBAADf
+BAAASqkBAAEBAAC7BAAAUakBAAEBAADjBAAAWKkBAAEDAADsAAAAX6kBAAEBAADjBAAAZqkBAAEB
+AADjBAAAbakBAAEBAADnBAAAdqkBAAEBAABWBQAAg6kBAAEBAABaBQAAiqkBAAEBAABaBQAAkakB
+AAEBAABaBQAAmKkBAAEBAADrBAAAn6kBAAEBAABaBQAApqkBAAEBAADvBAAArakBAAEBAAAtBAAA
+tKkBAAEBAADfBAAAu6kBAAEBAAD/BAAAwqkBAAEBAABaBQAAyakBAAEBAAD/BAAA0KkBAAEBAADj
+BAAA16kBAAEBAAADBQAA3qkBAAEBAABaBQAA5akBAAEBAAADBQAA7KkBAAEBAADjBAAA86kBAAEB
+AADlNwAA+qkBAAEBAACVAAAAAaoBAAEBAADlNwAAHKoBAAEBAADlNwAAI6oBAAEBAAADBQAAKqoB
+AAEBAADpNwAAMaoBAAEBAACVAAAAOKoBAAEBAADpNwAAU6oBAAEBAADpNwAAWqoBAAEBAADlNwAA
+YaoBAAEBAADpNwAAbqoBAAEBAACVAAAAdaoBAAEBAAADBQAAfKoBAAEBAAADBQAAg6oBAAEBAAAH
+BQAAiqoBAAEDAAD4AAAAkaoBAAEBAAALBQAAmKoBAAEBAACmBQAAn6oBAAEBAAALBQAApqoBAAEB
+AAALBQAAraoBAAEBAAAPBQAAtKoBAAEBAAAtBAAAu6oBAAEBAAD/BAAAwqoBAAEBAAAfBQAAyaoB
+AAEBAAAfBQAA0KoBAAEBAADtNwAA16oBAAEBAAALBQAA3qoBAAEBAADtNwAA5aoBAAEBAAADBQAA
+7KoBAAEBAAAjBQAA86oBAAEBAAAjBQAA+qoBAAEBAAAnBQAAAasBAAEBAAAjBQAACKsBAAEBAABi
+BQAAD6sBAAEBAAALBQAAFqsBAAEBAABiBQAAHasBAAEBAAC2BQAAJKsBAAEBAAArBQAAK6sBAAED
+AAAEAQAAMqsBAAEBAACuBQAAOasBAAEBAAByBQAAQKsBAAEBAACuBQAAW6sBAAEBAACuBQAAYqsB
+AAEBAAAuAAAAaasBAAEBAADxNwAAcKsBAAEBAACuBQAAd6sBAAEBAADxNwAAhqsBAAEBAADFAAAA
+jqsBAAEBAAAmAAAAlqsBAAEBAAD1NwAAo6sBAAEBAABIAAAAqqsBAAEBAABQAAAAsasBAAEBAABI
+AAAAwKsBAAEBAABIAAAAzasBAAEBAADxNwAA2asBAAEDAAAUAAAA4KsBAAEBAAC+BQAA56sBAAEB
+AAC+BQAA7qsBAAEBAAArBQAA9asBAAEBAABiBQAA/KsBAAEBAABqBQAAA6wBAAEBAAC2BQAACqwB
+AAEBAABqBQAAEawBAAEBAAC+BQAAGKwBAAEBAABqBQAAH6wBAAEDAAAEAQAAJqwBAAEBAAArBQAA
+LawBAAEBAABqBQAANKwBAAEBAAB6BQAAO6wBAAEDAAAEAQAAQqwBAAEBAAB6BQAASawBAAEDAAAQ
+AQAAUKwBAAEBAACCBQAAV6wBAAEBAAArBQAAXqwBAAEBAADtNwAAZawBAAEDAAAQAQAAbKwBAAEB
+AAArBQAAc6wBAAEBAAB6BQAAeqwBAAEBAACKBQAAgawBAAEDAAAQAQAAiKwBAAEBAACKBQAAj6wB
+AAEBAACuBQAAlqwBAAEBAACSBQAAnawBAAEBAACaBQAApKwBAAEBAACSBQAArawBAAEBAACSBQAA
+tKwBAAEBAACSBQAAu6wBAAEBAAArBQAAwqwBAAEBAACKBQAAyawBAAEBAAD5NwAA0KwBAAEBAACS
+BQAA16wBAAEBAAD5NwAA3qwBAAEBAAAuAAAA5awBAAEBAAD9NwAA7KwBAAEBAACuBQAA86wBAAEB
+AAD9NwAAAq0BAAEBAADFAAAACq0BAAEBAAD9NwAAEq0BAAEBAAD5NwAAH60BAAEBAABIAAAAJq0B
+AAEBAABQAAAALa0BAAEBAABIAAAAPK0BAAEBAABIAAAASa0BAAEBAAD9NwAAUK0BAAEBAAAmAAAA
+V60BAAEBAAD5NwAAY60BAAEDAAAUAAAAaq0BAAEBAADCBQAAca0BAAEBAAC+BQAAeK0BAAEBAADC
+BQAAf60BAAEBAACuBQAAhq0BAAEBAADGBQAAja0BAAEBAAAmAAAAlK0BAAEBAADGBQAAna0BAAEB
+AADGBQAApq0BAAEBAADFAAAArq0BAAEBAADGBQAAwK0BAAEBAABIAAAAx60BAAEBAABQAAAAzq0B
+AAEBAABIAAAA3a0BAAEBAABIAAAA6q0BAAEDAAAQAAAA8a0BAAEBAAABOAAA+K0BAAEDAAAUAAAA
+/60BAAEBAAABOAAABq4BAAEBAAAuAAAADa4BAAEBAADxNwAAFK4BAAEBAACuBQAAG64BAAEBAADx
+NwAAKK4BAAEBAAAmAAAAL64BAAEBAAABOAAANq4BAAEBAAAuAAAAPa4BAAEBAAABOAAARq4BAAEB
+AADxNwAAUq4BAAEBAAA7BQAAWa4BAAEBAACxAAAAYK4BAAEBAAA/BQAAZ64BAAEBAAC1AAAAbq4B
+AAEBAABiBQAAda4BAAEBAAChAAAAfK4BAAEBAAArBQAAg64BAAEBAAChAAAAiq4BAAEBAADGBQAA
+ka4BAAEBAAArBQAAmK4BAAEBAAALBQAAn64BAAEBAAArBQAApq4BAAEBAAArBQAAra4BAAEBAAAv
+BQAAv64BAAEBAAAtBAAA264BAAEBAAA5BAAA7a4BAAEBAAAiAAAA/64BAAEBAABBBAAAB68BAAEK
+AAAAAAAAFa8BAAEBAAAiAAAAHa8BAAEBAAAJOAAAJa8BAAEBAAA9BAAALa8BAAEKAAAAAAAANK8B
+AAEBAAAOAAAAO68BAAEBAAAZBAAAQq8BAAEBAAAOAAAASa8BAAEBAAAdBAAAUq8BAAEBAAAiAAAA
+Wq8BAAEBAADhAAAAYq8BAAEBAABFBAAAaq8BAAEKAAAAAAAAqK8BAAEBAABIAAAAr68BAAEBAABQ
+AAAAtq8BAAEBAABIAAAAxa8BAAEBAABIAAAA0q8BAAEBAACXBAAA2a8BAAEBAAAROAAA4q8BAAEB
+AAAOAAAA768BAAEBAAAOAAAA968BAAEBAAAOAAAA/68BAAEBAAC9AAAAB7ABAAEBAAAROAAAD7AB
+AAEBAAAVOAAAF7ABAAEBAAANOAAAH7ABAAEBAAAyGwAALLABAAEBAABIAAAAM7ABAAEBAABQAAAA
+OrABAAEBAABIAAAASbABAAEBAABIAAAAVrABAAEDAADgAAAAXbABAAEBAAAROAAAZrABAAEBAAAO
+AAAAc7ABAAEBAAAOAAAAe7ABAAEBAAAOAAAAg7ABAAEBAADBAAAAi7ABAAEBAAAROAAAk7ABAAEB
+AAAZOAAAm7ABAAEBAAANOAAAo7ABAAEBAAA2GwAAsLABAAEBAABIAAAAt7ABAAEBAABQAAAAvrAB
+AAEBAABIAAAAzbABAAEBAABIAAAA2rABAAEDAADsAAAA4bABAAEBAAAROAAA+LABAAEBAAAFAgAA
+DLEBAAEBAAB9AAAAFLEBAAEBAAAROAAAHLEBAAEBAAAVOAAAKbEBAAEBAAA6GwAANrEBAAEBAABI
+AAAAPbEBAAEBAABQAAAARLEBAAEBAABIAAAAU7EBAAEBAABIAAAAd7EBAAEBAAAJAgAAmrEBAAEB
+AADdAAAAorEBAAEBAAAROAAAtLEBAAEBAAAdOAAAwbEBAAEBAABIAAAAyLEBAAEBAABQAAAAz7EB
+AAEBAABIAAAA3rEBAAEBAABIAAAA67EBAAEDAAA0AQAA8rEBAAEBAAAROAAAOLIBAAEBAAB5BAAA
+QbIBAAEBAAAiAAAAU7IBAAEBAACNBAAAW7IBAAEKAAAAAAAAZLIBAAEBAAAiAAAAdrIBAAEBAACP
+BAAAfrIBAAEKAAAAAAAAhbIBAAEBAABRBAAAirIBAAEBAACpAAAAlrIBAAEBAACtAAAAvrIBAAEB
+AAA5BAAAxbIBAAEBAAAhBAAAzrIBAAEBAAAiAAAA4LIBAAEBAABJBAAA6LIBAAEKAAAAAAAA8bIB
+AAEBAAAiAAAAA7MBAAEBAABNBAAAC7MBAAEKAAAAAAAAErMBAAEBAAA1BAAAGbMBAAEBAACpAAAA
+ILMBAAEBAAA5BAAAJ7MBAAEBAACtAAAALrMBAAEBAAByBQAAPrMBAAEBAACaBQAAWrMBAAEBAAAm
+AAAAdrMBAAEBAADJAAAAfrMBAAEBAAAROAAAhrMBAAEBAAAOAAAAjrMBAAEBAAAwOAAAlrMBAAEB
+AAAsOAAAo7MBAAEBAABIAAAAqrMBAAEBAABQAAAAsbMBAAEBAABIAAAAwLMBAAEBAABIAAAAzbMB
+AAEDAAD4AAAA1LMBAAEBAAAROAAA57MBAAEBAAAmAAAA77MBAAEBAABBNAAAAbQBAAEBAADRAAAA
+CbQBAAEBAAAROAAAEbQBAAEBAAAOAAAAGbQBAAEBAAA0OAAAIbQBAAEBAABDOAAALrQBAAEBAABI
+AAAANbQBAAEBAABQAAAAPLQBAAEBAABIAAAAS7QBAAEBAABIAAAAWLQBAAEDAAAEAQAAX7QBAAEB
+AAAROAAAcrQBAAEBAAAmAAAAerQBAAEBAABPNAAAjLQBAAEBAADVAAAAlLQBAAEBAAAROAAAnLQB
+AAEBAAAOAAAApLQBAAEBAAA0OAAArLQBAAEBAABSOAAAubQBAAEBAABIAAAAwLQBAAEBAABQAAAA
+x7QBAAEBAABIAAAA1rQBAAEBAABIAAAA47QBAAEDAAAcAQAA6rQBAAEBAAAROAAA87QBAAEBAAAO
+AAAA+7QBAAEBAAAeAAAAA7UBAAEBAAAOAAAAC7UBAAEBAAAOAAAAE7UBAAEBAADNAAAAG7UBAAEB
+AAAROAAAI7UBAAEBAAAOAAAAMLUBAAEBAABeOAAAPbUBAAEBAABIAAAARLUBAAEBAABQAAAAS7UB
+AAEBAABIAAAAWrUBAAEBAABIAAAAZ7UBAAEBAAD9AwAAbrUBAAEBAACdAAAAd7UBAAEDAAAoAQAA
+f7UBAAEDAAAkAQAAjLUBAAEDAAAsAAAAk7UBAAEBAAB6OAAAmrUBAAEDAAAoAAAAobUBAAEBAAB2
+OAAAqLUBAAEDAAAoAAAAr7UBAAEBAAB6OAAAtrUBAAEBAAB6OAAAvbUBAAEBAAB2OAAAyrUBAAEB
+AAB2OAAA07UBAAEBAABiOAAA3LUBAAEBAAByOAAA5LUBAAEBAABiOAAA8bUBAAEBAAAmAAAA+LUB
+AAEBAAB2OAAA/7UBAAEBAAB2OAAACLYBAAEBAABmOAAAD7YBAAEBAABmOAAAFrYBAAEBAABuOAAA
+HbYBAAEBAAAmAAAAJLYBAAEBAAB2OAAAK7YBAAEBAAB2OAAANLYBAAEBAABqOAAAO7YBAAEBAABq
+OAAARLYBAAEBAABqOAAAS7YBAAEBAABqOAAAUrYBAAEBAABuOAAAW7YBAAEBAAAmAAAAYrYBAAEB
+AAB2OAAAcLYBAAEBAADpAAAAeLYBAAEBAAA5AQAAgLYBAAEBAABcAAAAjbYBAAEBAAB+OAAAlLYB
+AAEBAABQAAAAm7YBAAEBAAB+OAAAqrYBAAEBAACpOAAAubYBAAEBAACtAAAAwbYBAAEBAACpAAAA
+ybYBAAEBAABYAAAA1rYBAAEBAACtOAAA3bYBAAEBAACxOAAA5LYBAAEBAACtOAAA+LYBAAEBAACN
+AAAA/7YBAAEBAACFAAAADLcBAAEBAAAWAAAAE7cBAAEBAAC5AAAAIrcBAAEBAADXBAAAKrcBAAEB
+AADTBAAAMrcBAAEBAABYAAAAP7cBAAEBAACtOAAARrcBAAEBAACxOAAATbcBAAEBAACtOAAAYbcB
+AAEBAADXBAAAaLcBAAEBAACtAAAAb7cBAAEBAAASAAAAdrcBAAEBAADtKAAAhbcBAAEBAAC1AAAA
+jbcBAAEBAACxAAAAlbcBAAEBAABYAAAAorcBAAEBAACtOAAAqbcBAAEBAACxOAAAsLcBAAEBAACt
+OAAAxLcBAAEBAAC1AAAAy7cBAAEBAACtAAAA1LcBAAEBAADVAAAA3LcBAAEBAAAOAAAA+LcBAAEB
+AAAOAAAAALgBAAEBAAAOAAAAErgBAAEBAADINwAAH7gBAAEBAABIAAAAJrgBAAEBAABQAAAALbgB
+AAEBAABIAAAAPLgBAAEBAABIAAAAS7gBAAEBAADVAAAAU7gBAAEBAAB6BQAAYLgBAAEBAAAeAAAA
+crgBAAEBAACCBQAAergBAAEBAADtNwAAjLgBAAEBAADUNwAAmbgBAAEBAABIAAAAoLgBAAEBAABQ
+AAAAp7gBAAEBAABIAAAAtrgBAAEBAABIAAAAxbgBAAEBAADVAAAAzbgBAAEBAAADBQAA1bgBAAEB
+AAAqAAAA3bgBAAEBAAAXBQAA77gBAAEBAAALBQAA97gBAAEBAAD/BAAACbkBAAEBAADhNwAAFrkB
+AAEBAABIAAAAHbkBAAEBAABQAAAAJLkBAAEBAABIAAAAM7kBAAEBAABIAAAAQrkBAAEDAAAcAQAA
+SrkBAAEDAAAYAQAAUrkBAAEBAABYAAAAX7kBAAEBAACtOAAAZrkBAAEBAACxOAAAbbkBAAEBAACt
+OAAAgbkBAAEDAAAcAQAAiLkBAAEBAACtAAAAm7kBAAEBAABIAAAAorkBAAEBAABQAAAAqbkBAAEB
+AABIAAAAuLkBAAEBAABIAAAAx7kBAAEDAAAUAAAAz7kBAAEDAAAQAAAA17kBAAEBAABYAAAA5LkB
+AAEBAACtOAAA67kBAAEBAACxOAAA8rkBAAEBAACtOAAABroBAAEDAAAUAAAADboBAAEBAACtAAAA
+G7oBAAEDAAAUAAAAI7oBAAEDAAAQAAAAK7oBAAEBAABYAAAAOLoBAAEBAACtOAAAP7oBAAEBAACx
+OAAARroBAAEBAACtOAAAWroBAAEDAAAUAAAAYboBAAEBAACtAAAAaroBAAEBAACdAAAAcroBAAEB
+AACtAAAAeroBAAEBAABYAAAAh7oBAAEBAACtOAAAjroBAAEBAACxOAAAlboBAAEBAACtOAAAqboB
+AAEBAACVAAAAsLoBAAEBAAC1OAAAt7oBAAEBAACNAAAAvroBAAEBAACFAAAAy7oBAAEBAAAyAAAA
+0roBAAEBAAC1OAAA27oBAAEBAAC1OAAA47oBAAEDAADgAAAA67oBAAEDAADcAAAA87oBAAEBAABY
+AAAAALsBAAEBAACtOAAAB7sBAAEBAACxOAAADrsBAAEBAACtOAAAJLsBAAEBAAC1OAAALLsBAAED
+AADsAAAANLsBAAEDAADoAAAAPLsBAAEBAABYAAAASbsBAAEBAACtOAAAULsBAAEBAACxOAAAV7sB
+AAEBAACtOAAAa7sBAAEBAAASAAAAcrsBAAEBAAC5AAAAhLsBAAEDAAA0AQAAk7sBAAEDAAA0AQAA
+m7sBAAEDAAAwAQAAo7sBAAEBAABYAAAAsLsBAAEBAACtOAAAt7sBAAEBAACxOAAAvrsBAAEBAACt
+OAAA1LsBAAEDAAD4AAAA3LsBAAEDAAD0AAAA5LsBAAEBAABYAAAA8bsBAAEBAACtOAAA+LsBAAEB
+AACxOAAA/7sBAAEBAACtOAAAFbwBAAEDAAAEAQAAHbwBAAEDAAAAAQAAJbwBAAEBAABYAAAAMrwB
+AAEBAACtOAAAObwBAAEBAACxOAAAQLwBAAEBAACtOAAAVrwBAAEDAAAcAQAAXrwBAAEDAAAYAQAA
+ZrwBAAEBAABYAAAAc7wBAAEBAACtOAAAerwBAAEBAACxOAAAgbwBAAEBAACtOAAAl7wBAAEDAAAQ
+AQAAn7wBAAEDAAAMAQAAp7wBAAEBAABYAAAAtLwBAAEBAACtOAAAu7wBAAEBAACxOAAAwrwBAAEB
+AACtOAAA27wBAAEBAAASAAAA4rwBAAEBAADtKAAA77wBAAEBAACJAAAA9rwBAAEBAACFAAAABb0B
+AAEDAADwAAAADb0BAAEDAAD4AAAAFb0BAAEDAAD0AAAAHb0BAAEBAABYAAAAKr0BAAEBAACtOAAA
+Mb0BAAEBAACxOAAAOL0BAAEBAACtOAAATr0BAAEDAAD8AAAAVr0BAAEDAAAEAQAAXr0BAAEDAAAA
+AQAAZr0BAAEBAABYAAAAc70BAAEBAACtOAAAer0BAAEBAACxOAAAgb0BAAEBAACtOAAAl70BAAED
+AAAIAQAAn70BAAEDAAAQAQAAp70BAAEDAAAMAQAAr70BAAEBAABYAAAAvL0BAAEBAACtOAAAw70B
+AAEBAACxOAAAyr0BAAEBAACtOAAA5b0BAAEBAABaBQAA7b0BAAEBAABWBQAA9b0BAAEBAABYAAAA
+Ar4BAAEBAACtOAAACb4BAAEBAACxOAAAEL4BAAEBAACtOAAAJr4BAAEDAAD4AAAALr4BAAEDAAD0
+AAAANr4BAAEBAABYAAAAQ74BAAEBAACtOAAASr4BAAEBAACxOAAAUb4BAAEBAACtOAAAZ74BAAEB
+AACmBQAAb74BAAEBAAC5OAAAd74BAAEBAABYAAAAhL4BAAEBAACtOAAAi74BAAEBAACxOAAAkr4B
+AAEBAACtOAAAqL4BAAEBAAC2BQAAsL4BAAEBAAC9OAAAuL4BAAEBAABYAAAAxb4BAAEBAACtOAAA
+zL4BAAEBAACxOAAA074BAAEBAACtOAAA574BAAEDAAAQAAAA7r4BAAEBAADBOAAA974BAAEBAAC+
+BQAA/74BAAEBAADBOAAAB78BAAEBAABYAAAAFL8BAAEBAACtOAAAG78BAAEBAACxOAAAIr8BAAEB
+AACtOAAANr8BAAEBAAC+BQAAPb8BAAEBAADBOAAARr8BAAEDAAAEAQAATr8BAAEDAAAAAQAAVr8B
+AAEBAABYAAAAY78BAAEBAACtOAAAar8BAAEBAACxOAAAcb8BAAEBAACtOAAAh78BAAEDAAAQAQAA
+j78BAAEDAAAMAQAAl78BAAEBAABYAAAApL8BAAEBAACtOAAAq78BAAEBAACxOAAAsr8BAAEBAACt
+OAAAyL8BAAEBAADCBQAA0L8BAAEBAADBOAAA2L8BAAEBAABYAAAA5b8BAAEBAACtOAAA7L8BAAEB
+AACxOAAA878BAAEBAACtOAAAB8ABAAEBAADCBQAADsABAAEBAADBOAAAF8ABAAEBAADGBQAAH8AB
+AAEBAADBOAAAJ8ABAAEBAABYAAAANMABAAEBAACtOAAAO8ABAAEBAACxOAAAQsABAAEBAACtOAAA
+YsABAAEBAAAuAAAAAC5kYXRhAC50ZXh0AC5kdG5iAHJlYWxsb2MAbWFsbG9jAABmcmVlAABzcHJp
+bnRmAG1lbXNldAAAZXhpdAAAbWVtY3B5AABvcGVuAABjbG9zZQBsc2VlawByZWFkAAB3cml0ZQBj
+aGRpcgBnZXRjd2QAAGZwcmludGYAc3RkZXJyAABnZXRlbnYAAGFjY2VzcwAATWVzc2FnZQBwbGF0
+Zm9ybV9mcmVlAGV4aXRNZXNzYWdlAHByZWZleHRyYQBwcmVmZXh0cmFfaGVscGVyAHByZWZzX3Nl
+dABjb21saW5lX3BhcnNlAGNvbWxpbmVfdmFsdWUAY29tbGluZV9wb2ludGVyAG1lbXJlYWxsb2MA
+bWVtX2FsbG9jAG1lbW9yeWFsbG9jAG1lbWFsbG9jAG1lbWNhbGxvYwBtZW1jbXAAc3RybGVuAHBy
+aW50YnVmAGVycm9yRGVmT3V0AG9wZW5maWxlAHdyaXRlZmlsZQB3cml0ZWZpbGVfZXJydmVyc2lv
+bgByZXF1aXJlZHBhZABwYWR3cml0ZQBwYWRkZWR3cml0ZQBwYWRzZWMAZmlsZXBhdGhkZWxpbXMA
+ZW5kb2Zmb2xkZXJzAGNoYW5nZWRpcgBmaWxlX2dldF9jb250ZW50X29mcwByZW1haW5kZXIAbmVn
+AGNsZWFybWVzc2FnZQBzYWZlTWVzc2FnZQBjb21wYXJlYWdhaW5zdG1heHBhdGgAZ2V0Y29udABz
+ZXRjb250AGdldHB0cmNvbnQAZ2V0Y29udFJlZwBzZXRjb250UmVnAGdldHB0cmNvbnRSZWcAZ2V0
+Y29udE1heABzZXRjb250TWF4AGdldGNvbnRhbmRjb250UmVnAGdldGNvbnRwbHVzUmVnAGdldHN0
+cnVjdGNvbnQAZ2V0c3RydWN0Y29udF9zY29wZQBjb25ncnVlbnRtb2R1bG9hdHNlZ21lbnRzAGxv
+Z190ZXJtAGFkZHRvbG9nX2hhbmRsZQBhZGR0b2xvZ19jaGFyAGFkZHRvbG9nX3dpdGhjaGFyX2hh
+bmRsZQBhZGR0b2xvZ193aXRoY2hhcl9leABhZGR0b2xvZ193aXRoY2hhcgBhZGR0b2xvZ193aXRo
+Y2hhcl9wYXJzZXMAYWRkdG9sb2dfd2l0aGNoYXJfZXhfYXR1bnVzZWQAYWRkdG9sb2dfd2l0aGNo
+YXJfZXhfYXR1bnVzZWRfaGFuZGxlAGFkZHRvbG9nX25hdHVyYWwAcmVzdG9yZV9jdXJzb3JzX29u
+b2sAd2Fybl9vcl9sb2cAdmFyc19jb3JlX3JlZgB2YXJzX2NvcmVfcmVmX3Njb3BlAHZhcnNjb3Jl
+AHZhcnNfaWdub3JlcmVmAHZhcnMAdmFyc19udW1iZXIAc2VhcmNoaW52YXJzAHNlYXJjaGludmFy
+c19zY29wZQBzZWFyY2hpbnZhcnNfc2NvcGVfd2FybgBzdHJpbnZhcnMAc3RyaW52YXJzX2lnbm9y
+ZXJlZgB1bmRlZmluZWR2YXJpYWJsZQB2YXJzdWZpeAB2YXJzdWZpeF9leABzdWZpeF90ZXN0AGNh
+c3RfdGVzdAB0ZW1wZGF0YXBhaXIAY2FzdF9yZXNvbHZlAGFkdmFuY2VjdXJzb3JzAHN0ZXBjdXJz
+b3JzAHN0cmlubWVtAHN0cmF0bWVtAG1lbV9zcGFjZXMAZmluZF93aGl0ZXNwYWNlT1Jjb21tZW50
+AGlzX3doaXRlc3BhY2UAd2Fybl9oaWRkZW5fd2hpdGVzcGFjZXMAd2Fybl9oaWRkZW5fd2hpdGVz
+cGFjZXNfYWZ0ZXIAc3BhY2VzX2hlbHBlcgBzcGFjZXMAc3RyaW5nc2F0bWVtc3BjAHN0cmF0bWVt
+c3BjAHF1b3Rlc2NhcGVkAHF1b3RpZW50aW5tZW0AcXVvdGlubWVtAG1heHBhdGh2ZXJpZgBxdW90
+ZXNfZm9yd2FyZAB2YWxpbm1lbXNlbnMAdmFsaW5tZW0AdmFsaW5tZW1fcGlwZXMAY29tbWFuZFN1
+YnR5cGVEZWNsYXJlX3RvX3R5cGVudW1iZXIAZ2V0Y29tbWFuZABzb3J0Y29tbWFuZHMAc29ydGFs
+bGNvbW1hbmRzAG1heHNlY3Rpb25jaGVjawBhZGR0b3NlYwBhZGR0b0NvZGVfc2V0X3Byb2dyYW1l
+bnRyeXBvaW50AGFkZHRvc2Vjc3RyAGlzX3ZhcmlhYmxlX2NoYXIAaXNfdmFyaWFibGVfY2hhcl9u
+b3RfbnVtZXJpYwBhZGRhcmVmAGFkZF9yZWZfdG9fc2VjAGFkZHRvc2Vjc3RyZXNjAG51bWVyaWMA
+bWVtdG9pbnQAaGV4bnIAbWVtdG9oZXgAbnVtYmVydG9pbnQAbnVtYmVyc2NvbnN0YW50cwBwYXJl
+bnRoZXNpc19zaXplAHBhcmVudGhlc2lzX2FsbF9zaXplAGR3dG9tZW0AY29uc3Rfc2VjdXJpdHkA
+c2hpZnRfcmlnaHQAc2hpZnRfbGVmdABvcGVyYXRpb24Ab3BlcmF0aW9uX2NvcmUAc2lnbm9wAG9u
+ZW9wZXJhdGlvbgBwYXJzZW9wZXJhdGlvbnMAZG91Ymxlb3BlcmF0aW9uAGFkZHRvbmFtZXNzaXpl
+ZABhZGR0b25hbWVzAGVsZmFkZHNlY19iYXNlAGVsZmFkZHNlY24AZWxmYWRkc2VjcwBlbGZhZGRz
+ZWMAZWxmYWRkc3Ryc2VjAGVsZmFkZHN5bQBlbGZhZGRzdHJzenN5bQBlbGZhZGRzdHJzeW0AYWRk
+cmVsX2Jhc2UAYWRkcmVsAGFkZGRpcmVjdHJlbF9iYXNlAGRhdGFfZ2V0X21hc2tiaXQAaW1wb3J0
+Yml0AHN0YWNrYml0AHN0YWNrcmVsYXRpdmViaXQAZGF0YXBvaW50Yml0AGV4cGFuZGJpdABleHBh
+bmRiaXRfd3JhcABwb2ludGJpdABzdWZmaXhiaXQAc3RhY2tfZ2V0X3JlbGF0aXZlAHJvbABmb3Jt
+bW9kcm0AdGFrZXdpdGhpbW0AZGF0YXRha2VfcmVsb2MAZGF0YXRha2UAYWRkZGlyZWN0cmVsX2Jh
+c2VfaW5wbGFjZQB3cml0ZXRha2UAd3JpdGV0YWtlX29mZnNldAB3cml0ZW9wZXJhdGlvbl90YWtl
+AHN1Zml4X3Rha2UAc3VmaXg2NAB3cml0ZW9wZXJhdGlvbl9vcAB3cml0ZW9wZXJhdGlvbgB3cml0
+ZW9wAHdyaXRlb3BlcmEAaW1tX3ZhbHVlcwBjYW5iZWltbV9vcmVycm9yAGZpbmRpbW0Ac2V0aW1t
+AHVuc2V0aW1tAGdldGltbQByZXNldGlzaW1tAGdldGlzaW1tAHN0b3JlZmlyc3RfaXNpbW0AcmVz
+dG9yZWZpcnN0X2lzaW1tAGdldGZpcnN0X2lzaW1tAHN3aXRjaGltbQB3cml0ZV9pbW0Ad3JpdGVf
+aW1tX3NpZ24Ad3JpdGVfaW1tX3RydW5jAHZlcmlmeV9zeW50YXhfZW5kAGFyZ19zaXplAGdldGFy
+ZwBnZXRhcmdfZG90AGdldGFyZ19jb2xvbgBnZXRhcmdfdGVzdGRvdAB0aGVyZV9pc19ub3RoaW5n
+X3RoZXJlAGdldF9zY29wZQBmdW5jdGlvbl9pbl9jb2RlAGlzX2NvbnN0YW50X3JlbGF0ZWRfYXNj
+aWkAYXJnAGFyZ2ZpbHRlcnMAYXJnZmlsdGVyc19oZWxwZXIAcHJlZml4X2Jvb2wAZ2V0cmV0dXJu
+AGdldGV4aXQAYXJndW1lbnRfcmV0dXJuAGFyZ3VtZW50AGNvbXBfb25lAHJhbXBfaW5kZXgAc3Rh
+Y2tmaWx0ZXIAZ2V0cHRycmFtcABncm93cmFtcABhZGRyYW1wAGdldHJhbXBfZWJ4cmVsAGVudHJ5
+c2NvcGUAZW50cnlzY29wZV92ZXJpZnlfY29kZQBhZGR0b2NvZGVfZGVjc3RhY2sAYWRkdG9jb2Rl
+Zm9yc3RhY2sAYWRkdG9jb2RlZm9yZGF0YQBsb2NhbFJlc29sdmUAZ2V0X2ZuX3BvcwB1bnJlc0xj
+AHVucmVzb2x2ZWRMb2NhbAB1bnJlc1JlbG9jAGVudHJ5dmFyc2ZucwBnZXRfaW1nX3ZkYXRhAGdl
+dF9kYXRhUmVnAGdldF9kYXRhU2l6ZQBnZXRfaW1nX3ZkYXRhX2RhdGFSZWcAZ2V0X2ltZ192ZGF0
+YV9kYXRhU2l6ZQBhZGR2YXJyZWZlcmVuY2UAYWRkdmFycmVmZXJlbmNlb3J1bnJlZgBnZXRzaWdu
+AGZuZGVjYXJncwB3cml0ZXZhcgBlbnVtY29tbWFzAHVucmVzb2x2ZWRjYWxsc2ZuAGZuaW1wX2V4
+aXN0cwBpc19mdW5jeF9zdWJ0eXBlAHBhcnNlZnVuY3Rpb24AZm5fdGV4dF9pbmZvAHByZXBhcmVf
+ZnVuY3Rpb25fY2FsbAB3cml0ZV9mdW5jdGlvbl9jYWxsAGdsb2JhbF9lcnJfcABnbG9iYWxfZXJy
+X3BCb29sAGlzX2xpbnV4X2VuZABlbnRyeXJhd190b3AAdHdvYXJncwB0d29hcmdzX2V4AGNvbXBf
+c2VjAGlzX2JpZ19pbW0Ad3JpdGVvcGVyAHdyaXRlb3BfcHJpbQB3cml0ZW9wX3Byb21vdGVzAGRp
+dl9wcmVwYXJlAGRlY2xhcmUAY29kZXJlZ3RvY29uZGxvb3AAY29uZGJlZ2lud3JpdGUAY29uZGJl
+Z2luAGNoZWNrY29uZGxvb3BjbG9zZQBjb25kanVtcABjb25kZW5kAGNvbmRlbmR0ZXN0AGNvbmRl
+bmR3cml0ZQBqdW1wYmFjawBjb25kaXRpb25zY29uZGVuZABwcmV2Y29uZABjbG9zZWlmb3BlbmVs
+c2UAY29udGludWUAYnJlYWsAb3BlbmxpYgBjbG9zZWxpYgB3YXJuaW5ncwBwYXJzZXByZWZlcmVu
+Y2VzAHBhcnNlcHJlZmVyZW5jZXNfYmFjawBwYXJzZXByZWZlcmVuY2VzX2JhY2tfaGVscGVyAGlu
+aXRwcmVmZXJlbmNlcwBzZXRwcmVmZXJlbmNlcwBjb25zdGFudHNfYm9vbABpbnBsYWNlX3JlbG9j
+AGlucGxhY2VfcmVsb2NfdW5yZXMAc2RfYXNfc3YAcF9pc19mb3JfNjQAaXNfZm9yXzY0AHBfbmVn
+X2lzX2Zvcl82NABzY29wZTY0X3AAc2NvcGU2NF9nZXQAc2NvcGU2NF9zZXQAaXNfZm9yXzY0X2lz
+X2ltcFhfb3JfZm5YX3BfZ2V0AGlzX2Zvcl82NF9pc19pbXBYX29yX2ZuWF9nZXQAaXNfZm9yXzY0
+X2lzX2ltcFhfb3JfZm5YX3NldABpc19mb3JfNjRfaXNfaW1wWF9vcl9mblhfc2V0X2ZvcmNlAG5y
+X29mX2FyZ3NfNjRuZWVkX3BfZ2V0AG5yX29mX2FyZ3NfNjRuZWVkX2NvdW50AHJleF93AHJleF93
+X2lmNjQAaXNfYmlnAGJpZ2JpdHMAc3RhY2s2NF9lbmxhcmdlAHN0YWNrNjRfYmFzZQB2YWw2NF9p
+bml0AHZhbDY0X3BfZ2V0AGNvbnZkYXRhAGZ1bmN0aW9uX2NhbGxfNjRmbQBmdW5jdGlvbl9jYWxs
+XzY0ZgBmdW5jdGlvbl9jYWxsXzY0AGZ1bmN0aW9uX3N0YXJ0XzY0AGNhbGxleDY0X2NhbGwAcmVs
+b2M2NF9pbml0AHJlbG9jNjRfb2Zmc2V0AHJlbG9jNjRfYW50ZQByZWxvYzY0X21pZAByZWxvYzY0
+X3Bvc3RfYmFzZV9leHRlbnNpb24AcmVsb2M2NF9wb3N0X2Jhc2UAcmVsb2M2NF9wb3N0AGFsaWdu
+X2FsbG9jAGFsaWduX2ZyZWUAc3RhY2tfYWxpZ24AcHJlZl9jYWxsX2FsaWduAGFsaWduX2FudGUA
+YWxpZ25fcmVzb2x2ZQBhbGlnbl9wdHlwZQBhbGlnbl90eXBlAGFsaWduX2VudHJ5c2NvcGUAb2Zm
+c2V0b2ZmaWxlX3ZhbHVlAGluY2x1ZGUAaW5jbHVkZV9zZWNfc2tpcABkYXRhYXNzaWduAHVuZGVm
+aW5lZHZhcl9mbgBnZXRfZnVuY3Rpb25fdmFsdWUAZ2V0X2Z1bmN0aW9uX3ZhbHVlcwBnZXRfcmVz
+ZXJ2ZV9zaXplAHNldF9yZXNlcnZlAGVudW1iYWdzAGVudW1iYWdzX2FsbG9jAGVudW1iYWdzX2Zy
+ZWUAZnJlZWNsb3NlAG1zZ2VycmV4aXQAZXJyZXhpdABlcnJvcmV4aXQAaW1wb3J0X2xlYWRpbmdf
+dW5kZXJzY29yZQBvdmVycmlkZV9jb20Ac2NvcGVzX2ZyZWUAc2NvcGVzX2FsbG9jAHNjb3Blc19n
+ZXRfc2NvcGUAc2NvcGVzX3N0b3JlAHNjb3Blc19zZWFyY2hpbnZhcnMAc2NvcGVzX3N0b3JlX2Ns
+YXNzAHNjb3Blc19nZXRfY2xhc3NfZGF0YQBkZWJ1Z19saW5lcwBhZGR0b2RlYnVnX3dpdGhjaGFy
+AGNvbW1hbmRfc3RhcnQAbWFpbgAuc3ltdGFiAC5yZWxhLmRhdGEALnJlbGEudGV4dAAuc3RydGFi
+AA==
--- ocompiler-1.orig/src/windows/files/platform.s
+++ ocompiler-1/src/windows/files/platform.s
@@ -23,7 +23,7 @@ function wide_to_ansi(ss in)
 	ss out
 	set out in
 	dec out
-	chars n=0;chars x#1
+	char n=0;char x#1
 	while 0==0
 		inc out
 		set x in#
--- ocompiler-1.orig/src/windows/files/winend.s
+++ ocompiler-1/src/windows/files/winend.s
@@ -14,9 +14,9 @@ If openfilenamemethod==true
 	Mult SectoMil MillisecperSec
 	Sub timeatend SectoMil
 	Const sizeofouttime=100
-	Chars outtime#sizeofouttime
+	Char outtime#sizeofouttime
 	Str ptrouttime^outtime
-	Chars outtimeformat="Done. %u.%u seconds"
+	Char outtimeformat="Done. %u.%u seconds"
 	Str ptrouttimeformat^outtimeformat
 
 	Call sprintf(ptrouttime,ptrouttimeformat,seconds,timeatend)
--- ocompiler-1.orig/src/windows/files/wingetfile/getfilefromopenfilename/lpstrFilter.s
+++ ocompiler-1/src/windows/files/wingetfile/getfilefromopenfilename/lpstrFilter.s
@@ -1,10 +1,10 @@
 
 
-Chars allfiles="All Files (*.*)"
+Char allfiles="All Files (*.*)"
 Str ptrallfiles^allfiles
-Chars filter2="*.*"
+Char filter2="*.*"
 Str ptrfilter2^filter2
-chars nullstr=""
+char nullstr=""
 
 Data ofnfiltersize#1
 Data str1sz#1
