Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+6) xenial; urgency=medium
 .
   * 64 sign extensions
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-08-05

--- ocompiler-1.orig/src/files/functions/64/bit.s
+++ ocompiler-1/src/files/functions/64/bit.s
@@ -164,6 +164,13 @@ endfunction
 function val64_p_get()
 	data x#1;return #x
 endfunction
+function val64_if()
+	sd b;setcall b is_for_64()
+	if b==(TRUE)
+		sd p;setcall p val64_p_get()
+		set p# (val64_willbe)
+	endif
+endfunction
 
 function convdata(sd type,sd dest)
 	if type==(convdata_total)
--- ocompiler-1.orig/src/files/functions/64/reloc.s
+++ ocompiler-1/src/files/functions/64/reloc.s
@@ -27,17 +27,23 @@ function reloc64_ante()
 	return (noerror)
 endfunction
 #er
-function reloc64_post_base(sd struct)
+function reloc64_post_base_extension(sd struct,sd fill)
 	sd a%p_elf64_r_info_type
 	if a#==(R_X86_64_64)
 		sd err
-		sd null=0
-		SetCall err addtosec(#null,(dwsz),struct)
+		#extension is for example -1 at sd=const, mostly are 0
+		SetCall err addtosec(#fill,(dwsz),struct)
 		return err
 	endif
 	return (noerror)
 endfunction
 #er
+function reloc64_post_base(sd struct)
+	sd err
+	setcall err reloc64_post_base_extension(struct,(NULL))
+	return err
+endfunction
+#er
 function reloc64_post()
 	sd ptrcodesec%ptrcodesec
 	sd err
--- ocompiler-1.orig/src/files/functions/actions/argstwo.s
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -203,17 +203,19 @@ Function twoargs(data ptrcontent,data pt
 	If primcalltype==false
 		setcall imm getisimm()
 		if imm==true
-			chars immtake=0xB8
-			set opsec immtake
-			if divmul==(TRUE)
-				add opsec 1
-			elseif subtype==(cCALLEX)
-				add opsec 1
-			endelseif
-			SetCall errnr write_imm(dataargsec,opsec)
+			#chars immtake=0xB8
+			#set opsec immtake
+			#if divmul==(TRUE)
+			#	add opsec 1
+			#elseif subtype==(cCALLEX)
+			#	add opsec 1
+			#endelseif
+			SetCall errnr write_imm_sign(dataargsec,regopcode)
 		else
 			if p_prefix#==(FALSE)
-				SetCall errnr writeop(dataargsec,opsec,intchar,sufixsec,regopcode,lowsec)
+				sd comp_at_bigs
+				setcall comp_at_bigs comp_sec(lowsec,dataargprim,sufixprim,dataargsec,sufixsec,sameimportant)
+				setcall errnr writeop_promotes(dataargsec,opsec,intchar,sufixsec,regopcode,lowsec,comp_at_bigs)
 			else
 			#only take at prefix on regcode
 				call writeoperation_take(#errnr,dataargsec,sufixsec,regopcode,lowsec)
@@ -246,7 +248,7 @@ Function twoargs(data ptrcontent,data pt
 	if imm==true
 		#first argument imm are comparations
 		#first value is imm, or second value is imm (switched)
-		SetCall errnr write_imm(dataargprim,(0xb8+ecxregnumber))
+		SetCall errnr write_imm_sign(dataargprim,(ecxregnumber)) #0xb8+
 	else
 		SetCall errnr writeop_prim(dataargprim,opprim,sufixprim,lowprim,sameimportant,lowsec)
 	endelse
@@ -403,12 +405,41 @@ Function twoargs(data ptrcontent,data pt
 	Return errnr
 EndFunction
 
+#-1 normal, 0 unpromote, 1 sign extend
+function comp_sec(sd lowsec,sd dataargprim,sd sufixprim,sd dataargsec,sd sufixsec,sd sameimportant)
+	if lowsec==(FALSE)
+		sd prim;setcall prim is_big(dataargprim,sufixprim)
+		sd sec;setcall sec is_big(dataargsec,sufixsec)
+		if prim!=sec
+			if sec==(TRUE)
+				#first is low/medium, don't promote the big second
+				return 0
+			elseif sameimportant==(TRUE)
+				#first is big, second is medium, keep sign for second
+				return 1
+			endelseif
+		endif
+	endif
+	return -1
+endfunction
+
+function writeoper(sd takeindex,sd location,sd sufix)
+	sd err
+	setcall err writetake(takeindex,location)
+	If err==(noerror)
+		if sufix==(TRUE)
+			setcall err sufix_take(takeindex)
+		endif
+	endif
+	return err
+endfunction
+
 function writeop_prim(sd dataargprim,sd opprim,sd sufixprim,sd lowprim,sd sameimportant,sd lowsec)
 	sd err
 	if sameimportant==(FALSE)
 		if lowsec==(TRUE)
 			#this is and/or... at sd low not needing to write rex
-			call writeoperation_take(#err,dataargprim,sufixprim,(edxregnumber),lowprim)
+			setcall err writeoper((edxregnumber),dataargprim,sufixprim)
 			if err!=(noerror);return err;endif
 			setcall err writeoperation_op(opprim,(noregnumber),(eaxregnumber),(edxregnumber))
 			return err
@@ -418,6 +449,25 @@ function writeop_prim(sd dataargprim,sd
 	return err
 endfunction
 
+#err
+function writeop_promotes(sd dataarg,sd op,sd intchar,sd sufix,sd regopcode,sd low,sd comp_at_bigs)
+	sd err
+	if comp_at_bigs==-1
+		SetCall err writeop(dataarg,op,intchar,sufix,regopcode,low)
+	else #0 or 1
+		setcall err writeoper((edxregnumber),dataarg,sufix) #no val64 recordings
+		if err==(noerror)
+			if comp_at_bigs==1
+				# sd    data    must take signextended data at 64
+				set op (moveatprocthemem_sign)
+				call val64_if()
+			endif
+			setcall err writeoperation_op(op,(noregnumber),regopcode,(edxregnumber))
+		endif
+	endelse
+	return err
+endfunction
+
 function argmasks()
 	value a#5 #aligned(no casts at the time of write)
 	return #a
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.s
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -55,7 +55,7 @@ function writevar(data ptrvalue,data uni
 				If err!=noerr;Return err;EndIf
 			endif
 			call inplace_reloc(ptrvalue)
-			setcall err addtocodefordata(ptrvalue#,for_64)
+			setcall err addtocodefordata(ptrvalue#,for_64,(NULL))
 			return err
 		EndIf
 	endif
@@ -64,7 +64,14 @@ function writevar(data ptrvalue,data uni
 		setcall err addtocodeforstack(rightstackpointer,for_64)
 	else
 		#s=consts
-		setcall err addtocodefordata(ptrvalue#,for_64)
+		sd test=~0x7fFFffFF
+		and test ptrvalue#
+		if test==0
+			setcall err addtocodefordata(ptrvalue#,for_64,0)
+		else
+			#keep sign, for comparations
+			setcall err addtocodefordata(ptrvalue#,for_64,-1)
+		endelse
 	endelse
 	return err
 endfunction
--- ocompiler-1.orig/src/files/functions/argument/argument.s
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -41,17 +41,14 @@ function getexit(sv ptrptrcontinuation,s
 endfunction
 
 #err
-function argument_return(sd termswitch,ss pop,ss pimmop,sd pregprepare_bool,sv pptrcontinuation,sd psizeofcontinuation,sd pregopcode)
+function argument_return(sd termswitch,ss pop,sd pregprepare_bool,sv pptrcontinuation,sd psizeofcontinuation,sd pregopcode)
 	call setimm()
 	Set pop# (moveatprocthemem)
-	chars immtake=0xB8
-	set pimmop# immtake
 	Set pregprepare_bool# (TRUE)
 
 	if termswitch==(TRUE)
 		data ebxregnumber=ebxregnumber
 		set pregopcode# ebxregnumber
-		add pimmop# ebxregnumber
 		sd err
 		setcall err getexit(pptrcontinuation,psizeofcontinuation)
 		return err
@@ -74,12 +71,10 @@ Function argument(data ptrcontent,data p
 	Str ptrcontinuation#1
 	Data sizeofcontinuation#1
 
-	Data codeptr%ptrcodesec
+	vData codeptr%ptrcodesec
 	Data regopcode#1
 
 	Data err#1
-	Data noerr=noerror
-	chars immop#1
 
 	Set regprepare_bool false
 	Set sizeofcontinuation zero
@@ -90,8 +85,8 @@ Function argument(data ptrcontent,data p
 		If subtype==(cRETURN)
 			sd termswitch
 			setcall termswitch is_linux_end() #exit from linux term
-			setcall err argument_return(termswitch,#op,#immop,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
-			If err!=noerr
+			setcall err argument_return(termswitch,#op,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
+			If err!=(noerror)
 				Return err
 			EndIf
 		ElseIf subtype==(cNOT)
@@ -122,8 +117,8 @@ Function argument(data ptrcontent,data p
 			set ptrcontinuation #incs_sz
 			set sizeofcontinuation (bsz)
 		ElseIf subtype==(cEXIT)
-			setcall err argument_return((TRUE),#op,#immop,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
-			If err!=noerr
+			setcall err argument_return((TRUE),#op,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
+			If err!=(noerror)
 				Return err
 			EndIf
 		ElseIf subtype==(cNEG)
@@ -143,8 +138,6 @@ Function argument(data ptrcontent,data p
 	Else
 	#push imm prepare test
 		call setimm()
-		chars immpush=0x68
-		set immop immpush
 	EndElse
 
 	Data lowbyte#1
@@ -155,7 +148,7 @@ Function argument(data ptrcontent,data p
 	Data ptrsufix^sufix
 
 	SetCall err arg(ptrcontent,ptrsize,ptrdataarg,ptrlowbyte,ptrsufix,forwardORcallsens)
-	If err!=noerr
+	If err!=(noerror)
 		Return err
 	EndIf
 
@@ -198,14 +191,20 @@ Function argument(data ptrcontent,data p
 				Set intchar regopcode
 			EndIf
 		EndIf
-		SetCall err writeop(dataarg,op,intchar,sufix,regopcode,lowbyte)
+		sd comp_at_bigs;setcall comp_at_bigs comp_one(lowbyte,dataarg,sufix,op)
+		setcall err writeop_promotes(dataarg,op,intchar,sufix,regopcode,lowbyte,comp_at_bigs)
 		call restore_argmask() #before this there is no err!=noerr: it is not a must, only less space
 	Else
-	#imm push/return/exit
-		set op immop
-		setcall err write_imm(dataarg,op)
+	#imm
+		If forwardORcallsens!=forward
+		#push
+			setcall err write_imm(dataarg,(0x68))
+		else
+		#return/exit
+			setcall err write_imm_sign(dataarg,regopcode)
+		endelse
 	EndElse
-	If err!=noerr
+	If err!=(noerror)
 		Return err
 	EndIf
 	If sizeofcontinuation!=zero
@@ -213,5 +212,39 @@ Function argument(data ptrcontent,data p
 		SetCall err addtosec(ptrcontinuation,sizeofcontinuation,codeptr)
 		return err
 	EndIf
-	Return noerr
+	Return (noerror)
+endfunction
+
+#same as comp_sec
+function comp_one(sd low,sd dataarg,sd sufix,sd op)
+	if op==(moveatprocthemem)
+		if low==(FALSE)
+			sd p;setcall p prefix_bool() #can't touch functions
+			if p#==0
+				sd big;setcall big is_big(dataarg,sufix)
+				if big==(FALSE)
+					#is medium but with sign
+					return 1
+				endif
+			endif
+		endif
+	endif
+	return -1
+endfunction
+
+#er
+function write_imm_sign(sd dataarg,sd regopcode)
+	vData codeptr%ptrcodesec
+	sd err
+	setcall err rex_w_if64()
+	if err==(noerror)
+		chars movs_imm=0xc7
+		SetCall err addtosec(#movs_imm,1,codeptr)
+		if err==(noerror)
+			sd op
+			SetCall op formmodrm((RegReg),0,regopcode)
+			setcall err write_imm(dataarg,op)
+		endif
+	endif
+	return err
 endfunction
--- ocompiler-1.orig/src/files/functions/argument/comwrite.s
+++ ocompiler-1/src/files/functions/argument/comwrite.s
@@ -92,7 +92,7 @@ function writetake(sd takeindex,sd entry
 				if impbit==0
 					setcall errnr unresReloc(ptrextra)
 					If errnr!=(noerror);Return errnr;EndIf
-					setcall errnr inplace_reloc_unres(#take_loc)
+					setcall errnr inplace_reloc_unres(#take_loc,relocoff)
 					If errnr!=(noerror);Return errnr;EndIf
 				endif
 			endelse
@@ -123,7 +123,6 @@ endfunction
 #val64. is one call at this that will break val64 if not a return value
 Function writeoperation_take(sd p_errnr,sd location,sd sufix,sd takeindex,sd is_low)
 #last parameter is optional
-	Data ptrcodesec%ptrcodesec
 	Data errnr#1
 	Data noerr=noerror
 
@@ -165,13 +164,7 @@ Function writeoperation_take(sd p_errnr,
 				endif
 			endelse
 		endif
-		Chars newtake=moveatprocthemem
-		Chars newtakemodrm#1
-		Str ptrnewtake^newtake
-		Data sz2=bsz+bsz
-		setcall newtakemodrm formmodrm((mod_0),takeindex,takeindex)
-		SetCall errnr addtosec(ptrnewtake,sz2,ptrcodesec)
-		set p_errnr# errnr
+		setcall p_errnr# sufix_take(takeindex)
 	Else
 		if for_64==(TRUE)
 			setcall prefix prefix_bool()
@@ -185,6 +178,18 @@ Function writeoperation_take(sd p_errnr,
 	Return v_64
 EndFunction
 #er
+function sufix_take(sd takeindex)
+	Data ptrcodesec%ptrcodesec
+	sd err
+	Chars newtake=moveatprocthemem
+	Chars newtakemodrm#1
+	Str ptrnewtake^newtake
+	Data sz2=bsz+bsz
+	setcall newtakemodrm formmodrm((mod_0),takeindex,takeindex)
+	SetCall err addtosec(ptrnewtake,sz2,ptrcodesec)
+	return err
+endfunction
+#er
 Function writeoperation_op(sd operationopcode,sd regprepare,sd regopcode,sd takeindex)
 	Data ptrcodesec%ptrcodesec
 	Data errnr#1
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -281,12 +281,12 @@ function inplace_reloc(sd p_addend)
 	endif
 endfunction
 #er
-function inplace_reloc_unres(sd p)
+function inplace_reloc_unres(sd p,sd add)
 	sd p_inplace_reloc_pref%p_inplace_reloc_pref
 	if p_inplace_reloc_pref#!=(zero_reloc)
 		sd err
 		sd ptrcodesec%ptrcodesec
-		setcall err unresLc(1,ptrcodesec,0)
+		setcall err unresLc(add,ptrcodesec,0)
 		return err
 	endif
 	set p# (i386_obj_default_reloc)
--- ocompiler-1.orig/src/files/functions/stack/stack.s
+++ ocompiler-1/src/files/functions/stack/stack.s
@@ -144,7 +144,7 @@ function addtocodeforstack(sd rightstack
 	return err
 endfunction
 #er
-function addtocodefordata(sd value,sd for_64)
+function addtocodefordata(sd value,sd for_64,sd ext)
 	chars code=ateaximm
 	data val#1
 
@@ -153,7 +153,7 @@ function addtocodefordata(sd value,sd fo
 	data ptrcodesec%ptrcodesec
 	set val value
 	setcall err addtosec(#code,5,ptrcodesec);If err!=(noerror);Return err;EndIf
-	setcall err reloc64_post();If err!=(noerror);Return err;EndIf
+	setcall err reloc64_post_base_extension(ptrcodesec,ext);If err!=(noerror);Return err;EndIf
 
 	setcall err addtocode_decstack(for_64)
 	return err
--- ocompiler-1.orig/src/files/headers/asm.h
+++ ocompiler-1/src/files/headers/asm.h
@@ -22,6 +22,7 @@ const ateaximm=0xb8
 Const moveatmemtheproc=0x89
 Const moveatprocthemem=0x8b
 Const moveatregthemodrm=moveatprocthemem
+const moveatprocthemem_sign=0x63
 
 #mod,reg/opcode,r/m
 
