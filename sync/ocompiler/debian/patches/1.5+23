Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+23) xenial; urgency=medium
 .
   * divs optimization
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-08-13

--- ocompiler-1.orig/src/files/functions/64/align.s
+++ ocompiler-1/src/files/functions/64/align.s
@@ -170,7 +170,7 @@ function align_entryscope()
 		if type==(even_align)
 			#there are more even calls to align
 			#Jump short if not carry
-			set jump (0x73)
+			set jump (jnc_instruction)
 		else
 			#odd
 			#Jump short if carry
--- ocompiler-1.orig/src/files/functions/actions/argstwo.s
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -475,17 +475,17 @@ function div_prepare(sd low,sd big)
 	#bt rax,63;jc,;mov 0,edx;jmp,;mov -1,rdx
 	#In x64, any operation on a 32-bit register clears the top 32 bits of the corresponding 64-bit register too, so there's no need to use mov 0,rax (and xor rax, rax)
 		const div_prepare_high=!
-		chars high={REX_Operand_64,twobytesinstruction_byte1,bt_instruction,bt_atdiv,63,0x72,7,atedximm,0,0,0,0,jmp_rel8,7,REX_Operand_64,mov_imm_to_rm,regregmod|edxregnumber,-1,-1,-1,-1}
+		chars high={REX_Operand_64,twobytesinstruction_byte1,bt_instruction,bt_atdiv,63,jnc_instruction,9,REX_Operand_64,mov_imm_to_rm,regregmod|edxregnumber,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
 		SetCall errnr addtosec(#high,(!-div_prepare_high),codeptr)
 	elseif low==(TRUE)
 	#bt eax,15;jc,;mov ah,0;jmp,;mov ah,-1
 		const div_prepare_low=!
-		chars small={twobytesinstruction_byte1,bt_instruction,bt_atdiv,7,0x72,5,0xc6,regregmod|ahregnumber,0,jmp_rel8,3,0xc6,regregmod|ahregnumber,-1}
+		chars small={twobytesinstruction_byte1,bt_instruction,bt_atdiv,7,jnc_instruction,5,0xc6,regregmod|ahregnumber,-1,jmp_rel8,3,0xc6,regregmod|ahregnumber,0}
 		SetCall errnr addtosec(#small,(!-div_prepare_low),codeptr)
 	else
 	#bt eax,31;jc,;mov 0,edx;jmp,;mov -1,edx
 		const div_prepare_mediu=!
-		chars mediu={twobytesinstruction_byte1,bt_instruction,bt_atdiv,31,0x72,7,atedximm,0,0,0,0,jmp_rel8,5,atedximm,-1,-1,-1,-1}
+		chars mediu={twobytesinstruction_byte1,bt_instruction,bt_atdiv,31,jnc_instruction,7,atedximm,-1,-1,-1,-1,jmp_rel8,5,atedximm,0,0,0,0}
 		SetCall errnr addtosec(#mediu,(!-div_prepare_mediu),codeptr)
 	endelse
 	return errnr
--- ocompiler-1.orig/src/files/headers/asm.h
+++ ocompiler-1/src/files/headers/asm.h
@@ -17,6 +17,7 @@ const REX_R8_15=REX_default|REX_W|REX_R
 Const retcom=0xc3
 const intimm8=0xCD
 const jmp_rel8=0xeb
+const jnc_instruction=0x73
 
 const ateaximm=0xb8
 Const atedximm=0xba
