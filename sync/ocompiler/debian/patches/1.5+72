Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+72) xenial; urgency=medium
 .
   * less/greater at constants
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-02-26

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -301,15 +301,15 @@
 	</p>
 <br>
 	<p>
-	Operations can be performed at declarations with arithmetic (+,-,*,/,%,$) and bitwise (&,|,^,~,&lt;,&gt;) signs. - and ~ can prefix a number/constant.
+	Operations can be performed at declarations with arithmetic (+,-,*,/,%,$), bitwise (&,|,^,~,&lt;&lt;,&gt;&gt;) and logical (&lt;,&gt;) signs. - and ~ can prefix a number/constant.
 	<br>
 	Example:
 	<br>
 	<table class="code">
 	<tr><td>const a=1</td></tr>
-	<tr><td>#</td><td>add</td><td>sub</td><td>mul</td><td>div</td><td>rem</td><td>pow</td><td>and</td><td>or</td><td>xor</td><td>not</td><td>shl</td><td>shr</td><td>neg</td></tr>
-	<tr><td>chars *examples={</td><td>3+2,</td><td>6-4.</td><td>5*5,</td><td>32/10,</td><td>32/10,</td><td>3$2,</td><td>7&2,</td><td>5|2,</td><td>7^2,</td><td>~0,</td><td>2<2,</td><td>8>3,</td><td>-a}</td></tr>
-	<tr><td>#</td><td>5</td><td>2</td><td>25</td><td>3</td><td>2</td><td>9</td><td>2</td><td>7</td><td>5</td><td>0xff</td><td>8</td><td>1</td><td>-1</td></tr>
+	<tr><td>#</td>                <td>add</td> <td>sub</td> <td>mul</td> <td>div</td>   <td>rem</td>   <td>pow</td> <td>and</td> <td>or</td>  <td>xor</td> <td>shl</td> <td>shr</td> <td>less</td><td>greater</td><td>neg</td><td>not</td></tr>
+	<tr><td>chars *examples={</td><td>3+2,</td><td>6-4.</td><td>5*5,</td><td>32/10,</td><td>32/10,</td><td>3$2,</td><td>7&2,</td><td>5|2,</td><td>7^2,</td><td>2<2,</td><td>8>3,</td><td>2<3,</td><td>2>3,</td>   <td>-a</td> <td>~0}</td></tr>
+	<tr><td>#</td>                <td>5</td>   <td>2</td>   <td>25</td>  <td>3</td>     <td>2</td>     <td>9</td>   <td>2</td>   <td>7</td>   <td>5</td>   <td>8</td>   <td>1</td>   <td>1</td>   <td>0</td>      <td>-1</td> <td>0xff</td></tr>
 	</table>
 	<a class="code">
 	 const a=3*(1+2)<br>
--- ocompiler-1.orig/src/Makefile
+++ ocompiler-1/src/Makefile
@@ -12,6 +12,10 @@ ifndef OCOMP
 OCOMP=o
 endif
 
+ifndef syms
+syms=-s
+endif
+
 #OFLAGS=
 
 %.o: ${FULLOBJS}
@@ -25,7 +29,6 @@ endif
 	fi; \
 	mv ${FULLOBJO} . \
 
-syms =-s
 _ATLDCOM = $(LD) ${syms} -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 -lc -entry main -o
 ATLDCOM = ${_ATLDCOM} $@
 
--- ocompiler-1.orig/src/files/functions/values/operations.s
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -9,8 +9,10 @@ Const orNumber=asciivbar
 Const xorNumber=asciicirc
 Const powNumber=asciidollar
 Const remNumber=asciipercent
-Const shlNumber=asciiless
-Const shrNumber=asciigreater
+Const lessNumber=asciiless
+Const greaterNumber=asciigreater
+Const shlNumber=asciicomma
+Const shrNumber=asciidot
 #asciiminus and asciinot for one arg
 
 #err
@@ -18,6 +20,7 @@ function const_security(sd item)
 	#2$31 is last one
 	#1 shl 63 is last one
 	#maximum first overflow, ok
+	#why not 32 or 33? this check only stops evil big numbers
 	sd maximum=qwsz*8-1
 	if item#>maximum
 		str err="Overflow at constants."
@@ -136,8 +139,7 @@ function operation_core(sd inoutvalue,sd
 			SetCall errptr shift_left(#currentitem,newitem)
 		endelse
 		If errptr!=(noerror);return errptr;endif
-	Else
-	#If number==(shrNumber)
+	ElseIf number==(shrNumber)
 		if newitem<0
 			neg newitem
 			SetCall errptr shift_left(#currentitem,newitem)
@@ -145,6 +147,19 @@ function operation_core(sd inoutvalue,sd
 			SetCall errptr shift_right(#currentitem,newitem)
 		endelse
 		If errptr!=(noerror);return errptr;endif
+	ElseIf number==(lessNumber)
+		if currentitem<newitem
+			set currentitem (TRUE)
+		else
+			set currentitem (FALSE)
+		endelse
+	Else
+	#If number==(greaterNumber)
+		if currentitem>newitem
+			set currentitem (TRUE)
+		else
+			set currentitem (FALSE)
+		endelse
 	EndElse
 
 	Set inoutvalue# currentitem
@@ -165,8 +180,8 @@ Function signop(chars byte,sd outval)
 	ElseIf byte==(xorNumber)
 	ElseIf byte==(powNumber)
 	ElseIf byte==(remNumber)
-	ElseIf byte==(shlNumber)
-	ElseIf byte==(shrNumber)
+	ElseIf byte==(lessNumber)
+	ElseIf byte==(greaterNumber)
 	Else
 		return false
 	EndElse
@@ -227,7 +242,8 @@ Function parseoperations(sd ptrcontent,s
 				If errptr!=noerr
 					Return errptr
 				EndIf
-				Set number nr
+				call doubleoperation(pnr,#content,end)
+				set number nr
 				Set bool true
 			EndIf
 		elseif content#==(asciiparenthesisstart)
@@ -269,3 +285,30 @@ Function parseoperations(sd ptrcontent,s
 	Call advancecursors(ptrcontent,ptrsize,sz)
 	Return noerr
 EndFunction
+
+function doubleoperation(ss pnr,sv pcontent,sd end)
+	sd nr;set nr pnr#
+	if nr!=(lessNumber)
+		if nr!=(greaterNumber)
+			ret
+		endif
+	endif
+	ss content;set content pcontent#
+	inc content
+	if content==end
+		ret  #error is catched how was before
+	endif
+	if content#==(lessNumber)
+		if nr==(lessNumber)
+			set pnr# (shlNumber)
+			inc pcontent#
+			ret
+		endif
+	endif
+	if content#==(greaterNumber)
+		if nr==(greaterNumber)
+			set pnr# (shrNumber)
+			inc pcontent#
+		endif
+	endif
+endfunction
--- ocompiler-1.orig/src/files/headers/ascii.h
+++ ocompiler-1/src/files/headers/ascii.h
@@ -15,7 +15,7 @@ Const asciiparenthesisstart=0x28
 Const asciiparenthesisend=0x29
 Const asciiast=0x2A
 Const asciiplus=0x2B
-#2c comma
+Const asciicomma=0x2C
 Const asciiminus=0x2D
 Const asciidot=0x2E
 Const asciislash=0x2F
