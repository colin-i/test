Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-4.2) bionic; urgency=medium
 .
   * fixes
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-11-20

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -4,6 +4,7 @@
 	.code
 	{
 		font-family:'courier';
+		font-style:italic;
 		display:block;
 		margin-top:10px;
 		margin-bottom:10px;
@@ -248,20 +249,16 @@
 	</p>
 <br>
 	<p>
-	Operations can be performed at declarations with arithmetic (+,-,*,/,$) and bitwise (&,|,^,~) signs. - and ~ can prefix a number/constant.
+	Operations can be performed at declarations with arithmetic (+,-,*,/,%,$) and bitwise (&,|,^,~,<,>) signs. - and ~ can prefix a number/constant.
 	<br>
 	Example:
 	<br>
-	<a class="code">
-        Const Apples=3<br>
-        Const Pears=4<br>
-        Data Fruits=Apples+Pears<br>
-        Const Bananas=5<br>
-        Data FruitsStore={Apples,Pears+Bananas-2}<br>
-        Const value1=3*2<br>
-        Const value2=16/8<br>
-        Data variable=value1^value2<br>
-        #The result will be 4</a>
+	<table class="code">
+	<tr><td>const a=1</td></tr>
+	<tr><td>#</td><td>add</td><td>sub</td><td>mul</td><td>div</td><td>rem</td><td>pow</td><td>and</td><td>or</td><td>xor</td><td>not</td><td>shl</td><td>shr</td><td>neg</td></tr>
+	<tr><td>chars *examples={</td><td>3+2,</td><td>6-4.</td><td>5*5,</td><td>32/10,</td><td>32/10,</td><td>3$2,</td><td>7&2,</td><td>5|2,</td><td>7^2,</td><td>~0,</td><td>2<2,</td><td>8>3,</td><td>-a}</td></tr>
+	<tr><td>#</td><td>5</td><td>2</td><td>25</td><td>3</td><td>2</td><td>9</td><td>2</td><td>7</td><td>5</td><td>0xff</td><td>8</td><td>1</td><td>-1</td></tr>
+	</table>
 	</p>
 
 	<p>
--- ocompiler-1.orig/src/files/functions/64bit.s
+++ ocompiler-1/src/files/functions/64bit.s
@@ -147,20 +147,14 @@ endfunction
 #setx
 
 function val64_phase_0()
-	sd p;setcall p val64_p_get();set p# 0
-endfunction
-function val64_phase_1()
-	sd b;setcall b is_for_64()
-	if b==(TRUE)
-		sd p;setcall p val64_p_get();set p# (val64_willbe)
-	endif
+	sd p;setcall p val64_p_get();set p# (val64_no)
 endfunction
 #er
 function val64_phase_3()
 	sd p;setcall p val64_p_get()
-	if p#==2
+	if p#==(val64_willbe)
 		sd er;call rex_w(#er);if er!=(noerror);return er;endif
-		set p# 0
+		set p# (val64_no)
 	endif
 	return (noerror)
 endfunction
--- ocompiler-1.orig/src/files/functions/actions/argstwo.s
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -145,8 +145,13 @@ Function twoargs(data ptrcontent,data pt
 
 	If ptrcondition==false
 		If lowprim==true
-			Dec opsec
 			Dec opprim
+			if subtype!=(cCALLEX)
+				#at callex they can be different
+				Dec opsec
+			elseif lowsec==true
+				dec opsec
+			endelseif
 		ElseIf lowsec==true
 			Dec opsec
 			If sameimportant==true
@@ -184,13 +189,14 @@ Function twoargs(data ptrcontent,data pt
 				Set sufixsec aux
 				call switchimm()
 				add compimmop two
+				#and for ss#
+				set aux lowprim;set lowprim lowsec;set lowsec aux
 			EndIf
 		EndElse
 	EndElse
 	
 	Data codeptr%ptrcodesec
 
-	sd is_sta
 	If primcalltype==false
 		setcall imm getisimm()
 		if imm==true
@@ -200,13 +206,9 @@ Function twoargs(data ptrcontent,data pt
 				add opsec 1
 			elseif subtype==(cCALLEX)
 				add opsec 1
-				setcall is_sta is_stack(dataargprim)
-				if is_sta!=(NULL)
-					call val64_phase_1()
-				endif
 			endelseif
 		endif
-		SetCall errnr writeop_immfilter(dataargsec,opsec,intchar,sufixsec,regopcode)
+		SetCall errnr writeop_immfilter(dataargsec,opsec,intchar,sufixsec,regopcode,lowsec)
 		If errnr!=noerr
 			Return errnr
 		EndIf
@@ -236,7 +238,7 @@ Function twoargs(data ptrcontent,data pt
 		set opprim immcomparationtake
 	endif
 
-	SetCall errnr writeop_immfilter(dataargprim,opprim,noreg,sufixprim,eaxreg)
+	SetCall errnr writeop_immfilter(dataargprim,opprim,noreg,sufixprim,eaxreg,lowprim)
 	If errnr!=noerr
 		Return errnr
 	EndIf
@@ -367,9 +369,9 @@ Function twoargs(data ptrcontent,data pt
 			setcall errnr addtosec(#storeex,2,codeptr)
 		else
 			if rem==(FALSE)
-				SetCall errnr writeop(dataargprim,storeex,noreg,sufixprim,eaxreg)
+				SetCall errnr writeop(dataargprim,storeex,noreg,sufixprim,eaxreg,lowprim)
 			else
-				SetCall errnr writeoperation(dataargprim,storeex,noreg,sufixprim,(edxregnumber),ecxreg)
+				SetCall errnr writeoperation(dataargprim,storeex,noreg,sufixprim,(edxregnumber),ecxreg,lowprim)
 			endelse
 		endelse
 		Return errnr
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -309,7 +309,7 @@ function write_function_call(sd ptrdata,
 		Chars callactionopcode={2}
 		Data eaxregnumber=eaxregnumber
 		call stack64_op_set()
-		SetCall err writeoperation(ptrdata,callaction,noreg,(FALSE),callactionopcode,eaxregnumber)
+		SetCall err writeoperation(ptrdata,callaction,noreg,(FALSE),callactionopcode,eaxregnumber)#last missing param is at sufix and at declare is not
 		If err!=(noerror)
 			Return err
 		EndIf
--- ocompiler-1.orig/src/files/functions/argument/argument.s
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -184,11 +184,11 @@ Function argument(data ptrcontent,data p
 	If lowbyte==true
 		Dec op
 		If integerreminder==true
-			Set intchar eaxreg
+			Set intchar regopcode
 		EndIf
 	EndIf
 	
-	SetCall err writeop_immfilter(dataarg,op,intchar,sufix,regopcode)
+	SetCall err writeop_immfilter(dataarg,op,intchar,sufix,regopcode,lowbyte)
 	If err!=noerr
 		Return err
 	EndIf
--- ocompiler-1.orig/src/files/functions/argument/comwrite.s
+++ ocompiler-1/src/files/functions/argument/comwrite.s
@@ -114,7 +114,8 @@ function writetake(sd takeindex,sd entry
 endfunction
 
 #er
-Function writeoperation(data location,chars operationopcode,data regprepare,data sufix,data regopcode,data takeindex)
+Function writeoperation(sd location,sd operationopcode,sd regprepare,sd sufix,sd regopcode,sd takeindex,sd is_low)
+#last parameter is optional
 	Data ptrcodesec%ptrcodesec
 	Data errnr#1
 	Data noerr=noerror
@@ -130,16 +131,23 @@ Function writeoperation(data location,ch
 	sd take64stack=FALSE;sd v64
 	sd stacktest;setcall stacktest is_stack(location)
 	if stacktest!=(NULL)
+		#p test
 		sd for_64;setcall for_64 is_for_64()
 		if for_64==(TRUE)
 			set take64stack (TRUE)
 			setcall v64 val64_p_get();set v64# (val64_willbe)
+			#rex if p
 		endif
+		#take on takeindex
 	endif
 	Data true=TRUE
 	If sufix==true
 		if take64stack==(TRUE)
 			call rex_w(#errnr);If errnr!=noerr;Return errnr;EndIf
+			if is_low==(TRUE)
+			#not ss, rex.w op r/m8 is ok but is useless
+				set v64# (val64_no)
+			endif
 		endif
 		Chars newtake=moveatprocthemem
 		Chars newtakemodrm#1
@@ -186,9 +194,9 @@ Function writeoperation(data location,ch
 EndFunction
 
 #er
-Function writeop(data location,chars operationopcode,data regprepare,data sufix,data regopcode)
+Function writeop(sd location,sd operationopcode,sd regprepare,sd sufix,sd regopcode,sd is_low)
 	Data err#1
 	Data edxregnumber=edxregnumber
-	SetCall err writeoperation(location,operationopcode,regprepare,sufix,regopcode,edxregnumber)
+	SetCall err writeoperation(location,operationopcode,regprepare,sufix,regopcode,edxregnumber,is_low)
 	Return err
 EndFunction
\ No newline at end of file
--- ocompiler-1.orig/src/files/functions/argument/imm.s
+++ ocompiler-1/src/files/functions/argument/imm.s
@@ -77,13 +77,13 @@ endfunction
 
 
 #er
-function writeop_immfilter(sd dataarg,sd op,sd intchar,sd sufix,sd regopcode)
+function writeop_immfilter(sd dataarg,sd op,sd intchar,sd sufix,sd regopcode,sd is_low)
 	sd isimm
 	setcall isimm getisimm()
 	data false=0
 	sd err
 	if isimm==false
-		setcall err writeop(dataarg,op,intchar,sufix,regopcode)
+		setcall err writeop(dataarg,op,intchar,sufix,regopcode,is_low)
 		return err
 	endif
 	chars immop#1
--- ocompiler-1.orig/src/files/functions/dataassign.s
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -216,7 +216,7 @@ Function dataassign(data ptrcontent,data
 					Data noreg=noregnumber
 					Call getcont(pointer_structure,ptrcontainer)
 					Add container offset
-					SetCall err writeop(container,op,noreg,false,eax)
+					SetCall err writeop(container,op,noreg,false,eax)#last missing param is at sufix and at declare is not
 					If err!=noerr
 						Return err
 					EndIf
--- ocompiler-1.orig/src/files/functions/values/operations.s
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -8,39 +8,38 @@ Const andNumber=4
 Const orNumber=5
 Const xorNumber=6
 Const powNumber=7
-#Const remNumber=8
-#Const shlNumber=9
-#Const shrNumber=10
+Const remNumber=8
+Const shlNumber=9
+Const shrNumber=10
 #asciiminus and asciinot for one arg
 
 function const_security(sd item)
 	#2$31 is last one
 	#1 shl 63 is last one
 	#maximum first overflow, ok
-	#data maximum=qwsz*8
-	data maximum=dwsz*8
+	data maximum=qwsz*8
 	if item>=maximum
 		call safeMessage("Overflow at constants.")
 		return maximum
 	endif
 	return item
 endfunction
-#function shift_right(sd a,sd n)
-#	setcall n const_security(n)
-#	while n>0
-#		dec n
-#		shr a
-#	endwhile
-#	return a
-#endfunction
-#function shift_left(sd a,sd n)
-#	setcall n const_security(n)
-#	while n>0
-#		dec n
-#		shl a
-#	endwhile
-#	return a
-#endfunction
+function shift_right(sd a,sd n)
+	setcall n const_security(n)
+	while n>0
+		dec n
+		shr a
+	endwhile
+	return a
+endfunction
+function shift_left(sd a,sd n)
+	setcall n const_security(n)
+	while n>0
+		dec n
+		shl a
+	endwhile
+	return a
+endfunction
 
 #err pointer
 Function operation(str content,data size,data inoutvalue,data number)
@@ -78,8 +77,7 @@ Function operation(str content,data size
 		Or currentitem newitem
 	ElseIf number==(xorNumber)
 		Xor currentitem newitem
-	Else
-	#If number==(powNumber)
+	ElseIf number==(powNumber)
 		if newitem<0
 			if currentitem==0
 				#is 1/(0 power n)
@@ -100,26 +98,26 @@ Function operation(str content,data size
 				dec newitem
 			endwhile
 		endelse
-	#ElseIf number==(remNumber)
-	#	If newitem==zero
-	#		Return ptrzerodiv
-	#	EndIf
-		#Rem currentitem newitem
-	#ElseIf number==(shlNumber)
-	#	if newitem<0
-	#		neg newitem
-	#		setcall currentitem shift_right(currentitem,newitem)
-	#	else
-	#		setcall currentitem shift_left(currentitem,newitem)
-	#	endelse
-	#Else
+	ElseIf number==(remNumber)
+		If newitem==zero
+			Return ptrzerodiv
+		EndIf
+		Rem currentitem newitem
+	ElseIf number==(shlNumber)
+		if newitem<0
+			neg newitem
+			setcall currentitem shift_right(currentitem,newitem)
+		else
+			setcall currentitem shift_left(currentitem,newitem)
+		endelse
+	Else
 	#If number==(shrNumber)
-	#	if newitem<0
-	#		neg newitem
-	#		setcall currentitem shift_left(currentitem,newitem)
-	#	else
-	#		setcall currentitem shift_right(currentitem,newitem)
-	#	endelse
+		if newitem<0
+			neg newitem
+			setcall currentitem shift_left(currentitem,newitem)
+		else
+			setcall currentitem shift_right(currentitem,newitem)
+		endelse
 	EndElse
 
 	Set inoutvalue# currentitem
@@ -130,46 +128,45 @@ EndFunction
 Function signop(chars byte,data outval)
 	Chars plus=asciiplus
 	Chars minus=asciiminus
-
 	Chars mult=asciiast
 	Chars div=asciislash
-	
 	Chars and=asciiand
 	Chars or=asciivbar
 	Chars xor=asciicirc
-	
 	Chars pow=asciidollar
+	Chars rem=asciipercent
+	Chars shl=asciiless
+	Chars shr=asciigreater
 
 	Data false=FALSE
 	Data true=TRUE
 
 	If byte==plus
 		Set outval# (addNumber)
-		Return true
 	ElseIf byte==minus
 		Set outval# (subNumber)
-		Return true
 	ElseIf byte==mult
 		Set outval# (mulNumber)
-		Return true
 	ElseIf byte==div
 		Set outval# (divNumber)
-		Return true
 	ElseIf byte==and
 		Set outval# (andNumber)
-		Return true
 	ElseIf byte==or
 		Set outval# (orNumber)
-		Return true
 	ElseIf byte==xor
 		Set outval# (xorNumber)
-		Return true
 	ElseIf byte==pow
 		Set outval# (powNumber)
-		Return true
-	EndElseIf
-	
-	Return false
+	ElseIf byte==rem
+		Set outval# (remNumber)
+	ElseIf byte==shl
+		Set outval# (shlNumber)
+	ElseIf byte==shr
+		Set outval# (shrNumber)
+	Else
+		return false
+	EndElse
+	Return true
 EndFunction
 
 #err
--- ocompiler-1.orig/src/files/headers/ascii.h
+++ ocompiler-1/src/files/headers/ascii.h
@@ -4,6 +4,7 @@
 Const asciiExclamationmark=0x21
 Const asciiNumber=0x23
 Const asciidollar=0x24
+Const asciipercent=0x25
 Const asciiand=0x26
 Const asciiparenthesisstart=0x28
 Const asciiast=0x2A
@@ -14,6 +15,8 @@ Const asciizero=0x30
 Const asciinine=0x39
 Const asciiColon=0x3A
 Const asciiSemicolon=0x3B
+Const asciiless=0x3C
+Const asciigreater=0x3E
 Const asciiaround=0x40
 Const asciiA=0x41
 Const asciiE=0x45
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -312,6 +312,7 @@ Const not_hexenum=0
 Const hexenum=1
 
 
+const val64_no=0
 const val64_willbe=2
 
 const ms_convention=4
