Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-4.23) bionic; urgency=medium
 .
   * fix and pref
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-01-24

--- ocompiler-1.orig/.ocompiler.txt
+++ ocompiler-1/.ocompiler.txt
@@ -43,11 +43,11 @@ function_name=0
 0 is No,use linux convention if ocompiler was compiled for linux,else use microsoft; 1 is Yes; 2 is No,and cross-compile
 conv_64=0
 
-11. Zeroset reserved data section declarations
+11. Zeroset reserved data section declarations.
 0 is No; 1 is Yes
 nul_res_pref=0
 
-12. SD as SV (old programs don't have sv and may be with 64 logic)
+12. SD as SV (old programs don't have sv and may be with 64 logic).
 0 is No; 1 is Yes
 sd_as_sv=0
 
@@ -61,4 +61,8 @@ reloc_64=1
 
 15. Remove leading underscore at IMPORT?
 0 is No; 1 is Yes
-underscore_pref=0
\ No newline at end of file
+underscore_pref=0
+
+16. RETURNs at main scope like EXIT.
+0 is No; 1 is Yes
+exit_end=0
\ No newline at end of file
--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -346,7 +346,7 @@
 	<br>
 	The return command is used to terminate the program or a function.
 	<br>
-	It returns the value. The asm value termination is <i>ret</i> (0xc3). To return <i>int 0x80</i>(0xcd,0x80;linux sys_exit;eax=1,ebx=return value) use <b>Exit</b>. If the scope is started with <b>EntryLinux</b> all returns from the main scope will use <i>exit code</i> at <i>return</i> commands.
+	It returns the value. The asm value termination is <i>ret</i> (0xc3). To return <i>int 0x80</i>(0xcd,0x80;linux sys_exit;eax=1,ebx=return value) use <b>Exit</b> or set exit_end preference to 1.
 	<br>
 	Example:
 	<br>
--- ocompiler-1.orig/src/files/actions/main/index/function.s
+++ ocompiler-1/src/files/actions/main/index/function.s
@@ -20,9 +20,6 @@ Else
 		Set objfnmask referencebit
 		if twoparse==1
 			set fnavailable two
-			If subtype==(cENTRYLINUX)
-				set el_b_p# (TRUE)
-			endif
 		endif
 	Else
 		Set objfnmask null
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.s
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -40,7 +40,6 @@ function writevar(data ptrvalue,data uni
 		return (noerror)
 	endif
 
-	sd for_64;setcall for_64 is_for_64()
 	if ptrobject#==1
 		If ptrrelocbool#==true
 			#code
@@ -53,9 +52,12 @@ function writevar(data ptrvalue,data uni
 			EndIf
 		EndIf
 	endif
+	sd for_64;setcall for_64 is_for_64()
 	if rightstackpointer!=(NULL)
 		setcall err addtocodeforstack(rightstackpointer,for_64)
 	else
+		#sd^data
+		call inplace_reloc(ptrvalue)
 		setcall err addtocodefordata(ptrvalue#,for_64)
 	endelse
 	return err
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -387,14 +387,10 @@ function global_err_pBool()
 	return #bool
 endfunction
 
-#p
-function entrylinux_bool_p()
-	data entrylinux_bool#1;return #entrylinux_bool
-endfunction
 #bool
 function is_linux_end()
-	sd entrylinux_bool_ptr;setcall entrylinux_bool_ptr entrylinux_bool_p()
-	return entrylinux_bool_ptr#
+	sd p_exit_end%p_exit_end
+	return p_exit_end#
 endfunction
 #er
 function entrylinux_top()
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -155,6 +155,7 @@ function initpreferences()
 	sd p_inplace_reloc_pref%p_inplace_reloc_pref
 	sd p_pref_reloc_64%p_pref_reloc_64
 	sd p_underscore_pref%p_underscore_pref
+	sd p_exit_end%p_exit_end
 
 	data true=TRUE
 	data false=FALSE
@@ -174,13 +175,14 @@ function initpreferences()
 	set p_inplace_reloc_pref# (addend_reloc)
 	set p_pref_reloc_64# true
 	set p_underscore_pref# false
+	set p_exit_end# false
 
 	#this is used also at arguments
 
 	sv q%nr_of_prefs_pointers_p
-	set q# ptrwarningsbool;incst q; set q# p_over_pref;incst q; set q# p_hidden_pref;incst q; set q# p_w_as_e;incst q; set q# ptrlogbool;incst q; set q# ptrcodeFnObj;incst q; set q# cb;incst q;           set q# ptrincludedir;incst q; set q# text_fn_info;incst q;    set q# conv_64;incst q;   set q# p_nul_res_pref;incst q; set q# sdsv_p;incst q;     set q# p_inplace_reloc_pref;incst q; set q# p_pref_reloc_64;incst q; set q# p_underscore_pref
+	set q# ptrwarningsbool;incst q; set q# p_over_pref;incst q; set q# p_hidden_pref;incst q; set q# p_w_as_e;incst q; set q# ptrlogbool;incst q; set q# ptrcodeFnObj;incst q; set q# cb;incst q;           set q# ptrincludedir;incst q; set q# text_fn_info;incst q;    set q# conv_64;incst q;   set q# p_nul_res_pref;incst q; set q# sdsv_p;incst q;     set q# p_inplace_reloc_pref;incst q; set q# p_pref_reloc_64;incst q; set q# p_underscore_pref;incst q; set q# p_exit_end
 	sv t%nr_of_prefs_strings_p
-	set t# "warnings";incst t;      set t# "over_pref";incst t; set t# "hidden_pref";incst t; set t# "w_as_e";incst t; set t# "logfile";incst t;  set t# "codeFnObj";incst t;  set t# "const_warn";incst t; set t# "includedir";incst t;  set t# "function_name";incst t; set t# "conv_64";incst t; set t# "nul_res_pref";incst t; set t# "sd_as_sv";incst t; set t# "inplace_reloc";incst t;      set t# "reloc_64";incst t;      set t# "underscore_pref"
+	set t# "warnings";incst t;      set t# "over_pref";incst t; set t# "hidden_pref";incst t; set t# "w_as_e";incst t; set t# "logfile";incst t;  set t# "codeFnObj";incst t;  set t# "const_warn";incst t; set t# "includedir";incst t;  set t# "function_name";incst t; set t# "conv_64";incst t; set t# "nul_res_pref";incst t; set t# "sd_as_sv";incst t; set t# "inplace_reloc";incst t;      set t# "reloc_64";incst t;      set t# "underscore_pref";incst t; set t# "exit_end"
 endfunction
 
 #void
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -377,7 +377,7 @@ const p_hidden_pref^hidden_pref
 Data safecurrentdirtopath#1
 const p_safecurrentdirtopath^safecurrentdirtopath
 
-const nr_of_prefs=15
+const nr_of_prefs=16
 const nr_of_prefs_jumper=nr_of_prefs*:
 
 vdata nr_of_prefs_pointers#nr_of_prefs;vdata nr_of_prefs_strings#nr_of_prefs
@@ -388,3 +388,7 @@ const p_pref_reloc_64^pref_reloc_64
 
 data underscore_pref#1
 const p_underscore_pref^underscore_pref
+
+#exit end preference
+data exit_end#1
+const p_exit_end^exit_end
--- ocompiler-1.orig/src/files/inits/inits.s
+++ ocompiler-1/src/files/inits/inits.s
@@ -62,9 +62,6 @@ call val64_init()
 #afterCall
 data g_e_b_p#1;setcall g_e_b_p global_err_pBool();set g_e_b_p# (FALSE)
 
-#entrylinux bool
-data el_b_p#1;setcall el_b_p entrylinux_bool_p();set el_b_p# (FALSE)
-
 set warn_hidden_whitespaces_times 0
 
 sd convention_64
