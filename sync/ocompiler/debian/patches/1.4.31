Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-4.31) bionic; urgency=medium
 .
   * overrides
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-02-10

--- ocompiler-1.orig/README.md
+++ ocompiler-1/README.md
@@ -7,9 +7,8 @@ On Ubuntu, but other distros may have th
 sudo add-apt-repository ppa:colin-i/ppa
 ```
 Or the *manual installation step* from this link *https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6* \
-Update and install:
+Install:
 ```sh
-sudo apt-get update
 sudo apt-get install ocompiler
 ```
 Documentation is at [o.html](https://htmlpreview.github.io/?https://github.com/colin-i/o/blob/master/o.html).
--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -758,7 +758,7 @@
 <h3><a name="object">XII. Creating object files</a></h3>
 <p>
   <div>
-	Object files can be created that have elf relocatable format. The format is <b>ElfObj</b> or <b>Elf Obj</b>.
+	Object files can be created that have elf relocatable format. The format is <b>ElfObj</b>.
 	The relocations are created automatically.
 	There is the possibility to use the relocation sign ('%') when declaring a data that acts like equal sign but it also creates a relocation symbol to that address.
 	<p>
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -127,6 +127,8 @@ if loop==1
 				Include "./index/hex.s"
 			ElseIf commandset==(cWARNING)
 				Include "./index/warning.s"
+			ElseIf commandset==(cOVERRIDE)
+				Include "./index/override.s"
 			Else
 	#comments command
 				Call advancecursors(pcontent,pcomsize,comsize)
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/override.s
@@ -0,0 +1,2 @@
+
+setcall errormsg override_com(#content,#comsize)
--- ocompiler-1.orig/src/files/functions.s
+++ ocompiler-1/src/files/functions.s
@@ -47,3 +47,4 @@ Include "./functions/include.s"
 Include "./functions/dataassign.s"
 Include "./functions/enumbags.s"
 Include "./functions/import.s"
+Include "./functions/override.s"
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -3,25 +3,28 @@
 Const spacereq=1
 Const spacenotreq=0
 
+#with caution like elseif before else for getcommand comparations
+
 Chars cDATA_c="DATA";Chars cSTR_c="STR";Chars cCHARS_c="CHARS";Chars cSD_c="SD";Chars cSS_c="SS";Chars cSV_c="SV"
 	Chars cCONST_c="CONST"
 	Chars cVDATA_c="VDATA";Chars cVSTR_c="VSTR";Chars cVALUE_c="VALUE"
 Chars cAFTERCALL_c="AFTERCALL";Chars cIMPORTAFTERCALL_c="IMPORTAFTERCALL"
 Chars cFORMAT_c="FORMAT"
-Chars cRETURN_c="RETURN";Chars cNOT_c="NOT";Chars cINC_c="INC";Chars cDEC_c="DEC";Chars cINCST_c="INCST";Chars cDECST_c="DECST";Chars cEXIT_c="EXIT";Chars cNEG_c="NEG";Chars cSHL_c="SHL";Chars cSHR_c="SHR";Chars cSAR_c="SAR"
+Chars cRETURN_c="RETURN";Chars cNOT_c="NOT";Chars cINCST_c="INCST";Chars cINC_c="INC";Chars cDECST_c="DECST";Chars cDEC_c="DEC";Chars cEXIT_c="EXIT";Chars cNEG_c="NEG";Chars cSHL_c="SHL";Chars cSHR_c="SHR";Chars cSAR_c="SAR"
 Chars cSET_c="SET";Chars cADD_c="ADD";Chars cSUB_c="SUB";Chars cMULT_c="MULT";Chars cDIV_c="DIV";Chars cREM_c="REM";Chars cAND_c="AND";Chars cOR_c="OR";Chars cXOR_c="XOR"
-Chars cLIBRARY_c="LIBRARY";
-Chars cIMPORT_c="IMPORT";Chars cIMPORTX_c="IMPORTX";
-Chars cFUNCTION_c="FUNCTION";Chars cFUNCTIONX_c="FUNCTIONX";Chars cENTRY_c="ENTRY";Chars cENTRYLINUX_c="ENTRYLINUX"
+Chars cLIBRARY_c="LIBRARY"
+Chars cIMPORTX_c="IMPORTX";Chars cIMPORT_c="IMPORT"
+Chars cFUNCTIONX_c="FUNCTIONX";Chars cFUNCTION_c="FUNCTION";Chars cENTRYLINUX_c="ENTRYLINUX";Chars cENTRY_c="ENTRY"
 Chars cENDFUNCTION_c="ENDFUNCTION"
 Chars cCALL_c="CALL"
 Chars cCALLEX_c="CALLEX"
-Chars cIF_c="IF";Chars cELSE_c="ELSE";Chars cWHILE_c="WHILE";Chars cELSEIF_c="ELSEIF";Chars cENDIF_c="ENDIF";Chars cENDELSE_c="ENDELSE";Chars cENDWHILE_c="ENDWHILE";Chars cENDELSEIF_c="ENDELSEIF"
+Chars cIF_c="IF";Chars cELSEIF_c="ELSEIF";Chars cELSE_c="ELSE";Chars cWHILE_c="WHILE";Chars cENDIF_c="ENDIF";Chars cENDELSEIF_c="ENDELSEIF";Chars cENDELSE_c="ENDELSE";Chars cENDWHILE_c="ENDWHILE"
+Chars cCOMMENT_c={commentascii,0}
 Chars cINCLUDE_c="INCLUDE"
-Chars cI3_c="I3"
-Chars cHEX_c="HEX"
 Chars cWARNING_c="WARNING"
-Chars cCOMMENT_c={commentascii,0}
+Chars cOVERRIDE_c="OVERRIDE"
+Chars cHEX_c="HEX"
+Chars cI3_c="I3"
 
 const not_a_subtype=-1
 
@@ -112,26 +115,26 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cONEARG
 			Data *=cNOT
 			Data *=spacereq
-		Const cINC=!-cONEARG_top
-			data *^cINC_c
-			Data *=cONEARG
-			Data *=cINC
-			Data *=spacereq
-		Const cDEC=!-cONEARG_top
-			data *^cDEC_c
-			Data *=cONEARG
-			Data *=cDEC
-			Data *=spacereq
 		Const cINCST=!-cONEARG_top
 			data *^cINCST_c
 			Data *=cONEARG
 			Data *=cINCST
 			Data *=spacereq
+		Const cINC=!-cONEARG_top
+			data *^cINC_c
+			Data *=cONEARG
+			Data *=cINC
+			Data *=spacereq
 		Const cDECST=!-cONEARG_top
 			data *^cDECST_c
 			Data *=cONEARG
 			Data *=cDECST
 			Data *=spacereq
+		Const cDEC=!-cONEARG_top
+			data *^cDEC_c
+			Data *=cONEARG
+			Data *=cDEC
+			Data *=spacereq
 		Const cEXIT=!-cONEARG_top
 			data *^cEXIT_c
 			Data *=cONEARG
@@ -209,39 +212,40 @@ Const numberofcommandsvars=(!-commandsva
 		Data *=cLIBRARY
 		Data *#1
 		Data *=spacereq
-	Const cIMPORTLINK=!-coms_start;Const cIMPORTLINK_top=!
-		const cIMPORT=!-cIMPORTLINK_top
-			data *^cIMPORT_c
-			Data *=cIMPORTLINK
-			Data *=cIMPORT
-			Data *=spacereq
+	Const cIMPORTLINK=!-coms_start
+	Const cIMPORTLINK_top=!
 		const cIMPORTX=!-cIMPORTLINK_top
 			data *^cIMPORTX_c
 			Data *=cIMPORTLINK
 			Data *=cIMPORTX
 			Data *=spacereq
+		const cIMPORT=!-cIMPORTLINK_top
+			data *^cIMPORT_c
+			Data *=cIMPORTLINK
+			Data *=cIMPORT
+			Data *=spacereq
 	Const cSTARTFUNCTION=!-coms_start
 	Const cSTARTFUNCTION_top=!
-		Const cFUNCTION=!-cSTARTFUNCTION_top
-			data *^cFUNCTION_c
-			Data *=cSTARTFUNCTION
-			Data *=cFUNCTION
-			Data *=spacereq
 		Const cFUNCTIONX=!-cSTARTFUNCTION_top
 			data *^cFUNCTIONX_c
 			Data *=cSTARTFUNCTION
 			Data *=cFUNCTIONX
 			Data *=spacereq
-		Const cENTRY=!-cSTARTFUNCTION_top
-			data *^cENTRY_c
+		Const cFUNCTION=!-cSTARTFUNCTION_top
+			data *^cFUNCTION_c
 			Data *=cSTARTFUNCTION
-			Data *=cENTRY
+			Data *=cFUNCTION
 			Data *=spacereq
 		Const cENTRYLINUX=!-cSTARTFUNCTION_top
 			data *^cENTRYLINUX_c
 			Data *=cSTARTFUNCTION
 			Data *=cENTRYLINUX
 			Data *=spacereq
+		Const cENTRY=!-cSTARTFUNCTION_top
+			data *^cENTRY_c
+			Data *=cSTARTFUNCTION
+			Data *=cENTRY
+			Data *=spacereq
 	Const cENDFUNCTION=!-coms_start
 		data *^cENDFUNCTION_c
 		Data *=cENDFUNCTION
@@ -264,6 +268,11 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cCONDITIONS
 			Data *=cIF
 			Data *=spacereq
+		Const cELSEIF=!-cCONDITIONS_top
+			data *^cELSEIF_c
+			Data *=cCONDITIONS
+			Data *=cELSEIF
+			Data *=spacereq
 		Const cELSE=!-cCONDITIONS_top
 			data *^cELSE_c
 			Data *=cCONDITIONS
@@ -274,16 +283,16 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cCONDITIONS
 			Data *=cWHILE
 			Data *=spacereq
-		Const cELSEIF=!-cCONDITIONS_top
-			data *^cELSEIF_c
-			Data *=cCONDITIONS
-			Data *=cELSEIF
-			Data *=spacereq
 		Const cENDIF=!-cCONDITIONS_top
 			data *^cENDIF_c
 			Data *=cCONDITIONS
 			Data *=cENDIF
 			Data *=spacenotreq
+		Const cENDELSEIF=!-cCONDITIONS_top
+			data *^cENDELSEIF_c
+			Data *=cCONDITIONS
+			Data *=cENDELSEIF
+			Data *=spacenotreq
 		Const cENDELSE=!-cCONDITIONS_top
 			data *^cENDELSE_c
 			Data *=cCONDITIONS
@@ -294,34 +303,34 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cCONDITIONS
 			Data *=cENDWHILE
 			Data *=spacenotreq
-		Const cENDELSEIF=!-cCONDITIONS_top
-			data *^cENDELSEIF_c
-			Data *=cCONDITIONS
-			Data *=cENDELSEIF
-			Data *=spacenotreq
+	Const cCOMMENT=!-coms_start
+		data *^cCOMMENT_c
+		Data *=cCOMMENT
+		Data *#1
+		Data *=spacenotreq
 	Const cINCLUDE=!-coms_start
 		data *^cINCLUDE_c
 		Data *=cINCLUDE
 		Data *#1
 		Data *=spacereq
-	Const cI3=!-coms_start
-		data *^cI3_c
-		Data *=cI3
+	Const cWARNING=!-coms_start
+		data *^cWARNING_c
+		Data *=cWARNING
 		Data *#1
-		Data *=spacenotreq
+		Data *=spacereq
+	Const cOVERRIDE=!-coms_start
+		data *^cOVERRIDE_c
+		Data *=cOVERRIDE
+		Data *#1
+		Data *=spacereq
 	Const cHEX=!-coms_start
 		data *^cHEX_c
 		Data *=cHEX
 		Data *#1
 		Data *=spacereq
-	Const cWARNING=!-coms_start
-		data *^cWARNING_c
-		Data *=cWARNING
-		Data *#1
-		Data *=spacereq
-	Const cCOMMENT=!-coms_start
-		data *^cCOMMENT_c
-		Data *=cCOMMENT
+	Const cI3=!-coms_start
+		data *^cI3_c
+		Data *=cI3
 		Data *#1
 		Data *=spacenotreq
 Const numberofcommands=(!-coms_start)/com_size
@@ -403,40 +412,40 @@ EndFunction
 
 
 Function sortcommands(data pointerscursor,data nrofcomms)
-#used for endelseif (first search),endelse (second search);the reverse order will not get endelseif
+#it's that old strategy elseif will be only else if let unsorted, endelseif/endelse, maybe more
 	Data datacursor#1
 	Data datacursorini%cdataloc
 	Data i#1
 	Data zero=0
-	Data sz#1
-	Data j#1
+#	Data sz#1
+#	Data j#1
 	Data dsize=dwsz
-	Data szval#1
-	Data ptrval#1
-	Data ptrvalstand#1
-	Data dataval#1
+#	Data szval#1
+#	Data ptrval#1
+#	Data ptrvalstand#1
+#	Data dataval#1
 
 	Set datacursor datacursorini
 	Set i zero
 	While i<nrofcomms
-		SetCall sz strlen(datacursor#)
-		Set j i
-		Set ptrval pointerscursor
-		Set ptrvalstand pointerscursor
-		While zero<j
-			Sub ptrval dsize
-			Set dataval ptrval#
-			SetCall szval strlen(dataval#)
-			If szval>=sz
-				Set j zero
-			Else
-				Set ptrvalstand# dataval
-				Sub ptrvalstand dsize
-				Dec j
-			EndElse
-		EndWhile
-		Set ptrvalstand# datacursor
-
+#		SetCall sz strlen(datacursor#)
+#		Set j i
+#		Set ptrval pointerscursor
+#		Set ptrvalstand pointerscursor
+#		While zero<j
+#			Sub ptrval dsize
+#			Set dataval ptrval#
+#			SetCall szval strlen(dataval#)
+#			If szval>=sz
+#				Set j zero
+#			Else
+#				Set ptrvalstand# dataval
+#				Sub ptrvalstand dsize
+#				Dec j
+#			EndElse
+#		EndWhile
+#		Set ptrvalstand# datacursor
+		set pointerscursor# datacursor
 		Add pointerscursor dsize
 		Add datacursor dsize
 		Add datacursor dsize
--- ocompiler-1.orig/src/files/functions/inits.s
+++ ocompiler-1/src/files/functions/inits.s
@@ -1,3 +1,16 @@
+
+
+#err
+function prefs_set(ss name,ss value)
+	sd err
+	sd p
+	setcall err comline_pointer(name,#p)
+	if err!=(noerror)
+		return err
+	endif
+	setcall err comline_value(value,p)
+	return err
+endfunction
 #err
 function comline_parse(sd argc,sv argv)
 	if argc>2
@@ -6,20 +19,15 @@ function comline_parse(sd argc,sv argv)
 		add argv (2*:)
 		while argv!=argc
 			sd err
-			#
-			sd p
-			setcall err comline_pointer(argv#,#p)
-			if err!=(noerror)
-				return err
-			endif
-			#
+			sd name
+			set name argv#
 			incst argv
 			if argv==argc
 				return "missing value for command line argument"
 			endif
-			ss v
-			set v argv#
-			setcall err comline_value(v,p)
+			sd value
+			set value argv#
+			setcall err prefs_set(name,value)
 			if err!=(noerror)
 				return err
 			endif
--- /dev/null
+++ ocompiler-1/src/files/functions/override.s
@@ -0,0 +1,37 @@
+
+#err
+function override_com(sd pcontent,sd psize)
+	sd size
+	setcall size valinmem(pcontent#,psize#,(asciispace))
+	if size==0
+		return "first argument is missing at override"
+	endif
+	sd name
+	set name pcontent#
+	call advancecursors(pcontent,psize,size)
+	call spaces(pcontent,psize)
+	if size==0
+		return "second argument is missing at override"
+	endif
+	sd err
+	sd p
+	ss t
+	set t name;add t size;set t# 0
+	#work can be done do allow line comment here
+	set size psize#
+	setcall err memoryalloc(size,#p)
+	#it is file_get_content memwise (not strwise with null ending)
+	if err==(noerror)
+		set t size
+		inc size
+		call memtomem(p,pcontent#,size)
+		set size t
+		add t p;set t# 0
+		setcall err prefs_set(name,p)
+		call free(p)
+		if err==(noerror)
+			call advancecursors(pcontent,psize,size)
+		endif
+	endif
+	return err
+endfunction
