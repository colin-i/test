Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-4.10) bionic; urgency=medium
 .
   * syncs
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-12-15

--- ocompiler-1.orig/.ocompiler.txt
+++ ocompiler-1/.ocompiler.txt
@@ -17,46 +17,40 @@ hidden_pref=1
 0 if False; 1 is True
 w_as_e=1
 
-5. Log file. This option creates a file with string lines.
+5. Log file. This option creates a file with string lines. The files tree is logged.
 0 is No; 1 is Yes
 logfile=1
 
-6. Take the following action at FUNCTION entries at the object format that are not referred in the object and when the reference warning is enabled.
+6. Take the following action at FUNCTION entries at the object format that are not referred in the object and when the reference warning is enabled. This will also log import functions.
 [if warnings is 1]
-0 is Ignore them; 1 is Show warning; 2 [if logfile is 1] is Write them to the logfile (this will also log import functions), else take 1
+0 is Ignore them; 1 is Show warning; 2 [if logfile is 1] is Write them to the logfile, else take 1
 codeFnObj=2
 
-7. CONST to unreferenced warnings, same as with FUNCTION
+7. CONST to unreferenced warnings, same as with FUNCTION. This will also log declared/used constants.
 [if warnings is 1]
-0 is Ignore them; 1 is Show warning; 2 [if logfile is 1] is Write them to the logfile (this will also log used constants), else take 1
+0 is Ignore them; 1 is Show warning; 2 [if logfile is 1] is Write them to the logfile, else take 1
 const_warn=2
 
-8. Log the folder path to the main file, the main file and the INCLUDE files.
-[if logfile is 1]
-	[if includedir is 1]: The file entries are followed by the name of the previous active folder, where the program will restore when the file is parsed.
-0 is No; 1 is Yes
-logincludes=1
-
-9. Include active folder. Change the active directory when including and stepping into a file.
+8. Include active folder. Change the active directory when including and stepping into a file.
 0 is No; 1 is Yes
 includedir=1
 
-10. Write the function names above the function in code section, useful when debugging asm instructions.
+9. Write the function names above the function in code section, useful when debugging asm instructions.
 0 is No; 1 is Yes
 function_name=0
 
-11. Ignore elfobj64
+10. Ignore elfobj64
 0 is No,use linux convention if ocompiler was compiled for linux,else use microsoft; 1 is Yes; 2 is No,and cross-compile
 conv_64=0
 
-12. Zeroset reserved data section declarations
+11. Zeroset reserved data section declarations
 0 is No; 1 is Yes
 nul_res_pref=0
 
-13. sd as sv (old programs don't have sv and may be with 64 logic)
+12. sd as sv (old programs don't have sv and may be with 64 logic)
 0 is No; 1 is Yes
 sd_as_sv=0
 
-14. inplace reloc 0 or the addend for objects? (standard ld wants addend, i686-w64-mingw32-ld wants 0)
+13. inplace reloc 0 or the addend for objects? (standard ld wants addend, i686-w64-mingw32-ld wants 0)
 0 is Zero; 1 is Addend
 inplace_reloc=1
\ No newline at end of file
--- ocompiler-1.orig/Makefile
+++ ocompiler-1/Makefile
@@ -1,41 +1,12 @@
-all: o
+TOPTARGETS := all install clean distclean uninstall test
 
-OB = obj
-OBJ = $(OB).o
-FULLOBJ = ./src/linux/$(OB)
-FULLOBJS = $(FULLOBJ).s
-FULLOBJO = $(FULLOBJ).o
-OBT = $(OB).txt
+SUBDIRS := src srcres
 
-%.o: ${FULLOBJS}
-	if [ -s $(OBT) ];then base64 -d $(OBT) > $@;else o $<;fi
-
-syms =-s
-ATLDCOM = $(LD) ${syms} -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 -o $@ -lc -entry main
-#gcc -Wl,-melf_i386 -nostdlib "./src/linux/obj.o" -o "./buildg/o" -lc
-
-o: $(OBJ)
-	if [ -f ${OBJ} ];then $(ATLDCOM) $^;else $(ATLDCOM) ${FULLOBJO};fi
-
-install: o
-	install -D o \
-		$(DESTDIR)$(prefix)/bin/o
-
-clean-compile:
-	-rm -f $(FULLOBJO)
-	-rm -f $(OBJ)
-	-rm -f $(FULLOBJS).log
-
-clean-link:
-	-rm -f o
-
-clean: clean-compile clean-link
-distclean: clean
-
-uninstall:
-	-rm -f $(DESTDIR)$(prefix)/bin/o
-
-test:
-	echo "Nothing"
-
-.PHONY: all install clean distclean uninstall test
+$(TOPTARGETS): $(SUBDIRS)
+$(SUBDIRS):
+	$(MAKE) -C $@ $(MAKECMDGOALS)
+.PHONY: $(TOPTARGETS) $(SUBDIRS)
+
+all:
+	./srcres/ounused ./srcres/ounused.s.log
+	./srcres/ounused ./src/linux/obj.s.log
--- /dev/null
+++ ocompiler-1/src/Makefile
@@ -0,0 +1,40 @@
+all: o
+
+OB = obj
+OBJ = ${OB}.o
+FULLOBJ = ./linux/${OB}
+FULLOBJS = ${FULLOBJ}.s
+FULLOBJO = ${FULLOBJ}.o
+OBT = ${OB}.txt
+
+%.o: ${FULLOBJS}
+	if [ -s ${OBT} ];then base64 -d ${OBT} > $@;else o $<;fi
+
+syms =-s
+ATLDCOM = $(LD) ${syms} -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 -o $@ -lc -entry main
+
+o: ${OBJ}
+	if [ -f ${OBJ} ];then ${ATLDCOM} $^;else ${ATLDCOM} ${FULLOBJO};fi
+
+install: o
+	install -D o \
+		$(DESTDIR)$(prefix)/bin/o
+
+clean-compile:
+	-rm -f ${FULLOBJO}
+	-rm -f ${OBJ}
+	-rm -f ${FULLOBJS}.log
+
+clean-link:
+	-rm -f o
+
+clean: clean-compile clean-link
+distclean: clean
+
+uninstall:
+	-rm -f $(DESTDIR)$(prefix)/bin/o
+
+test:
+	echo "Nothing"
+
+.PHONY: all install clean distclean uninstall test
--- ocompiler-1.orig/src/files/actions/main.s
+++ ocompiler-1/src/files/actions/main.s
@@ -65,6 +65,12 @@ While includesReg!=null
 				Set content last
 			EndIf
 		EndWhile
+		sd log_err
+		setcall log_err addtolog_withchar_ex((NULL),0,0x65) #also ok on win
+		if log_err!=(noerror)
+			set errormsg log_err
+			Call Message(errormsg)
+		endif
 	EndIf
 
 	if includedir==true
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -63,15 +63,10 @@ If errormsg==noerr
 				Else
 					SetCall errormsg entryvarsfns(content,imp_size)
 					If errormsg==noerr
-						if logbool==(TRUE)
-							if codeFnObj==(log_warn)
-								if subtype==(cIMPORT)
-									setcall errormsg writefile_errversion(logfile,"i",1)
-									If errormsg==noerr
-										sub impquotsz impescapes
-										setcall errormsg addtolog_ex(imp_mark,impquotsz)
-									endIf
-								endif
+						if codeFnObj==(log_warn)
+							if subtype==(cIMPORT)
+								sub impquotsz impescapes
+								setcall errormsg addtolog_withchar_ex_atunused(imp_mark,impquotsz,0x69)
 							endif
 						endif
 						If errormsg==noerr
--- ocompiler-1.orig/src/files/actions/pathout.s
+++ ocompiler-1/src/files/actions/pathout.s
@@ -18,7 +18,7 @@ Sub minpath unit
 Sub cursorpath unit
 
 While minpath!=cursorpath
-	Chars teststr=""
+	Chars teststr#1
 	Set teststr cursorpath#
 	If teststr==dot
 		Set pointofpathout cursorpath
--- ocompiler-1.orig/src/files/actions/setdefdir.s
+++ ocompiler-1/src/files/actions/setdefdir.s
@@ -38,17 +38,13 @@ Data safecurrentdirloc#1
 Set safecurrentdirloc safecurrentdirtopath
 Add safecurrentdirloc wordsize
 Call memtomem(safecurrentdirloc,filenameloc,movesize)
+
 if logbool==true
 	chars logfileextension=".log"
 	str logextension^logfileextension
 
-	data logfilecannotinit#1
-	set logfilecannotinit false
-
 	setcall errormsg maxpathverif(safecurrentdirtopath,logextension)
-	if errormsg!=noerr
-		set logfilecannotinit true
-	else
+	if errormsg==noerr
 		str appendextension#1
 
 		set appendextension safecurrentdirloc
@@ -61,18 +57,15 @@ if logbool==true
 		call memtomem(appendextension,logextension,sizelogext)
 
 		setcall errormsg openfile(ptrlogfile,safecurrentdirtopath,_open_write)
-		if errormsg!=noerr
-			set logfilecannotinit true
-		else
+		if errormsg==noerr
 			Set storeachar filenameloc#
 			Set filenameloc# null
-			call logincludes_decision(path_nofree)
+			setcall errormsg addtolog_withchar(path_nofree,(pathfolder_ascii))
 			Set filenameloc# storeachar
-		endelse
+		endif
 		set appendextension# null
-	endelse
-	if logfilecannotinit==true
-		set logbool false
-		call Message(errormsg)
+	endif
+	if errormsg!=noerr
+		Call msgerrexit(errormsg)
 	endif
 endif
--- ocompiler-1.orig/src/files/actions/terminations.s
+++ ocompiler-1/src/files/actions/terminations.s
@@ -17,7 +17,11 @@ If fileformat==pe_exec
 EndIf
 
 #verify preferences
-Call warnings(true,includes,nameofstoffile,#errormsg)
+sd err_bool
+setCall err_bool warnings(true,includes,nameofstoffile,#errormsg)
 If errormsg!=noerr
-	Call msgerrexit(errormsg)
+	if err_bool==(TRUE)
+		Call msgerrexit(errormsg)
+	endif
+	call errexit()
 EndIf
--- ocompiler-1.orig/src/files/functions/actions/dataparse.s
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -92,6 +92,8 @@ Function addvarreference(data ptrcontent
 			Str pconstdup^constdup
 			Return pconstdup
 		EndIf
+		setcall errnr addtolog_withchar_ex_atunused(content,valsize,0x64)
+		If errnr!=noerr;Return errnr;EndIf
 		Set value zero
 	EndElse
 
--- ocompiler-1.orig/src/files/functions/commons/base.s
+++ ocompiler-1/src/files/functions/commons/base.s
@@ -102,14 +102,6 @@ Function congruentmoduloatsegments(data
 EndFunction
 
 #err
-function addtolog(str content)
-	data sizetowrite#1
-	setcall sizetowrite strlen(content)
-	sd err
-	setcall err addtolog_ex(content,sizetowrite)
-	return err
-endfunction
-#err
 function addtolog_ex(ss content,sd sizetowrite)
 	data ptrfilehandle%ptrlogfile
 	data filehandle#1
@@ -124,6 +116,38 @@ function addtolog_ex(ss content,sd sizet
 	setcall err writefile_errversion(filehandle,text,sz)
 	return err
 endfunction
+#err
+function addtolog_withchar_ex(ss content,sd size,sd type)
+	data ptrfilehandle%ptrlogfile
+	if ptrfilehandle#!=-1
+	#this compare only at first chdir is extra
+		sd err
+		setcall err writefile_errversion(ptrfilehandle#,#type,1)
+		if err==(noerror)
+			setcall err addtolog_ex(content,size)
+		endif
+		return err
+	endif
+	return (noerror)
+endfunction
+#err
+function addtolog_withchar(ss content,sd type)
+	sd len
+	setcall len strlen(content)
+	sd err
+	setcall err addtolog_withchar_ex(content,len,type)
+	return err
+endfunction
+#err
+function addtolog_withchar_ex_atunused(ss content,sd size,sd type)
+	data ptrobject%ptrobject
+	if ptrobject#==(TRUE)
+		sd err
+		setcall err addtolog_withchar_ex(content,size,type)
+		return err
+	endif
+	return (noerror)
+endfunction
 
 function restore_cursors_onok(sd ptrcontent,sd ptrsize,sd forward,sd data1,sd data2)
 	sd c
--- ocompiler-1.orig/src/files/functions/commons/vars.s
+++ ocompiler-1/src/files/functions/commons/vars.s
@@ -1,25 +1,16 @@
 
 
 #same or zero
-function warn_or_log(ss str1,sd return_value,ss symbolname,sd log_option,sd p_err)
+function warn_or_log(sd type,sd return_value,ss symbolname,sd log_option,sd p_err)
 	data ptrobject%ptrobject
 	if ptrobject#==(TRUE)
 		if log_option==(log_warn)
-			data ptrlogfile%ptrlogfile
-			if ptrlogfile#!=-1
-				sd len
-				setcall len strlen(str1)
-				setcall p_err# writefile_errversion(ptrlogfile#,str1,len)
-				if p_err#!=(noerror)
-					return return_value
-				endif
-				add symbolname (dwsz)
-				setcall p_err# addtolog(symbolname)
-				if p_err#!=(noerror)
-					return return_value
-				endif
-				return 0
+			add symbolname (dwsz)
+			setcall p_err# addtolog_withchar(symbolname,type) #is not calling atunused version, that will return noerror at object false
+			if p_err#!=(noerror)
+				return return_value
 			endif
+			return 0
 		endif
 	endif
 	return return_value
@@ -60,19 +51,17 @@ function vars_core_ref(str content,data
 					And checkvalue idatabitfunction
 					if checkvalue==zero
 						data ptrcodeFnObj%ptrcodeFnObj
-						setcall returnvalue warn_or_log("f",returnvalue,container,ptrcodeFnObj#,warningssearch)
+						setcall returnvalue warn_or_log(0x66,returnvalue,container,ptrcodeFnObj#,warningssearch)
 					endif
 				elseif ptrconstants==ptrstructure
 					setcall cb constants_bool((const_warn_get))
-					setcall returnvalue warn_or_log("c",returnvalue,container,cb,warningssearch)
+					setcall returnvalue warn_or_log(0x63,returnvalue,container,cb,warningssearch)
 				endelseif
 				if returnvalue!=zero
 					Return returnvalue
 				endif
-			elseIf ptrconstants==ptrstructure
-				setcall cb constants_bool((const_warn_get))
-				call warn_or_log("r",entrypoint,container,cb,warningssearch)
-			EndelseIf
+			endIf
+			#elseIf ptrconstants==ptrstructure 0x72
 		EndIf
 		Add container dwlen
 		Sub containerReg dwlen
--- ocompiler-1.orig/src/files/functions/incld.s
+++ ocompiler-1/src/files/functions/incld.s
@@ -29,12 +29,6 @@ endfunction
 Function include(Str path)
 	Data zero=0
 	Data one=1
-	data negative=-1
-
-	data ptrlogfile%ptrlogfile
-	if ptrlogfile#!=negative
-		call logincludes_decision(path)
-	endif
 
 	Str contentoffl#1
 	Data sizeoffl#1
@@ -70,10 +64,8 @@ Function include(Str path)
 			return getcwderr
 		endif
 
-		if ptrlogfile#!=negative
-			call logincludes_decision(pcontentoffl#)
-		endif
-
+		setcall err addtolog_withchar(pcontentoffl#,(pathfolder_ascii))
+		If err!=noerr;Return err;EndIf
 
 		chars storechar#1
 		set storechar folders#
@@ -91,6 +83,8 @@ Function include(Str path)
 		set folders# storechar
 	endif
 
+	setcall err addtolog_withchar(path,0x6E)
+	If err!=noerr;Return err;EndIf
 
 	Data strsz#1
 	SetCall strsz strlen(path)
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -7,59 +7,58 @@ const p_inplace_reloc_pref^inplace_reloc
 const zero_reloc=0
 const addend_reloc=1
 
-#void
+#bool for err2
 Function warnings(sd searchInAll,sd includes,sd nameoffset,sd p_err)
 	Data warningsboolptr%ptrwarningsbool
 	Data warningsbool#1
 	Data null=NULL
 	Data true=TRUE
-	Data false=FALSE
 
 	Set warningsbool warningsboolptr#
-	If warningsbool==false
-		Return null
-	EndIf
-
-	Data var#1
-
-	SetCall var searchinvars(null,null,null,p_err)
-	If var==null
-		If searchInAll==true
-			data ptrcodeFnObj%ptrcodeFnObj
-			if ptrcodeFnObj#!=(ignore_warn)
-				Data functionsptr%ptrfunctions
-				SetCall var varscore(null,null,functionsptr,p_err)
-			endif
-			if var==null
-				sd cb;setcall cb constants_bool((const_warn_get))
-				if cb!=(ignore_warn)
-					data constantsptr%ptrconstants
-					SetCall var varscore(null,null,constantsptr,p_err)
+	If warningsbool==true
+		Data var#1
+		SetCall var searchinvars(null,null,null,p_err)
+		If var==null
+			If searchInAll==true
+				data ptrcodeFnObj%ptrcodeFnObj
+				if ptrcodeFnObj#!=(ignore_warn)
+					Data functionsptr%ptrfunctions
+					SetCall var varscore(null,null,functionsptr,p_err)
 				endif
-			endif
+				if var==null
+					sd cb;setcall cb constants_bool((const_warn_get))
+					if cb!=(ignore_warn)
+						data constantsptr%ptrconstants
+						SetCall var varscore(null,null,constantsptr,p_err)
+					endif
+				endif
+			EndIf
 		EndIf
-	EndIf
-	If var!=null
-		Chars unrefformat="Unreferenced variable/function/constant: %s. Scope Termination File: %s. To disable this warning see '.ocompiler.txt'"
-		Str ptrunrefformat^unrefformat
-
-		Data printbuffer#1
-
-		Data fileoff=nameoffset
-		Add var fileoff
-		Add includes nameoffset
-		SetCall printbuffer printbuf(ptrunrefformat,var,includes,0)
-		If printbuffer!=null
-			sd pallocerrormsg%ptrallocerrormsg
-			set pallocerrormsg# printbuffer
+		If var!=null
+			if p_err#==(noerror)
+				Chars unrefformat="Unreferenced variable/function/constant: %s. Scope Termination File: %s. To disable this warning see '.ocompiler.txt'"
+				Str ptrunrefformat^unrefformat
+
+				Data printbuffer#1
+
+				Data fileoff=nameoffset
+				Add var fileoff
+				Add includes nameoffset
+				SetCall printbuffer printbuf(ptrunrefformat,var,includes,0)
+				If printbuffer!=null
+					sd pallocerrormsg%ptrallocerrormsg
+					set pallocerrormsg# printbuffer
+				EndIf
+				Call safeMessage(printbuffer)
+				sd w%p_w_as_e
+				if w#==(TRUE)
+					set p_err# ""
+					return (FALSE)
+				endif
+			endif
 		EndIf
-		Call safeMessage(printbuffer)
-		sd w%p_w_as_e
-		if w#==(TRUE)
-			set p_err# ""
-			#else it will be the same allocerror
-		endif
 	EndIf
+	return (TRUE)
 EndFunction
 
 #void
@@ -148,7 +147,6 @@ function initpreferences()
 	sd ptrlogbool%ptrlogbool
 	sd ptrcodeFnObj%ptrcodeFnObj
 	sd cb;setcall cb constants_bool((const_warn_get_init))
-	sd li;setcall li logincludes_bool()
 	sd ptrincludedir%ptrincludedir
 	sd text_fn_info;setcall text_fn_info fn_text_info()
 	sd conv_64;setcall conv_64 p_neg_is_for_64()
@@ -163,10 +161,9 @@ function initpreferences()
 	set p_over_pref# true
 	set p_hidden_pref# true
 	set p_w_as_e# true
-	set ptrlogbool# false
+	set ptrlogbool# true
 	set ptrcodeFnObj# (log_warn)
-	set cb# (FALSE)
-	set li# (TRUE)
+	set cb# (log_warn)
 	set ptrincludedir# true
 	set text_fn_info# false
 	set conv_64# (direct_convention_input)
@@ -175,9 +172,11 @@ function initpreferences()
 	set p_inplace_reloc_pref# (addend_reloc)
 
 	#this is used also at arguments
-	sv q%nr_of_prefs_pointers_p;sv t%nr_of_prefs_strings_p
-	set q# ptrwarningsbool;incst q; set q# p_hidden_pref;incst q; set q# p_over_pref;incst q; set q# p_w_as_e;incst q; set q# ptrlogbool;incst q; set q# ptrcodeFnObj;incst q; set q# cb;incst q;           set q# li;incst q;            set q# ptrincludedir;incst q; set q# text_fn_info;incst q;    set q# conv_64;incst q;   set q# p_nul_res_pref;incst q; set q# sdsv_p;incst q;     set q# p_inplace_reloc_pref
-	set t# "warnings";incst t;      set t# "hidden_pref";incst t; set t# "over_pref";incst t; set t# "w_as_e";incst t; set t# "logfile";incst t;  set t# "codeFnObj";incst t;  set t# "const_warn";incst t; set t# "logincludes";incst t; set t# "includedir";incst t;  set t# "function_name";incst t; set t# "conv_64";incst t; set t# "nul_res_pref";incst t; set t# "sd_as_sv";incst t; set t# "inplace_reloc"
+
+	sv q%nr_of_prefs_pointers_p
+	set q# ptrwarningsbool;incst q; set q# p_over_pref;incst q; set q# p_hidden_pref;incst q; set q# p_w_as_e;incst q; set q# ptrlogbool;incst q; set q# ptrcodeFnObj;incst q; set q# cb;incst q;           set q# ptrincludedir;incst q; set q# text_fn_info;incst q;    set q# conv_64;incst q;   set q# p_nul_res_pref;incst q; set q# sdsv_p;incst q;     set q# p_inplace_reloc_pref
+	sv t%nr_of_prefs_strings_p
+	set t# "warnings";incst t;      set t# "over_pref";incst t; set t# "hidden_pref";incst t; set t# "w_as_e";incst t; set t# "logfile";incst t;  set t# "codeFnObj";incst t;  set t# "const_warn";incst t; set t# "includedir";incst t;  set t# "function_name";incst t; set t# "conv_64";incst t; set t# "nul_res_pref";incst t; set t# "sd_as_sv";incst t; set t# "inplace_reloc"
 endfunction
 
 #void
@@ -253,23 +252,6 @@ function constants_bool(sd direction)
 	return #bool
 endfunction
 
-function logincludes_decision(ss str)
-	sd b;setcall b logincludes_bool()
-	if b#==(TRUE)
-		data ptrfilehandle%ptrlogfile
-		sd err
-		setcall err writefile_errversion(ptrfilehandle#,"p",1)
-		if err==(noerror)
-			setcall err addtolog(str)
-		endif
-		if err!=(noerror);call Message(err);endif
-	endif
-endfunction
-function logincludes_bool()
-	data bool#1
-	return #bool
-endfunction
-
 function inplace_reloc(sd p_addend)
 	sd p_inplace_reloc_pref%p_inplace_reloc_pref
 	if p_inplace_reloc_pref#==(zero_reloc)
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -273,6 +273,7 @@ const ptrlogbool^logbool
 data logfile#1
 data ptrlogfile^logfile
 const ptrlogfile^logfile
+const pathfolder_ascii=0x70
 
 
 data includedir#1
@@ -370,7 +371,7 @@ const p_hidden_pref^hidden_pref
 Data safecurrentdirtopath#1
 const p_safecurrentdirtopath^safecurrentdirtopath
 
-const nr_of_prefs=14
+const nr_of_prefs=13
 const nr_of_prefs_jumper=nr_of_prefs*:
 
 vdata nr_of_prefs_pointers#nr_of_prefs;vdata nr_of_prefs_strings#nr_of_prefs
--- ocompiler-1.orig/src/files/inits.s
+++ ocompiler-1/src/files/inits.s
@@ -107,7 +107,7 @@ setcall prefix prefix_bool()
 set prefix# 0
 
 set dummyEntryReg 0
-call add_ref_to_sec(ptrdummyEntry,0,(dummy_mask),"",0)
+call add_ref_to_sec(ptrdummyEntry,0,(dummy_mask),(NULL),0)
 
 sd var
 setcall var function_in_code()
--- /dev/null
+++ ocompiler-1/srcres/Makefile
@@ -0,0 +1,38 @@
+all: ounused
+
+OB = ounused
+OBJ = ${OB}.o
+FULLOBJ = ./${OB}
+FULLOBJS = ${FULLOBJ}.s
+FULLOBJO = ${FULLOBJ}.o
+
+%.o: ${FULLOBJS}
+	../src/o $<
+
+syms =-s
+ATLDCOM = $(LD) ${syms} -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 -o $@ -lc -entry main
+
+ounused: ${OBJ}
+	${ATLDCOM} ${FULLOBJO}
+
+install: ounused
+	install -D ounused \
+		$(DESTDIR)$(prefix)/bin/ounused
+
+clean-compile:
+	-rm -f ${FULLOBJO}
+	-rm -f ${FULLOBJS}.log
+
+clean-link:
+	-rm -f ounused
+
+clean: clean-compile clean-link
+distclean: clean
+
+uninstall:
+	-rm -f $(DESTDIR)$(prefix)/bin/ounused
+
+test:
+	echo "Nothing"
+
+.PHONY: all install clean distclean uninstall test
--- /dev/null
+++ ocompiler-1/srcres/loop.s
@@ -0,0 +1,8 @@
+
+function log_file(ss file)
+#i all, f all; at end every f not i I, failure
+#nm d;first c inside
+#another log; files same; one c has some point in previous files same
+#             decisions there
+	call Message(file)
+endfunction
--- /dev/null
+++ ocompiler-1/srcres/ounused.s
@@ -0,0 +1,36 @@
+
+#every time this first file has timestamp greater than Makefile, Makefile is deleted
+#or make -B
+
+format elfobj
+
+const EXIT_SUCCESS=0
+const EXIT_FAILURE=1
+
+Importx "stderr" stderr
+Importx "fprintf" fprintf
+
+Function Message(ss text)
+	Chars visiblemessage={0x0a,0}
+	sd st^stderr
+	Call fprintf(st#,text)
+	Call fprintf(st#,#visiblemessage)
+EndFunction
+
+include "./loop.s"
+
+entrylinux main(sd argc,ss argv0)
+
+if argc>1
+	mult argc :
+	sv argv;set argv #argv0
+	add argc argv
+	incst argv
+	while argv!=argc
+		call log_file(argv#)
+		incst argv
+	endwhile
+	return (EXIT_SUCCESS)
+endif
+
+return (EXIT_FAILURE)
