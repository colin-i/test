Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+82) xenial; urgency=medium
 .
   * overflow straight, warning is for all spelling/orphan for unrefs, fix error shows
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-03-28

--- ocompiler-1.orig/.ocompiler.txt
+++ ocompiler-1/.ocompiler.txt
@@ -3,7 +3,7 @@ This file is parsed by the program to se
 
 1. Display unreferenced variables/functions/constants warning.
 0 is Hide; 1 is Show
-warnings=1
+orphans=1
 
 2. Overflow at constants warning.
 0 is Hide; 1 is Show
@@ -22,12 +22,12 @@ w_as_e=1
 logfile=1
 
 6. Take the following action at FUNCTION entries at the object format that are not referred in the object and when the reference warning is enabled. This will also log import functions.
-[if warnings is 1]
+[if orphans is 1]
 0 is Ignore them; 1 is Show warning; 2 [if logfile is 1] is Write them to the logfile, else take 1
 codeFnObj=2
 
 7. CONST to unreferenced warnings, same as with FUNCTION. This will also log declared/used constants.
-[if warnings is 1]
+[if orphans is 1]
 0 is Ignore them; 1 is Show warning; 2 [if logfile is 1] is Write them to the logfile, else take 1
 const_warn=2
 
--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -816,15 +816,17 @@
 </p>
 <h3><a name="includingfiles">XII. Including files</a></h3>
 <p>
-	The program can be formed with multiple files using the <b>Include</b> command.
-	If compiling for multiple oses add a second path at <b>INCLUDE</b>;
-		the preference include_sec 0 will take the first path, 1 will take the second path.
+	The program can be formed with multiple files using the <b>Include</b> command.<br>
+	If wanting to switch between two files (one use can be at multiple OSes) add a second path at the command:
+		the preference include_sec 0 will take the first path, 1 will take the second path.<br>
+	<b>EInclude</b> will turn unreferenced warning off (one use can be when including a header between multiple projects).
 	<p>
 	Example:
 	<br>
 	<a class="code">
         Include "files\\headers.h"<br>
         Include "files\\headers_win.h" "files\\headers_lin.h"</a>
+        eInclude "/usr/include/ocompiler/logs.h"</a>
 	</p>
 </p>
 <h3><a name="exec">XIII. Creating executable files</a></h3>
@@ -926,9 +928,9 @@
 	<br>
 	Write bytes in the code section.
 	<br>
-	4. Warning
+	4. Orphan
 	<br>
-	Turn on or off the warnings.
+	Turn on or off the orphan warnings.
 	<br>
 	5. Override
 	<br>
@@ -942,9 +944,9 @@
         #this will pause the program into a debugger<br>
         HEX 0x33,0xc0,0xC3<br>
         #this will write 3 bytes in the code section<br>
-        warning off<br>
+        orphan off<br>
         import "common_function" common<br>
-        warning on<br>
+        orphan on<br>
         #useful when having a header in multiple objects<br>
 	  override underscore_pref 0<br>
 	  importx "__errno_location" errno<br>
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -113,7 +113,7 @@ if loop==1
 						elseif commandset==(cINCLUDELINK)
 						Elseif commandset==(cFORMAT)
 						Elseif commandset==(cDECLAREAFTERCALL)  #and import
-						elseif commandset==(cWARNING)    #for addaref
+						elseif commandset==(cORPHAN)    #for addaref
 						elseif commandset==(cOVERRIDE)   #example underscore_pref
 						else;set commandset (cCOMMENT);endelse
 					else
@@ -169,7 +169,7 @@ if loop==1
 				else;if subtype==(cAFTERCALL);add datasecReg (aftercalldeclaresize);endif
 					Call advancecursors(pcontent,pcomsize,comsize);endelse
 				set g_e_b_p# (TRUE)
-			ElseIf commandset==(cWARNING)
+			ElseIf commandset==(cORPHAN)
 				Include "./index/warning.s"
 			ElseIf commandset==(cCALLEX)
 		call entryscope_verify_code()
@@ -280,6 +280,11 @@ if loop==1
 				Add last sizeoffile
 				Set miscbagReg zero
 				Set includebool zero
+
+				#and set for error informations
+				set cursorforincludes includes
+				add cursorforincludes includesReg
+				sub cursorforincludes (shortstrsize)
 			EndElse
 		EndIf
 	EndIf
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -22,7 +22,7 @@ Char cRET_c="RET"
 Char cINCLUDE_c="INCLUDE";Char cEINCLUDE_c="EINCLUDE"
 Char cFORMAT_c="FORMAT"
 Char cIMPORTAFTERCALL_c="IMPORTAFTERCALL";Char cAFTERCALL_c="AFTERCALL"
-Char cWARNING_c="WARNING"
+Char cORPHAN_c="ORPHAN"
 Char cCALLEXX_c="CALLEXX";Char cCALLEX_c="CALLEX"
 Char cOVERRIDE_c="OVERRIDE"
 Char cLIBRARY_c="LIBRARY"
@@ -364,9 +364,9 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cDECLAREAFTERCALL
 			Data *=cAFTERCALL
 			Data *=spacereq
-	Const cWARNING=!-coms_start
-		data *^cWARNING_c
-		Data *=cWARNING
+	Const cORPHAN=!-coms_start
+		data *^cORPHAN_c
+		Data *=cORPHAN
 		Data *#1
 		Data *=spacereq
 	Const cCALLEX=!-coms_start
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -199,7 +199,7 @@ function initpreferences()
 	sv q%nr_of_prefs_pointers_p
 	set q# ptrwarningsbool;    incst q;set q# p_over_pref; incst q;set q# p_hidden_pref; incst q;set q# p_w_as_e; incst q;set q# ptrlogbool; incst q;set q# ptrcodeFnObj; incst q;set q# cb;           incst q;set q# ptrincludedir; incst q;set q# text_fn_info;    incst q;set q# conv_64;   incst q;set q# p_nul_res_pref; incst q;set q# sdsv_p;     incst q;set q# p_inplace_reloc_pref; incst q;set q# p_pref_reloc_64; incst q;set q# p_underscore_pref; incst q;set q# p_exit_end; incst q;set q# p_include_sec; incst q;set q# p_ignore_format_so; incst q;set q# ptr_call_align; incst q;set q# ptr_nobits_virtual; incst q;set q# ptr_has_debug
 	sv t%nr_of_prefs_strings_p
-	set t# "warnings";         incst t;set t# "over_pref"; incst t;set t# "hidden_pref"; incst t;set t# "w_as_e"; incst t;set t# "logfile";  incst t;set t# "codeFnObj";  incst t;set t# "const_warn"; incst t;set t# "includedir";  incst t;set t# "function_name"; incst t;set t# "conv_64"; incst t;set t# "nul_res_pref"; incst t;set t# "sd_as_sv"; incst t;set t# "inplace_reloc";      incst t;set t# "reloc_64";      incst t;set t# "underscore_pref"; incst t;set t# "exit_end"; incst t;set t# "include_sec"; incst t;set t# "ignore_format_so"; incst t;set t# "call_align";   incst t;set t# "nobits_virtual";   incst t;set t# "has_debug"
+	set t# "orphans";          incst t;set t# "over_pref"; incst t;set t# "hidden_pref"; incst t;set t# "w_as_e"; incst t;set t# "logfile";  incst t;set t# "codeFnObj";  incst t;set t# "const_warn"; incst t;set t# "includedir";  incst t;set t# "function_name"; incst t;set t# "conv_64"; incst t;set t# "nul_res_pref"; incst t;set t# "sd_as_sv"; incst t;set t# "inplace_reloc";      incst t;set t# "reloc_64";      incst t;set t# "underscore_pref"; incst t;set t# "exit_end"; incst t;set t# "include_sec"; incst t;set t# "ignore_format_so"; incst t;set t# "call_align";   incst t;set t# "nobits_virtual";   incst t;set t# "has_debug"
 endfunction
 
 #void
--- ocompiler-1.orig/src/files/functions/values/operations.s
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -18,20 +18,20 @@ Const sarNumber=asciidot
 #err
 function const_security(sd item)
 	#2$31 is last one
-	#1 shl 63 is last one
-	#maximum first overflow, ok
-	#why not 32 or 33? this check only stops evil big numbers
-	sd maximum=qwsz*8-1
-	if item#>maximum
-		str err="Overflow at constants."
-		sd w%p_w_as_e
-		if w#==(TRUE)
-			sd p%p_over_pref
-			if p#==(TRUE)
+	#at 64? 1 shl 63 is last one
+	#only <32? yes, else is 0/-1 at constants
+	sd maximum=dwsz*8
+	if item#>=^maximum
+		sd p%p_over_pref
+		if p#==(TRUE)
+			vstr err="Overflow at constants."
+			call Message(err)
+			sd w%p_w_as_e
+			if w#==(TRUE)
 				return err
 			endif
 		endif
-		call Message(err)
+		#it is ok with the overflow
 		set item# maximum
 	endif
 	return (noerror)
