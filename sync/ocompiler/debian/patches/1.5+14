Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+14) xenial; urgency=medium
 .
   * removed align extra write
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-08-10

--- ocompiler-1.orig/arh/pub
+++ ocompiler-1/arh/pub
@@ -1,12 +1,12 @@
 
 ~/test/debinit "${1}" && \
+~/test/keyring2 && \
 ~/test/pub deb && \
 ~/test/deb && \
 ~/test/publp && \
 ~/test/ai && \
 ~/test/pub appimage && \
 ./makewin32 && \
-~/test/keyring2 && \
 ~/test/del && \
 ~/test/rel && \
 ~/test/pub rel && \
@@ -18,5 +18,4 @@
 ~/test/publp2 && \
 ~/test/lp && \
 ~/test/lp x && \
-~/test/keyring && \
 ~/test/del x ${2}
--- ocompiler-1.orig/src/files/actions/main.s
+++ ocompiler-1/src/files/actions/main.s
@@ -7,7 +7,7 @@ data contentlineinclude=lineoffile_offse
 
 data dot_comma_end#1;set dot_comma_end 0
 
-set twoparse 2
+set parses (pass_fns_imps)
 data logaux#1
 set logaux logfile
 set logfile negative
@@ -86,43 +86,51 @@ While includesReg!=null
 
 	Sub includesReg sizeofincludeset
 
-	data skipfortwoparse#1
-	set skipfortwoparse 0
+	data skipfree#1
+	set skipfree 0
 	if includesReg==0
-		if twoparse==2
-			If innerfunction==true
-				if errormsg==(noerror)
+		if parses!=(pass_write)
+			if errormsg==(noerror)
+				If innerfunction==true
 					Str endfnexp="ENDFUNCTION command expected to close the opened FUNCTION."
 					set errormsg endfnexp
 					Call Message(errormsg)
-				endif
-			Else
-				#used when having multiple includes
-				data includescursor#1
-				set includescursor includes
-				add includescursor contentoffsetinclude
-				setcall includescursor# offsetoffile_value()
-
-				set includescursor includes
-				add includescursor contentlineinclude
-				set includescursor# 0
-				#
-
-				set logfile logaux
-
-				set skipfortwoparse 1
-				add includesReg sizeofincludeset
-				set twoparse 1
-
-				setcall errormsg scopes_alloc(el_or_e)
-			EndElse
+				Else
+					if parses==(pass_fns_imps)
+						set parses (pass_calls)
+						setcall errormsg align_alloc(functionTagIndex)
+					else
+						set parses (pass_write)
+						set logfile logaux
+						call align_resolve()
+						setcall errormsg scopes_alloc(el_or_e,functionTagIndex)
+					endelse
+					if errormsg==(noerror)
+						#used when having multiple includes
+						data includescursor#1
+						set includescursor includes
+						add includescursor contentoffsetinclude
+						setcall includescursor# offsetoffile_value()
+						#
+						set includescursor includes
+						add includescursor contentlineinclude
+						set includescursor# 0
+						#
+						add includesReg sizeofincludeset
+
+						set skipfree 1
+
+						set functionTagIndex 0
+					endif
+				EndElse
+			endif
 		endif
 	endif
-	if skipfortwoparse==0
+	if skipfree==0
 		Call free(contentoffile)
 	endif
 EndWhile
 
 If errormsg!=noerr
 	Call errexit()
-EndIf
\ No newline at end of file
+EndIf
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -79,16 +79,24 @@ if loop==1
 		Data pointtosearchat%compointersloc
 		SetCall commandset getcommand(pcontent,pcomsize,ptrsubtype,_errormsg,pointtosearchat)
 		If errormsg==noerr
-			if twoparse==2
-				#tested at function gather; FORMAT is here starting with FUNCTIONX to set the mask knowing the format
+			if parses!=(pass_write)
 				if commandset!=(cCOMMENT)
-					if formatdefined==0;Set formatdefined 1;endif
-					If commandset==(cFORMAT);elseif commandset==(cINCLUDE);elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
-					else;set commandset (cCOMMENT);endelse
+					if parses==(pass_fns_imps)
+						#tested at function gather; FORMAT is here starting with FUNCTIONX to set the mask knowing the format
+							if formatdefined==0;Set formatdefined 1;endif
+							if commandset==(cFORMAT);elseif commandset==(cINCLUDE)
+							elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
+							ElseIf commandset==(cLIBRARY);ElseIf commandset==(cIMPORTLINK) #needing importx here
+							else;set commandset (cCOMMENT);endelse
+					else
+					#pass_calls
+						if commandset==(cCALL);elseif commandset==(cENDFUNCTION);elseif commandset==(cINCLUDE)
+						else;set commandset (cCOMMENT);endelse
+					endelse
 				endif
 			endif
 			If commandset==(cFORMAT)
-				if twoparse==2;Include "./index/format.s"
+				if parses==(pass_fns_imps);Include "./index/format.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cDECLARE)
 				Include "./index/declare.s"
@@ -104,15 +112,19 @@ if loop==1
 		call entryscope_verify_code()
 				Include "./index/ret.s"
 			ElseIf commandset==(cLIBRARY)
-				Include "./index/library.s"
+				if parses==(pass_fns_imps);Include "./index/library.s"
+				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cIMPORTLINK)
-				Include "./index/import.s"
+				if parses==(pass_fns_imps);Include "./index/import.s"
+				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cSTARTFUNCTION)
 				Include "./index/function.s"
 			ElseIf commandset==(cENDFUNCTION)
 				Include "./index/endfunction.s"
 			ElseIf commandset==(cCALL)
+				if parses==(pass_write)
 		call entryscope_verify_code()
+				endif
 				Include "./index/call.s"
 			ElseIf commandset==(cCALLEX)
 		call entryscope_verify_code()
@@ -136,7 +148,7 @@ if loop==1
 	#comments command
 				Call advancecursors(pcontent,pcomsize,comsize)
 				#1 is last
-				if twoparse==1
+				if parses==(pass_write)
 					set was_whitespaces content;dec was_whitespaces;setcall was_whitespaces is_whitespace(was_whitespaces#)
 					if was_whitespaces==(TRUE)
 						setcall errormsg warn_hidden_whitespaces(includes,nameofstoffile)
@@ -156,7 +168,7 @@ if loop==1
 							Call advancecursors(pcontent,pcomsize,comsize)
 						endelse
 					elseIf was_whitespaces==(TRUE)
-						if twoparse==1
+						if parses==(pass_write)
 							setcall errormsg warn_hidden_whitespaces(includes,nameofstoffile)
 						endif
 					endelseIf
@@ -181,7 +193,7 @@ if loop==1
 			EndIf
 		EndIf
 	Elseif cursor_start!=content
-		if twoparse==1
+		if parses==(pass_write)
 			setcall errormsg warn_hidden_whitespaces(includes,nameofstoffile)
 		endif
 	Endelseif
--- ocompiler-1.orig/src/files/actions/main/index/endfunction.s
+++ ocompiler-1/src/files/actions/main/index/endfunction.s
@@ -1,12 +1,15 @@
 
-Data numberofvariables=numberofvars
 
-If innerfunction==false
-	Chars unexef="Unexpected ENDFUNCTION command."
-	Str unexeferr^unexef
-	Set errormsg unexeferr
-Else
-	if twoparse==1
+if parses==(pass_fns_imps)
+	if innerfunction==false
+		Chars unexef="Unexpected ENDFUNCTION command."
+		Str unexeferr^unexef
+		Set errormsg unexeferr
+	else
+		Set innerfunction false
+	endelse
+else
+	if parses==(pass_write)
 		SetCall errormsg checkcondloopclose()
 		If errormsg==noerr
 			data ptrreturn#1
@@ -19,7 +22,7 @@ Else
 				setcall errormsg scopes_store(functionTagIndex)
 				If errormsg==noerr
 					Set i zero
-					While i!=numberofvariables
+					While i!=(numberofvars)
 						Data containertoclear#1
 						SetCall containertoclear getstructcont(i)
 						Data indexptr#1
@@ -28,12 +31,10 @@ Else
 						Set indexptr# zero
 						Inc i
 					EndWhile
-					inc functionTagIndex
 				endif
 			EndIf
 		EndIf
-	endif
-	If errormsg==noerr
 		Set innerfunction false
 	endif
-EndElse
+endelse
+inc functionTagIndex
--- ocompiler-1.orig/src/files/actions/main/index/function.s
+++ ocompiler-1/src/files/actions/main/index/function.s
@@ -18,20 +18,20 @@ Else
 	elseif subtype==(cENTRYLINUX);set el_or_e (TRUE)
 	else;set el_or_e (FALSE);endelse
 	If el_or_e==(TRUE)
-		Data referencebit=referencebit
-		Set objfnmask referencebit
-		if twoparse==1
+		#Data referencebit=referencebit
+		#Set objfnmask referencebit
+		if parses==(pass_write)
 			set fnavailable two
 			if exit_end==(TRUE)
 				set real_exit_end (TRUE)
 			endif
 		endif
 	Else
-		Set objfnmask null
+		#Set objfnmask null
 		Set innerfunction true
 	EndElse
 	if errormsg==(noerror)
 		Data declarefn=declarefunction
-		SetCall errormsg parsefunction(pcontent,pcomsize,declarefn,subtype)
+		SetCall errormsg parsefunction(pcontent,pcomsize,declarefn,subtype,el_or_e)
 	endif
 EndElse
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -63,7 +63,7 @@ If errormsg==noerr
 						Str ptrimpref^missimportref
 						Set errormsg ptrimpref
 					Else
-						SetCall errormsg entryvarsfns(content,imp_size)
+						SetCall errormsg fnimp_exists(content,imp_size) #it is at first pass when only fns and imports are
 						If errormsg==noerr
 							if codeFnObj==(log_warn)
 								if subtype==(cIMPORT)
--- ocompiler-1.orig/src/files/functions.s
+++ ocompiler-1/src/files/functions.s
@@ -42,6 +42,7 @@ Include "./functions/pref/sdsv.s"
 
 Include "./functions/64/bit.s"
 Include "./functions/64/reloc.s"
+Include "./functions/64/align.s"
 
 Include "./functions/include.s"
 Include "./functions/dataassign.s"
--- /dev/null
+++ ocompiler-1/src/files/functions/64/align.s
@@ -0,0 +1,184 @@
+
+value stackalign#1
+data *stackalign_size#1
+const ptrstackalign^stackalign
+#er
+function align_alloc(sd sz)
+	inc sz   #for entry
+	mult sz (dwsz)
+	sv s%ptrstackalign
+	setcall s# memcalloc(sz) #need 0 by default
+	sv start;set start s#
+	if s#!=(NULL)
+		add s :
+		set s#d^ sz
+		return (noerror)
+	endif
+	return (error)
+endfunction
+function align_free()
+	sv s%ptrstackalign
+	if s#!=(NULL)
+		call free(s#)
+	endif
+endfunction
+
+#er
+function stack_align(sd nr)
+	sd final_nr
+	setcall final_nr pref_call_align(nr)
+	if final_nr!=0
+		and final_nr 1
+		sd type;setcall type align_type()
+		if type==(even_align)
+			if final_nr==0
+				return (noerror)
+			endif
+		elseif   final_nr!=0
+				return (noerror)
+		endelseif
+		#Stack aligned on 16 bytes. Depending on the number of arguments
+		vdata code%ptrcodesec
+		chars align={REX_Operand_64,0x83,0xEC,8}
+		sd err
+		SetCall err addtosec(#align,(4),code)
+		return err
+	endif
+	return (noerror)
+endfunction
+#nr
+function pref_call_align(sd nr)
+	data ptr_call_align%ptr_call_align
+	sd type;set type ptr_call_align#
+	if type!=(call_align_no)
+		sd conv;setcall conv convdata((convdata_total))
+		if nr<=conv
+			if conv==(lin_convention)
+				if type==(call_align_yes_all)
+					return 2 #to align at no args
+				endif
+			else
+				if type!=(call_align_yes_arg)
+					return conv
+				endif
+			endelse
+		else
+			return nr
+		endelse
+	endif
+	return 0
+endfunction
+
+
+#err
+function align_ante(sd arguments)
+	setcall arguments pref_call_align(arguments)
+	if arguments!=0
+		sd pointer
+		#sd container%ptrstackAlign
+		#wanting with three pass, the impXorfnX is not ready at first pass: call getcontplusReg(container,#pointer)
+		#sub pointer (dwsz)
+		#test if in a function
+		#sd fnboolptr%globalinnerfunction
+		#if fnboolptr#==(TRUE)
+		#	sub pointer (dwsz)
+		#endif
+		setcall pointer align_ptype()
+		sd test=1;and test arguments
+		sd test2=0xffFF
+		if test==0
+		#even, put on low word
+			inc pointer#
+			and test2 pointer#
+			if test2!=0
+				return (noerror)
+			endif
+			return "More than 65535 even calls?"
+		endif
+		#odd, put on high word
+		sd bag;set bag pointer#
+		div bag 0x10000
+		inc bag
+		and test2 bag
+		if test2!=0x8000
+			#set to high word
+			#this is not endian independent add pointer (wsz)
+			#and pointer#s^ bag
+			#or pointer#s^ bag
+			#div bag 0x100
+			#inc pointer
+			#and pointer#s^ bag
+			#or pointer#s^ bag
+			mult bag 0x10000
+			sd bag2;set bag2 pointer#
+			and bag2 bag;or bag2 bag
+			and pointer# (0xffFF)
+			or pointer# bag2
+			return (noerror)
+		endif
+		return "32768 odd calls?"  #to div without sign
+	endif
+	return (noerror)
+endfunction
+
+function align_resolve()
+	sv end%ptrstackalign
+	sd pointer;set pointer end#
+	add end :
+	set end end#d^
+	add end pointer
+	while pointer!=end
+		sd bag;set bag pointer#
+		if bag!=0
+			sd even=0xffFF;and even bag
+			div bag 0x10000
+			if even>=bag
+				set pointer# (even_align)
+			else
+				set pointer# (odd_align)
+			endelse
+		endif
+		add pointer (dwsz)
+	endwhile
+endfunction
+
+#ptype
+function align_ptype()
+	sd ptrfunctionTagIndex%ptrfunctionTagIndex
+	sv container%ptrstackalign
+	sd cont;set cont container#
+	sd index=dwsz;mult index ptrfunctionTagIndex#
+	add cont index
+	return cont
+endfunction
+
+#type
+function align_type()
+	sd cont;setcall cont align_ptype()
+	return cont#
+endfunction
+
+#err
+function align_entryscope()
+	sd type;setcall type align_type()
+	if type!=0
+		#bt rbx,3 (offset 3) x8 or x0
+		chars bt={REX_Operand_64,0x0F,0xBA,bt_reg_imm8|ebxregnumber,3}
+		#j(c|nc);sub rbx,8
+		chars jump#1;chars *=4;chars *={REX_Operand_64,0x83,RegReg*tomod|(5*toregopcode)|ebxregnumber,8}
+		if type==(even_align)
+			#there are more even calls to align
+			#Jump short if not carry
+			set jump (0x73)
+		else
+			#odd
+			#Jump short if carry
+			set jump (0x72)
+		endelse
+		vdata code%ptrcodesec
+		sd err
+		SetCall err addtosec(#bt,(5+6),code)
+		return err
+	endif
+	return (noerror)
+endfunction
--- ocompiler-1.orig/src/files/functions/64/bit.s
+++ ocompiler-1/src/files/functions/64/bit.s
@@ -51,54 +51,6 @@ function nr_of_args_64need_count()
 		sd p;setcall p nr_of_args_64need_p_get();inc p#
 	endif
 endfunction
-#er
-function stack_align(sd nr)
-	sd final_nr
-	setcall final_nr pref_call_align(nr)
-	if final_nr!=0
-		#Stack aligned on 16 bytes. Depending on the number of arguments, jumpCarry or jumpNotCarry
-		sd err
-		vdata code%ptrcodesec
-		#bt rsp,3 (offset 3)
-		chars hex_x={REX_Operand_64,0x0F,0xBA,bt_reg_imm8|espregnumber,3}
-		#j(c|nc);sub rsp,8
-		chars jump#1;chars *=4;chars *={REX_Operand_64,0x83,0xEC,8}
-
-		and final_nr 1
-		#Jump short if not carry
-		if final_nr==0
-			set jump (0x73)
-		#Jump short if carry
-		else;set jump (0x72)
-		endelse
-
-		SetCall err addtosec(#hex_x,(5+6),code)
-		return err
-	endif
-	return (noerror)
-endfunction
-#nr
-function pref_call_align(sd nr)
-	data ptr_call_align%ptr_call_align
-	sd type;set type ptr_call_align#
-	if type!=(call_align_no)
-		sd conv;setcall conv convdata((convdata_total))
-		if nr<=conv
-			if conv==(lin_convention)
-				if type==(call_align_yes_all)
-					return 2 #to align at no args
-				endif
-			else
-				if type!=(call_align_yes_arg)
-					return conv
-				endif
-			endelse
-		else
-			return nr
-		endelse
-	endif
-	return 0
-endfunction
 
 ##REX_W
 function rex_w(sd p_err)
--- ocompiler-1.orig/src/files/functions/actions/dataparse.s
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -4,12 +4,12 @@
 Function entryvarsfns(data content,data size)
 	Data notype=notype
 	Data pointer#1
-	SetCall pointer strinvars(content,size,notype)
+	SetCall pointer strinvars_ignoreref(content,size,notype)
 	Data noerr=noerror
 	Data zero=0
 	If pointer==zero
 		Data fns%ptrfunctions
-		SetCall pointer vars(content,size,fns)
+		SetCall pointer vars_ignoreref(content,size,fns)
 		If pointer==zero
 			Return noerr
 		EndIf
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -30,6 +30,15 @@ Function unresolvedcallsfn(data struct,d
 	Return err
 EndFunction
 
+#err
+function fnimp_exists(sd content,sd size)
+	sd fns%ptrfunctions
+	sd d;setcall d vars_ignoreref(content,size,fns)
+	if d==0
+		return (noerror)
+	endif
+	return "Function/Import name is already defined."
+endfunction
 #b
 function is_funcx_subtype(sd subtype)
 	if subtype==(cFUNCTIONX)
@@ -41,9 +50,9 @@ function is_funcx_subtype(sd subtype)
 endfunction
 #subtype is only when declarefn(not callfn)
 #err
-Function parsefunction(data ptrcontent,data ptrsize,data declare,sd subtype)
+Function parsefunction(data ptrcontent,data ptrsize,data declare,sd subtype,sd el_or_e)
 	Data true=TRUE
-	Data false=FALSE
+	#Data false=FALSE
 
 	Data zero=0
 	Data fns%ptrfunctions
@@ -75,25 +84,21 @@ Function parsefunction(data ptrcontent,d
 		Data fnnr=functionsnumber
 		Data value#1
 		Data ptrvalue^value
-
 		sd scope64
-		data p_two_parse%cptr_twoparse
-		if p_two_parse#==2
-			Data globalinnerfunction%globalinnerfunction
-			#set for searching in the main scope for unique value
-			Data aux#1
-			Set aux globalinnerfunction#
-			Set globalinnerfunction# false
-			SetCall err entryvarsfns(content,sz)
-			If err!=noerr
-				Return err
-			EndIf
-			Set globalinnerfunction# aux
+		data p_parses%ptr_parses
+		if p_parses#==(pass_fns_imps)
+			setcall err fnimp_exists(content,sz) #it is at first pass when only fns and imports are
+			if err!=(noerror)
+				return err
+			endif
 
-			#is objfnmask related to the introduction of entry tag at objects, is interacting there
 			Data mask#1
-			Data ptrobjfnmask%ptrobjfnmask
-			Set mask ptrobjfnmask#
+			#Data ptrobjfnmask%ptrobjfnmask
+			if el_or_e==(TRUE)
+				Set mask (referencebit)
+			else
+				set mask 0
+			endelse
 
 			setcall scope64 is_funcx_subtype(subtype)
 			if scope64==(TRUE)
@@ -105,8 +110,10 @@ Function parsefunction(data ptrcontent,d
 			EndIf
 			#skip the rest of the command at recon
 			Call advancecursors(ptrcontent,ptrsize,ptrsize#)
+			#
 			return noerr
 		else
+			#pass_write
 			sd pointer
 			setcall pointer vars_ignoreref(content,sz,fns)
 			Call advancecursors(ptrcontent,ptrsize,sz)
@@ -168,12 +175,21 @@ Function parsefunction(data ptrcontent,d
 			endelse
 		endelse
 	Else
-		data boolindirect#1
 		Data ptrdata#1
-		setcall err prepare_function_call(ptrcontent,ptrsize,sz,#ptrdata,#boolindirect)
-		if err!=(noerror)
-			return err
-		endif
+		if p_parses#==(pass_calls)
+			SetCall ptrdata vars_ignoreref(content,sz,fns)
+			if ptrdata!=0
+				call is_for_64_is_impX_or_fnX_set(ptrdata)
+			endif
+			call advancecursors(ptrcontent,ptrsize,sz)
+		else
+			#pass_write
+			data boolindirect#1
+			setcall err prepare_function_call(ptrcontent,ptrsize,sz,#ptrdata,#boolindirect)
+			if err!=(noerror)
+				return err
+			endif
+		endelse
 	EndElse
 
 	Call stepcursors(ptrcontent,ptrsize)
@@ -192,35 +208,57 @@ Function parsefunction(data ptrcontent,d
 		EndIf
 		call entryscope()
 	Else
-		sd bool;setcall bool is_for_64_is_impX_or_fnX_get()
-		if bool==(FALSE)
-			if sz!=zero
-				SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(TRUE)) #there are 3 more arguments but are not used
-			endif
-		else
-			sd p;setcall p nr_of_args_64need_p_get();set p# 0 #also at 0 at win will be sub all shadow space
-			if sz!=zero
-				set content ptrcontent#
-				set size ptrsize#
-				SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(FALSE)) #there are 3 more arguments but are not used
-				if err==noerr
-					setcall err stack_align(p#)
+		sd p
+		sd pbool;setcall pbool is_for_64_is_impX_or_fnX_p_get()
+		if p_parses#==(pass_calls)
+			if pbool#==(FALSE)
+				call advancecursors(ptrcontent,ptrsize,sz)
+			else
+				if sz!=zero
+					setcall p nr_of_args_64need_p_get();set p# 0
+					SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(FALSE)) #there are 3 more arguments but are not used
 					if err==noerr
-						set ptrcontent# content
-						set ptrsize# size
-						SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(TRUE)) #there are 3 more arguments but are not used
+						setcall err align_ante(p#)
 					endif
+				else
+					setcall err align_ante(0)
+				endelse
+				if err!=noerr
+					return err
+				endif
+				set pbool# (FALSE)
+			endelse
+		else
+			#pass_write
+			if pbool#==(FALSE)
+				if sz!=zero
+					SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(TRUE)) #there are 3 more arguments but are not used
 				endif
 			else
-				setcall err stack_align(0)
+				setcall p nr_of_args_64need_p_get();set p# 0 #also at 0 at win will be sub all shadow space
+				if sz!=zero
+					set content ptrcontent#
+					set size ptrsize#
+					SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(FALSE)) #there are 3 more arguments but are not used
+					if err==noerr
+						setcall err stack_align(p#)
+						if err==noerr
+							set ptrcontent# content
+							set ptrsize# size
+							SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,(TRUE)) #there are 3 more arguments but are not used
+						endif
+					endif
+				else
+					setcall err stack_align(0)
+				endelse
 			endelse
-		endelse
-		If err==noerr
-			setcall err write_function_call(ptrdata,boolindirect,(FALSE))
+			If err==noerr
+				setcall err write_function_call(ptrdata,boolindirect,(FALSE))
+			EndIf
 			if err!=noerr
 				return err
 			endif
-		EndIf
+		endelse
 	EndElse
 	Call stepcursors(ptrcontent,ptrsize)
 	Return noerr
--- ocompiler-1.orig/src/files/functions/commons/vars.s
+++ ocompiler-1/src/files/functions/commons/vars.s
@@ -142,7 +142,7 @@ endfunction
 Const notype=0
 
 #null or a pointer to the variable
-Function searchinvars(str content,data size,data ptrtype,data warningssearch)
+Function searchinvars(str content,data size,data ptrtype,data warningssearch,sd setref)
 	Data data#1
 	Data ptrcontainer#1
 
@@ -153,7 +153,7 @@ Function searchinvars(str content,data s
 	Set i 0
 	While i<nrofvars
 		SetCall ptrcontainer getstructcont(i)
-		SetCall data varscore(content,size,ptrcontainer,warningssearch)
+		SetCall data vars_core_ref(content,size,ptrcontainer,warningssearch,setref)
 		If data!=null
 			If warningssearch==null
 				If ptrtype!=null
@@ -202,7 +202,13 @@ EndFunction
 #searchinvars
 Function strinvars(str content,data size,data ptrtype)
 	Data pointer#1
-	SetCall pointer searchinvars(content,size,ptrtype,(NULL))
+	SetCall pointer searchinvars(content,size,ptrtype,(NULL),1)
+	Return pointer
+EndFunction
+#searchinvars
+Function strinvars_ignoreref(str content,data size,data ptrtype)
+	Data pointer#1
+	SetCall pointer searchinvars(content,size,ptrtype,(NULL),0)
 	Return pointer
 EndFunction
 
--- ocompiler-1.orig/src/files/functions/dataassign.s
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -335,14 +335,6 @@ function undefinedvar_fn()
 	return "Undefined variable/function name."
 endfunction
 
-#import bit
-function importbit(sd pointer)
-	Add pointer (maskoffset)
-	sd value
-	set value pointer#
-	And value (idatabitfunction)
-	return value
-endfunction
 #value
 function get_function_value(sd impbit,sd pointer)
 	if impbit!=0
--- ocompiler-1.orig/src/files/functions/elf/elf.s
+++ ocompiler-1/src/files/functions/elf/elf.s
@@ -214,8 +214,8 @@ Const symind=3
 Data datastrtab#1
 Data codestrtab#1
 
-Data objfnmask#1
-Const ptrobjfnmask^objfnmask
+#Data objfnmask#1
+#Const ptrobjfnmask^objfnmask
 
 #inplace	direct: at writetake: sd^data
 #			   writevar:  data a^dataB    here is also notinplace data^import
--- ocompiler-1.orig/src/files/functions/enumbags.s
+++ ocompiler-1/src/files/functions/enumbags.s
@@ -65,6 +65,7 @@ Function freeclose()
 
 	call platform_free()
 
+	call align_free()
 	call scopes_free()
 EndFunction
 
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -21,7 +21,7 @@ Function warnings(sd p_err,sd has_named_
 		setcall var scopes_searchinvars(p_err,#fn_name)
 		If var==(NULL)
 			if has_named_entry==(FALSE)
-				SetCall var searchinvars((NULL),0,(NULL),p_err)
+				SetCall var searchinvars((NULL),0,(NULL),p_err) #,setref unused
 				if var!=(NULL)
 					set fn_name "(entry)"
 				endif
--- ocompiler-1.orig/src/files/functions/scopes.s
+++ ocompiler-1/src/files/functions/scopes.s
@@ -35,20 +35,32 @@ function scopes_free()
 endfunction
 
 #err
-function scopes_alloc(sd has_named_entry)
-	sv ptrfunctions%ptrfunctions
-	sd i=0
-	sd fns
-	sv last
-	call getcontandcontReg(ptrfunctions,#fns,#last)
-	add last fns
-	while fns!=last
-		add fns (nameoffset)
-		addcall fns strlen(fns)
-		inc fns
+function scopes_alloc(sd has_named_entry,sd i)
+	#now at three pass the fns are mixed with imports
+	#sv ptrfunctions%ptrfunctions
+	#sd i=0
+	#sd fns
+	#sv last
+	#call getcontandcontReg(ptrfunctions,#fns,#last)
+	#add last fns
+	#while fns!=last
+	#	add fns (nameoffset)
+	#	addcall fns strlen(fns)
+	#	inc fns
+	#	inc i
+	#endwhile
+	#mult i :
+	#
+	#sd almost_same_size_container%ptrstackAlign
+	#call getcontReg(almost_same_size_container,#i)
+	#if has_named_entry==(FALSE)
+	#	sub i :
+	#endif
+	if has_named_entry==(TRUE)
 		inc i
-	endwhile
+	endif
 	mult i :
+	#
 	sv s%scopesbag_ptr
 	setcall s# memcalloc(i)
 	sv start;set start s#
@@ -111,7 +123,7 @@ endfunction
 
 function scopes_searchinvars(sd p_err,sv p_name)
 	sd psz%scopesbag_size_ptr
-	#there are imports after fns with the two pass, and now can get number of local fns, but importbit can be rethinked for something else
+	#now at three pass the fns are mixed with imports
 	sd sz;set sz psz#
 	div sz :
 	sd i=0
@@ -120,18 +132,21 @@ function scopes_searchinvars(sd p_err,sv
 	sd fns
 	call getcont(ptrfunctions,#fns)
 	while i!=sz
+		sd ibit;setcall ibit importbit(fns)
 		add fns (nameoffset)
-		sd data
-		sd scope
-		setcall scope scopes_get_scope(i)
-		setcall data searchinvars_scope_warn(p_err,scope)
-		if data!=(NULL)
-			set p_name# fns
-			return data
+		if ibit==0
+			sd data
+			sd scope
+			setcall scope scopes_get_scope(i)
+			setcall data searchinvars_scope_warn(p_err,scope)
+			if data!=(NULL)
+				set p_name# fns
+				return data
+			endif
+			inc i
 		endif
 		addcall fns strlen(fns)
 		inc fns
-		inc i
 	endwhile
 	return (NULL)
 endfunction
--- ocompiler-1.orig/src/files/functions/stack/stack.s
+++ ocompiler-1/src/files/functions/stack/stack.s
@@ -48,7 +48,7 @@ function growramp(data value)
 	data ptrramp#1
 	setcall ptrramp getptrramp()
 	sd ret;set ret ptrramp#
-	subcall ptrramp# stack64_add(value)
+	addcall ptrramp# stack64_add(value)
 	return ret
 endfunction
 #ind(before)
@@ -62,9 +62,7 @@ endfunction
 function getramp_ebxrel()
 	data ptrramp#1
 	setcall ptrramp getptrramp()
-	data ramp#1
-	setcall ramp neg(ptrramp#)
-	return ramp
+	return ptrramp#
 endfunction
 
 #er
@@ -79,7 +77,7 @@ function entryscope()
 	#mov e(r)bx e(r)sp
 	const scope3_start=!;chars scope3={moveatregthemodrm,0xdc};const scope3_sz=!-scope3_start
 	#sub e(r)bx dword
-	const scope4_start=!;chars scope4={0x81,0xc3}
+	const scope4_start=!;chars scope4={0x81,0xeb}
 	data *scopestack=0;const scope4_sz=!-scope4_start
 
 	setcall err addtosec(#scope1,(scope1_sz),container);if err!=(noerror);return err;endif
@@ -90,8 +88,12 @@ function entryscope()
 	setcall err rex_w_if64();if err!=(noerror);return err;endif
 	setcall err addtosec(#scope4,(scope4_sz),container);if err!=(noerror);return err;endif
 	#
-	data set=0;call ramp_index(set,container)
-	return (noerror)
+	setcall err align_entryscope()
+	if err==(noerror)
+		data set=0;call ramp_index(set,container)
+		return (noerror)
+	endif
+	return err
 endfunction
 
 #
--- ocompiler-1.orig/src/files/functions/stack/stack_inits.s
+++ ocompiler-1/src/files/functions/stack/stack_inits.s
@@ -7,6 +7,12 @@ function data_get_maskbit(ss pointer,sd
 	return bit
 endfunction
 
+#import bit
+function importbit(sd pointer)
+	sd bit
+	setcall bit data_get_maskbit(pointer,(idatabitfunction))
+	return bit
+endfunction
 function stackbit(sd pointer)
 	sd bit
 	setcall bit data_get_maskbit(pointer,(stackbit))
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -197,9 +197,7 @@ Data unresLocalReg#1
 Const ptrunresLocal^unresLocalMax
 
 Const containersbegin^includesMax
-Const containersalmostend^unresLocalReg
-Const containersend=containersalmostend+dwsz
-Const containerssize=containersend-containersbegin
+Const containerssize=!-containersbegin
 
 chars dummyEntry_data#sizeof_minimumentry
 
@@ -326,8 +324,8 @@ const rampadd_value_off=bsz
 
 
 
-data twoparse#1
-const cptr_twoparse^twoparse
+data parses#1
+const ptr_parses^parses
 
 
 
@@ -410,3 +408,14 @@ const call_align_yes_arg=3
 const last_call_align_input=call_align_yes_arg
 data call_align#1
 const ptr_call_align^call_align
+
+const even_align=-1
+#const no_align=0
+const odd_align=1
+
+data functionTagIndex#1  #need to be at call pass and last pass(scopes) and scopes alloc
+const ptrfunctionTagIndex^functionTagIndex
+
+const pass_fns_imps=3
+const pass_calls=2
+const pass_write=1
--- ocompiler-1.orig/src/files/inits/inits.s
+++ ocompiler-1/src/files/inits/inits.s
@@ -85,4 +85,5 @@ set real_exit_end (FALSE)
 
 sd el_or_e=FALSE
 
-sd functionTagIndex=0
+#needing also at pass call and pass write
+set functionTagIndex 0
--- ocompiler-1.orig/src/files/inits_top.s
+++ ocompiler-1/src/files/inits_top.s
@@ -17,4 +17,5 @@ set safecurrentdirtopath (NULL)
 
 call initpreferences()
 
+set stackalign (NULL)
 set scopesbag (NULL)
