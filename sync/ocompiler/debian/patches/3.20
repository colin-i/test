Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-3.20) bionic; urgency=medium
 .
   * 64ignore, return
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-10-28

--- ocompiler-1.orig/.ocompiler.txt
+++ ocompiler-1/.ocompiler.txt
@@ -31,4 +31,8 @@ function_name=0
 Log import functions
 [if logfile is 1]
 0 is No; 1 is Yes
-log_import_functions=1
\ No newline at end of file
+log_import_functions=1
+
+Ignore 64-bits tags if detected
+0 is No; 1 is Yes
+neg_64=0
\ No newline at end of file
--- ocompiler-1.orig/Makefile
+++ ocompiler-1/Makefile
@@ -1,27 +1,31 @@
-#prefix = /usr
-
-#DEFS =  -DPLATFORM64=1\
-#        -DHAVE_ERRNO_H=1
-
 all: o
-#compiler
 
-OBJ = obj.o
+OB = obj
+OBJ = $(OB).o
+FULLOBJ = ./src/linux/$(OB)
+FULLOBJS = $(FULLOBJ).s
+FULLOBJO = $(FULLOBJ).o
 
 %.o: %.txt
-	base64 -d $< > $@
+	-if [ -s $< ];then base64 -d $< > $@;else o ${FULLOBJS};fi
+
+ATLDCOM = $(LD) -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 -o $@ -lc
 
 o: $(OBJ)
-	$(LD) -melf_i386 --dynamic-linker=/lib/ld-linux.so.2 -o $@ $^ -lc
-# $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)
+	if [ -f ${OBJ} ];then $(ATLDCOM) ${OBJ};else $(ATLDCOM) ${FULLOBJO};fi
 
 install: o
 	install -D o \
 		$(DESTDIR)$(prefix)/bin/o
 
-clean:
+clean-compile:
+	-rm -f $(FULLOBJO)
+	-rm -f $(OBJ)
+
+clean-link:
 	-rm -f o
 
+clean: clean-compile clean-link
 distclean: clean
 
 uninstall:
--- /dev/null
+++ ocompiler-1/README.md
@@ -0,0 +1,18 @@
+# O Compiler
+
+## Install
+On Windows here https://github.com/colin-i/o/releases .\
+On Ubuntu, but other distros may have the same tree and dependencies.
+```sh
+sudo add-apt-repository ppa:colin-i/ppa
+```
+Or the *manual installation step* from this link *https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6* \
+Update and install:
+```sh
+sudo apt-get update
+sudo apt-get install ocompiler
+```
+
+## Donations
+The *donations* section is here
+*https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6*
--- /dev/null
+++ ocompiler-1/ReadMe.old.txt
@@ -0,0 +1,52 @@
+O Compiler
+
+
+Files and Folders:
+
+fix\
+
+- fix for symbols folder
+
+src\
+
+- has the source code
+
+changelog.old.html
+
+- has the history of the program before git creation (last bump: 1.3.16, December 07, 2015)
+
+compiler.html
+
+- explains how to use o.exe
+
+o.html
+
+- O Langauage Documentation file
+
+ReadMe.old.txt
+
+- this file
+
+make
+
+- Linux shell file to compile the source for executable; the output file will be in the './build/' folder
+
+make.bat
+
+- Windows bat file to compile the source for executable; the output file will be in the './build/' folder
+
+make_lin_gnu
+
+- Linux shell file to compile the source and to link it with gcc (mingw binutils tools); the output file will be in the './buildg/' folder
+
+make_win32_fromLin_gnu
+
+- Linux shell file to compile the source and to link it with mingw-w64-i686 for linux; the output file will be 'ocompiler.zip'
+
+make_win64_fromLin_gnu
+
+- Linux shell file to compile the source and to link it with mingw-w64-x86-64 for linux; the output file will be in the './buildg/' folder
+
+.ocompiler.txt
+
+- the program parse this file to set the preferences
--- /dev/null
+++ ocompiler-1/changelog.old.html
@@ -0,0 +1,68 @@
+
+<p>O Compiler 1.3.9: <b>EntryLinux</b> added. Returns <i>exit</i> in the scope at <i>return</i>s.</p>
+
+<p>O Compiler 1.3.8: <b>ImportAfterCall</b> added. Used in objects to import an extern defined AfterCall.</p>
+
+<p>O Compiler 1.3.7: <b>AfterCall</b> added. Set a value to be tested with zero at every call and to return if it is not zero.</p>
+
+<p>O Compiler 1.3.4: <b>FunctionX</b> added. It works with ImportX and to be called from C 64-bit code.</p>
+
+<p>O Compiler 1.3.2: Size of an integer constant sign added: <b>:</b>. Returns 4B on 32-bits, 8B on 64-bits.</p>
+
+<p>O Compiler 1.3.1: <b>IncSt</b> command added. Adds 32/64 bits at the argument, depending on the build format.</p>
+
+<p>O Compiler 1.3: Build objects for 64 bit windows applications. New format: ElfObj64Microsoft. New tags: ImportX, SetX.</p>
+
+<p>O Compiler 1.2.82: Log imported functions preference.</p>
+
+<p>O Compiler 1.2.80: Semicolon added for breaking the lines. Previous sings were new line and carriage return plus new line.</p>
+
+<p>O Compiler 1.2.79: CallEx added for prepared calls.</p>
+
+<p>O Compiler 1.2.75: <b>warning on</b> and <b>warning off</b> language commands. This can be used for example to share files between projects.</p>
+
+<p>O Compiler 1.2.74: strings definitions can have multiple rows startings from this version</p>
+
+<p>O Compiler 1.2.68: Not sign (~) at numbers and constants added. Fix at quotation and comma values parser.</p>
+
+<p>O Compiler 1.2.66: Fix at function in code.</p>
+
+<p>O Compiler 1.2.64: Raw strings(not depending on variables) can be used at the code operations starting with this version.</p>
+
+<p>O Compiler 1.2.62: Added prefix at any variable operation, the current data section cursor with the "!" character, and function name placed in code option for debuggers.</p>
+
+<p>O Compiler 1.2.50: Numbers and constants usage at code operations added: arithmetic, bitwise operations, and the rest.</p>
+
+<p>O Compiler 1.2.41: stack variables are now aligned ascendent (like data).</p>
+
+<p>O Compiler 1.2.35: Stack variables added. These can be used at recursive functions or for volatile variable causes.</p>
+
+<p>O Compiler 1.2.22: Update: A variables that points to a function (imported or created) can be called like a function.</p>
+
+<p>O Compiler 1.2.18: Additional symbol preferences options for warnings and for log file. Used to handle code functions at object format.</p>
+
+<p>O Compiler 1.2.17: Additional <b>include</b> option added: The active folder can now be changed relative to the include command. To achieve that there is the "Include active folder" at the preferences.</p>
+
+<p>O Compiler 1.2.16: Flexibility added: at <b>chars</b> (chars name=value); at <b>str</b> (str name="string").</p>
+
+<p>O Compiler 1.2.10:
+ 	New preference option: <b>log file</b>, used when a log with the working path and all the compiled files results needed.<br>
+	New command: <b>Exit</b>, it will perform a linux sys_exit command, see the laguage documentation for details.</p>
+
+
+<p>O Compiler 1.2.8: Improvement added: arguments at function declaration can now be prefixed with unreference safety sign (*).</p>
+
+<p>O Compiler 1.2.1: Functions at object format can now have pointers: Pointer data declaration method now accepts functions (without constants).</p>
+
+<p>O Compiler 1.2, October 19 2012:
+	New format added: <b>ElfObj</b>. Can be used to create object files that can be united with a linker (e.g: gcc from gnu).
+	<br>
+	New declaration sign added: <b>%</b>. Used at elfobj format, has no effect at executables. Relocations are added automatically, but % sign can be used instead of = sign to add a data relocation, if required.</p>
+
+<p>O Compiler 1.1, October 13 2012:
+	O Compiler can now creates elf files for linux systems. Use the "Format elf" command at the start of the program.
+	<br>
+	All functions can now be called in combinations like AddCall, OrCall, AndCall, etc.</p>
+
+<p>O Compiler 1.0, October 2 2012: Release date.</p>
+
--- /dev/null
+++ ocompiler-1/compiler.html
@@ -0,0 +1,17 @@
+
+<p style='margin-top:40px'><b>O Compiler</b></p>
+<p>
+	O Compiler is a tool to compile O programming language code. The language is easy to learn.
+	The compiler creates <b>pe</b> (Portable Executable) executable files and <b>elf</b> (Executable and Linking Format) executable and object files.
+	Can be used on windows and linux.
+	There is a documentation file in package.
+	O Compiler can be used very simple.
+	<br>
+	To compile a file there are two methods:
+	<br>
+	1. <i>Windows only</i>. Start the program and select a file.
+	<br>
+	2. Start the program with one argument (ex: from the command line). Example: windows, <b>o.exe src/windows/o.o</b>; linux, <b>./o "./src/linux/o.o"</b>
+	<br>
+	To disable warnings see the file '.ocompiler.txt'.
+</p>
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/fix/c.def
@@ -0,0 +1,16 @@
+LIBRARY msvcrt.dll
+EXPORTS
+realloc
+free
+sprintf
+memcpy
+memset
+exit
+_open
+_close
+_read
+_write
+_chdir
+_getcwd
+_lseek
+strcat
--- /dev/null
+++ ocompiler-1/fix/comdlg.def
@@ -0,0 +1,3 @@
+LIBRARY comdlg32.dll
+EXPORTS
+GetOpenFileNameA
--- /dev/null
+++ ocompiler-1/fix/kernel.def
@@ -0,0 +1,5 @@
+LIBRARY kernel32.dll
+EXPORTS
+GetCommandLineA
+GetTickCount
+GetModuleFileNameA
--- /dev/null
+++ ocompiler-1/fix/user.def
@@ -0,0 +1,3 @@
+LIBRARY user32.dll
+EXPORTS
+MessageBoxA
--- /dev/null
+++ ocompiler-1/make
@@ -0,0 +1,6 @@
+
+./o "./src/linux/o.s"
+
+mkdir ./build
+mv ./src/linux/o ./build/
+cp .ocompiler.txt ./build/
--- /dev/null
+++ ocompiler-1/make.bat
@@ -0,0 +1,5 @@
+
+md build
+o.exe "src/windows/o.s"
+move src\windows\o.exe build\
+copy .ocompiler.txt build\
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/make_lin_gnu
@@ -0,0 +1,5 @@
+
+./o ./src/linux/obj.s
+mkdir ./buildg
+gcc -Wl,-melf_i386 -nostdlib "./src/linux/obj.o" -o "./buildg/o" -lc
+cp ./.ocompiler.txt ./buildg/
--- /dev/null
+++ ocompiler-1/make_win32_fromLin_gnu
@@ -0,0 +1,25 @@
+
+#this is the new make for windows
+
+i686-w64-mingw32-dlltool --no-leading-underscore -d ./fix/user.def -l ./fix/libuser.a
+i686-w64-mingw32-dlltool --no-leading-underscore -d ./fix/kernel.def -l ./fix/libkernel.a
+i686-w64-mingw32-dlltool --no-leading-underscore -d ./fix/comdlg.def -l ./fix/libcomdlg.a
+i686-w64-mingw32-dlltool --no-leading-underscore -d ./fix/c.def -l ./fix/libc.a
+
+o ./src/windows/obj32.s
+i686-w64-mingw32-ld -s -nostdlib -entry _start ./src/windows/obj32.o -L./fix -luser -l kernel -lcomdlg -lc -o ./o.exe
+
+rm ./src/windows/obj32.o
+rm ./fix/libuser.a
+rm ./fix/libkernel.a
+rm ./fix/libcomdlg.a
+rm ./fix/libc.a
+
+mkdir ocompiler
+mv o.exe ocompiler
+cp .ocompiler.txt ocompiler
+
+zip -r ocompiler.zip ocompiler
+rm -r ./ocompiler
+
+unzip -l ocompiler.zip
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/make_win64_fromLin_gnu
@@ -0,0 +1,40 @@
+#########
+#the build is working
+#attention at GetCommandNameA to not return a 64 bit pointer and at realloc
+#modify the OPENFILENAME(needed when starting with no argument to compile):
+#       DWORD         lStructSize;       pad 0
+#QWORD  HWND          hwndOwner;         -
+#QWORD  HINSTANCE     hInstance;         -
+#QWORD  LPCTSTR       lpstrFilter;       -
+#QWORD  LPTSTR        lpstrCustomFilter; -
+#       DWORD         nMaxCustFilter;    x
+#       DWORD         nFilterIndex;      -
+#QWORD  LPTSTR        lpstrFile;         -
+#       DWORD         nMaxFile;          pad 0
+#QWORD  LPTSTR        lpstrFileTitle;    -
+#       DWORD         nMaxFileTitle;     pad 0
+#QWORD  LPCTSTR       lpstrInitialDir;   -
+#QWORD  LPCTSTR       lpstrTitle;        -
+#       DWORD         Flags;             x
+#       WORD          nFileOffset;       x
+#       WORD          nFileExtension;    -
+#QWORD  LPCTSTR       lpstrDefExt;       -
+#QWORD  LPARAM        lCustData;         -
+#QWORD  LPOFNHOOKPROC lpfnHook;          -
+#QWORD  LPCTSTR       lpTemplateName;    -
+#if (_WIN32_WINNT >= 0x0500)
+#QWORD  void          *pvReserved;       -
+#       DWORD         dwReserved;        x
+#       DWORD         FlagsEx;           -
+#endif
+
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/user.def -l ./fix/libuser.a
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/kernel.def -l ./fix/libkernel.a
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/comdlg.def -l ./fix/libcomdlg.a
+x86_64-w64-mingw32-dlltool --no-leading-underscore -d ./fix/c.def -l ./fix/libc.a
+
+./o ./src/windows/obj32_64code.s
+objcopy --input-target=elf32-i386 --output-target=elf64-x86-64 "./src/windows/obj32_64code.o" "./src/windows/obj64.o"
+mkdir ./buildg
+x86_64-w64-mingw32-ld -s -nostdlib -entry _start "./src/windows/obj64.o" -L./fix -luser -l kernel -lcomdlg -lc -o "./buildg/o64.exe"
+cp ./.ocompiler.txt ./buildg/
--- /dev/null
+++ ocompiler-1/o.html
@@ -0,0 +1,754 @@
+
+
+<style>
+	.code
+	{
+		font-family:'courier';
+		display:block;
+		margin-top:10px;
+		margin-bottom:10px;
+	}
+</style>
+
+<h2>O Language Documentation</h2>
+
+<h3><a href="#introduction">I. Introduction</a></h3>
+
+<h3><a href="#declaringdata">II. Declaring data</a></h3>
+
+<h3><a href="#basicoperations">III. Basic operations</a></h3>
+
+<h3><a href="#arithmeticoperations">IV. Arithmetic operations</a></h3>
+
+<h3><a href="#bitwiseoperations">V. Bitwise operations</a></h3>
+
+<h3><a href="#usingpointers">VI. Using pointers</a></h3>
+
+<h3><a href="#usingfunctions">VII. Using functions</a></h3>
+
+<h3><a href="#importinglibraries">VIII. Importing from libraries</a></h3>
+
+<h3><a href="#usingconditions">IX. Using conditions</a></h3>
+
+<h3><a href="#includingfiles">X. Including files</a></h3>
+
+<h3><a href="#linux">XI. Creating elf files for linux</a></h3>
+
+<h3><a href="#object">XII. Creating object files</a></h3>
+
+<h3><a href="#otheroperations">XIII. Other operations</a></h3>
+
+
+
+
+
+
+<h3><a name="introduction">I. Introduction</a></h3>
+<p>
+	The O language use constants, variables, pointers that are decimal integers or hexadecimal numbers.
+	<br>
+	Exe files for Windows and Elf executable files for Linux-based systems can be created.
+	<br>
+	Object files that have elf relocatable format can be created.
+	<br>
+	The language commands are case INsensitive.
+	<br>
+	At the beginning data can be declared with diverse methods.
+	<br>
+	The language has basic, arithmetic, bitwise operations.
+	<br>
+	The pointer mechanism is used to handle the variables more easily.
+	<br>
+	Functions can be declared and called.
+	<br>
+	External libraries can be imported.
+	<br>
+	Code conditions are if-elseif-else.
+	<br>
+	Files can be included to form complex programs.
+	<br>
+	There are 2 scopes: the global scope and the function scope.
+	<br>
+	The commands are from i386(but with the HEX macro anything can be wrote to code section).
+</p>
+
+<h3><a name="declaringdata">Declaring data</a></h3>
+<p>
+	The language has 6 names for data declaration (1 for constants and 5 for variables).
+
+	<p>
+	1. Constants
+	<br>
+	Language command: <b>Const</b>
+	<br>
+	Is a 32 bit value. It's content is declared into the memory(variables are declared into the file) therefore it is used at header files.
+	<br>
+	Constants have a separate declaration scope.
+	<br>
+	Constants(like ordinary integers) can be used at operations, but to avoid same names these are introduced with parenthesis (); without parenthesis only one integer can be used 
+	<br>
+	Example:
+	<br>
+	<a class="code">
+	Const TRUE=1<br>
+	if 20==(ConstantValue+11)<br>
+&emsp;		set	x	20<br>
+	endif<br>
+	Const x=3$2<br>
+    #is 3 pow 2 = 9</a>
+	</p>
+
+	<p>
+	2. Data
+	<br>
+	Language command: <b>Data</b>
+	<br>
+	Is a 32 bit value. It is used for operations, pointer operations.
+	<br>
+	Example:
+	<br>
+	<a class="code">Data variable=100</a>
+	</p>
+
+	<p>
+	3. Characters
+	<br>
+	Language command: <b>Chars</b>
+	<br>
+	Is a 8 bit value. It is used for operations.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+    Chars value={1}<br>
+    Chars value=1<br>
+    Chars value="Add text here"</a>
+	</p>
+
+	<p>
+	4. Strings
+	<br>
+	Language command: <b>Str</b>
+	<br>
+	Is a 32 bit value. It is used for pointer operations.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+    Chars charsdata="Text"<br>
+    Str string^charsdata<br>
+    Str text="Text data"</a>
+	</p>
+
+	<p>
+	5 and 6. Stack variables
+	<br>
+	Language command: <b>SD</b> = Stack Data
+	<br>
+	Language command: <b>SS</b> = Stack String
+	<br>
+	These variables are located on the stack. The methods for declaring SD/SS are the same as for Data/String.
+	<br>
+	When declaring stack variables without a sign this is equivalent with reserve one unit.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+    Chars charsdata="Text"<br>
+    function recursive(sd stackdata)<br>
+    endfunction<br>
+    ss string="Text"<br>
+    sd reserve<br>
+    sd another_reserve#1</a>
+	</p>
+
+	Data can be declared using 5 methods with 4 signs (the first sign has two methods):
+
+	<p>
+	1. Equal sign ('=')
+	<p>
+	First method is without '{}' signs.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Const fruits=20<br>
+        Data value=-70<br>
+        Chars text="The quick brown fox jumps over the laxy dog."<br>
+        Str stringASM=0x401000</a>
+	</p>
+	<p>
+	Second method is with '{}' signs.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data values={1,3,900}<br>
+        Chars bytes={1,4,100}<br>
+        Str pointers={0x401010,0x401020}</a>
+	</p>
+	</p>
+
+	<p>
+	2. Reservation sign ('#')
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data reserveDATA#10<br>
+        #the data section will have 40 bytes reserved<br>
+        Chars reserveCHARS#10<br>
+        #the data section will have 10 bytes reserved<br>
+        Str reservePointers#10<br>
+        #the data section will have 40 bytes reserved</a>
+	</p>
+
+	<p>
+	3. Pointer sign ('^')
+	<br>
+	Right side can have variables and at object format, when left side is not constant, can have functions.
+	Variables that point to a function can be called like a function. At the executables format (ex: not elfobj), when pointing to an import function the supported manner is with double pointer(^^); all cases, except this one, use the normal pointer(^).
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data value=1<br>
+        Data pointervalue^value<br>
+        Chars bytes="Raw text data declaration."<br>
+        Str text^bytes</a>
+	</p>
+
+	<p>
+	4. Relocation sign ('%')
+	<br>
+	Used at the object format. It acts like equal sign and then the offset is added to the REL section.
+	At executables it is ignored. At Str and quotations declaration the equal sign adds at object to Rel and this sign cannot be used here. At Chars the sign cannot be used.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Format ElfObj<br>
+        Data global=100<br>
+        Const ptrglobal^global<br>
+        Function test()<br>
+&emsp;			Data local=200<br>
+&emsp;			Data reference%ptrglobal<br>
+&emsp;			Add local reference#<br>
+&emsp;			#200+100<br>
+&emsp;			Return local<br>
+        EndFunction<br>
+        Entry main()<br>
+&emsp;		Data item#1<br>
+&emsp;		SetCall item test()<br>
+&emsp;		Data addmore=300<br>
+&emsp;		Data apointer^addmore<br>
+&emsp;		Add item apointer#<br>
+&emsp;		#300+300<br>
+&emsp;		Return item</a>
+	</p>
+<br>
+	<p>
+	Operations can be performed at declarations with arithmetic (+,-,*,/) and bitwise (&,|,^) signs.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Const Apples=3<br>
+        Const Pears=4<br>
+        Data Fruits=Apples+Pears<br>
+        Const Bananas=5<br>
+        Data FruitsStore={Apples,Pears+Bananas-2}<br>
+        Const value1=3*2<br>
+        Const value2=16/8<br>
+        Data variable=value1^value2<br>
+        #The result will be 4</a>
+	</p>
+
+	<p>
+	If a variable is not used at code operations a warning will be displayed for that variable name.
+	To create unreferenced values use the * sign.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data struct=3<br>
+        Data *structValue=1000<br>
+        Data structures^struct<br>
+        #the "structures" variable can be used in the program as a pointer<br>
+        Entry event(data *widget,data signal)<br>
+        return signal<br>
+        #only the signal value is checked for unreferences</a>
+	</p>
+
+	<p>
+	To disable the unreferenced warning or to set options at symbols see '.ocompiler.txt' file.
+	<br>
+	<br>
+	The data declarations can be made in the global scope or in the function scope.
+	All the constants are in the global scope.
+	When a function is declared all the variables declared in the function can not be used outside that function because they are in the function scope.
+	<br>
+	The "!" character represents the data section cursor and can be used in place of a number.
+	<br>
+	The ":" character represents the size of an integer and can be used in the place of a number. Returns 4B on 32-bits, 8B on 64-bits.
+	<br>
+	The <b>AfterCall</b> set a value to be tested with zero at the every call and to return if it is not zero.
+	<br>
+	<b>ImportAfterCall</b> is used in objects to import an extern defined AfterCall.
+	<br>
+	<a class="code">
+	aftercall qwer<br>
+	const z^qwer<br>
+	function test()<br>
+	str x%z<br>
+	set x# 1<br>
+	return 3<br>
+	endfunction<br>
+	entry main()<br>
+	call test()<br>
+	return 5<br>
+	#this return will not be executed and the last EAX(RAX) will be 3</a>
+	</p>
+</p>
+
+<h3><a name="basicoperations">III. Basic operations</a></h3>
+<p>
+	<p>
+	1. Return
+	<br>
+	Language command: <b>Return</b>
+	<br>
+	The return command is used to terminate the program or a function.
+	<br>
+	It returns the value. The asm value termination is <i>ret</i> (0xc3). To return <i>int 0x80</i>(0xcd,0x80;linux sys_exit;eax=1,ebx=return value) use <b>Exit</b>. If the scope is started with <b>EntryLinux</b> all returns will use <i>exit code</i> at <i>return</i> commands.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data true=1<br>
+        Return true<br>
+        #the program exit code will be 1</a>
+	</p>
+	<p>
+	2. Set
+	<br>
+	Language command: <b>Set</b>
+	<br>
+	The set command is used to set one value to another.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=20<br>
+        Data valueB=30<br>
+        Set valueA valueB<br>
+        #the valueA will be 30<br>
+        sd string<br>
+        set string "text test"<br>
+        #string will point to "text test"</a>
+	</p>
+	<p>
+	3. Incrementation
+	<br>
+	Language command: <b>Inc</b>
+	<br>
+	The incrementation command adds one to the value.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data value=30<br>
+        Inc value<br>
+        #the value will be 31</a>
+	<b>IncSt</b> adds 4 bytes to the argument or 8 bytes when building for 64-bit application.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        sd x#2;sd z^x<br>
+        set z# 1;incst z;set z# 2<br>
+        add z# x<br>
+        #at z# will be 3</a>
+	</p>
+	<p>
+	4. Decrementation
+	<br>
+	Language command: <b>Dec</b>
+	<br>
+	The decrementation command substracts one from the value.
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data value=30<br>
+        Dec value<br>
+        #the value will be 29</a>
+	</p>
+</p>
+
+
+<h3><a name="arithmeticoperations">IV. Arithmetic operations</a></h3>
+<p>
+	O language has 4 arithmetic operations.
+	<p>
+	1. Addition
+	<br>
+	Language command: <b>Add</b>
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=20<br>
+        Data valueB=30<br>
+        Add valueA valueB<br>
+        #the valueA will be 50</a>
+	</p>
+	<p>
+	2. Substraction
+	<br>
+	Language command: <b>Sub</b>
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=20<br>
+        Data valueB=30<br>
+        Sub valueA valueB<br>
+        #the valueA will be -10</a>
+	</p>
+	<p>
+	3. Multiplication
+	<br>
+	Language command: <b>Mult</b>
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=20<br>
+        Data valueB=30<br>
+        Mult valueA valueB<br>
+        #the valueA will be 600</a>
+	</p>
+	<p>
+	4. Division
+	<br>
+	Language command: <b>Div</b>
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=40<br>
+        Data valueB=20<br>
+        Div valueA valueB<br>
+        #the valueA will be 2</a>
+	</p>
+</p>
+<h3><a name="bitwiseoperations">V. Bitwise operations</a></h3>
+<p>
+	O language has 4 bitwise operations.
+	<p>
+	1. And
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=0x0101<br>
+        Data valueB=0x0001<br>
+        And valueA valueB<br>
+        #the valueA will be 0x0001</a>
+	</p>
+	<p>
+	2. Or
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=0x0101<br>
+        Data valueB=0x0011<br>
+        Or valueA valueB<br>
+        #the valueA will be 0x0111</a>
+	</p>
+	<p>
+	3. Xor
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=0x0101<br>
+        Data valueB=0x0011<br>
+        Xor valueA valueB<br>
+        #the valueA will be 0x0110</a>
+	</p>
+	<p>
+	4. Not
+	<br>
+	Example:
+	<br>
+	<a class="code">
+        Data valueA=0x0f0F0f0F<br>
+        Not valueA<br>
+        #the valueA will be 0xF0f0F0f0</a>
+	</p>
+</p>
+<h3><a name="usingpointers">VI. Using pointers</a></h3>
+<p>
+	Pointers can be used for manipulating the data. The pointer sign at code operations is '#'.
+    <br>
+	Example:
+    <br>
+	<a class="code">
+    <p>
+        Data valueA=1<br>
+        Data valueB=2<br>
+        Data pointerA^valueA<br>
+        Data pointerB^valueB<br>
+        Add pointerA# pointerB#<br>
+        #the valueA will be 3</p>
+
+	<p>
+        Chars data="ABC"<br>
+        Str string^data<br>
+        Chars c1#1<br>
+        Set c1 string#<br>
+        #the c1 will be A</p>
+
+	<p>
+        Inc string<br>
+        Set c2 string#<br>
+        #the c2 will be B</p>
+	</a>
+
+	<a class="code">
+	<p>
+        function test()<br>
+            data bits_per_sample=16<br>
+            return #bits_per_sample<br>
+        endfunction<br>
+        #the function call will return the pointer, and the variable can be modified<br>
+        sd a<br>
+        setcall a test()<br>
+        set a# 8</p>
+    </a>
+</p>
+<h3><a name="usingfunctions">VII. Using functions</a></h3>
+<p>
+	<b>Functions</b> can be declared and the called later in the program. Functions must be closed with <b>EndFunction</b> command.
+	To call a function use the <b>Call</b> command. To call a function and store the return value into a variable use the <b>SetCall</b> comand.
+	The functions must be declared before the main scope.
+	For example, at the first operation within the main scope (ex. basic Set command, or arithmetic Add command) the Entry Point is placed there and the Function statement it is no longer available.
+	<br>
+	All functions can be used in combinations like AddCall, OrCall, XorCall, etc.
+	<br>
+	Another feature CallEx for prepared calls. This is a 3 argument operation. The first argument is the function name, the second argument is the arguments pointer and the third argument is the number of arguments. The arguments are passed forward respecting the size of the integer(4 bytes on 32-bits app, 8 on 64). One usage can be when there is a call with a number of arguments detected at run-time and want to pass them all to another call.
+	<br>
+	The <b>Entry</b> command acts like a <b>Function</b> command but with some differences: 1. the scope is not changed to a local scope; 2. the function is not added to the unreferences list; 3. the <b>endfunction</b> command is not used at this function.
+	<p>
+	Example:
+	<a class="code">
+	<p>
+        Function numbers_inter(Data a)<br>
+&emsp;			sd value<br>
+&emsp;			setcall value numbers(a)<br>
+&emsp;			return value<br>
+        EndFunction<br>
+        Function numbers(Data a)<br>
+&emsp;			Data addmore=10<br>
+&emsp;			Data outvalue#1<br>
+&emsp;			Set outvalue a<br>
+&emsp;			Add outvalue addmore<br>
+&emsp;			Return outvalue<br>
+        EndFunction<br>
+        Data value=20<br>
+        Call numbers(value)<br>
+        #the return will be 30</p>
+	<p>
+        SetCall value numbers_inter(value)<br>
+        #the value will store 30</p>
+	<p>
+        chars format="%i %i"<br>
+        sd args^format;sd *={100,200}<br>
+        CallEx printf #args 3</p>
+	</a>
+	</p>
+</p>
+<h3><a name="importinglibraries">VIII. Importing from libraries</a></h3>
+<p>
+	The functions can be imported from an extern library and used like in the previous chapter.
+	To declare a library use the <b>Library</b> and to import a function use the <b>Import</b> command and provide the program function name.
+	<p>
+	Example:
+	<br>
+	<a class="code">
+        #A Hello World program<br>
+        #the default format is Format Exe<br>
+        Library "user32.dll"<br>
+        Import "MessageBoxA" Message<br>
+        Chars program="Program"<br>
+        Str title^program<br>
+        Chars data="Hello World"<br>
+        Str text^data<br>
+        Data null=0<br>
+        Call Message(null,text,title,null)<br>
+        #a message will be displayed with the "Hello World" text and the title "Program"<br>
+        Return null</a>
+	</p>
+</p>
+<h3><a name="usingconditions">IX. Using conditions</a></h3>
+<p>
+	The language has <b>if-elseif-else</b> conditions that must by closed with <b>endif-endelseif-endelse</b> commands.
+	The condition operators are:
+	<br>
+	Equal: ==
+	<br>
+	Not Equal: !=
+	<br>
+	Less: &#60;
+	<br>
+	Greater: &#62;
+	<br>
+	LessorEqual: &#60;=
+	<br>
+	GreaterorEqual:&#62;=
+	<p>
+	Example:
+	<a class="code">
+	<p>
+        Data a=3<br>
+        Data b=10<br>
+        Data c#1</p>
+	<p>
+        If a&#62;=b<br>
+&emsp;			Set c a<br>
+&emsp;			#This will not be executed<br>
+        ElseIf a==b<br>
+&emsp;			Set c a<br>
+&emsp;			#This will not be executed<br>
+        Else<br>
+&emsp;			Set c a<br>
+&emsp;			#This will be executed<br>
+        EndElse</p>
+	<p>
+        If a&#60;b<br>
+&emsp;			Set c a<br>
+&emsp;			#This will be executed<br>
+        EndIf</p>
+	<p>
+        If a&#62;b<br>
+&emsp;			Set c a<br>
+&emsp;			#This will not be executed<br>
+        ElseIf a&#60;=b<br>
+&emsp;			Set c a<br>
+&emsp;			#This will be executed<br>
+        EndElseIf</a>
+	</p>
+</p>
+<h3><a name="includingfiles">X. Including files</a></h3>
+<p>
+	The program can be formed with multiple files using the <b>Include</b> command.
+	<p>
+	Example:
+	<br>
+	<a class="code">
+        Include "files\\headers.h"<br>
+        Include "files\\main.o"</a>
+	</p>
+</p>
+<h3><a name="linux">XI. Creating elf files for linux</a></h3>
+<p>
+	Executable and Linking Format (ELF) files can be created for Unix - System V, operable on linux platforms.
+	<p>
+	Example:
+	<br>
+	<a class="code">
+        #linux example<br>
+        Format Elf<br>
+        Library "libc.so.6"<br>
+        #at first library, the interpretor is created: "lib/ld-linux.so.2"<br>
+        Import "printf" printf<br>
+        chars newlinedata={0xa,0}<br>
+        str newline^newlinedata<br>
+        call printf(newline)<br>
+        chars hello="Hello World!"<br>
+        str helloworld^hello<br>
+        call printf(helloworld)<br>
+        call printf(newline)<br>
+        data one=1;return one<br>
+        #linux sys_exit with the argument 1</a>
+	</p>
+</p>
+<h3><a name="object">XII. Creating object files</a></h3>
+<p>
+  <div>
+	Object files can be created that have elf relocatable format. The format is <b>ElfObj</b> or <b>Elf Obj</b>.
+	The relocations are created automatically.
+	There is the possibility to use the relocation sign ('%') when declaring a data that acts like equal sign but it also creates a relocation symbol to that address.
+	<p>
+	Example:
+	<br>
+	<a class="code">
+        Format ElfObj<br>
+        Data value#1<br>
+        Data pointervalue^value<br>
+        Entry main(data argc,data argv)<br>
+        Set value argc<br>
+        Data example#1<br>
+        Set example argv<br>
+        Return pointervalue#</a>
+	</p>
+  </div>
+  <div>
+	32-bit objects with some 64-bit code commands for Microsoft calling convention can be created by adding <b>64Microsoft</b> at <i>Format ElfObj</i>.<br>
+	To call with Microsoft calling convention use <b>ImportX</b>. To set the 64-bit return value use <b>SetX</b>. To prepare 64-bit convention function entry use <b>FunctionX</b>.
+	<p>
+	Example:
+	<br>
+	<a class="code">
+        Format ElfObj64Microsoft<br>
+        Entry main(data *argc,data *argv)<br>
+        importx "printf" printf<br>
+        data returnvalue#1;data test#1<br>
+        setxcall returnvalue printf("Test: ")<br>
+        call printf("Low: %i, High: %i",returnvalue,test)<br>
+        Return 1</a>
+	</p>
+	64-bit can be ignored from preferences.
+  </div>
+</p>
+<h3><a name="otheroperations">XIII. Other operations</a></h3>
+<p>
+	Other commands that comes with the language.
+	<br>
+	1. Comments
+	<br>
+	To comment the code use the sign <b>#</b> before any text.
+	<br>
+	2. Interrupts
+	<br>
+	To place software breakpoints use the <b>I3</b> command.
+	<br>
+	3. Hex
+	<br>
+	Write bytes in the code section.
+	<br>
+	4. Warnings
+	<br>
+	Turn on or off the warnings.
+	<p>
+	Example:
+	<br>
+	<a class="code">
+        #This is a comment and it will not be executed<br>
+        I3<br>
+        #this will pause the program into a debugger<br>
+        HEX 0x33,0xc0,0xC3<br>
+        #this will write 3 bytes in the code section<br>
+        warning off<br>
+        import "common_function" common<br>
+        #if the warnings are on this will let the function in peace</a>
+	</p>
+	<p>
+	When the option function_name from the .ocompiler.txt file is set to Yes(1), the name is wrote in the code section above the function, for debugging asm code.<br>
+	The preferences file can be placed in HOME folder on linux.<br>
+	Lines are ended with new line(0xa),carriage return and new line(0xd,0xa) or semicolon(0x3B).
+	</p>
+</p>
\ No newline at end of file
--- ocompiler-1.orig/obj.txt
+++ ocompiler-1/obj.txt
@@ -1,2649 +0,0 @@
-f0VMRgEBAQAAAAAAAAAAAAEAAwABAAAAAAAAAAAAAAA0AAAAAAAAADQAIAAAACgABwAGAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAIAAAAAAAAAAAIAAHM1
-AAAAAAAAAAAAAAQAAAAAAAAABwAAAAEAAAAGAAAAAAAAAHM3AAAeLQEAAAAAAAAAAAAEAAAAAAAA
-ACELAAACAAAAAAAAAAAAAACRZAEAIA4AAAYAAAADAAAABAAAABAAAAApCwAACQAAAAAAAAAAAAAA
-sXIBACgOAAADAAAAAQAAAAQAAAAIAAAAMwsAAAkAAAAAAAAAAAAAANmAAQCgwQAAAwAAAAIAAAAE
-AAAACAAAAD0LAAADAAAAAAAAAAAAAAB5QgIARQsAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAKAAwAAAAAAAAAAAAAAAEAAAAAAAAAABAAAAEAAAACAAAABAAAAAAAAAABAAAA
-AgAAAP////8AAAAALgAAAAAASAAAAAAAAAAAAAAAAAAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAdAEAAAAAAAB9AQAAAAAA
-AAAAAAABAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAA
-LAEAAGwAAAA4AQAAUAEAAEQBAABcAQAAeAAAABYAAAAAAAAAAAAAAEECAAAAAAAAAAAAAAAAAAD9
-AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQRQAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFABAAAAAgAAAAAAAAAAAAAAAwAAAAEAAAAABAAAAQAAAA
-AgAAAQAAAAAAAAAFAAEAAAAAAABAAAAAAAAAAAAAAAMAAAAAEAAAABAAAAAAAQAAEAAAAAAAABAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAC5kYXRhAAAAABAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAEAAAMAu
-Y29kZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAABgLmlkYXRhAAAAEAAAAAAAAAAQ
-AAAAAAAAAAAAAAAAAAAAAAAAQAAAQAACAAB/RUxGAQEBAAAAAAAAAAAAAAADAAEAAAAAAAAAAAAA
-AAAAAAAAAAAANAAgAAAAKAAAAAAAHQQAADQAAAAtBAAASQQAAE0EAABPBAAAAQAAAAACAAAAggQI
-AIIECAAAAAAAAAAABgAAAAAQAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAABAAAGkEAABA
-AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAEAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAEAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAEAAAsQQAAGAAAAAvbGliL2xk
-LWxpbnV4LnNvLjIAGQUAAAAAAAAEAAAAAAAAAAYAAAAAAAAACwAAABAAAAAFAAAAAAAAAAoAAAAA
-AAAAEQAAAAAAAAASAAAAAAAAABMAAAAIAAAAAAAAAAAAAABIAAAAAQAAAAAAAAAAAAAADAAAAAgA
-AAAAAAAAAAAAAAAAAABIT01FAKkFAABObyBwcmVmZXJlbmNlcyBmaWxlIGZvdW5kLgDIBQAAR2V0
-ZW52IGVycm9yIG9uIEhPTUUuAAAAAAAAAAAAAAAAAAAAAAAAAAAATWVtb3J5IGFsbG9jYXRpb24g
-ZXJyb3IuAPIFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsGAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAZAAAAAAAAAAAAAAAAAAAAAAAAACXBgAAJXMlcwDtAQAAAAAAAAAAAAAAAAAAAAAA
-AP////8AAAAAvAYAAENhbm5vdCBvcGVuIGEgZmlsZToAAAAAAAAAAAAAAAAAAAAAAP////8AAAAA
-Q2Fubm90IHdyaXRlIGRhdGEgdG8gYSBmaWxlLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAA
-AAAAAAAAAABcAC8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AACRBwAAAAAAAAAAAAAAAAAAAAAAAAIAAABGaWxlIGxlbmd0aCBmdW5jdGlvbiBlcnJvci4ArQcA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO0BAAAAAAAAAAAAAAAAAAAAEAAAQSBmaWxlIHBhdGgg
-c2l6ZSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSBudW1iZXIuAPkHAAAAAAAAAAAAAAAAAAAEAAAA
-AAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAUggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAM
-AAAAZggAAAAAAAABAAAACgAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAP0BAAAAAAAADQoAwggAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-BAAAAAEAAAAAAAAAAAAAAPEIAAD1CAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAFAEAAAIAAADB
-AQAAAAAAAAIAAAAJAgAA/QEAAAAAAAA9CQAAU3ltYm9sKHVudXNlZCBpbiB0aGUgb2JqKToAAAAA
-AAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAABVbmRlZmluZWQgdmFyaWFibGUgbmFtZS4A2AkAAAEAAAAEAAAAAQAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZCgAAAAAAAAEAAAAAAAAAIwAAAAAAAAAAAAAAAAAAAAAA
-AAIAAABDSEFSUyBzdGF0ZW1lbnQgY2Fubm90IGhhdmUgdGhlIHBvaW50ZXIgc3VmaXguAEQKAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABhegAAICAA
-CQAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAgAAcLAAAJAA0LAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAArCwAALwsAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAjQsAAAAA
-AAAAAAAAAQAAAAAAAAAAAAAAnwsAAKMLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAEV4cGVjdGluZyBzdHJpbmcgZGVsaW1pdGVkIGJ5IHF1b3RhdGlvbnMgYW5kIHdpdGgg
-dGhlIGJhY2tzbGFzaCB0aGUgZXNjYXBlIGNoYXJhY3Rlci4A1QsAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAACIATQwAAGVuZCBzdHJpbmcgKCIpIGV4cGVjdGVkAFwACgAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAD/////AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAERBVEEAQ0hBUlMAU1RS
-AFNEAFNTAENPTlNUAEFGVEVSQ0FMTABJTVBPUlRBRlRFUkNBTEwARk9STUFUAFJFVFVSTgBOT1QA
-SU5DAElOQ1NUAERFQwBFWElUAFNFVABTRVRYAEFERABTVUIATVVMVABESVYAQU5EAE9SAFhPUgBM
-SUJSQVJZAElNUE9SVABJTVBPUlRYAEZVTkNUSU9OAEZVTkNUSU9OWABFTlRSWQBFTlRSWUxJTlVY
-AEVOREZVTkNUSU9OAENBTEwAQ0FMTEVYAElGAEVMU0UAV0hJTEUARUxTRUlGAEVORElGAEVOREVM
-U0UARU5EV0hJTEUARU5ERUxTRUlGAElOQ0xVREUASTMASEVYAFdBUk5JTkcAIwCkDAAAAAAAAAAA
-AAABAAAAqQwAAAAAAAAQAAAAAQAAAK8MAAAAAAAAIAAAAAEAAACzDAAAAAAAADAAAAABAAAAtgwA
-AAAAAABAAAAAAQAAALkMAAAAAAAAUAAAAAEAAAC/DAAAYAAAAAAAAAABAAAAyQwAAGAAAAAQAAAA
-AQAAANkMAACAAAAAAAAAAAEAAADgDAAAkAAAAAAAAAABAAAA5wwAAJAAAAAQAAAAAQAAAOsMAACQ
-AAAAIAAAAAEAAADvDAAAkAAAADAAAAABAAAA9QwAAJAAAABAAAAAAQAAAPkMAACQAAAAUAAAAAEA
-AAD+DAAA8AAAAAAAAAABAAAAAg0AAPAAAAAQAAAAAQAAAAcNAADwAAAAIAAAAAEAAAALDQAA8AAA
-ADAAAAABAAAADw0AAPAAAABAAAAAAQAAABQNAADwAAAAUAAAAAEAAAAYDQAA8AAAAGAAAAABAAAA
-HA0AAPAAAABwAAAAAQAAAB8NAADwAAAAgAAAAAEAAAAjDQAAgAEAAAAAAAAAAAAAKw0AAJABAAAA
-AAAAAAAAADINAACQAQAAEAAAAAAAAAA6DQAAsAEAAAAAAAABAAAAQw0AALABAAAQAAAAAQAAAE0N
-AACwAQAAIAAAAAEAAABTDQAAsAEAADAAAAABAAAAXg0AAPABAAAAAAAAAAAAAGoNAAAAAgAAAAAA
-AAEAAABvDQAAEAIAAAAAAAABAAAAdg0AACACAAAAAAAAAQAAAHkNAAAgAgAAEAAAAAAAAAB+DQAA
-IAIAACAAAAABAAAAhA0AACACAAAwAAAAAQAAAIsNAAAgAgAAQAAAAAAAAACRDQAAIAIAAFAAAAAA
-AAAAmQ0AACACAABgAAAAAAAAAKINAAAgAgAAcAAAAAAAAACsDQAAoAIAAA4AAAAAAAAAtA0AALAC
-AAD//8lbAAAAALcNAADAAgAAVYvsiwEAAAC7DQAA0AIAAACgBQABAAAAww0AAOACAADo/P//AAAA
-AAAAA9OJArgAAAAAugQAAAAD0zkCD4TNAQAAx4MUAAAAAgAAAIvjugQAAAAD0/8y6HsAAAC6DAAA
-AAPTiQKL47oMAAAAA9X/Muh7AAAAuhAAAAAD04kCugwAAAAD04sCuhQAAAAD0wECuhAAAAAD04sC
-uhQAAAAD0wECi+O6GAAAAAPT//K6FAAAAAPT/zLoNQAAALoIAAAAA9OJArgAAAAAuggAAAAD0zkC
-D4UrAQAAi+O6DAAAAAPT/zK6BAAAAAPT/zK6GAAAAAPT/zLo/P///7oYAAAAAwAAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAA9MBArgvAAAAugEAAAAEAAAAiAK6HAAAAANDQUxMAMERAAAAA9P/MroM
-AM4RAABVbnJlY29nbml6ZWQgY29tbWFuZC9kZWNsYXJhdGlvbiBuYW1lLgDWEQAAAAAAAAAAAADj
-aAAAxQ0AAAAAAAMAAAAA/P///7ogAAAEAAAAArgAAAAAuiAAAAAD0zkCD7UQAAAvAAAAdREAAAUA
-AAAAAAAA////H1Jlc2VydmUvU2VjdGlvbiBzaXplIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gNTM2
-IDg3MCA5MTEuAE0SAAAAAAAAAAAAAAAAAAAAAAAAW8O6xAUAAIueEgAAAAAAAGVtcmVhbGxvAAAA
-ACABAAAsAQAAjQEAAAEAAAAAAAAAAQAAAIvsi9xNZW1vcnkgc3BhY2UgZXJyb3IuANISAAC64gUA
-AP8yup0BAAD/Muj8////ugQAAACJArruBQAAiwYTAAAsAQAAD4UKABUCAAAAAAAAAAAAAAAAAAAA
-iwK6AAAAAAABAAAALhMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKMTVGhlIGRlY2xhcmF0
-aW9ucyBtdXN0IGNvbnRhaW4gb25seSBhbHBoYW51bWVyaWMsIHVuZGVyc2NvcmUgYW5kIGFyb3Vu
-ZCBjaGFycyBhbmQgY2Fubm90IHN0YXJ0IHdpdGggYSBudW1iZXIuAFQTAAAAAAAAAAAAAAAAAAD1
-AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAuisGAPkTAAAAAAAAAAAAAAAA
-AAAAAAAA6AAAAAC6MwYVFAAAAAAwOQAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAFNVi+yL3IHDAAAA
-AIvjujsGADA5QUZhZgoAAAAAAAAAAAAAAAAAAAAAAwAAADkCD4UKAAAAAAAAAAEAAAAHAAAAUhQA
-AFYUAAAAAAAAAAAAAAYAAP8yAQAAAP+6PwYwWAAQAAAAAAAAAAAAAAAAAAAAAAAAAACjRwYhtxQA
-AFRoZSB0ZXh0IGFmdGVyIHRoZSBkYXRhIGN1cnNvciBzaWduIGlzbid0IHJlY29nbml6ZWQuADpU
-aGUgdGV4dCBhZnRlciB0aGUgc2l6ZSBvZiBhbiBpbnRlZ2VyIHNpZ24gaXNuJ3QgcmVjb2duaXpl
-ZC4ASW50ZWdlcihkZWMvaGV4KSB2YWx1ZSBub3QgcmVjb2duaXplZC4AKxUAAAAAAAAAAAAAAAAA
-AGYVAABJbnRlZ2VyKGRlYy9oZXgpIG9yIGNvbnN0YW50IHZhbHVlIGV4cGVjdGVkLgB+CAEAAAAA
-OAJVbmRlZmluZWQgY29uc3RhbnQgbmFtZS4AnBUAAAAAAAAAAAAAQ2xvc2UgcGFyZW50aGVzaXMg
-c2lnbiAoJyknKSBleHBlY3RlZC4AwRUAACgAKQAAAAAAKAACAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-ALoKFgAAAAAAAAYAAIsAAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAAAAAAAAAAARGl2
-aXNpb24gYnkgMCBlcnJvci4AQhYAAAAAAAAAKy0qLyZ8XiQAAAAAAAEAAAACAAAAAwAAAAQAAAAF
-AAAABgAAAAcAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKOLBgAAi4QAAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAi+O6jwYAAP8yuosGAADNFgAAAAAAAJwGAAAAAAAAuqAGAAAAAAABAAAAixI5
-Au0WAAAAALqLBgAAiwLBFgAAuRYAAAAAAAAAAAAAAAAAAFABAAD/MrqcAAAAAAAAAAD8////upwG
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKOoBgAAi4QkDAAAAACsBgAA
-U1WL7IvcgcP4////uqwGAACLArpOFwAAKAAAALhAAABsAAAAAAAAAAEAAAAIAAAAAAAAAGIXAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/MrqovhcAADLo/P8AAAAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAIPhSYAAACL47qoBgAA/zIQAAAA5BcAABDyFwAA3BcAAAIAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGZpbGUjGAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAABgAAU1WL7IsAAAAAAQAAAAAAAAACAAAAAwAAAAD/MrrUBgAA/zLo/AAAAAAAAAAAAAAAAAAA
-AIsCuuQGAAB+GAAACAAAAIvjuugAAAAAAAAAAAAAAAAAAAAAwQEAAAAAAADkBgAAiwLJW68YAAAg
-AQAALAEAAEQBAACLhCQEAQAAAAAHAACLBAAAAAQAAAAHAABTBAAAAAgAAAAHAAAAAAAAAAAAAAAH
-AACJAroJBwAAAAACAAAAAAAAAAAAAAAAAAAAAwAAAAMAAAABAAAAAIsKug0HAACLAvfpLAEAAAAA
-AAANBwAAAAAAALgAACkCujUZAAAFAAAABwAAOVwBAAABAAAAAQAAAAMCyQNSGQAAAgAAAAAAAAAA
-AAAAAAAAAAAAAAAAAAAAACwBAABpdGUAAAAAAP////8CAAAAAQAAAIsSixkAADMAU1UAAAAAAAAA
-AAAAAAAAAAAAAP8y6FoCAAAAKACgYwAAAAAAAAAAAAAAAAAAAAAAAAoAAAC6JQcAAAAAAAEAAADE
-GQAAAQAAAMQZAAAAAAAAxBkAAMgZAAAAAAAAyBkAAAAAAAAAAIsCyfgZAAAFAAAALAEAAHJpdGXI
-GQAACRoAAMgZAADIGQAAAQAAAAkaAAAAAAAAAAAAADEaAABVbnJlY29nbml6ZWQgaW5uZXIgdGV4
-dC4AAAAAACAACUV4cGVjdGluZyBhcmd1bWVudCBuYW1lLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAIgCMGgAAQXJndW1lbnQgbmFtZSBleHBlY3RlZC4AAAAAAAAAAACwGgAAVW5leHBlY3Rl
-ZCBudW1iZXJzL2NvbnN0YW50cywgZXhwZWN0aW5nIGEgdmFyaWFibGUuACABAAAjAMEBAAAUAQAA
-9WcAAAC6SQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAAEUHAAABAAAAw4vjukEHAAD/MrotIT0AhAAAADw9AI8AAAA+PQCMAAAAPT0AhQAAADwA
-jQAAAD4AjgAAAAAAAACjRhsAAIuEJAgAAAAAAIQbAABVbnJlY29nbml6ZWQgY2hhcmFjdGVycyBh
-dCBmaXJzdCBjb25kaXRpb24gYXJndW1lbnQuALpZBwABAAAABAAAAENvbmRpdGlvbiBzaWduKHMp
-IGV4cGVjdGVkLgDFGwAAYXRoZOUbAAAAAAAAyVvD8RsAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAEAAAD/////AAAAAGUHAACLAslbwwAAAAAAigK6YQcAACkcAAAKAAAALAEAAACLAslbw7ppAAAA
-AAK4AQAAAIu4AQAAAFAcAAAFAAAAAwAAAM2AYRwAAAIAAAD3Av8A/wFo/zLoe3IcAAAAAAAAehwA
-ALoMAACCHAAA/waLUAEAAACNHAAAAAAAAAAAAAAEAAAAAAAAAJ4cAAAEAAAAAAAAAAAAAAADAAAA
-BQAAAAAAAAABAAAAAAC6BMYcAAAsAQAAAQAAAAAAAACLEjPABAAAABoBAAC6DAAAAAPTiSwBAABT
-VYvsi9yBwwAAAAAAAAAAEQIAAAEAAABmCAAAAgAAAAAAAAAAAAAAAAAAAAAAAACKg///ugwAAAAD
-Ih0AAFvDyVssAQAAAAAAAMcKAAAAiQYAAADD/P//Rh0AABQBAAAUAQAA6HsAAAC6AAAAAAPTaAEA
-AAAAAAAAAAAAAAAAADkCD4UAAAAAAAAAABQBAABWYXJpYWJsZS9GdW5jdGlvbiBuYW1lIGlzIGFs
-cmVhZHkgZGVmaW5lZC4Agh0AAGNvbnRlbnRfoQEAAKUBAAAgAQAAtR0AAAAAAAAAAAAAAAAAAAAA
-AAAAAAAAgQcAAAAAAAAKAAAAhQcAAFNVi+wAAAAAAAAAAIvjupkHAAD//R0AABgAAAAoAAAABAAA
-AK8AAAC6iQcAQ29uc3RhbnQgbmFtZSBpcyBhbHJlYWR5IGRlZmluZWQuABkeAAAAAAAAAAAAAAAA
-AAAAAAAAAAAAAP///7oAAAAAAAAAAE5hbWUgZm9yIHZhcmlhYmxlL2NvbnN0YW50IGV4cGVjdGVk
-LgBfHgAABwAA/zIqAAoAAABVbmV4cGVjdGVkIHVucmVmZXJlbmNlIHNpZ24gKCcqJykgYXQgY29u
-c3RhbnQgZGVjbGFyYXRpb24uAJMeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAA
-AAACus0HPQAjAAoAAABVbmV4cGVjdGVkIHJlc2VydmUgc2lnbiAoJyMnKSBhdCBjb25zdGFudCBk
-ZWNsYXJhdGlvbi4AAh8AAAIAAABeAEluY29ycmVjdCBwb2ludGVyIHNpZ24gKCdeJykgdXNlZCBh
-dCBDSEFSUyBkZWNsYXJhdGlvbi4AQx8AACUASW5jb3JyZWN0IHJlbG9jYXRpb24gc2lnbiAoJyUn
-KSB1c2VkIGF0IENIQVJTL0NPTlNUIGRlY2xhcmF0aW9uLgCBHwAAAE9uZSBmcm9tIHRoZSBhc3Np
-Z24gb3BlcmF0b3JzIGV4cGVjdGVkLgDHHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPV
-/zIAAAAAAAAAAMAAAACL47rJHyAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWYXJpYWJsZSBk
-ZWNsYXJhdGlvbiBleHBlY3RlZC4AQCAAAAAAAAB1EQAAAAAAAGsgAAC6EAAANCAAABKLAroEAAAA
-A9OJAgCEJBwAAAAD1f8yugwAAAAEAAAAuhAAAAAD1f+fIAAAi6MD1f8yAQAAAAIAAAAAAAAAtSAA
-ACABAABcAQAACAAAAAEAAACHIAAALAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAugQAAAAAAADpAQAA
-AQAAAAAAAADBAQAARAEAAAAAAABcAQAABgAAACABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
-AAAAAIuEJCwAAACj2QAAAACEJBAAAACj3QEAAAABAAAAAAAAAAAAAIsBAAAA/////wsAAAAA/zK6
-YyEAAAEAAAAEAAAA4QgAAAIAAAAIAAA5Ag+OxX8hAAABAAAAIgC6AQkAMSEAAAAAAAAAAAAAAAAA
-AAAAAAAAAIsCuvUIAAApArqpIQAAiwK63QEAAADBAQAAAlwBAAAMAAAAhAAAAKUhAAAAAAAAAAAA
-AAAAAAABAAAAAAAAACgAAAAAABQBAAAsAQAAOAEAAAAAAAAAiwK6FQkAAIkCutlGdW5jdGlvbiBu
-YW1lIGV4cGVjdGVkLgAIIgAAT3BlbiBwYXJlbnRoZXNpcyBzaWduICgnKCcpIGV4cGVjdGVkLgAk
-IgAACwAAAACLArpSIgAAJQIAAGYIAAAAALopCQAAi20YAADBAQAAAgAAAAEAAAACAAAAOAEAAEiJ
-TCQISIlUJBBMiUQkGEyJTCQgD4RNAAAAuvEEIgAAAro1CRQBAABVbmRlZmluZWQgZnVuY3Rpb24v
-ZGF0YSBuYW1lLgCqIgAALAEAAIvj0CIAAAIAAAAsAQAASIsMJEiLVCQITItEJBBMi0wkGIPsiz26
-LQkAAIuLwyvEugAAAAC5CAAAAPfxuhUJAACJArrhCAAAAgAAAMEBAACpAQAA6AAAuhUjIwAABQAA
-ACQjAAD//////wIAAAAAXAEAALmLArr1gDkAuQKL47qAuYA9/zLoewB0AIvYuAEAAADNgAkAAIsC
-ut0IAAA5AgAAAAAAAAAAAAAAAAAAAAAAADkCfyMAAAAAi+OHIwAAAP8yuo8jAAD/MrrxlyMAADLo
-bAAAALpcnyMAAKMjAAAAAAAAAQAAAP////8AAAAAAQAAAAAAiwK68QgAACmLiQEAAAC6HAAAAAPV
-OQIPhTAAAAAA8QgAAAJTZXRYIGlzIG5vdCBlbmNvZGFibGUgYXQgYW4gOC1iaXQgYXJndW1lbnQu
-AFNldFggaXMgdXNlZCBhdCBTZXRYQ2FsbCBvbmx5LjY0IGJpdCB2YXJpYWJsZXMgYXJlIG5vdCBh
-dmFpbGFibGUgYXQgdGhlIG1vbWVudC4AASkhCTFoCQAAi4QkCAEAAABsCQAAOTkkAAAAAKNwCQAs
-AQAAuInBiSQAAAIAAAC57MGUJAAAAgAAAAMAAAAFB7p0CQDAeQK6cNLS5NSlJAAACAAAADOF9/cA
-/wIAAAC9JAAAAA8AAAAAAMgkAAAGAAAALAEAAMlbw3baJAAAaWdub3gAAAAEAAAAAAAAAACjeAkA
-AAAAeAAAAAQAAADuJAAAAAAAAAAAAAAAAAAAi+yL3BIlAAAAAIvjAAAAAAD/MroiJQAAeAAAAAAA
-AABBbGwgY29uZGl0aW9ucy9sb29wcyB3aXRoaW4gYSBzY29wZSBtb3N0IGJlIGNsb3NlZC4AMiUA
-AAAAAAAAAAAA6ZAJAAAFAAAAcyUAAHIlAABTVYvsLAEAAAAAAACL47qcCQAA/5MlAAB4AAAAupAJ
-AJ8lAAAAAAAAVW5leHBlY3RlZCBjb25kaXRpb24vbG9vcCBjbG9zZSBjb21tYW5kLgCrJQAABAAA
-AP//i+NUaGUgcHJldmlvdXMgY29uZGl0aW9uL2xvb3AgaXMgZnJvbSBhIGRpZmZlcmVudCB0eXBl
-LgDgJQAAAAAAAAPTiQIeJgAALAEAAAAAAAACAAAABQAAAGhpbnZhcnMAi4QkBAAAAKOgCQAARiYA
-AAAAAAAAAAAAi4QkDAAAAACoCQAAAQAAAAAAAACsCQAAAAAAAAEAAAB4AAAABAAAAACLArq4CQAA
-fiYAAIImAAACurgJ/////1dhcm5pbmc6IEVOREVMU0VJRiBub3QgbWF0Y2hpbmcgSUYAMrq0Cbkm
-AAC6pAkAAP8yugAAAAAAAAAAAAAAAAEAAACJArq8CQAAiwK6sAndJgAA4SYAAEQBAABQAQAAArqs
-CQAAAAAAAAAAAAC6vAkAAIv1JgAAFAAAADgBAAAAALq4OAEAAAK6qAkAAIsSHScAACEnAABEAQAA
-AAAAADEnAAAEAAAA6Ub//wAAAAAAAIsCyVvDyUUnAABJJwAAYXJzAIuEJAQUAAAAxAkAAAAAAAAA
-AAAAAAAAAPUBAAAAAACjAAAAAAEAAAAAAAAAAAAAABQBAABVbnJlZmVyZW5jZWQgdmFyaWFibGUv
-ZnVuY3Rpb246ICVzLiBTY29wZSBUZXJtaW5hdGlvbiBGaWxlOiAlcy4gVG8gZGlzYWJsZSB0aGlz
-IHdhcm5pbmcgc2VlICcub2NvbXBpbGVyLnR4dCcAjScAAAAAALoIAAAAAAAAAAAAAAAAAAAAPQAA
-AAC6/QkAAIsCyVsAAAAAMAAAAAAAAAAAAAAAAAAAADkCD4UKAAAAQCgAAC5vY29tcGlsZXIudHh0
-AMPJW8N2YXJzdWZpeAAAAAAEAAAAXygAAACLhCT1AQAA+QEAAAUCAAAJAgAADQIAAAEAAAAAAAAA
-AgAAAACLhCSLKAAAoxUKAJMoAADsi9yBw/j///+6BQoAAIsCuikKAACJAroJCgAAAAAAAAEAAAAF
-AgAAABAAAAAAAAAAAAAAAQAAAP/////9AQAAAIoCui8KAAA4Ag+FAAAAALoJCgAA/wq6JQoAAIsC
-ujAKAACJAAAAANsoAADfKAAA2ygAAAAAiQIFAgAACgAA/x8pAABHZXRjZHcgZXJyb3IuAAAAujgK
-AAAAADopAABDaGRpciBlcnJvci4AAAAAi+PoLQMQAAAACgAAiQK6PAoAAIsC6ygAAH4AYAAAACAA
-AACjKAAAAovjuhkKAAB1KQAAAwAAugAAAAAAAAAAAAAAAAAAAAABAAAAAAAAALpACgCZKQAAGQoA
-ADkCD4UAAAAAuq0pAAAACgAAAAIAAAABAAAAAQAAAAgBAAACyVvDuAAAAMcpAADpAQAAixI5AgEA
-AAAAALol3ykAAAK6EQoAAIsSIAEAACwBAAAUAQAAAAAAAAQAAAABAAAAjwAAALohCgAAiwK6AAAA
-AFJpZ2h0IHNpZGUgb2YgdGhlIGFzc2lnbm1lbnQgZXhwZWN0ZWQuABcqAAA9AA97ACIATSoAAFJl
-bG9jYXRpb24gc2lnbiBhbmQgc3RyaW5nIHN1cnJvdW5kZWQgYnkgcXVvdGF0aW9ucyBpcyBub3Qg
-YWxsb3dlZC4AVGhlIHN0cmluZyBhc3NpZ25tZW50ICgiIikgY2FuIGJlIHVzZWQgYXQgQ0hBUlMs
-IFNUUiBvciBTUy4AkSoAAEdyb3VwIGJlZ2luIHNpZ24gKCd7JykgaXMgbm90IGV4cGVjdGVkIHRv
-IGRlY2xhcmUgYSBjb25zdGFudC4A0SoAAACJArp9AEdyb3VwIGVuZCBzaWduICgnfScpIGV4cGVj
-dGVkLgAZKwAAIwBVbmV4cGVjdGVkIG5lZ2F0aXZlIHZhbHVlIGF0IHJlc2VydmUgZGVjbGFyYXRp
-b24uAD4rAAAEAAAAEokCyV4AAAAAAGN1cnNvcnMAAAAAAIkAAAD/////wQEAAAAAAKOpAQAArQEA
-AKorAABEb3VibGUgcG9pbnRlciAoXl4pIGV4cGVjdGVkIGluIHRoaXMgY2FzZTogZXhlY3V0YWJs
-ZSBmb3JtYXQgYW5kIGltcG9ydGVkIGZ1bmN0aW9uLgAGAAAABiwAAFVuZXhwZWN0ZWQgZG91Ymxl
-IHBvaW50ZXIuAFVuZGVmaW5lZCB2YXJpYWJsZS9mdW5jdGlvbiBuYW1lLgAgAQAAuqMKAEcsAAC3
-CgAATywAAAAAAAABAAAAYAAAABQBAAAAAIvjuq8KAAQAAACnCgAAAAAAAAoAAP8AAAAAAAC6uwoA
-AIkAAAAAVAAAAP////9YAAAA/QEAAAAAAAAAAAAAAAAAAACJArqvCgAA/wK6qywBAABID7rkAwAE
-SIPsCAAAALosAQAASAEAAAAAAP8Ki3ksAQAAqwoAAAAAQABgAAAAFAEAAACgAAAAIAAAQAYAACAD
-AAAAQAYAAAwAAAABAAAAAwAAiwLJW8PJW8NzdHJhdG1lbQ0tAAAEAAAAAL8KAACLhCQIL3Byb2Mv
-JXUvY21kbGluZQAuLQAAVYvsi9yBwwAAAACL47rHCgAA/zLoewAAALrLCgAAiQJDLQAAAIsSiwK6
-zwr/////cmIAcy0AAENhbm5vdCBvcGVuIGNvbW1hbmQgbGluZSBmaWxlLgB6LQAAAslbw7rLCgCd
-LQAAoS0AAAgAAAAKAACL/////0Nhbm5vdCBwYXJzZSB0byBpbnB1dCBmaWxlIG5hbWUuALktAAAA
-OAIPLyIAAAC65AoAAIoCuvMtAABQQVRIAPwtAABHZXRlbnYgZXJyb3Igb24gUEFUSC4AuuYKADoA
-ArrmCgAAigK65QoAAAEAAAAtLgAAUGF0aGZpbmQgZXJyb3IuAFQAAABFbnRlciB0aGUgaW5wdXQg
-ZmlsZS4gTyBDb21waWxlciAtIHVzYWdlOiBvICJmaWxlbmFtZS5vIgBBLgAALi8Afi4AAALJW8PJ
-ji4AAENhbm5vdCBzZXQgYWN0aXZlIGZvbGRlcjoAA9WLAroMAAAAA9U5LmxvZwC0LgAACgAAigK6
-DAAAAAPVixI4Ag+EJAAIAAAADAAAAAK6DAAAAAPVixI4AiAAAAAAALoMyS4AAOkuAABbw7oMCgAA
-A9UiAA21EAAAugwAAEVYRQAJLwAARUxGABEvAABPQkoAGS8AAACj6wo2NE1JQ1JPU09GVAAuZGF0
-YQAxLwAAAQAAAC50ZXh0AD8vAAACAAAAAIAECFVucmVjb2duaXplZCBmaWxlIGZvcm1hdC4AUS8A
-AFRoZSBGT1JNQVQgY29tbWFuZCBjYW4gYmUgZGVmaW5lZCBhdCB0aGUgc3RhcnQgYW5kIG9ubHkg
-b25jZS4Aby8AAEFmdGVyQ2FsbCB2YXJpYWJsZSBuYW1lIGV4cGVjdGVkLgAPCwAA/zK67woAAP8y
-uusKAAD/MkltcG9ydEFmdGVyQ2FsbCBpcyB1c2VkIGF0IG9iamVjdHMuAAEAAADsi9yBw/z//w8w
-AAATMAAAAQAAABkAAP8fMAAATElCUkFSWSBzdGF0ZW1lbnQgaXMgbm90IHVzZWQgYXQgb2JqZWN0
-IGZvcm1hdC4AKzAAAAAAAAAAAAAAXzAAAGMwAABVbmV4cGVjdGVkIElNUE9SVCBzdGF0ZW1lbnQ7
-IHRoZXJlIGlzIG5vIExJQlJBUlkgb3BlbmVkLgBvMAAAaW1tAFgBAABJbXBvcnQgbmFtZSBmb3Ig
-Y29tcGlsZXIgbXVzdCBiZSBzcGVjaWZpZWQgYWZ0ZXIgdGhlIG5hbWUgZm9yIG91dHB1dC4AtDAA
-AEltcG9ydCBGdW5jdGlvbjoACwAAAFRoZXJlIGlzIGFscmVhZHkgYW5vdGhlciBmdW5jdGlvbiBz
-dGFydGVkLgATMQAAVW5hdmFpbGFibGUgRlVOQ1RJT04vRU5UUllbLi4uXSBzdGF0ZW1lbnQ7IFRo
-ZSBzdGFydCBhZGRyZXNzIHdhcyBhdCBGaWxlOiAlczsgTGluZTogJXUuAEIxAAABAAAAAQAAAAUA
-AABVbmV4cGVjdGVkIEVOREZVTkNUSU9OIGNvbW1hbmQuAKoxAAAAAAAD1YoCus4xAACIAroMAAAA
-A94xAAAAAAAASA+65ANyEIH5BQAAAHIaD7rhAHIQ6xKB+QUAAAByBg+64QByBEiD7AiB+QAAAAB0
-yf/JixTDUutv/////yMyAAD/////AAAAAAAAAAAvMgAAMzIAAMw/MgAA9QEAAE9OAE9GRgBFeHBl
-Y3RpbmcgJ29uJyBvciAnb2ZmJyBjb21tYW5kAFVucmVjb2duaXplZCBkYXRhIGFmdGVyIGNvbW1h
-bmQuAG8yAACBwwAAEAAAABoAAIsCuhkaAAAAADkCD4UgAAAAJXMgRmlsZSAlcywgUm93ICVpLCBD
-b2x1bW4gJWkAsDIAAMN2ZXIlcyBGaWxlICVzLCBSb3cgJWkAi9yBw/EyAABSZXN0b3JlIGZvbGRl
-ciBlcnJvci4AAAAAAw8zAABFTkRGVU5DVElPTiBjb21tYW5kIGV4cGVjdGVkIHRvIGNsb3NlIHRo
-ZSBvcGVuZWQgRlVOQ1RJT04uAALJW8O6ShoAAIsCyVvDyVvDYXJnAQAAAAAAU1WLLmV4ZQBnMwAA
-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
-w25lZwCLhCQEAAAAo90HAABTVYvsi9yBwwAAAAC63QcAAIsCuuEHAACJArrhBwAAiwK63QcAACkC
-uuEHAACLArrdBwAAKQK63QcAAIsCyVvDyVvDY2xlYXJtZXNzYWdlAFNVi+yL3IHDAAAAALrpBwAA
-iwK65QcAAIsSOQIPhCAAAACL47rlBwAAixL/Muj8////uukHAACLArrlBwAAixKJAslbw3NhZmVN
-ZXNzYWdlAIuEJAQAAACj7QcAAFNVi+yL3IHDAAAAAIvjuu0HAAD/Muhj7///i+Pogv///8lbw2Nv
-bXBhcmVhZ2FpbnN0bWF4cGF0aACLhCQEAAAAo/EHAABTVYvsi9yBwwAAAAC69QcAAIsCuvEHAAA5
-Ag+ODwAAALoqCAAAiwLJW8PpCgAAALouCAAAiwLJW8PJW8NnZXRjb250AIuEJAQAAACjMggAAIuE
-JAgAAACjNggAAFNVi+yL3IHDAAAAALo6CAAAiwK6MggAAAECujIIAACLEosCujYIAACLEokCyVvD
-Z2V0cHRyY29udFJlZwCLhCQEAAAAoz4IAACLhCQIAAAAo0IIAABTVYvsi9yBwwAAAAC6RggAAIsC
-uj4IAAABAro+CAAAiwK6QggAAIsSiQLJW8NnZXRjb250UmVnAIuEJAQAAACjSggAAIuEJAgAAACj
-TggAAFNVi+yL3IHDAAAAAIvjulYIAAD/MrpKCAAA/zLod////7pSCAAAixKLArpOCAAAixKJAslb
-w2dldGNvbnRhbmRjb250UmVnAIuEJAQAAACjWggAAIuEJAgAAACjXggAAIuEJAwAAACjYggAAFNV
-i+yL3IHDAAAAAIvjumIIAAD/MrpaCAAA/zLoW////4vjul4IAAD/MrpaCAAA/zLoof7//8lbw2dl
-dHN0cnVjdGNvbnQAi4QkBAAAAKNqCAAAU1WL7IvcgcMAAAAAunoIAACLEosCun4IAACJArqCCAAA
-iwK6fggAADkCD4UiAAAAuoYIAACLArpqCAAAOQIPjQ4AAAC6iggAAIsCumoIAAABArp2CAAAiwK6
-jggAAIkCumoIAACLCrqOCAAAiwL36bqOCAAAiQK6cggAAIsCum4IAACJArqOCAAAiwK6bggAAAEC
-um4IAACLAslbw8lbw2NvbmdydWVudG1vZHVsb2F0c2VnbWVudHMAi4QkBAAAAKOSCAAAi4QkCAAA
-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
-qwoAAIsCursKAAA5Ag+FFQAAALq3CgAAiwK6rwoAAIkCuq8KAAD/ArqrCgAAiwK6uwoAADkCD4QO
-AAAAurMKAAD/Arq3CgAA/wrpef///7qrCgAAiwK6uwoAADkCD4UYAAAAup8KAACLArqzCgAAKQK6
-swoAAIsCyVvDuqMKAACLAslbw8lbw3N0cmF0bWVtAIuEJAQAAACjvwoAAIuEJAgAAACjwwoAAIuE
-JAwAAACjxwoAAFNVi+yL3IHDAAAAAIvjuscKAAD/Mujc4v//ussKAACJArrDCgAAixKLArrPCgAA
-iQK6vwoAAIsSiwK60woAAIkCussKAACLArrPCgAAOQIPjQoAAAC61woAAIsCyVvDussKAACLArrf
-CgAAiQK61woAAIsCut8KAAA5Ag+EjgAAALrTCgAAixKKArrlCgAAiAK64woAAIoCuuUKAAA4Ag+M
-IgAAALrkCgAAigK65QoAADgCD48OAAAAuucKAACKArrlCgAAKAK6xwoAAIsSigK65goAAIgCuuYK
-AACKArrlCgAAOAIPhAoAAAC61woAAIsCyVvDutMKAAD/ArrHCgAA/wK63woAAP8K6V7///+60woA
-AIsCur8KAACLEokCussKAACLArrPCgAAKQK6zwoAAIsCusMKAACLEokCutsKAACLAslbw8lbw21l
-bV9zcGFjZXMAU1WL7IvcgcMAAAAAuhAAAAAD1YsCugwAAAAD1TkCD4RKAAAAuugKAACKAroMAAAA
-A9WLEjgCD4QkAAAAuuoKAACKAroMAAAAA9WLEjgCD4QMAAAAugwAAAAD1YsCyVvDugwAAAAD1f8C
-6Z7///+6DAAAAAPViwLJW8PJW8NzcGFjZXMAi4QkBAAAAKPrCgAAi4QkCAAAAKPvCgAAU1WL7Ivc
-gcMAAAAAuv8KAACLArrzCgAAiQK6+woAAIsCuvcKAACJArr7CgAAiwK69woAADkCD4W5AAAAuv8K
-AACLArr3CgAAiQKL47oJCwAA/zK67woAAP8yuusKAAD/MuiF/f//ugMLAACJArr7CgAAiwK6AwsA
-ADkCD4UcAAAAuvsKAACLArrzCgAAiQK6+woAAIsCuvcKAACJAovjug8LAAD/MrrvCgAA/zK66woA
-AP8y6DL9//+6AwsAAIkCuvsKAACLAroDCwAAOQIPhRwAAAC6+woAAIsCuvMKAACJArr7CgAAiwK6
-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
-AACLArolEgAAOQIPjBMAAAC6FRIAAIsCuh0SAACJAuklAAAAujESAACLArotEgAAixKJArohEgAA
-iwK6LRIAACkCuh0SAAD/Culm////ugkSAACLArotEgAAixKJArohEgAAiwK6ARIAAAECuiESAACL
-AroJEgAAAQK6IRIAAIsCugkSAAABArohEgAAiwK6CRIAAAECuiESAACLAroJEgAAAQK6ERIAAP8C
-6a/+//+6FRIAAIsCugESAACLEokCyVvDc29ydGFsbGNvbW1hbmRzAFNVi+yL3IHDAAAAAIvjujkS
-AAD/Mro1EgAA/zLoK/7//4vjukESAAD/Mro9EgAA/zLoFv7//8lbw21heHZhbHVlY2hlY2sAi4Qk
-BAAAAKNFEgAAU1WL7IvcgcMAAAAAukkSAACLArpFEgAAOQIPjgoAAAC6hhIAAIsCyVvDuooSAACL
-Aslbw8lbw2FkZHRvc2VjAIuEJAQAAACjjhIAAIuEJAgAAACjkhIAAIuEJAwAAACjlhIAAFNVi+yL
-3IHDAAAAAIvjuqISAAD/MrqWEgAA/zLoUtz//7qWEgAAixKLArqaEgAAiQK6nhIAAIsSiwK6qhIA
-AIkCupoSAACLArquEgAAiQK6qhIAAIsCuq4SAAApArqSEgAAiwK6rhIAADkCD42SAQAAusYSAACL
-ArrOEgAAiQK6whIAAIsCur4SAACLEjkCD4UTAAAAusoSAACLArrOEgAAiQLpSQAAALq2EgAAiwK6
-lhIAADkCD4UTAAAAusoSAACLArrOEgAAiQLpIgAAALq6EgAAiwK6lhIAADkCD4UOAAAAusoSAACL
-ArrOEgAAiQK6xhIAAIsCus4SAAA5Ag+FDwAAALrmEgAAiwLJW8Pp7wAAALqqEgAAiwK66hIAAIkC
-upISAACLArrqEgAAAQK68hIAAIsSiwK69hIAAIkCi+O69hIAAP8yuuoSAAD/Muhn0v//uu4SAACJ
-ArruEgAAiwK66hIAAAECi+O66hIAAP8y6Bj+//+6+hIAAIkCurISAACLArr6EgAAOQIPhAoAAAC6
-+hIAAIsCyVvDupYSAACLAroCEwAAiQK6/hIAAIsCugITAAABAovjuuoSAAD/MroCEwAA/zLo38v/
-/7r6EgAAiQK6shIAAIsCuvoSAAA5Ag+ECgAAALr6EgAAiwLJW8O66hIAAIsCupYSAACLEokCuqYS
-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
-7IvcgcMAAAAAi+O6FiUAAP8yaP////+6CiUAAP8yugYlAAD/MugU9P//uholAACJAroeJQAAiwK6
-GiUAADkCD4QKAAAAuholAACLAslbw4vjug4lAAD/Muj+/v//uholAACJAroaJQAAiwLJW8PJW8Nj
-aGVja2NvbmRsb29wY2xvc2UAU1WL7IvcgcMAAAAAi+O6JiUAAP8yuiolAAD/MuhIVv//ui4lAACL
-AroiJQAAOQIPhAoAAAC6ZiUAAIsCyVvDumolAACLAslbw8lbw2NvbmRqdW1wAIuEJAQAAACjbiUA
-AFNVi+yL3IHDAAAAALpuJQAAiwK6eyUAAIsSiQKL47qHJQAA/zK6dyUAAP8yun8lAAD/MujpeP//
-uoMlAACJArqDJQAAiwLJW8PJW8Njb25kZW5kAIuEJAQAAACjiyUAAFNVi+yL3IHDAAAAAIvjupcl
-AAD/MrqbJQAA/zLo4lT//4vjuqMlAAD/MrqbJQAA/zLoIlX//7qfJQAAixKLArqPJQAAiQK6pyUA
-AIsCuo8lAAA5Ag+FCgAAALrUJQAAiwLJW8O62CUAAIsCuo8lAAApArqPJQAAiwK6kyUAAAECupMl
-AACLEosCutwlAACJArqLJQAAiwK63CUAADkCD4QKAAAAuhYmAACLAslbw7rYJQAAiwK6jyUAACkC
-utglAACLArqTJQAAKQK6kyUAAIsSiwK6GiYAAIkCi+O6IiYAAP8yuiYmAAD/Mui5VP//ui4mAACL
-ArqLJQAAOQIPhbMAAAC6MiYAAIsCuh4mAAABArrYJQAAiwK6jyUAACkCutglAACLArqTJQAAKQK6
-kyUAAIsSiwK6NiYAAIkCuh4mAACLAro6JgAAiQK6NiYAAIsCujomAAApAro6JgAAiwK6PiYAAIkC
-uj4mAACLAro6JgAAKQK6PiYAAIsCujomAAApAovjujomAAD/MugD/v//ukImAACJAroqJgAAiwK6
-QiYAADkCD4QKAAAAukImAACLAslbw4vjukomAAD/MromJgAA/zLoOFP//7oaJgAAiwK6RiYAAAEC
-utglAACLArpGJgAAKQK6GiYAAIsCuh4mAAApAroeJgAAiwK6RiYAAIsSiQK6jyUAAIsCup8lAACL
-EokCuiomAACLAslbw8lbw2NvbmRpdGlvbnNjb25kZW5kAIuEJAQAAACjTiYAAIuEJAgAAACjUiYA
-AFNVi+yL3IHD/P///7piJgAAiwK6XiYAAIkCuk4mAACLArpqJgAAiQLHgwAAAAAAAAAAumImAACL
-ArpeJgAAOQIPhT0BAACL47pqJgAA/zLoVP3//7pWJgAAiQK6WiYAAIsCulYmAAA5Ag+ECgAAALpW
-JgAAiwLJW8O6biYAAIsCumomAAA5Ag+FQwAAALpyJgAAiwK6UiYAADkCD4UhAAAAunImAACLArpq
-JgAAiQK4AQAAALoAAAAAA9OJAukOAAAAumYmAACLArpeJgAAiQK6ciYAAIsCumomAAA5Ag+FmgAA
-AIvjuoYmAAD/MrqKJgAA/zK6diYAAP8y6LxS//+6fiYAAIsCuoImAAABArp6JgAAiwK6giYAACkC
-uoImAACLEosCuo4mAACJArqSJgAAiwK6jiYAADkCD4UwAAAAuAEAAAC6AAAAAAPTOQIPhQ4AAACL
-47qWJgAA//LoSED//7pmJgAAiwK6XiYAAIkCuAIAAAC6AAAAAAPTiQLpr/7//4vjur0mAAD/Mrp2
-JgAA/zLodFH//7q5JgAAixKLArrBJgAAiQK6eiYAAIsCusEmAAApArrBJgAAiwK6uSYAAIsSiQK6
-ViYAAIsCyVvDyVvDY2xvc2VpZm9wZW5lbHNlAFNVi+yL3IHDAAAAAIvjus0mAAD/MuhL+///usUm
-AACJArrJJgAAiwK6xSYAADkCD4QKAAAAusUmAACLAslbw4vjutEmAAD/Muh4+///usUmAACJArrJ
-JgAAiwK6xSYAADkCD4QKAAAAusUmAACLAslbw4vjutUmAAD/Muhn+f//usUmAACJArrFJgAAiwLJ
-W8PJW8NvcGVubGliAFNVi+yL3IHDAAAAAIvjuuUmAAD/MrrtJgAA/zLovFD//4vjuukmAAD/Mrrx
-JgAA/zLop1D//7rhJgAAiwK6AScAAIkCut0mAACLAroFJwAAiQKL47oRJwAA/zK6DScAAP8yugkn
-AAD/MuiIc///uhUnAACJAroVJwAAiwLJW8PJW8NjbG9zZWxpYgBTVYvsi9yBwwAAAACL47opJwAA
-/zK6JScAAP8yuhknAAD/MuiKUP//i+O6LScAAP8yujknAAD/Mro1JwAA/zLoJ3P//7o9JwAAiQK6
-QScAAIsCuj0nAAA5Ag+ECgAAALo9JwAAiwLJW8OL47pRJwAA/zK6TScAAP8yui0nAAD/MugtUP//
-uiEnAACLArodJwAAAQK6HScAAIsCulUnAACJAro5JwAAiwK6VScAACkCulUnAACLEosCulknAACJ
-ArpdJwAAiwK6HScAACkCukknAACLArodJwAAixKJArpFJwAAiwK6YScAAIkCulknAACLArphJwAA
-AQK6WScAAIsCukknAAApAovjui0nAAD/MrpJJwAA/zK6YScAAP8y6Ehy//+6PScAAIkCuj0nAACL
-Aslbw8lbw3dhcm5pbmdzAIuEJAQAAACjZScAAIuEJAgAAACjaScAAIuEJAwAAACjbScAAFNVi+yL
-3IHDAAAAALpxJwAAixKLArp1JwAAiQK6gScAAIsCunUnAAA5Ag+FCgAAALp5JwAAiwLJW8OL47p9
-JwAA/zK6eScAAP8yunknAAD/Mrp5JwAA/zLoJVj//7qFJwAAiQK6eScAAIsCuoUnAAA5Ag+FPgAA
-ALp9JwAAiwK6ZScAADkCD4UqAAAAi+O6fScAAP8yuoknAAD/Mrp5JwAA/zK6eScAAP8y6PZV//+6
-hScAAIkCunknAACLArqFJwAAOQIPhIsAAAC6AigAAIsCuoUnAAABAovjuoUnAAD/Mrr6JwAA/zLo
-EkL//7r+JwAAiQK6eScAAIsCuv4nAAA5Ag+ETQAAALptJwAAiwK6aScAAAECi+O6aScAAP8yuoUn
-AAD/Mrr6JwAA/zK6/icAAP8y6Pz///+L47r+JwAA/zLo9Tv//4vjuv4nAAD/Muj8////yVvDcGFy
-c2VwcmVmZXJlbmNlcwCLhCQEAAAAowYoAACLhCQIAAAAowooAACLhCQMAAAAow4oAABTVYvsi9yB
-wwAAAAC6BigAAIsSiwK6GCgAAIkCugooAACLEosCuhwoAACJAovjuhIoAAAzwIoCULocKAAA/zK6
-GCgAAP8y6C1q//+6FCgAAIkCi+O6FCgAAP8yugooAAD/MroGKAAA/zLoD1v//7ocKAAAiwK6FCgA
-ADkCD4SCAAAAi+O6CigAAP8yugYoAAD/MuiqW///ugYoAACLEosCuhgoAACJAroKKAAAixKLAroc
-KAAAiQK6ICgAAIsCuhwoAAA5Ag+EOQAAAIvjugooAAD/MroGKAAA/zLoYVv//7oYKAAAixIzwIoC
-ug4oAACLEokCuiQoAACLAroOKAAAixIpArooKAAAiwLJW8PJW8NzZXRwcmVmZXJlbmNlcwCLhCQE
-AAAAoywoAABTVYvsi9yBw/z///+L47osKAAA/zLorkb//7o4KAAAiQK6MCgAAIoCujgoAACLEogC
-uiwoAACLAro4KAAAKQKL47o8KAAA/zLodj///7pPKAAAiQK6TygAAP8CujgoAACLArpTKAAAiQK6
-TygAAIsCulMoAAABAovjumMoAAD/MrpTKAAA/zLoKj3//7pXKAAAiQK6WygAAIsCulcoAAA5Ag+E
-GAAAAIvjulcoAAD/MujOOf//ujQoAACLAslbw4vjujgoAAD/MrosKAAA/zK6XygAAP8y6Pz///+6
-XygAAIsCumcoAACJAro4KAAAiwK6ZygAAAECi+O6TygAAP8yujwoAAD/MrpnKAAA/zLo/P///7p/
-KAAAiwK6aygAAIsSiQK6gygAAIsCum8oAACLEokCun8oAACLArpzKAAAixKJArqHKAAAiwK6dygA
-AIsSiQKL4+ic1v//ugAAAAAD04kCuoMoAACLAroAAAAAA9OLEokCun8oAACLArp7KAAAixKJAovj
-ujAoAAD/MrqPKAAA/zK6lygAAP8yul8oAAD/MuiARv//ulcoAACJAovjul8oAAD/Muj8////ulso
-AACLArpXKAAAOQIPhGcAAACL47pXKAAA/zLoG0n//7pbKAAAiwK6VygAADkCD4RFAAAAi+O6jygA
-AP8yupcoAAD/Mro8KAAA/zLo6Dj//7pXKAAAiQK6WygAAIsCulcoAAA5Ag+EDgAAAIvjulcoAAD/
-MujCSP//ulsoAACLArpXKAAAOQIPhcYAAAC6iygAAIsCupsoAACJAovjumsoAAD/MrqXKAAA/zK6
-jygAAP8y6Dr8//+L47pvKAAA/zK6lygAAP8yuo8oAAD/Muge/P//i+O6cygAAP8yupcoAAD/MrqP
-KAAA/zLoAvz//4vjuncoAAD/MrqXKAAA/zK6jygAAP8y6Ob7//+L47oAAAAAA9P/MrqXKAAA/zK6
-jygAAP8y6Mj7//+L47p7KAAA/zK6lygAAP8yuo8oAAD/Muis+///i+O6mygAAP8y6Pz////JW8Nv
-ZmZzZXRvZmZpbGVfdmFsdWUAU1WL7IvcgcP8////urcoAACLAroAAAAAA9OJArq7KAAAiwK6vygA
-AIsSOQIPhRAAAAC6wygAAIsCugAAAAAD0wECugAAAAAD04sCyVvDyVvDaW5jbHVkZQCLhCQEAAAA
-o8coAABTVYvsi9yBwwAAAAC60ygAAIsCutcoAACLEjkCD4QOAAAAi+O6xygAAP8y6GBL//+L4+hk
-////uuMoAACJAovjuuMoAAD/MroLKQAA/zK6BykAAP8yuscoAAD/Mug6RP//uvsoAACJArr/KAAA
-iwK6+ygAADkCD4QKAAAAuvsoAACLAslbw4vjuscoAAD/MuinQv//ug8pAACJArgBAAAAuhMpAACL
-EjkCD4W/AAAAi+NoABAAALoLKQAAixL/Muj8////uhcpAACJArgAAAAAuhcpAAA5Ag+FCgAAALob
-KQAAiwLJW8O60ygAAIsCutcoAACLEjkCD4QQAAAAi+O6CykAAIsS/zLog0r//7oPKQAAixKKArot
-KQAAiAK4AAAAALoPKQAAixKIAovjuscoAAD/MujkQv//ui4pAACJAroyKQAAiwK6LikAADkCD4QK
-AAAAujYpAACLAslbw7otKQAAigK6DykAAIsSiAKL47rHKAAA/zLoujr//7pHKQAAiQK6xygAAIsC
-ukspAACJArpHKQAAiwK6SykAAAECug8pAACLArpLKQAAKQK6TykAAIsCulMpAACJArrPKAAAiwK6
-UykAACkCussoAACLArpXKQAAiQK6UykAAIsCukspAAA5Ag+OKgAAALpTKQAAiwK6SykAAIkCus8o
-AACLArpLKQAAKQK6zygAAIsCulcpAACJArpfKQAAiwK6WykAAIkCi+O6SykAAP8yug8pAAD/Mrpb
-KQAA/zLo/P///7pLKQAAiwK6WykAAAECus8oAACLArpXKQAAOQIPhR4AAAC6YykAAIoCulspAACL
-EogCus8oAACLArpbKQAAAQK4AAAAALpbKQAAixKIAovjumUpAAD/MrppKQAA/zK6AykAAP8y6Bhp
-//+6+ygAAIkCuv8oAACLArr7KAAAOQIPhAoAAAC6+ygAAIsCyVvDumkpAACLArpxKQAAiQK6TykA
-AIsCunEpAAApAovjunEpAAD/MroDKQAA/zK6bSkAAP8y6Pz///+L47p5KQAA/zK6ZSkAAP8y6I1F
-//+6TykAAIsCunUpAAApArptKQAAiwK6fSkAAIkCunEpAACLArp9KQAAAQK6dSkAAIsCun0pAACL
-EokCuv8oAACLAslbw8lbw2RhdGFhc3NpZ24Ai4QkBAAAAKOBKQAAi4QkCAAAAKOFKQAAi4QkDAAA
-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
-AAAAiwK63i0AAIkCuj4AAACLArrjLQAAiQKL47riLQAAM8CKAlC6oS0AAP8yup0tAAD/Muh7Rf//
-uuctAACJArqhLQAAiwK65y0AADkCD4QTAAAAup0tAACLArreLQAAiQLpewIAAIvjuu8tAAD/Muj8
-////uustAACJAroWAAAAiwK66y0AADkCD4UOAAAAi+O6+C0AAP8y6E0W//+L47rrLQAA/zLofxv/
-/7oSLgAAiQK6MgAAAIsCuhIuAAA5Ag+EGwIAAIvjuhYuAAAzwIoCULoSLgAA/zK66y0AAP8y6M5E
-//+6GC4AAIkCuhguAACLArocLgAAiQK6HC4AAP8CuqEtAACLArocLgAAAQK6HC4AAP8Ci+O6HC4A
-AP8y6F8Z//+63i0AAIkCuhYAAACLArreLQAAOQIPhRMAAAC6MgAAAIsCuhIuAACJAumKAQAAuhYA
-AACLAroYLgAAOQIPhNcAAAC63i0AAIsCuiAuAACJAovjuhguAAD/MrrrLQAA/zK6IC4AAP8y6Pz/
-//+6GC4AAIsCuiAuAAABArogLgAA/wq6IC4AAIsSigK6JC4AAIgCuiAuAAD/ArriLQAAigK6JC4A
-ADgCD4QXAAAAuuItAACKArogLgAAixKIArogLgAA/wKL47qhLQAA/zK6nS0AAP8yuiAuAAD/Muj8
-////uqEtAACLArogLgAAAQK6FgAAAIoCuiAuAACLEogCi+O6JS4AAP8yut4tAAD/Muj8////uuMt
-AACJAroyAAAAiwK64y0AADkCD4UvAAAAujIAAACLAroSLgAAiQKL47qdLQAA/zLo/P///7reLQAA
-iwK6nS0AAIkC6VwAAACL47reLQAA/zLo/P///7oWAAAAiwK63i0AAIkCuhguAACLArrrLQAAAQK6
-GC4AAIsCuhIuAAApAroWLgAAigK66y0AAIsSOAIPhQ4AAAC66y0AAP8CuhIuAAD/CunR/f//uh4A
-AACLArreLQAAOQIPhRMAAACL47opLgAA/zLo5xP//+kOAAAAi+O63i0AAP8y6EXZ//+L47qdLQAA
-/zLo/P///7oiAAAAiwK6oS0AAIkCi+O6ay0AAP8yuhYAAAD/MrqpLQAA/zK6PS4AAP8y6Pz///+6
-sS0AAIkCurUtAACLArqxLQAAOQIPhQ4AAACL47p6LgAA/zLo1u///4vjumstAAD/Muj8////i+O6
-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
-rygAAIsCuqAyAACLEokCi+O6cAAAAP8y6Cy8//+6SAAAAIkCulAAAACLArpIAAAAOQIPhCEAAAC6
-9S4AAIsCuskuAACJArqcMgAAiwK6rygAACkC6VQAAAC6oygAAIsCuskuAACJArrJLgAAiwK6zS4A
-AIkCuqsoAACLArrJLgAAAQK6pygAAIsCus0uAAABAroyAAAAiwK6dAAAAIkCujIAAACLArqfKAAA
-iQK6UAAAAIsCukgAAAA5Ag+EOQEAALpkAAAAiwK6qDIAAIkCurMoAACLArqoMgAAAQK6yS4AAIsC
-uqwyAACJArr1LgAAiwK6rDIAACkCujYAAACLArqvKAAAAQK6NgAAAIsCuqwyAAABAovjukgAAAD/
-MrrOMgAA/zLo5Pf+/7rSMgAAiQK6FgAAAIsCutIyAAA5Ag+FBwAAAIvj6K/O//+4AAAAALoUAAAA
-A9M5Ag+FNgAAAIvjuqwyAAD/MrqvKAAA/zK6qDIAAP8yukgAAAD/MrrOMgAA/zK60jIAAP8y6Pz/
-///pOgAAALoUAAAAA9OLArqvKAAAKQKL47qvKAAA/zK6qDIAAP8yukgAAAD/MrrWMgAA//K60jIA
-AP8y6Pz///+L47rSMgAA/zLobfH+/4vjutIyAAD/Muj8////us0uAACLArrJLgAAiQLpleL//7oa
-AAAAiwK6BQIAADkCD4VFAAAAi+O6oygAAP8y6Pz///+66TIAAIkCuhYAAACLArrpMgAAOQIPhBwA
-AAC67TIAAIsCukgAAACJAovjukgAAAD/Mujz8P7/uuUuAACLArpoAAAAKQK4AAAAALoHMwAAiQK4
-AAAAALpoAAAAOQIPheMAAAC4AgAAALolAgAAOQIPhdEAAAC6GgAAAIsCumYIAAA5Ag+FMwAAALgA
-AAAAukgAAAA5Ag+FHAAAALoLMwAAiwK6SAAAAIkCi+O6SAAAAP8y6HPw/v/pigAAALpkAAAAiwK6
-SjMAAIkCutEuAACLArpKMwAAAQKL4+jwuP//ukozAACLEokCumQAAACLArpKMwAAiQK61S4AAIsC
-ukozAAABArgAAAAAukozAACLEokCut0uAACLArr9AQAAiQK4AQAAALoHMwAAiQK65S4AAIsCumgA
-AAABArgBAAAAuiUCAACJArgAAAAAugczAAA5Ag+FDgAAAIvjuqMoAAD/Muj8////6erf//+6UAAA
-AIsCukgAAAA5Ag+EBwAAAIvj6FTM//+L4+jmqv//ukgAAACJArpQAAAAiwK6SAAAADkCD4QOAAAA
-i+O6SAAAAP8y6N7L//+6kQEAAIsCuo0BAAA5Ag+FRAAAALoaAAAAiwK62SYAADkCD4UwAAAAi+Po
-pbD//7pIAAAAiQK6UAAAAIsCukgAAAA5Ag+EDgAAAIvjukgAAAD/MuiGy///i+O6sygAAP8yumQA
-AAD/MroaAAAA/zLooLH//7qwLgAAiwK6VjMAAIkCurAuAACLArpOMwAAiQKL47qwLgAA/zLoFvT+
-/7pSMwAAiQK6UjMAAIsCuk4zAAABArpOMwAAiwK6WjMAAIkCul4zAACLArpWMwAAKQK6XjMAAIsC
-ulozAAApArpaMwAAiwK6VjMAADkCD41nAAAAulozAACLEooCumIzAACIArpGAAAAigK6YjMAADgC
-D4UcAAAAulozAACLArpOMwAAiQK6VjMAAIsCulozAACJArpaMwAAiwK6VjMAADkCD40OAAAAul4z
-AACLArpaMwAAKQLphf///7oWAAAAiwK6YzMAAIkCupEBAACLArqNAQAAOQIPhRMAAAC6bDMAAIsC
-umMzAACJAukiAAAAuhoAAACLArrBAQAAOQIPhQ4AAAC6czMAAIsCumMzAACJAroWAAAAiwK6YzMA
-ADkCD4R9AAAAi+O6YzMAAP8y6OPy/v+6dzMAAIkCi+O6YzMAAP8yulQAAAD/MuhbGP//ukgAAACJ
-ArpQAAAAiwK6SAAAADkCD4QOAAAAi+O6SAAAAP8y6MjJ//+L47p3MwAA/zK6YzMAAP8yuk4zAAD/
-Muj8////unczAACLArpOMwAAAQK6FgAAAIoCuk4zAACLEogCupEBAACLArqNAQAAOQIPhSYHAACL
-47qDMwAA/zK6FgAAAP8yun8zAAD/Muj8////i+O6KgAAAP8yuoozAAD/Mrp/MwAA/zLo/P///7oq
-AAAAiwK6fzMAAAECuo4zAACLArp/MwAAixKJAroqAAAAiwK6fzMAAAECupIzAACLArp/MwAAixKJ
-AroqAAAAiwK6fzMAAAECuioAAACLArp/MwAAAQK6ljMAAIsCun8zAACLEokCuoMzAACLArp7MwAA
-AQK6LgAAAIsCunszAAApArqaMwAAiwK6ezMAAIsSiQK65zMAAIsCuuMzAAApAovjuuMzAAD/Mrrn
-MwAA/zK63zMAAP8y6Pz///+64zMAAIsCut8zAAABAovjuu8zAAD/Mug+8f7/uuszAACJAovjuusz
-AAD/MrrvMwAA/zK63zMAAP8y6Pz///+66zMAAIsCut8zAAABArr3MwAAiwK68zMAAIkCuuszAACL
-ArrzMwAAKQK64zMAAIsCuvMzAAApAovjuvMzAAD/Mrr7MwAA/zK63zMAAP8y6Pz///+6AzQAAIsC
-uv8zAACLEokCuioAAACLArr/MwAAAQK6/zMAAIsCugs0AACJAroHNAAAiwK6/zMAAIsSiQK6KgAA
-AIsCuv8zAAABAroWAAAAiwK6/zMAAIsSiQK6LgAAAIsCuv8zAAABAroWAAAAiwK6/zMAAIsSiQK6
-LgAAAIsCuv8zAAABAroWAAAAiwK6/zMAAIsSiQK6LgAAAIsCuv8zAAABAroPNAAAiwK6/zMAAIsS
-iQK6KgAAAIsCuv8zAAABAroTNAAAiwK6FzQAAIkCi+O6KgAAAP8yuhs0AAD/Mrr/MwAA/zLo/P//
-/4vjuioAAAD/MronNAAA/zK6HzQAAP8y6Pz///+L47oqAAAA/zK65QEAAP8yuis0AAD/Muj8////
-i+O6MzQAAP8yuhYAAAD/MrovNAAA/zLo/P///7rhAgAAiwK6+QIAAIkCuigBAACLArqpAwAAiQK6
-IAEAAIsCurEDAACJArqxAwAAiwK6yQIAAIkCurEDAACLArr5AgAAAQK6+QIAAIsCutUCAACJAros
-AQAAiwK6xQIAAIkCutUCAACLAroVAgAAAQK6FQIAAIsCutECAACJAro0AQAAiwK60QMAAIkCutUC
-AACLArrVAwAAiQK6+QIAAIsCut0DAACJArrFAgAAiwK62QMAAIkCutkDAACLArr5AgAAAQK6NzQA
-AIsCuv0CAACJAro7NAAAiwK6sQEAAIkCuv0CAACLArq1AQAAiQK61QMAAIsCuq0BAACJArqhAQAA
-iwK6rQEAAAECuhoAAACLArrZJgAAOQIPhRADAAC6+QIAAIsCuv0DAACJArr5AgAAiwK6BQQAAIkC
-uj80AACLArpDNAAAiQK6RzQAAIsCukM0AAABArr9AwAAiwK6QzQAAIsSiQK6LgAAAIsCukM0AAAB
-ArpAAQAAiwK6TzQAAIkCi+O60QEAAP8yuks0AAD/MroWAAAA/zLodB3//7pIAAAAiQK6UAAAAIsC
-ukgAAAA5Ag+EDgAAAIvjukgAAAD/MujqxP//ujwBAACLArpPNAAAAQKL47pLNAAA/zK6FgAAAP8y
-uk80AAD/Muj8////ukABAACLArpDNAAAixKJAroBBAAAiwK6yQIAAAECugEEAACLArr5AgAAAQK6
-CzQAAIsS/wK6VzQAAIsCuv0CAAABArpTNAAAiwK6uQEAAIkCulc0AACLArq9AQAAiQK6/QMAAIsC
-uqkBAACJArpbNAAAiwK6qQEAAAECuqEBAACLArqpAQAAAQK6/QMAAIsCuls0AAABArr9AwAAiwK6
-XzQAAAECujwBAACLArpjNAAAiQK6QAEAAIsCumM0AAABArpLNAAAiwK6YzQAACkCumM0AACLAro8
-AQAAOQIPjdUAAAC6LgAAAIsCumM0AAApArpjNAAAixKLArpnNAAAiQK6WzQAAIsCumc0AAABArpn
-NAAAiwK6YzQAAIsSiQK6LgAAAIsCumM0AAApArpjNAAAixKLArpnNAAAiQK6XzQAAIsCumc0AAAB
-ArpnNAAAiwK6YzQAAIsSiQK6LgAAAIsCumM0AAApArouAAAAiwK6YzQAACkCui4AAACLArpjNAAA
-KQK6YzQAAIsSiwK6ZzQAAIkCuls0AACLArpnNAAAAQK6ZzQAAIsCumM0AACLEokC6Rf///+6SAEA
-AIsCums0AACJArpMAQAAiwK6azQAAAECums0AACLArpIAQAAOQIPjVUAAAC6LgAAAIsCums0AAAp
-ArprNAAAixKLArpnNAAAiQK6MgAAAIsCumc0AAA5Ag+EHgAAALpfNAAAiwK6ZzQAAAECumc0AACL
-ArprNAAAixKJAumX////i+O65QIAAP8yuv0CAAD/Muiv7v7/um80AACJArpvNAAAiwK6/QIAAAEC
-6eMKAAC6HgAAAIsCusEBAAA5Ag+FVQEAALooAQAAiwK6eQQAAIkCuigBAACLArp9BAAAiQK6bQQA
-AIsCuo0EAACJArooAQAAiwK6jQQAAAECunEEAACLArqRBAAAiQKL47ooAQAA/zK6nQEAAP8yuo0E
-AAD/MrqRBAAA/zLosPj+/7qRBAAAiQK6kQQAAIsCupUEAACJAro0AQAAiwK6mQQAAIkCujQBAACL
-ArqdBAAAiQKL47oqAAAA/zK6dzQAAP8yulkEAAD/Muj8////upEEAACLAroVAgAAAQK6FQIAAIsC
-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
-D4QOAAAAi+O6SAAAAP8y6EG6//+6+zQAAP8C6Zv///+6dAAAAIsCupQFAACJArqUBQAAiwK6AQUA
-AAECujgFAACLArpABQAAiQK6jAUAAIsCukAFAAABArqUBQAAiwK6QAUAAAECukwBAACLAroBBQAA
-AQK6QAUAAIsCulAFAACJArpMAQAAiwK6UAUAAAECulgBAACLArpYBQAAiQK6WAEAAIsCugEFAAAB
-ArpQBQAAiwK6YAUAAIkCulgBAACLArpgBQAAAQK6hAUAAIsCumgFAACJArpwBQAAiwq6aAUAAIsC
-9+m6aAUAAIkCumgFAACLAroBBQAAAQK6YAUAAIsCugM1AACJArpoBQAAiwK6AzUAAAECujIAAACL
-AroINQAAiQK6hAUAAIsCugg1AAA5Ag+NaQAAAIvjus0BAAD/MroINQAA/zK6BzUAADPAigJQugM1
-AAD/MugYNv//ukgAAACJArpQAAAAiwK6SAAAADkCD4QOAAAAi+O6SAAAAP8y6M24//+6CDUAAP8C
-ui4AAACLAroDNQAAAQLpg////7p0AAAAiwK6mAUAAIkCupQFAACLArqYBQAAKQK6hAUAAIsCupwF
-AACJArouAAAAiwq6nAUAAIsC9+m6nAUAAIkCi+O6zQEAAP8yupwFAAD/MroWAAAA/zLotxD//7pI
-AAAAiQK6UAAAAIsCukgAAAA5Ag+EDgAAAIvjukgAAAD/MugtuP//unAAAACLAroMNQAAiQK6dAAA
-AIsCugw1AAABAroyAAAAiwK6+zQAAIkCuoQFAACLArr7NAAAOQIPjSoAAAC6LgAAAIsCugw1AAAp
-AroyAAAAiwK6DDUAAIsSiQK6+zQAAP8C6cL///+6EQUAAIsCurkBAACJAroVBQAAiwK6vQEAAIkC
-uvkEAACLArqpAQAAiQK6AQUAAIsCuqkBAAABArqcBQAAiwK6AQUAAAECugEFAACLAroFBQAAiQKL
-47pwAQAA/zK6bAEAAP8y6BNa//+6jAAAAIsCuig1AACJArqIAAAAiwK6JDUAAIkCuogAAACLAroo
-NQAAAQK6KDUAAIsCuiQ1AAA5Ag+EogAAALokNQAAixKLAroQNQAAiQKL47ogNQAA/zK6EDUAAP8y
-6Jzr/v+6LgAAAIsCuiQ1AAABArokNQAAixKLAroUNQAAiQK6FDUAAIsCuhw1AAABArouAAAAiwK6
-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
-ANLHAAABAQAA2ccAAAEBAADixwAAAQEAAOnHAAABAQAA8McAAAEBAAD+xwAAAQEAAAXIAAABAQAA
-DMgAAAEBAAAayAAAAQEAACHIAAABAQAAKMgAAAEBAAA2yAAAAQEAAD3IAAABAQAARMgAAAEBAABb
-yAAAAQEAAGLIAAABAQAAcMgAAAEBAAB3yAAAAQEAAH7IAAABAQAAjMgAAAEBAACTyAAAAgQAALrI
-AAABAQAAysgAAAEBAADRyAAAAQEAAODIAAABAQAADskAAAEBAAAfyQAAAQEAACbJAAABAQAAN8kA
-AAEBAABKyQAAAQEAAFPJAAABAQAAWskAAAEBAABhyQAAAQEAAGjJAAABAQAAdMkAAAEBAAB7yQAA
-AQEAAILJAAABAQAAj8kAAAEBAACbyQAAAQEAAKfJAAABAQAAs8kAAAEBAADJyQAAAQEAANLJAAAC
-DwAA18kAAAEBAADjyQAAAQEAAPDJAAABAQAA+skAAAEBAAABygAAAQEAABLKAAABAQAAIMoAAAEB
-AAApygAAAQEAADXKAAABAQAAQMoAAAEBAABMygAAAQEAAFPKAAABAQAAWsoAAAEBAABnygAAAQEA
-AHHKAAABAQAAeMoAAAEBAACDygAAAQEAAI/KAAABAQAAlsoAAAEBAACdygAAAQEAAKTKAAABAQAA
-q8oAAAEBAACyygAAAQEAALnKAAABAQAAwMoAAAEBAADHygAAAQEAAM7KAAABAQAA1coAAAEBAADc
-ygAAAQEAAOPKAAABAQAA6soAAAEBAADxygAAAQEAAP7KAAABAQAABcsAAAEBAAAMywAAAQEAABPL
-AAABAQAAGssAAAEBAAAhywAAAQEAACjLAAABAQAAL8sAAAEBAAA4ywAAAQEAAD/LAAABAQAARssA
-AAEBAABNywAAAgYAAFLLAAABAQAAWcsAAAEBAABgywAAAQEAAGfLAAABAQAAdMsAAAEBAAB7ywAA
-AQEAAITLAAABAQAAi8sAAAEBAACXywAAAQEAAKLLAAABAQAAqcsAAAEBAACwywAAAQEAALzLAAAB
-AQAAw8sAAAEBAADKywAAAQEAANfLAAABAQAA4csAAAEBAADoywAAAQEAAO/LAAABAQAA9ssAAAEB
-AAD/ywAAAQEAAAbMAAABAQAADcwAAAEBAAAUzAAAAgYAABvMAAABAQAAIswAAAEBAAAuzAAAAQEA
-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
-AG4rAQABAQAAdSsBAAEBAAB8KwEAAQEAAIgrAQABAQAAjysBAAEBAACWKwEAAQEAAKorAQABAQAA
-sSsBAAEBAAC6KwEAAQEAAMErAQABAQAAyCsBAAEBAADUKwEAAQEAANsrAQABAQAA4isBAAEBAAD2
-KwEAAQEAAP0rAQABAQAABiwBAAEBAAANLAEAAQEAABQsAQABAQAAICwBAAEBAAAnLAEAAQEAAC4s
-AQABAQAARCwBAAEBAABLLAEAAQEAAFIsAQABAQAAXiwBAAEBAABlLAEAAQEAAGwsAQABAQAAgiwB
-AAEBAACJLAEAAQEAAJAsAQABAQAAnCwBAAEBAACjLAEAAQEAAKosAQABAQAAviwBAAEBAADFLAEA
-AQEAAM4sAQABAQAA1SwBAAEBAADcLAEAAQEAAOgsAQABAQAA7ywBAAEBAAD2LAEAAQEAABYtAQAB
-AQAAAC5kYXRhAC50ZXh0AHJlYWxsb2MAZnJlZQAAc3ByaW50ZgBtZW1jcHkAAG1lbXNldAAAZXhp
-dAAAb3BlbgAAY2xvc2UAbHNlZWsAcmVhZAAAd3JpdGUAY2hkaXIAZ2V0Y3dkAABmcHJpbnRmAHN0
-ZGVycgAAZ2V0cGlkAABmb3BlbgBmY2xvc2UAAGdldGRlbGltAABnZXRlbnYAAGFjY2VzcwAATWVz
-c2FnZQBwcmVmZXh0cmEAbWVtcmVhbGxvYwBtZW1vcnlhbGxvYwBtZW1hbGxvYwBtZW1jYWxsb2MA
-bWVtY21wAHN0cmxlbgBwcmludGJ1ZgBlcnJvckRlZk91dABvcGVuZmlsZQB3cml0ZWZpbGUAcmVx
-dWlyZWRwYWQAcGFkd3JpdGUAcGFkZGVkd3JpdGUAcGFkc2VjAGZpbGVwYXRoZGVsaW1zAGVuZG9m
-Zm9sZGVycwBjaGFuZ2VkaXIAZmlsZV9nZXRfY29udGVudF9vZnMAcmVtYWluZGVyAG5lZwBjbGVh
-cm1lc3NhZ2UAc2FmZU1lc3NhZ2UAY29tcGFyZWFnYWluc3RtYXhwYXRoAGdldGNvbnQAZ2V0cHRy
-Y29udFJlZwBnZXRjb250UmVnAGdldGNvbnRhbmRjb250UmVnAGdldHN0cnVjdGNvbnQAY29uZ3J1
-ZW50bW9kdWxvYXRzZWdtZW50cwBhZGR0b2xvZwBhZGR0b2xvZ19leAByZXN0b3JlX2N1cnNvcnNf
-b25vawB2YXJzX2NvcmVfcmVmAHZhcnNjb3JlAHZhcnNfaWdub3JlcmVmAHZhcnMAdmFyc19udW1i
-ZXIAc2VhcmNoaW52YXJzAHN0cmludmFycwB1bmRlZmluZWR2YXJpYWJsZQBpc19zdHJpbmcAdmFy
-c3VmaXgAYWR2YW5jZWN1cnNvcnMAc3RlcGN1cnNvcnMAc3RyaW5tZW0Ac3RyYXRtZW0AbWVtX3Nw
-YWNlcwBzcGFjZXMAc3RyaW5nc2F0bWVtc3BjAHN0cmF0bWVtc3BjAHF1b3Rlc2NhcGVkAHF1b3Rp
-ZW50aW5tZW0AcXVvdGlubWVtAG1heHBhdGh2ZXJpZgBxdW90ZXNfZm9yd2FyZAB2YWxpbm1lbXNl
-bnMAdmFsaW5tZW0AdmFsaW5tZW1fcGlwZXMAY29tbWFuZFN1YnR5cGVEZWNsYXJlX3RvX3R5cGVu
-dW1iZXIAZ2V0Y29tbWFuZABzb3J0Y29tbWFuZHMAc29ydGFsbGNvbW1hbmRzAG1heHZhbHVlY2hl
-Y2sAYWRkdG9zZWMAYWRkdG9Db2RlX3NldF9wcm9ncmFtZW50cnlwb2ludABhZGR0b3NlY3N0cgBp
-c192YXJpYWJsZV9jaGFyAGlzX3ZhcmlhYmxlX2NoYXJfbm90X251bWVyaWMAYWRkYXJlZgBhZGRf
-cmVmX3RvX3NlYwBhZGR0b3NlY3N0cmVzYwBudW1lcmljAG1lbXRvaW50AGhleG5yAG1lbXRvaGV4
-AG51bWJlcnRvaW50AG51bWJlcnNjb25zdGFudHMAcGFyZW50aGVzaXNfc2l6ZQBwYXJlbnRoZXNp
-c19hbGxfc2l6ZQBvcGVyYXRpb24Ac2lnbm9wAG9uZW9wZXJhdGlvbgBwYXJzZW9wZXJhdGlvbnMA
-YWRkdG9uYW1lc3NpemVkAGFkZHRvbmFtZXMAZWxmYWRkc2VjAGVsZmFkZHN0cnNlYwBlbGZhZGRz
-eW0AZWxmYWRkc3Ryc3pzeW0AZWxmYWRkc3Ryc3ltAGFkZHJlbABhZGRkaXJlY3RyZWwAaXNfc3Rh
-Y2sAc3RhY2tfZ2V0X3JlbGF0aXZlAHJvbABmb3JtbW9kcm0Ad3JpdGV0YWtlAHdyaXRlb3BlcmF0
-aW9uAHdyaXRlb3AAaW1tX3ZhbHVlcwBjYW5iZWltbV9vcmVycm9yAGZpbmRpbW0Ac2V0aW1tAHVu
-c2V0aW1tAGdldGltbQByZXNldGlzaW1tAGdldGlzaW1tAHdyaXRlb3BfaW1tZmlsdGVyAHN0b3Jl
-Zmlyc3RfaXNpbW0AcmVzdG9yZWZpcnN0X2lzaW1tAHN3aXRjaGltbQB2ZXJpZnlfc3ludGF4X2Vu
-ZABhcmdfc2l6ZQBnZXRhcmcAZnVuY3Rpb25faW5fY29kZQBpc19jb25zdGFudF9yZWxhdGVkX2Fz
-Y2lpAGFyZwBhcmdmaWx0ZXJzAHByZWZpeF9ib29sAGdldHJldHVybgBhcmd1bWVudAByYW1wX2lu
-ZGV4AHN0YWNrZmlsdGVyAGdldHB0cnJhbXAAZ3Jvd3JhbXAAYWRkcmFtcABnZXRyYW1wX2VieHJl
-bABlbnRyeXNjb3BlAGVudHJ5c2NvcGVfdmVyaWZ5X2NvZGUAYWRkdG9jb2RlZm9yc3RhY2sAbG9j
-YWxSZXNvbHZlAGdldF9mbl9wb3MAdW5yZXNMYwB1bnJlc29sdmVkTG9jYWwAZW50cnl2YXJzZm5z
-AGdldF9pbWdfdmRhdGFfZGF0YVJlZwBhZGR2YXJyZWZlcmVuY2UAYWRkdmFycmVmZXJlbmNlb3J1
-bnJlZgBnZXRzaWduAGRhdGFwYXJzZQBmbmRlY2FyZ3MAd3JpdGV2YXIAZW51bWNvbW1hcwB1bnJl
-c29sdmVkY2FsbHNmbgBwYXJzZWZ1bmN0aW9uAGZuX3RleHRfaW5mbwBwcmVwYXJlX2Z1bmN0aW9u
-X2NhbGwAd3JpdGVfZnVuY3Rpb25fY2FsbABnbG9iYWxfZXJyX3AAZ2xvYmFsX2Vycl9wQm9vbABl
-bnRyeWxpbnV4X2Jvb2xfcABpc19saW51eF9lbmQAdHdvYXJncwBjb2RlcmVndG9jb25kbG9vcABj
-b25kYmVnaW53cml0ZQBjb25kYmVnaW4AY2hlY2tjb25kbG9vcGNsb3NlAGNvbmRqdW1wAGNvbmRl
-bmQAY29uZGl0aW9uc2NvbmRlbmQAY2xvc2VpZm9wZW5lbHNlAG9wZW5saWIAY2xvc2VsaWIAd2Fy
-bmluZ3MAcGFyc2VwcmVmZXJlbmNlcwBzZXRwcmVmZXJlbmNlcwBvZmZzZXRvZmZpbGVfdmFsdWUA
-aW5jbHVkZQBkYXRhYXNzaWduAHVuZGVmaW5lZHZhcl9mbgBnZXRfaW1wb3J0Yml0AGdldF9mdW5j
-dGlvbl92YWx1ZQBnZXRfZnVuY3Rpb25fdmFsdWVzAGFkZF9zdHJpbmdfdG9fZGF0YQBlbnVtYmFn
-cwBmcmVlY2xvc2UAbXNnZXJyZXhpdABlcnJleGl0AHBfaXNfZm9yXzY0AGlzX2Zvcl82NABpc19m
-b3JfNjRfaXNfaW1wWF9vcl9mblhfcF9nZXQAaXNfZm9yXzY0X2lzX2ltcFhfb3JfZm5YX2dldABp
-c19mb3JfNjRfaXNfaW1wWF9vcl9mblhfc2V0AG5yX29mX2FyZ3NfNjRuZWVkX3BfZ2V0AG5yX29m
-X2FyZ3NfNjRuZWVkX3NldABucl9vZl9hcmdzXzY0bmVlZF9jb3VudABucl9vZl9hcmdzXzY0bmVl
-ZABzdGFja19hbGlnbl9vZmZfcF9nZXQAcmV4X3cAcmV4X3dfaWY2NABzdGFjazY0X29wX3NldABz
-dGFjazY0X29wX3NldF9nZXQAc3RhY2s2NF9vcABzdGFjazY0X2FkZAB2YWw2NF9waGFzZV8wAHZh
-bDY0X3BoYXNlXzEAdmFsNjRfcGhhc2VfMgB2YWw2NF9waGFzZV8zAHZhbDY0X3BfZ2V0AF9zdGFy
-dAAuc3ltdGFiAC5yZWwuZGF0YQAucmVsLnRleHQALnN0cnRhYgA=
--- /dev/null
+++ ocompiler-1/src/files/_/cimports.h
@@ -0,0 +1,9 @@
+
+
+
+Import "realloc" realloc
+Import "free" free
+Import "sprintf" sprintf
+Import "memcpy" memtomem
+Import "memset" memset
+Import "exit" exit
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions.s
@@ -0,0 +1,23 @@
+
+
+Include "./actions/setdefdir.s"
+
+SetCall errormsg include(path)
+If errormsg!=noerr
+	Call msgerrexit(errormsg)
+EndIf
+
+Include "./actions/main.s"
+
+Include "./actions/terminations.s"
+
+Include "./actions/pathout.s"
+
+Include "./actions/fileformat.s"
+
+#call to resolve local or imported functions
+Include "./actions/resolve.s"
+
+Include "./actions/write.s"
+
+Call freeclose()
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/fileformat.s
@@ -0,0 +1,7 @@
+
+If fileformat==pe_exec
+	Include "./fileformat/pe_struct.s"
+	Include "./fileformat/pe_resolve.s"
+Else
+	Include "./fileformat/elf_resolve.s"
+EndElse
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/fileformat/elf_resolve.s
@@ -0,0 +1,323 @@
+
+If object==false
+	#data
+	Set elf32_phdr_p_filesz_data datasecReg
+	Set elf32_phdr_p_memsz_data datasecReg
+
+	#code
+	Set elf32_phdr_p_offset_code elf32_phdr_p_offset_data
+	Add elf32_phdr_p_offset_code datasecReg
+
+	Set elf32_phdr_p_vaddr_code elf32_phdr_p_vaddr_data
+
+	SetCall elf32_phdr_p_vaddr_code congruentmoduloatsegments(elf32_phdr_p_vaddr_code,elf32_phdr_p_offset_code,page_sectionalignment,datasecReg)
+	Set elf32_phdr_p_paddr_code elf32_phdr_p_vaddr_code
+
+	Set elf32_phdr_p_filesz_code codesecReg
+	Set elf32_phdr_p_memsz_code codesecReg
+
+
+	#######
+	Data ET_EXEC=2
+	Data ptrET_EXEC^ET_EXEC
+	Call memtomem(ptrelf32_ehd_e_type,ptrET_EXEC,wordsize)
+	#######
+	Add programentrypoint elf32_phdr_p_vaddr_code
+	Set elf32_ehd_e_entry programentrypoint
+	#######
+	Set elf32_ehd_e_phoff elf_fileheaders_size
+	#######
+	Set elf32_ehd_e_shoff null
+	#######
+	Data elf_sections_start_count=2
+	data ptrelf_sections_start_count^elf_sections_start_count
+	call memtomem(ptrelf32_ehd_e_phnum,ptrelf_sections_start_count,wordsize)
+	#######
+	call memtomem(ptrelf32_ehd_e_shnum,ptrnull,wordsize)
+	#######
+	call memtomem(ptrelf32_ehd_e_shstrndx,ptrnull,wordsize)
+	#######
+
+	#commons#
+	Set virtuallocalsoffset elf32_phdr_p_vaddr_code
+	#commons#
+Else
+	#######
+	Data ET_REL=1
+	Data ptrET_REL^ET_REL
+	Call memtomem(ptrelf32_ehd_e_type,ptrET_REL,wordsize)
+	#######
+	Set elf32_ehd_e_entry null
+	#######
+	Set elf32_ehd_e_phoff null
+	#######
+	Set elf32_ehd_e_shoff elf_fileheaders_size
+	#######
+	call memtomem(ptrelf32_ehd_e_phnum,ptrnull,wordsize)
+	#######
+	Const elf_sec_nr=7
+	Const elf_sec_strtab_nr=elf_sec_nr-1
+	Data elf_sec_nr=elf_sec_nr
+	data ptrelf_sec_nr^elf_sec_nr
+	call memtomem(ptrelf32_ehd_e_shnum,ptrelf_sec_nr,wordsize)
+	#######
+	Data elf_sec_strtab_nr=elf_sec_strtab_nr
+	data ptrelf_sec_strtab_nr^elf_sec_strtab_nr
+	call memtomem(ptrelf32_ehd_e_shstrndx,ptrelf_sec_strtab_nr,wordsize)
+	#######
+
+	Data SHT_PROGBITS=SHT_PROGBITS
+	Data elf_sec_fileoff#1
+
+	SetCall errormsg elfaddsec(null,null,null,null,null,null,null,null,null)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+	
+	Data elf_sec_flags_data=SHF_ALLOC
+	Set elf_sec_fileoff elf32_phdr_p_offset_data
+	SetCall errormsg elfaddsec(datastrtab,SHT_PROGBITS,elf_sec_flags_data,elf_sec_fileoff,ptrdatasec,null,null,dwordsize,null)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Data elf_sec_flags_text=SHF_ALLOC|SHF_EXECINSTR
+	Add elf_sec_fileoff datasecReg
+	SetCall errormsg elfaddsec(codestrtab,SHT_PROGBITS,elf_sec_flags_text,elf_sec_fileoff,ptrcodesec,null,null,dwordsize,null)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Chars elfsymtab=".symtab"
+	Str ptrelfsymtab^elfsymtab
+	Data SHT_SYMTAB=2
+	Add elf_sec_fileoff codesecReg
+	Data oneGreaterThanLastSTB_LOCAL=oneGreaterThanLastSTB_LOCAL
+
+	SetCall errormsg elfaddstrsec(ptrelfsymtab,SHT_SYMTAB,null,elf_sec_fileoff,ptrtable,elf_sec_strtab_nr,oneGreaterThanLastSTB_LOCAL,dwordsize,elf32_dyn_d_val_syment)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Data SHT_REL=9
+	Data symind=symind
+
+	Chars elfreldata=".rel.data"
+	Str ptrelfreldata^elfreldata
+	Add elf_sec_fileoff tableReg
+	SetCall errormsg elfaddstrsec(ptrelfreldata,SHT_REL,null,elf_sec_fileoff,ptraddresses,symind,dataind,dwordsize,elf32_dyn_d_val_relent)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Chars elfreltxt=".rel.text"
+	Str ptrelfreltxt^elfreltxt
+	Add elf_sec_fileoff addressesReg
+	SetCall errormsg elfaddstrsec(ptrelfreltxt,SHT_REL,null,elf_sec_fileoff,ptrextra,symind,codeind,dwordsize,elf32_dyn_d_val_relent)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Chars elfstrtab=".strtab"
+	Str ptrelfstrtab^elfstrtab
+	Data SHT_STRTAB=3
+	Add elf_sec_fileoff extraReg
+	SetCall errormsg elfaddstrsec(ptrelfstrtab,SHT_STRTAB,null,elf_sec_fileoff,ptrnames,null,null,bytesize,null)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Set startofdata elf_startofdata
+EndElse
+
+#commons#
+Set fileheaders elf_fileheaders
+Set sizefileheaders elf_fileheaders_size
+#commons#
+
+#imports
+If implibsstarted==true
+	#interpreter
+	Inc elf32_ehd_e_phnum
+
+	Set elf32_phdr_p_offset_interp elf32_phdr_p_offset_code
+	Add elf32_phdr_p_offset_interp codesecReg
+
+	Set elf32_phdr_p_vaddr_interp elf32_phdr_p_vaddr_code
+	Add elf32_phdr_p_vaddr_interp codesecReg
+	#SetCall elf32_phdr_p_vaddr_interp congruentmoduloatsegments(elf32_phdr_p_vaddr_interp,elf32_phdr_p_offset_interp,page_sectionalignment,codesecReg)
+
+	Set elf32_phdr_p_paddr_interp elf32_phdr_p_vaddr_interp
+
+	SetCall interpretersize strlen(ptrinterpreter)
+	Inc interpretersize
+
+	Set elf32_phdr_p_filesz_interp interpretersize
+	Set elf32_phdr_p_memsz_interp interpretersize
+
+	#dynamic
+	Inc elf32_ehd_e_phnum
+	
+	Set elf32_phdr_p_offset_dyn elf32_phdr_p_offset_interp
+	Add elf32_phdr_p_offset_dyn interpretersize
+
+	Set elf32_phdr_p_vaddr_dyn elf32_phdr_p_vaddr_interp
+	Add elf32_phdr_p_vaddr_dyn interpretersize
+
+	Set elf32_phdr_p_paddr_dyn elf32_phdr_p_vaddr_dyn
+
+	Set elf32_phdr_p_filesz_dyn tableReg
+	Add elf32_phdr_p_filesz_dyn elf_dynfix_size
+
+	Set elf32_phdr_p_memsz_dyn elf32_phdr_p_filesz_dyn
+
+	#libraries load
+	Inc elf32_ehd_e_phnum
+
+	Set elf32_phdr_p_offset_lib elf32_phdr_p_offset_dyn
+	Add elf32_phdr_p_offset_lib elf32_phdr_p_filesz_dyn
+
+	set elf32_phdr_p_vaddr_lib elf32_phdr_p_vaddr_dyn
+	Add elf32_phdr_p_vaddr_lib elf32_phdr_p_filesz_dyn
+
+	data test1#1
+	data test2#1
+	set test1 elf32_phdr_p_vaddr_interp
+	div test1 page_sectionalignment
+	set test2 elf32_phdr_p_vaddr_lib
+	div test2 page_sectionalignment
+	if test2==test1
+		add elf32_phdr_p_vaddr_lib page_sectionalignment
+	endif
+
+	Set elf32_phdr_p_paddr_lib elf32_phdr_p_vaddr_lib
+
+	##resolve libraries
+	###hash
+	Set elf32_dyn_d_ptr_hash elf32_phdr_p_vaddr_lib
+
+	#
+	Set elf32_phdr_p_filesz_lib elf_hash_minsize
+	#
+
+	Set sizeofchain addressesReg
+	Div sizeofchain elf32_dyn_d_val_syment
+
+	## '## '=import command dependent
+	Data loopsymbols#1
+	Data ptrloopsymbols^loopsymbols
+	Set loopsymbols zero
+	While loopsymbols<sizeofchain
+		SetCall errormsg addtosec(ptrloopsymbols,dwordsize,ptrmiscbag)
+		If errormsg!=noerr
+			Call msgerrexit(errormsg)
+		EndIf
+		Inc loopsymbols
+	EndWhile
+	##
+	Set hash_var_size miscbagReg
+
+	#
+	Add elf32_phdr_p_filesz_lib hash_var_size
+	#
+
+	###symtab
+	Set elf32_dyn_d_ptr_symtab elf32_dyn_d_ptr_hash
+	Add elf32_dyn_d_ptr_symtab elf_hash_minsize
+	Add elf32_dyn_d_ptr_symtab hash_var_size
+	
+	#
+	Add elf32_phdr_p_filesz_lib addressesReg
+	#
+
+	###strtab
+	Set elf32_dyn_d_ptr_strtab elf32_dyn_d_ptr_symtab
+	Add elf32_dyn_d_ptr_strtab addressesReg
+
+	###strsz
+	Set elf32_dyn_d_val_strsz namesReg
+
+	#
+	Add elf32_phdr_p_filesz_lib namesReg
+	#
+
+	###rel
+	Set elf32_dyn_d_ptr_rel elf32_dyn_d_ptr_strtab
+	Add elf32_dyn_d_ptr_rel namesReg
+
+	###relsz
+	Set elf32_dyn_d_val_relsz sizeofchain
+
+	Mult elf32_dyn_d_val_relsz elf32_dyn_d_val_relent
+
+	#
+	Add elf32_phdr_p_filesz_lib elf32_dyn_d_val_relsz
+	#
+
+	##
+	Data elf_rel_offset#1
+	Chars elf_rel_info_type={R_386_32}
+	Data elf_rel_info_symbolindex#1
+
+	Set elf_rel_offset elf32_dyn_d_ptr_rel
+	Add elf_rel_offset elf32_dyn_d_val_relsz
+	Set elf_rel_info_symbolindex zero
+
+	While elf_rel_info_symbolindex<sizeofchain
+		SetCall errormsg addrel(elf_rel_offset,elf_rel_info_type,elf_rel_info_symbolindex,ptrmiscbag)
+		If errormsg!=noerr
+			Call msgerrexit(errormsg)
+		EndIf
+		Inc elf_rel_info_symbolindex
+		Add elf_rel_offset dwordsize
+	EndWhile
+	##
+
+	Set rel_var_size miscbagReg
+	Sub rel_var_size hash_var_size
+	
+	Set elf_rel_entries_size sizeofchain
+	Mult elf_rel_entries_size dwordsize
+
+	SetCall errormsg addtosec(null,elf_rel_entries_size,ptrmiscbag)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+
+	Data el_rel_entries_loop#1
+	Set el_rel_entries_loop miscbag
+	Add el_rel_entries_loop miscbagReg
+	Set loopsymbols zero
+	While loopsymbols<sizeofchain
+		Sub el_rel_entries_loop dwordsize
+		Set el_rel_entries_loop# zero
+		Inc loopsymbols
+	EndWhile
+
+	#commons#
+	Set importfileheaders elf_importfileheaders
+	Set sizeimportfileheaders elf_importfileheaders_size
+
+	Set virtualimportsoffset elf32_phdr_p_vaddr_lib
+	Add virtualimportsoffset elf32_phdr_p_filesz_lib
+	#commons#
+
+	#
+	Add elf32_phdr_p_filesz_lib elf_rel_entries_size
+	#
+
+	Set elf32_phdr_p_memsz_lib elf32_phdr_p_filesz_lib
+
+
+
+	
+	#sub elf32_phdr_p_offset_lib elf32_phdr_p_filesz_interp
+	#sub elf32_phdr_p_offset_lib elf32_phdr_p_filesz_dyn
+
+	#add elf32_phdr_p_filesz_lib elf32_phdr_p_filesz_interp
+	#add elf32_phdr_p_filesz_lib elf32_phdr_p_filesz_dyn
+
+	#Set elf32_phdr_p_paddr_lib elf32_phdr_p_vaddr_lib
+	#Set elf32_phdr_p_memsz_lib elf32_phdr_p_filesz_lib
+EndIf
+
--- /dev/null
+++ ocompiler-1/src/files/actions/fileformat/pe_resolve.s
@@ -0,0 +1,164 @@
+
+
+
+
+
+##############################################
+Set SizeOfImage SectionAlignment
+##############################################
+
+##############################################
+#datasection VirtualSize
+Set dVirtualSize datasecReg
+#######################
+Set dSizeOfRawData datasecMax
+#######################
+Set SizeOfInitializedData dSizeOfRawData
+#######################
+Add SizeOfImage dSizeOfRawData
+##############################################
+
+
+##############################################
+Set BaseOfCode SizeOfImage
+#######################
+Set SizeOfCode codesecMax
+#######################
+Add programentrypoint BaseOfCode
+Set AddressOfEntryPoint programentrypoint
+#######################
+#codesection VirtualSize
+Set cVirtualSize codesecReg
+#######################
+Set cVirtualAddress BaseOfCode
+#######################
+Set cPointerToRawData SizeOfImage
+#######################
+Set cSizeOfRawData SizeOfCode
+#######################
+Add SizeOfImage cSizeOfRawData
+#######################
+Const pe_fileheadersstart^dos_header
+Const codesectionCharacteristicsoff^codesectionCharacteristics
+Const sizefileheadercodedata=codesectionCharacteristicsoff+dwsz
+Const codedatasizefileheaders=sizefileheadercodedata-pe_fileheadersstart
+Data codedatasizefileheaders=codedatasizefileheaders
+
+Set SizeOfHeaders codedatasizefileheaders
+##############################################
+
+
+###################resolve commons###################
+Data pe_fileheaders%pe_fileheadersstart
+Set fileheaders pe_fileheaders
+Set sizefileheaders SizeOfHeaders
+
+set virtuallocalsoffset cVirtualAddress
+add virtuallocalsoffset imagebaseoffset
+###################resolve commons###################
+
+Data directoriesaddress^directoryentries
+Data destdir#1
+If implibsstarted==true
+	##############################################
+	Set iVirtualAddress SizeOfImage
+	#######################
+	Set iPointerToRawData SizeOfImage
+	#######################
+	#OPTIONAL_HEADER\Directories\Import table rva
+	Set destdir directoriesaddress
+	Data idiroffset=im_d_entry_import_offset
+	Add destdir idiroffset
+	Set destdir# iVirtualAddress
+	#######################
+
+	#OPTIONAL_HEADER\Directories\Import table size
+	Add destdir dwordsize
+
+	Data itabentrysize=IMAGE_IMPORT_DESCRIPTORsize
+	Data itabloc#1
+	Set itabloc tableReg
+	SetCall errormsg addtosec(null,itabentrysize,ptrtable)
+	If errormsg!=noerr
+		Call msgerrexit(errormsg)
+	EndIf
+	Add itabloc table
+	Call memset(itabloc,null,itabentrysize)
+
+	Set destdir# tableReg
+
+	#######################
+	Add SizeOfInitializedData iSizeOfRawData
+	#######################
+	Add SizeOfImage iSizeOfRawData
+	#######################
+	Inc ptrNumberOfSections#
+	#######################
+	Const idatasectionCharacteristicsoff^idatasectionCharacteristics
+	Const idatasectionstart^idatasection
+	Const idatasectionsize=idatasectionCharacteristicsoff+dwsz-idatasectionstart
+	Data idatasectionstart%idatasectionstart
+	Data idatasectionsize=idatasectionsize
+
+	Add SizeOfHeaders idatasectionsize
+	##############################################
+
+	Const iaddressesoffset=itablesize
+	Const inamesoffset=itablesize+iaddressessize
+	Data iaddressesoffset=iaddressesoffset
+	Data inamesoffset=inamesoffset
+
+	###################resolve commons###################
+	Set importfileheaders idatasectionstart
+	Set sizeimportfileheaders idatasectionsize
+
+	Set virtualimportsoffset iVirtualAddress
+	Add virtualimportsoffset iaddressesoffset
+	add virtualimportsoffset imagebaseoffset
+	###################resolve commons###################
+
+	#resolve idata section
+	Add iaddressesoffset iVirtualAddress
+	Add inamesoffset iVirtualAddress
+
+	Data resolveitab#1
+	Set resolveitab table
+	Add resolveitab tableReg
+
+	Sub resolveitab itabentrysize
+	Data resolvevalue#1
+	While table<resolveitab
+		Sub resolveitab dwordsize
+		Set resolvevalue resolveitab#
+		Add resolvevalue iaddressesoffset
+		Set resolveitab# resolvevalue
+		Sub resolveitab dwordsize
+		Set resolvevalue resolveitab#
+		Add resolvevalue inamesoffset
+		Set resolveitab# resolvevalue
+		Sub resolveitab dwordsize
+		Sub resolveitab dwordsize
+		Sub resolveitab dwordsize
+		Set resolvevalue resolveitab#
+		Add resolvevalue iaddressesoffset
+		Set resolveitab# resolvevalue
+	EndWhile
+
+	Data resolveiadr#1
+	Set resolveiadr addresses
+	Add resolveiadr addressesReg
+
+	While addresses<resolveiadr
+		Sub resolveiadr dwordsize
+		Set resolvevalue resolveiadr#
+		#offset 0 can be wrong but is not because there it is the first library name and these are functions names
+		If resolvevalue!=zero
+			Add resolvevalue inamesoffset
+			Set resolveiadr# resolvevalue
+		EndIf
+	EndWhile
+EndIf
+
+Data padtheheaders#1
+SetCall padtheheaders requiredpad(SizeOfHeaders,FileAlignment)
+Add SizeOfHeaders padtheheaders
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/fileformat/pe_struct.s
@@ -0,0 +1,150 @@
+
+
+
+
+#IMAGE_DOS_HEADER
+#00    WORD   e_magic;                     // Magic number
+#02    WORD   e_cblp;                      // Bytes on last page of file
+#04    WORD   e_cp;                        // Pages in file
+#06    WORD   e_crlc;                      // Relocations
+#08    WORD   e_cparhdr;                   // Size of header in paragraphs
+#      WORD   e_minalloc;                  // Minimum extra paragraphs needed
+#      WORD   e_maxalloc;                  // Maximum extra paragraphs needed
+#      WORD   e_ss;                        // Initial (relative) SS value
+#10    WORD   e_sp;                        // Initial SP value
+#      WORD   e_csum;                      // Checksum
+#      WORD   e_ip;                        // Initial IP value
+#      WORD   e_cs;                        // Initial (relative) CS value
+#      WORD   e_lfarlc;                    // File address of relocation table
+#      WORD   e_ovno;                      // Overlay number
+#1c    WORD   e_res[4];                    // Reserved words
+#      WORD   e_oemid;                     // OEM identifier (for e_oeminfo)
+#      WORD   e_oeminfo;                   // OEM information; e_oemid specific
+#      WORD   e_res2[10];                  // Reserved words
+#2c    LONG   e_lfanew;                    // File address of new exe header
+
+Data pdoscrs^dos_header
+Data pdos^dos_header
+Data dos_size=dossize
+Call memset(pdos,null,dos_size)
+
+Chars mz="MZ"
+Str pmz^mz
+Call memtomem(pdos,pmz,wordsize)
+
+Add pdos wordsize
+Data e_cblp=128
+Set pdos# e_cblp
+
+Add pdos wordsize
+Data e_cp=1
+Set pdos# e_cp
+
+Add pdos wordsize
+Add pdos wordsize
+Data e_cparhdr=4
+Set pdos# e_cparhdr
+
+Add pdoscrs dos_size
+Sub pdoscrs dwordsize
+Data e_lfanew=0x80
+Set pdoscrs# e_lfanew
+
+Chars stubcode={0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21}
+Chars stubstr="This program cannot be run in DOS mode."
+Chars stubstrend={0xd,0xa,0x24,0,0,0,0,0,0,0,0}
+Data pstub^stub
+Data stubsz^stubstr
+Data pstubcode^stubcode
+
+Sub stubsz pstubcode
+Call memtomem(pstub,pstubcode,stubsz)
+Add pstub stubsz
+Data stubsz2#1
+Data pstubstr^stubstr
+SetCall stubsz2 strlen(pstubstr)
+Call memtomem(pstub,pstubstr,stubsz2)
+Add pstub stubsz2
+Data stubsz3#1
+Data stublength=stublength
+set stubsz3 stublength
+Sub stubsz3 stubsz2
+Sub stubsz3 stubsz
+Data pstubstrend^stubstrend
+Call memtomem(pstub,pstubstrend,stubsz3)
+
+Const fileheaderoffset^fileheader
+#IMAGE_FILE_HEADER
+#    WORD    Machine;
+#    WORD    NumberOfSections;
+#    DWORD   TimeDateStamp;
+#    DWORD   PointerToSymbolTable;
+#    DWORD   NumberOfSymbols;
+#    WORD    SizeOfOptionalHeader;
+#    WORD    Characteristics;
+
+Data pfileheader%fileheaderoffset
+
+Const IMAGE_FILE_MACHINE_I386=0x014C
+Data Machine=IMAGE_FILE_MACHINE_I386
+Set pfileheader# Machine
+
+Add pfileheader wordsize
+Const defaultNumberOfSections=2
+Data defaultNumberOfSections=defaultNumberOfSections
+Data ptrNumberOfSections#1
+Set ptrNumberOfSections pfileheader
+Set pfileheader# defaultNumberOfSections
+
+#TimeDateStamp
+Add pfileheader wordsize
+Set pfileheader# null
+
+#PointerToSymbolTable
+Add pfileheader dwordsize
+Set pfileheader# null
+
+#NumberOfSymbols
+Add pfileheader dwordsize
+Set pfileheader# null
+
+#SizeOfOptionalHeader
+Add pfileheader dwordsize
+Data SizeOfOptionalHeader=0xE0
+Set pfileheader# SizeOfOptionalHeader
+
+#Characteristics
+Add pfileheader wordsize
+Const IMAGE_FILE_DEBUG_STRIPPED=0x0200
+Const IMAGE_FILE_32BIT_MACHINE=0x0100
+Const IMAGE_FILE_LOCAL_SYMS_STRIPPED=0x0008
+Const IMAGE_FILE_LINE_NUMS_STRIPPED=0x0004
+Const IMAGE_FILE_EXECUTABLE_IMAGE=0x0002
+#exe specific
+Const IMAGE_FILE_RELOCS_STRIPPED=0x0001
+#dll specific
+Const IMAGE_FILE_DLL=0x2000
+
+Const coffChrsGeneral=IMAGE_FILE_DEBUG_STRIPPED|IMAGE_FILE_32BIT_MACHINE|IMAGE_FILE_LOCAL_SYMS_STRIPPED|IMAGE_FILE_LINE_NUMS_STRIPPED|IMAGE_FILE_EXECUTABLE_IMAGE
+Const coffexeCharacteristics=coffChrsGeneral|IMAGE_FILE_RELOCS_STRIPPED
+Data coffexeCharacteristics=coffexeCharacteristics
+
+Data Characteristics#1
+Set Characteristics coffexeCharacteristics
+Data pchrctrs^Characteristics
+Call memtomem(pfileheader,pchrctrs,wordsize)
+
+#IMAGE_OPTIONAL_HEADER
+Data popthd^Magic
+Const IMAGE_NT_OPTIONAL_HDR32_MAGIC=0x10b
+Data nt_opt_hd_magic=IMAGE_NT_OPTIONAL_HDR32_MAGIC
+Data ohm^nt_opt_hd_magic
+Call memtomem(popthd,ohm,wordsize)
+
+
+Data ptrtodllcharacteristics^DllCharacteristics
+Call memtomem(ptrtodllcharacteristics,ptrnull,wordsize)
+
+Data patdirs^directoryentries
+Data imgdirsSize=dwsz*imgdirsInts
+Call memset(patdirs,null,imgdirsSize)
--- /dev/null
+++ ocompiler-1/src/files/actions/main.s
@@ -0,0 +1,124 @@
+
+
+Str content#1
+Str last#1
+Data contentoffsetinclude=contentoffileoff
+data contentlineinclude=lineoffile_offset
+
+data dot_comma_end#1;set dot_comma_end 0
+
+set twoparse 2
+data logaux#1
+set logaux logfile
+set logfile negative
+While includesReg!=null
+	Data cursorforincludes#1
+	Set cursorforincludes includes
+	Add cursorforincludes includesReg
+	Data sizeofincludeset=includesetSz
+	Sub cursorforincludes sizeofincludeset
+	Set contentoffile cursorforincludes#
+	If errormsg==noerr
+		Add cursorforincludes dwordsize
+		Set sizeoffile cursorforincludes#
+		Add cursorforincludes dwordsize
+		Set offsetoffile cursorforincludes#
+		Add cursorforincludes dwordsize
+		Set lineoffile cursorforincludes#
+		Add cursorforincludes dwordsize
+		Sub cursorforincludes includes
+		
+		Set nameofstoffile cursorforincludes
+		
+		Set content contentoffile
+		Add content offsetoffile
+		Set last contentoffile
+		Add last sizeoffile
+		
+		While content!=last
+			Include "./main/index.s"
+			If errormsg!=noerr
+				Str nameoffilewitherr#1
+				Set nameoffilewitherr includes
+				Add nameoffilewitherr nameofstoffile
+
+				Data columnoffile#1
+				Set columnoffile content
+				Sub columnoffile commstart
+
+				Add lineoffile one
+				Add columnoffile one
+
+				Chars errformat="%s File %s, Row %i, Column %i"
+				Str perrformat^errformat
+
+				Data printbuffer#1
+
+				SetCall printbuffer printbuf(perrformat,errormsg)
+				If printbuffer==null
+					Call errexit()
+				EndIf
+				if totalnewlines==0
+					Call sprintf(printbuffer,perrformat,errormsg,nameoffilewitherr,lineoffile,columnoffile)
+				else
+					sub lineoffile totalnewlines
+					Call sprintf(printbuffer,"%s File %s, Row %i",errormsg,nameoffilewitherr,lineoffile)
+				endelse
+				Call Message(printbuffer)
+				Call free(printbuffer)
+				Set content last
+			EndIf
+		EndWhile
+	EndIf
+
+	if includedir==true
+		data int#1
+		setcall int chdir(contentoffile)
+		#0 success
+		if int!=null
+			str restoredirerr="Restore folder error."
+			set errormsg restoredirerr
+			Call Message(errormsg)
+		endif
+	endif
+
+	Sub includesReg sizeofincludeset
+
+	data skipfortwoparse#1
+	set skipfortwoparse 0
+	if includesReg==0
+		if twoparse==2
+			If innerfunction==true
+				if errormsg==(noerror)
+					Str endfnexp="ENDFUNCTION command expected to close the opened FUNCTION."
+					set errormsg endfnexp
+					Call Message(errormsg)
+				endif
+			Else
+				#used when having multiple includes
+				data includescursor#1
+				set includescursor includes
+				add includescursor contentoffsetinclude
+				setcall includescursor# offsetoffile_value()
+
+				set includescursor includes
+				add includescursor contentlineinclude
+				set includescursor# 0
+				#
+
+				set logfile logaux
+
+				set skipfortwoparse 1
+				add includesReg sizeofincludeset
+				set twoparse 1
+			EndElse
+		endif
+	endif
+	if skipfortwoparse==0
+		Call free(contentoffile)
+	endif
+EndWhile
+
+If errormsg!=noerr
+	Call errexit()
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index.s
@@ -0,0 +1,202 @@
+
+Data comsize#1
+
+sd newlines
+sd totalnewlines=0
+
+Data pcontent^content
+Data pcomsize^comsize
+
+Str commstart#1
+if dot_comma_end==0
+	Set commstart content
+endif
+
+setcall content mem_spaces(content,last)
+
+#test the line size and set the size of line break
+Chars newline=0xa
+Data linebreaksize#1
+Set linebreaksize bytesize
+
+chars quote="\""
+#set comsize 0
+ss pointer
+set pointer content
+sd loop=2
+sd is_comment=0
+if pointer!=last
+	if pointer#==(asciiNumber)
+		set is_comment 1
+	endif
+endif
+while loop==2
+	if pointer==last
+		set loop 1
+	elseif pointer#==newline
+		set loop 1
+		set dot_comma_end 0
+		if pointer!=content
+			ss testcarriage
+			Chars carriage=0x0d
+			set testcarriage pointer
+			dec testcarriage
+			If testcarriage#==carriage
+				#Dec comsize
+				set pointer testcarriage
+				Inc linebreaksize
+			EndIf
+		endif
+	elseif is_comment==0
+		if pointer#==quote
+			setcall errormsg quotes_forward(#pointer,last,#newlines)
+			if errormsg!=(noerror)
+				set loop 0
+			else
+				add totalnewlines newlines
+			endelse
+		elseif pointer#==(asciiSemicolon)
+			set loop 1
+			set dot_comma_end 1
+		else
+			inc pointer
+		endelse
+	else
+		inc pointer
+	endelse
+endwhile
+if loop==1
+	add lineoffile totalnewlines
+	set comsize pointer
+	sub comsize content
+	#\r\n case begin
+	#sub comsize linebreaksize
+	#inc comsize
+	#\r\n case end
+endif
+
+If comsize!=0
+	Data pointtosearchat%compointersloc
+	SetCall commandset getcommand(pcontent,pcomsize,ptrsubtype,_errormsg,pointtosearchat)
+	If errormsg==noerr
+		if twoparse==2
+			#tested at function gather; FORMAT is here starting with FUNCTIONX to set the mask knowing the format
+			if commandset!=(cCOMMENT)
+				if formatdefined==0;Set formatdefined 1;endif
+				If commandset==(cFORMAT);elseif commandset==(cINCLUDE);elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
+				else;set commandset (cCOMMENT);endelse
+			endif
+		endif
+		If commandset==(cFORMAT)
+			if twoparse==2;Include "./index/format.s"
+			else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+		ElseIf commandset==(cDECLARE)
+			Include "./index/declare.s"
+		ElseIf commandset==(cDECLAREAFTERCALL)
+			Include "./index/aftercall.s"
+		ElseIf commandset==(cONEARG)
+	call entryscope_verify_code()
+			Include "./index/onearg.s"
+		ElseIf commandset==(cPRIMSEC)
+	call entryscope_verify_code()
+			Include "./index/primsec.s"
+		ElseIf commandset==(cLIBRARY)
+			Include "./index/library.s"
+		ElseIf commandset==(cIMPORTLINK)
+			Include "./index/import.s"
+		ElseIf commandset==(cSTARTFUNCTION)
+			Include "./index/function.s"
+		ElseIf commandset==(cENDFUNCTION)
+			Include "./index/endfunction.s"
+		ElseIf commandset==(cCALL)
+	call entryscope_verify_code()
+			Include "./index/call.s"
+		ElseIf commandset==(cCALLEX)
+	call entryscope_verify_code()
+			Include "./index/callex.s"
+		ElseIf commandset==(cCONDITIONS)
+	call entryscope_verify_code()
+			Include "./index/conditions.s"
+		ElseIf commandset==(cINCLUDE)
+			Include "./index/include.s"
+		ElseIf commandset==(cI3)
+	call entryscope_verify_code()
+			Include "./index/i3.s"
+		ElseIf commandset==(cHEX)
+	call entryscope_verify_code()
+			Include "./index/hex.s"
+		ElseIf commandset==(cWARNING)
+			Include "./index/warning.s"
+		Else
+#comments command
+			Call advancecursors(pcontent,pcomsize,comsize)
+		EndElse
+		If errormsg==zero
+			If comsize!=zero
+				Chars _unreccomaftererr="Unrecognized data after command."
+				Str unreccomaftererr^_unreccomaftererr
+				Set errormsg unreccomaftererr
+			#twoparse==2 more
+			#after the first noncomment command, the format command cannot be changed
+			elseif formatdefined==1;Set formatdefined 2
+			#twoparse==1 more
+			ElseIf fnavailable==two
+				#retain the file and line where the main scope was started for functions separated from main code
+				#fnavailable two was set by code detectors
+				Data currentfile#1
+				Set currentfile includes
+				Add currentfile nameofstoffile
+				Data sizeshortstr=shortstrsize
+				Call memtomem(ptrentrystartfile,currentfile,sizeshortstr)
+
+				Set entrylinenumber lineoffile
+				Inc entrylinenumber
+
+				Set fnavailable zero
+			EndElseIf
+		EndIf
+	EndIf
+EndIf
+
+If errormsg==noerr
+	#parse the line termination,then is the include that will retain the next line and advance to the next file
+	Data lineincrease#1
+	Set lineincrease zero
+	If content!=last
+		Add content linebreaksize
+		if dot_comma_end==0
+			Set lineincrease one
+		endif
+	EndIf
+	Add lineoffile lineincrease
+
+	#include next file
+	If includebool==one
+		Data inccursor#1
+		Set inccursor includes
+		Add inccursor includesReg
+
+		Sub inccursor sizeofincludeset
+	
+		Add inccursor contentoffsetinclude
+		Data contentoffset=0
+		Set contentoffset content
+		Sub contentoffset contentoffile
+		Set inccursor# contentoffset
+		Add inccursor dwordsize
+	
+		Set inccursor# lineoffile
+		SetCall errormsg include(miscbag)
+		If errormsg!=noerr
+			Set content commstart
+			Sub lineoffile lineincrease
+		Else
+			Set content contentoffile
+			Set last content
+			Add content offsetoffile
+			Add last sizeoffile
+			Set miscbagReg zero
+			Set includebool zero
+		EndElse
+	EndIf
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/aftercall.s
@@ -0,0 +1,42 @@
+
+#note that multiple calls on aftercall are tolerated and the next calls will use the last aftercall(can be used in a code strategy with multiple functions)
+
+if comsize==0;set errormsg "AfterCall variable name expected."
+else
+	str ac_store_content#1;data ac_store_size#1
+	set ac_store_content pcontent#;set ac_store_size comsize
+	data acsym_value#1;data acsym_size#1;data acsym_shndx#1
+	sd g_e_p;setcall g_e_p global_err_p()
+	if subtype==(cAFTERCALL)
+		SetCall errormsg entryvarsfns(pcontent#,pcomsize#)
+		if errormsg==(noerror)
+			sd ac_current_data;setcall ac_current_data get_img_vdata_dataReg()
+			SetCall errormsg addaref(ac_current_data,pcontent,pcomsize,comsize,(charsnumber),(dummy_mask))
+			if errormsg==(noerror)
+				SetCall errormsg addtosec(#null,1,ptrdatasec)
+				if errormsg==(noerror)
+					If object==(FALSE)
+						set g_e_p# ac_current_data
+					else
+						set acsym_value ac_current_data;set acsym_size 0;set acsym_shndx (dataind)
+					endelse
+				endif
+			endif
+		endif
+	else
+	#(cIMPORTAFTERCALL)
+		If object==(FALSE);set errormsg "ImportAfterCall is used at objects."
+		else
+			set acsym_value 0;set acsym_size (sym_with_size);set acsym_shndx (NULL)
+			call advancecursors(pcontent,pcomsize,comsize)
+		endelse
+	endelse
+	if errormsg==(noerror)
+		set g_e_b_p# (TRUE)
+		if object==(TRUE)
+			set g_e_p# tableReg;div g_e_p# elf32_dyn_d_val_syment
+			#adding at current names reg the content lenghting comsize
+			SetCall errormsg elfaddstrszsym(ac_store_content,ac_store_size,acsym_value,acsym_size,(STT_NOTYPE),(STB_GLOBAL),acsym_shndx,ptrtable)
+		endif
+	endif
+endelse
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/call.s
@@ -0,0 +1,4 @@
+
+
+Data callfn=callfunction
+SetCall errormsg parsefunction(pcontent,pcomsize,callfn)
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/callex.s
@@ -0,0 +1,87 @@
+
+
+sd call_sz
+setcall errormsg arg_size(pcontent#,pcomsize#,#call_sz)
+if errormsg==(noerror)
+	sd top_data
+	sd bool_indirect
+	setcall errormsg prepare_function_call(pcontent,pcomsize,call_sz,#top_data,#bool_indirect)
+	if errormsg==(noerror)
+		call spaces(pcontent,pcomsize)
+		setcall errormsg twoargs(pcontent,pcomsize,(cCALLEX),(NULL))
+		if errormsg==(noerror)
+			#
+			sd callex64;setcall callex64 is_for_64_is_impX_or_fnX_get()
+			if callex64==(TRUE)
+				#Stack aligned on 16 bytes.
+				const callex64_start=!
+				#bt rsp,3 (bit offset 3)
+				chars callex64_code={REX_Operand_64,0x0F,0xBA,bt_reg_imm8|espregnumber,3}
+				#jc @ (jump when rsp=....8)
+				chars *=0x72;chars *=6+2+4+2+2
+				#6cmp ecx,5
+				chars *={0x81,0xf9};data *=5
+				#2jb $
+				chars *=0x72;chars *=4+2+2+6+2+4+2+4
+				#4bt ecx,0
+				chars *={0x0F,0xBA,bt_reg_imm8|ecxregnumber,0}
+				#2jc %
+				chars *=0x72;chars *=2+6+2+4+2
+				#2jmp $
+				chars *=0xEB;chars *=6+2+4+2+4
+				#6@ cmp ecx,5
+				chars *={0x81,0xf9};data *=5
+				#2jb %
+				chars *=0x72;chars *=4+2
+				#4bt ecx,0
+				chars *={0x0F,0xBA,bt_reg_imm8|ecxregnumber,0}
+				#2jc $
+				chars *=0x72;chars *=4
+				#4% sub rsp,8
+				chars *={REX_Operand_64,0x83,0xEC};chars *=8
+				#$
+				SetCall errormsg addtosec(#callex64_code,(!-callex64_start),ptrcodesec)
+			endif
+			#
+			if errormsg==(noerror)
+				const callex_start=!
+				# ## cmp ecx,0
+				chars callex_c1={0x81,0xf9};data *=0
+				#je ###
+				chars *={0x74};chars callex_je#1
+					#dec ecx
+					chars *=0xFF;chars *=1*toregopcode|ecxregnumber|0xc0
+				const callex_size1=!-callex_start
+					# mov edx,[eax+ecx*4]
+					chars callex_c2=0x8b;chars *=edxregnumber*toregopcode|4;chars callex_sib#1
+					#push e(r)dx
+					chars *=0x52
+					#jmp ##
+					chars *=0xEB;chars callex_jmp#1
+				# ###
+				const callex_size2=!-callex_start-callex_size1
+				#set jumps and mov.sib: index ecx and base eax
+				set callex_sib 8
+				#set jumps,index*4(2) or *8(3)
+				sd callex_bool;setcall callex_bool is_for_64()
+				set callex_je 0x08;set callex_jmp 0xf0
+				if callex_bool==(FALSE);or callex_sib (2*tomod)
+				else;#for 64
+					or callex_sib (3*tomod)
+					inc callex_je;dec callex_jmp
+				endelse
+				#
+				SetCall errormsg addtosec(#callex_c1,(callex_size1),ptrcodesec)
+				if errormsg==(noerror)
+					if callex_bool==(TRUE);call rex_w(#errormsg);endif
+					if errormsg==(noerror)
+						SetCall errormsg addtosec(#callex_c2,(callex_size2),ptrcodesec)
+						if errormsg==(noerror)
+							setcall errormsg write_function_call(top_data,bool_indirect,(TRUE))
+						endif
+					endif
+				endif
+			endif
+		endif
+	endif
+endif
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/conditions.s
@@ -0,0 +1,33 @@
+
+
+Data ifinscribe=ifinscribe
+Data ptrifinscribe^ifinscribe
+
+Data nocond=nocondnumber
+
+If subtype==(cIF)
+	SetCall errormsg addtosec(ptrifinscribe,dwordsize,ptrconditionsloops)
+	If errormsg==noerr
+		SetCall errormsg condbegin(pcontent,pcomsize,(ifnumber))
+	EndIf
+ElseIf subtype==(cELSE)
+	SetCall errormsg closeifopenelse()
+ElseIf subtype==(cWHILE)
+	SetCall errormsg coderegtocondloop()
+	If errormsg==noerr
+		SetCall errormsg condbegin(pcontent,pcomsize,(whilenumber))
+	EndIf
+ElseIf subtype==(cELSEIF)
+	SetCall errormsg closeifopenelse()
+	If errormsg==noerr
+		SetCall errormsg condbegin(pcontent,pcomsize,(ifnumber))
+	EndIf
+ElseIf subtype==(cENDIF)
+	SetCall errormsg conditionscondend((ifnumber),nocond)
+ElseIf subtype==(cENDELSE)
+	SetCall errormsg conditionscondend((elsenumber),nocond)
+ElseIf subtype==(cENDWHILE)
+	SetCall errormsg condend((whilenumber))
+Else
+	SetCall errormsg conditionscondend((ifnumber),(elsenumber))
+EndElse
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/declare.s
@@ -0,0 +1,4 @@
+
+sd declare_typenumber
+setcall declare_typenumber commandSubtypeDeclare_to_typenumber(subtype)
+SetCall errormsg dataassign(pcontent,pcomsize,declare_typenumber)
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/endfunction.s
@@ -0,0 +1,37 @@
+
+Data numberofvariables=numberofvars
+
+If innerfunction==false
+	Chars unexef="Unexpected ENDFUNCTION command."
+	Str unexeferr^unexef
+	Set errormsg unexeferr
+Else
+	if twoparse==1
+		SetCall errormsg checkcondloopclose()
+		If errormsg==noerr
+			data ptrreturn#1
+			data sizereturn#1
+			data ptrptrreturn^ptrreturn
+			setcall sizereturn getreturn(ptrptrreturn)
+	
+			SetCall errormsg addtoCode_set_programentrypoint(ptrreturn,sizereturn)
+			If errormsg==noerr
+				Call warnings(false,includes,nameofstoffile)
+			
+				Set i zero
+				While i!=numberofvariables
+					Data containertoclear#1
+					SetCall containertoclear getstructcont(i)
+					Data indexptr#1
+					Data ptrindexptr^indexptr
+					Call getptrcontReg(containertoclear,ptrindexptr)
+					Set indexptr# zero
+					Inc i
+				EndWhile
+			EndIf
+		EndIf
+	endif
+	If errormsg==noerr
+		Set innerfunction false
+	endif
+EndElse
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/format.s
@@ -0,0 +1,69 @@
+
+
+Data formatresponse#1
+
+#exe format
+Chars exeformat="EXE"
+Str ptrexeformat^exeformat
+SetCall formatresponse stratmemspc(pcontent,pcomsize,ptrexeformat,false)
+
+#elf format
+If formatresponse==false
+	Chars elfformat="ELF"
+	Str ptrelfformat^elfformat
+	SetCall formatresponse stratmemspc(pcontent,pcomsize,ptrelfformat,false)
+	If formatresponse==true
+		Set fileformat elf_unix
+		Chars elfobjformat="OBJ"
+		Str ptrelfobjformat^elfobjformat
+		Data elfobjformresp#1
+		
+		sd p_is_for_64_resp;setcall p_is_for_64_resp p_is_for_64()
+		
+		SetCall elfobjformresp stringsatmemspc(pcontent,pcomsize,ptrelfobjformat,false,"64MICROSOFT",p_is_for_64_resp)
+		If elfobjformresp==true
+			sd neg_64;setcall neg_64 p_neg_is_for_64()
+			if neg_64#==(TRUE)
+				if p_is_for_64_resp#==(TRUE)
+					set p_is_for_64_resp# (FALSE)
+				endif
+			endif
+			Set object true
+			SetCall errormsg elfaddstrsym(ptrnull,null,null,null,null,null,ptrtable)
+			If errormsg==noerr
+				Chars elfdata=".data"
+				Str ptrelfdata^elfdata
+				Data dataind=dataind
+				Set datastrtab namesReg
+				SetCall errormsg elfaddstrsym(ptrelfdata,null,null,STT_SECTION,STB_LOCAL,dataind,ptrtable)
+				If errormsg==noerr
+					Chars elftext=".text"
+					Str ptrelftext^elftext
+					Data codeind=codeind
+					Set codestrtab namesReg
+					SetCall errormsg elfaddstrsym(ptrelftext,null,null,STT_SECTION,STB_LOCAL,codeind,ptrtable)
+Const oneGreaterThanLastSTB_LOCAL=3
+				EndIf
+			EndIf
+			Set imagebaseoffset null
+			Set startofdata null
+		Else
+			Data elf_imagebase=elf_imagebase
+			Set imagebaseoffset elf_imagebase
+
+			Set startofdata elf_startofdata
+		EndElse
+	EndIf
+EndIf
+
+If errormsg==noerr
+	If formatresponse==false
+		Chars unrecform="Unrecognized file format."
+		Str ptrunrecform^unrecform
+		Set errormsg ptrunrecform
+	ElseIf formatdefined==2
+		Chars nomoreformats="The FORMAT command can be defined at the start and only once."
+		Str ptrnomoreformats^nomoreformats
+		Set errormsg ptrnomoreformats
+	EndElseIf
+EndIf
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/function.s
@@ -0,0 +1,33 @@
+
+If innerfunction==true
+	Chars finferr="There is already another function started."
+	Str ptrfinf^finferr
+	Set errormsg ptrfinf
+ElseIf programentrypoint!=codesecReg
+	Chars funcafterentry="Unavailable FUNCTION/ENTRY[...] statement; The start address was at File: %s; Line: %u."
+	Str fnafteren^funcafterentry
+
+	SetCall allocerrormsg printbuf(fnafteren,ptrentrystartfile)
+	If allocerrormsg==null
+		Call errexit()
+	EndIf
+	Call sprintf(allocerrormsg,fnafteren,ptrentrystartfile,entrylinenumber)
+	Set errormsg allocerrormsg
+Else
+	If subtype==(cENTRYLINUX)
+		set subtype (cENTRY)
+		set el_b_p# (TRUE)
+	endif
+	If subtype==(cENTRY)
+		Data referencebit=referencebit
+		Set objfnmask referencebit
+		if twoparse==1
+			set fnavailable two
+		endif
+	Else
+		Set objfnmask null
+		Set innerfunction true
+	EndElse
+	Data declarefn=declarefunction
+	SetCall errormsg parsefunction(pcontent,pcomsize,declarefn,subtype)
+EndElse
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/hex.s
@@ -0,0 +1,3 @@
+
+
+setcall errormsg enumcommas(pcontent,pcomsize,pcomsize#,(fndecandgroup),(charsnumber),(FALSE),(hexenum))
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/i3.s
@@ -0,0 +1,6 @@
+
+If comsize==zero
+	Chars interrupt={0xCC}
+	Str ptrinterrupt^interrupt
+	SetCall errormsg addtosec(ptrinterrupt,bytesize,ptrcodesec)
+endif
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -0,0 +1,79 @@
+
+
+sd import_ref_mask=idatabitfunction
+if subtype==(cIMPORTX)
+	sd importx_bool;setcall importx_bool is_for_64()
+	if importx_bool==(TRUE);or import_ref_mask (x86_64bit);endif
+endif
+
+Data impquotsz=0
+Data impescapes=0
+Data ptrimpquotsz^impquotsz
+Data ptrimpescapes^impescapes
+
+If implibsstarted==false
+	If object==false
+		Chars noliberr="Unexpected IMPORT statement; there is no LIBRARY opened."
+		Str ptrnoliberr^noliberr
+		Set errormsg ptrnoliberr
+	EndIf
+EndIf
+If errormsg==noerr
+	Data functionoffset#1
+	
+	If fileformat==pe_exec
+		Set functionoffset addressesReg
+
+		Str ptrnamescurrentoffset^namesReg
+		SetCall errormsg addtosec(ptrnamescurrentoffset,dwordsize,ptraddresses)
+		If errormsg==noerr
+			SetCall errormsg addtosec(ptrnull,wordsize,ptrnames)
+		EndIf
+	Else
+		#get the last index for offset resolvations
+		If object==false
+			Set functionoffset addressesReg
+		Else
+			Set functionoffset tableReg
+		EndElse
+		#get the function index
+		Div functionoffset elf32_dyn_d_val_syment
+		If object==false
+			#get the dword offset to call at, index*dword
+			Mult functionoffset dwordsize
+			SetCall errormsg elfaddsym(namesReg,null,null,STT_FUNC,STB_GLOBAL,null,ptraddresses)
+		EndIf
+	EndElse
+	If errormsg==noerr
+		SetCall errormsg quotinmem(pcontent,pcomsize,ptrimpquotsz,ptrimpescapes)
+		If errormsg==noerr
+			If object==true
+				#the sym entry
+				SetCall errormsg elfaddsym(namesReg,zero,(sym_with_size),STT_NOTYPE,STB_GLOBAL,null,ptrtable)
+			EndIf
+			SetCall errormsg addtosecstresc(pcontent,pcomsize,impquotsz,impescapes,ptrnames,true)
+			If errormsg==noerr
+				Call stepcursors(pcontent,pcomsize)
+				Call spaces(pcontent,pcomsize)
+				If comsize==zero
+					Chars missimportref="Import name for compiler must be specified after the name for output."
+					Str ptrimpref^missimportref
+					Set errormsg ptrimpref
+				Else
+					SetCall errormsg entryvarsfns(content,comsize)
+					If errormsg==noerr
+						if logbool==(TRUE)
+							if log_import_functions==(TRUE)
+								ss imp_f="Import Function:";sd imp_f_sz;setcall imp_f_sz strlen(imp_f)
+								call writefile(logfile,imp_f,imp_f_sz)
+								call addtolog_ex(content,comsize)
+							endif
+						endif
+						Data functionsnr=functionsnumber
+						SetCall errormsg addaref(functionoffset,pcontent,pcomsize,comsize,functionsnr,import_ref_mask)
+					EndIf
+				EndElse
+			EndIf
+		EndIf
+	EndIf
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/include.s
@@ -0,0 +1,16 @@
+
+
+Data quotsz=0
+Data escapes=0
+Data pquotsz^quotsz
+Data pescapes^escapes
+
+SetCall errormsg quotinmem(pcontent,pcomsize,pquotsz,pescapes)
+if errormsg==noerr
+	SetCall errormsg addtosecstresc(pcontent,pcomsize,quotsz,escapes,ptrmiscbag,zero)
+	If errormsg==noerr
+		Call stepcursors(pcontent,pcomsize)
+		Set includebool one
+	EndIf
+EndIf
+
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/library.s
@@ -0,0 +1,40 @@
+
+Data libquotsz#1
+Data libescapes#1
+Data ptrlibquotsz^libquotsz
+Data ptrlibescapes^libescapes
+
+If fileformat==pe_exec
+	If implibsstarted==true
+		SetCall errormsg closelib()
+	EndIf
+	If errormsg==noerr
+		SetCall errormsg openlib()
+	EndIf
+Else
+	If object==false
+		#Name of needed library offset
+		Data DT_NEEDED=1
+		Data d_un#1
+		Data ptr_d_tag^DT_NEEDED
+		Set d_un namesReg
+		SetCall errormsg addtosec(ptr_d_tag,sizeofElf32_Dyn,ptrtable)
+	Else
+		Chars libatobj="LIBRARY statement is not used at object format."
+		Str ptrlibatobj^libatobj
+		Set errormsg ptrlibatobj
+	EndElse
+EndElse
+
+If errormsg==noerr
+	SetCall errormsg quotinmem(pcontent,pcomsize,ptrlibquotsz,ptrlibescapes)
+	If errormsg==noerr
+		SetCall errormsg addtosecstresc(pcontent,pcomsize,libquotsz,libescapes,ptrnames,true)
+		If errormsg==noerr
+			Call stepcursors(pcontent,pcomsize)
+			Set implibsstarted true
+		EndIf
+	EndIf
+EndIf
+
+
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/onearg.s
@@ -0,0 +1,4 @@
+
+
+Data forward=FORWARD
+SetCall errormsg argument(pcontent,pcomsize,subtype,forward)
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/primsec.s
@@ -0,0 +1,3 @@
+
+
+SetCall errormsg twoargs(pcontent,pcomsize,subtype,null)
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/main/index/warning.s
@@ -0,0 +1,14 @@
+
+Data warningsboolptr%ptrwarningsbool
+sd warning_bool
+setcall warning_bool stratmem(pcontent,pcomsize,"ON")
+if warning_bool==(TRUE)
+	set warningsboolptr# (TRUE)
+else
+	setcall warning_bool stratmem(pcontent,pcomsize,"OFF")
+	if warning_bool==(TRUE)
+		set warningsboolptr# (FALSE)
+	else
+		set errormsg "Expecting 'on' or 'off' command"
+	endelse
+endelse
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/pathout.s
@@ -0,0 +1,60 @@
+
+
+
+Str pointofpathout#1
+Data pathinsize#1
+Str minpath#1
+Str cursorpath#1
+Data unit=1
+
+Set minpath safecurrentdirloc
+
+Set pointofpathout safecurrentdirloc
+SetCall pathinsize strlen(safecurrentdirloc)
+Add pointofpathout pathinsize
+
+Set cursorpath pointofpathout
+Sub minpath unit
+Sub cursorpath unit
+
+While minpath<cursorpath
+	Chars teststr=""
+	Set teststr cursorpath#
+	If teststr==dot
+		Set pointofpathout cursorpath
+		Set cursorpath minpath
+	EndIf
+	If minpath<cursorpath
+		Sub cursorpath unit
+	EndIf
+EndWhile
+
+Data extension#1
+Set extension null
+
+If fileformat==pe_exec
+	Chars exe=".exe"
+	Str pexe^exe
+	Set extension pexe
+Else
+	If object==true
+		Chars obj=".o"
+		Str pobj^obj
+		Set extension pobj
+	EndIf
+EndElse
+
+If extension!=null
+	Data sz#1
+	SetCall sz strlen(extension)
+
+	setcall errormsg maxpathverif(path,extension)
+	if errormsg!=noerr
+		Call msgerrexit(errormsg)
+	endif
+
+	Call memtomem(pointofpathout,extension,sz)
+	Add pointofpathout sz
+EndIf
+
+Set pointofpathout# null
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/resolve.s
@@ -0,0 +1,44 @@
+
+
+#the local calls (finalized)
+#data local calls (prepared)
+call localResolve(unresLocal,unresLocalReg)
+
+
+
+
+
+
+
+
+#resolve import at code, import at data, local at data
+data unresstruct#1
+Data unresoff#1
+data unresadd#1
+
+data unresstructure#1
+data ptrunresstructure^unresstructure
+
+Data unresptr#1
+Data unresptrlastpoint#1
+Set unresptrlastpoint unresolvedcallsReg
+Set unresptr unresolvedcalls
+add unresptrlastpoint unresolvedcalls
+While unresptr!=unresptrlastpoint
+	Set unresstruct unresptr#
+	call getcont(unresstruct,ptrunresstructure)
+
+	add unresptr dwordsize
+	Set unresoff unresptr#
+	add unresstructure unresoff
+	
+	add unresptr dwordsize
+	set unresadd unresptr#
+	set unresadd unresadd#
+
+	add unresstructure# unresadd
+
+	Add unresptr dwordsize
+EndWhile
+
+
--- /dev/null
+++ ocompiler-1/src/files/actions/setdefdir.s
@@ -0,0 +1,82 @@
+
+
+Chars safedirdata="./"
+Str safedir^safedirdata
+
+Str filenameloc#1
+SetCall filenameloc endoffolders(path)
+Chars storeachar#1
+Set storeachar filenameloc#
+Set filenameloc# null
+
+sd chdirresult#1
+setcall chdirresult changedir(path)
+if chdirresult!=chdirok
+	str startchdirerr="Cannot set active folder:"
+	setcall errormsg errorDefOut(startchdirerr,path)
+	Call msgerrexit(errormsg)
+endif
+
+
+Set filenameloc# storeachar
+
+Data movesize#1
+SetCall movesize strlen(filenameloc)
+Inc movesize
+
+setcall errormsg maxpathverif(filenameloc,safedir)
+if errormsg!=noerr
+	Call msgerrexit(errormsg)
+endif
+
+Data safecurrentdirtopath#1
+SetCall safecurrentdirtopath memalloc(flag_max_path)
+If safecurrentdirtopath==null
+	Call errexit()
+EndIf
+Call memtomem(safecurrentdirtopath,safedir,wordsize)
+Data safecurrentdirloc#1
+Set safecurrentdirloc safecurrentdirtopath
+Add safecurrentdirloc wordsize
+Call memtomem(safecurrentdirloc,filenameloc,movesize)
+if logbool==true
+	chars logfileextension=".log"
+	str logextension^logfileextension
+
+	data logfilecannotinit#1
+	set logfilecannotinit false
+
+	setcall errormsg maxpathverif(safecurrentdirtopath,logextension)
+	if errormsg!=noerr
+		set logfilecannotinit true
+	else
+		str appendextension#1
+	
+		set appendextension safecurrentdirloc
+		add appendextension movesize
+		dec appendextension
+
+		data sizelogext#1
+		setcall sizelogext strlen(logextension)
+		inc sizelogext
+		call memtomem(appendextension,logextension,sizelogext)
+		
+		setcall errormsg openfile(ptrlogfile,safecurrentdirtopath,_open_write)
+		if errormsg!=noerr
+			set logfilecannotinit true
+		else
+			Set storeachar filenameloc#
+			Set filenameloc# null
+			call addtolog(path)
+			Set filenameloc# storeachar
+		endelse
+		set appendextension# null
+	endelse
+	if logfilecannotinit==true
+		set logbool false
+		call Message(errormsg)
+	endif
+endif
+
+Call free(path)
+Set path safecurrentdirtopath
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/actions/terminations.s
@@ -0,0 +1,21 @@
+
+
+#verify that all conditions are closed
+SetCall errormsg checkcondloopclose()
+If errormsg!=noerr
+	Call msgerrexit(errormsg)
+EndIf
+
+#verify at executables that LIBRARY are closed
+If fileformat==pe_exec
+	If implibsstarted==true
+		SetCall errormsg closelib()
+		If errormsg!=noerr
+			Call msgerrexit(errormsg)
+		EndIf
+	EndIf
+EndIf
+
+#verify preferences
+Call warnings(true,includes,nameofstoffile)
+
--- /dev/null
+++ ocompiler-1/src/files/actions/write.s
@@ -0,0 +1,169 @@
+
+
+
+Data err#1
+
+SetCall err openfile(ptrfileout,path,_open_write)
+If err!=noerr
+	Chars fouterr="Error with the file out open function."
+	Str fileouterr^fouterr
+	Call msgerrexit(fileouterr)
+EndIf
+
+#headers
+Data writeres#1
+Data writefalse=writeno
+
+SetCall writeres writefile(fileout,fileheaders,sizefileheaders)
+If writeres==writefalse
+	Call errexit()
+EndIf
+If fileformat==elf_unix
+	If object==false
+		SetCall writeres writefile(fileout,elf_progdeffileheaders,elf_progdeffileheaders_size)
+		If writeres==writefalse
+			Call errexit()
+		EndIf
+		Add sizefileheaders elf_progdeffileheaders_size
+	Else
+		SetCall writeres writefile(fileout,miscbag,miscbagReg)
+		If writeres==writefalse
+			Call errexit()
+		EndIf
+		Add sizefileheaders miscbagReg
+		Set miscbagReg zero
+	EndElse
+EndIf
+If implibsstarted==true
+	SetCall writeres writefile(fileout,importfileheaders,sizeimportfileheaders)
+	If writeres==writefalse
+		Call errexit()
+	EndIf
+	Add sizefileheaders sizeimportfileheaders
+EndIf
+
+SetCall writeres padsec(fileout,sizefileheaders,startofdata)
+If writeres==writefalse
+	Call errexit()
+EndIf
+
+Data writesecalignment#1
+Set writesecalignment page_sectionalignment
+If fileformat==elf_unix
+	Set writesecalignment one
+EndIf
+
+#data section
+SetCall writeres paddedwrite(fileout,datasec,datasecReg,writesecalignment)
+If writeres==writefalse
+	Call errexit()
+EndIf
+
+#code section
+SetCall writeres paddedwrite(fileout,codesec,codesecReg,writesecalignment)
+If writeres==writefalse
+	Call errexit()
+EndIf
+
+If object==true
+	#symtab
+	SetCall writeres writefile(fileout,table,tableReg)
+	If writeres==writefalse
+		Call errexit()
+	EndIf
+
+	#relocs
+	SetCall writeres writefile(fileout,addresses,addressesReg)
+	If writeres==writefalse
+		Call errexit()
+	EndIf
+	SetCall writeres writefile(fileout,extra,extraReg)
+	If writeres==writefalse
+		Call errexit()
+	EndIf
+
+	#strtab
+	SetCall writeres writefile(fileout,names,namesReg)
+	If writeres==writefalse
+		Call errexit()
+	EndIf
+Else
+	#idata section
+	If implibsstarted==true
+		If fileformat==pe_exec
+			#table
+			SetCall writeres paddedwrite(fileout,table,tableReg,tableMax)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+			#addresses
+			SetCall writeres paddedwrite(fileout,addresses,addressesReg,addressesMax)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+			#names
+			SetCall writeres paddedwrite(fileout,names,namesReg,namesMax)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+		Else
+			#interpreter
+			SetCall writeres writefile(fileout,ptrinterpreter,interpretersize)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+
+			#dynamic
+			SetCall writeres writefile(fileout,table,tableReg)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+			Data ptrelf_dyn%elf_dynfix_start
+			SetCall writeres writefile(fileout,ptrelf_dyn,elf_dynfix_size)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+
+			#lib
+			##hashfix
+			Data ptrelf_hash%elf_hash_start
+			SetCall writeres writefile(fileout,ptrelf_hash,elf_hash_minsize)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+			##hashvar
+			Data elf_loop_write#1
+			Set elf_loop_write miscbag
+			SetCall writeres writefile(fileout,elf_loop_write,hash_var_size)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+			Add elf_loop_write hash_var_size
+
+			##symtab
+			SetCall writeres writefile(fileout,addresses,addressesReg)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+
+			##strtab
+			SetCall writeres writefile(fileout,names,namesReg)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+
+			##rel
+			SetCall writeres writefile(fileout,elf_loop_write,rel_var_size)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+			Add elf_loop_write rel_var_size
+
+			##calls
+			SetCall writeres writefile(fileout,elf_loop_write,elf_rel_entries_size)
+			If writeres==writefalse
+				Call errexit()
+			EndIf
+		EndElse
+	EndIf
+EndElse
--- /dev/null
+++ ocompiler-1/src/files/functions.s
@@ -0,0 +1,43 @@
+
+
+Include "./functions/commons/comfn.s"
+Include "./functions/commons/base.s"
+Include "./functions/commons/vars.s"
+Include "./functions/commons/strcommons.s"
+Include "./functions/commons/valinmem.s"
+Include "./functions/commons/getcommand.s"
+
+Include "./functions/add/addtomem.s"
+Include "./functions/add/add.s"
+Include "./functions/add/addstresc.s"
+
+Include "./functions/values/numbersandconstants.s"
+Include "./functions/values/operations.s"
+
+Include "./functions/elf/elf.s"
+
+Include "./functions/stack/stack_inits.s"
+
+Include "./functions/argument/comwrite.s"
+Include "./functions/argument/imm.s"
+Include "./functions/argument/arg.s"
+Include "./functions/argument/argument.s"
+
+Include "./functions/stack/stack.s"
+
+Include "./functions/global/funcs.s"
+
+Include "./functions/actions/dataparse.s"
+Include "./functions/actions/fndecargs.s"
+Include "./functions/actions/enumcomma.s"
+Include "./functions/actions/fn.s"
+Include "./functions/actions/argstwo.s"
+
+Include "./functions/commands/cond.s"
+Include "./functions/commands/lib.s"
+
+Include "./functions/preffuncs.s"
+Include "./functions/incld.s"
+Include "./functions/dataassign.s"
+Include "./functions/enumbags.s"
+Include "./functions/64bit.s"
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/64bit.s
@@ -0,0 +1,153 @@
+
+
+#p_bits
+function p_is_for_64()
+	data bool#1
+	return #bool
+endfunction
+#bool
+function is_for_64()
+	sd p;setcall p p_is_for_64();return p#
+endfunction
+#p_bits
+function p_neg_is_for_64()
+	data bool#1
+	return #bool
+endfunction
+
+#get
+function is_for_64_is_impX_or_fnX_p_get();data b#1;return #b;endfunction
+#get
+function is_for_64_is_impX_or_fnX_get();sd p_b;setcall p_b is_for_64_is_impX_or_fnX_p_get();return p_b#;endfunction
+function is_for_64_is_impX_or_fnX_set(sd ptrdata)
+	sd p_b
+	setcall p_b is_for_64_is_impX_or_fnX_p_get()
+	#importX and functionX already has a test with is_for_64
+	add ptrdata (maskoffset)
+	sd val;set val ptrdata#;and val (x86_64bit)
+	if val!=(x86_64bit);set p_b# (FALSE);return (void);endif
+	set p_b# (TRUE)
+endfunction
+
+#get
+function nr_of_args_64need_p_get();data n#1;return #n;endfunction
+#er
+function nr_of_args_64need_set()
+	sd p_b;setcall p_b is_for_64_is_impX_or_fnX_p_get()
+	if p_b#==(TRUE)
+		sd p;setcall p nr_of_args_64need_p_get();set p# 0
+		#Stack aligned on 16 bytes. Later set, depending on the number of arguments, jumpCarry or jumpNotCarry
+		sd err
+		data code%ptrcodesec
+		#bt rsp,3 (offset 3)
+		chars hex_x={REX_Operand_64,0x0F,0xBA,bt_reg_imm8|espregnumber,3}
+		SetCall err addtosec(#hex_x,5,code);If err!=(noerror);Return err;EndIf
+		#
+		sd stack_align_p;setcall stack_align_p stack_align_off_p_get()
+		call getcontReg(code,stack_align_p)
+		#j(c|nc);sub rsp,8
+		chars jump#1;chars *=4;chars *={REX_Operand_64,0x83,0xEC,8}
+		SetCall err addtosec(#jump,6,code);If err!=(noerror);Return err;EndIf
+	endif
+	Return (noerror)
+endfunction
+function nr_of_args_64need_count()
+	sd p_b;setcall p_b is_for_64_is_impX_or_fnX_p_get()
+	if p_b#==(TRUE)
+		sd p;setcall p nr_of_args_64need_p_get();inc p#
+	endif
+endfunction
+#nr_of_args
+function nr_of_args_64need()
+	sd n;setcall n nr_of_args_64need_p_get();return n#
+endfunction
+#p
+function stack_align_off_p_get()
+	data o#1;return #o
+endfunction
+
+
+
+##REX_W
+#size of prefix(=1)
+function rex_w(sd p_err)
+	Data code%ptrcodesec
+	chars r=REX_Operand_64;data sz=1
+	SetCall p_err# addtosec(#r,sz,code)
+	return sz
+endfunction
+#er
+function rex_w_if64()
+	sd b;setcall b is_for_64()
+	if b==(FALSE)
+		return (noerror)
+	endif
+	sd err
+	call rex_w(#err)
+	return err
+endfunction
+
+function stack64_op_set()
+	sd b;setcall b is_for_64()
+	if b==(TRUE);call stack64_op_set_get((TRUE),(TRUE));endif
+endfunction
+#(false)get
+function stack64_op_set_get(sd b,sd val)
+	data x#1
+	if b==(TRUE);set x val
+	else;return x
+	endelse
+endfunction
+#err
+function stack64_op(sd takeindex,sd p_mod)
+	sd b;setcall b stack64_op_set_get((FALSE))
+	if b==(FALSE);return (noerror);endif
+	#reset
+	call stack64_op_set_get((TRUE),(FALSE))
+	#return if outside mod=3
+	if p_mod#==(RegReg);return (noerror);endif
+	#set outside mod=3
+	set p_mod# (RegReg)
+	#mov reg,[reg]
+	chars x=moveatprocthemem;chars y#1
+	setcall y formmodrm((mod_0),takeindex,takeindex)
+	sd err;data code%ptrcodesec
+	setcall err addtosec(#x,2,code)
+	return err
+endfunction
+
+function stack64_add(sd val)
+	sd b;setcall b is_for_64()
+	if b==(TRUE)
+		mult val 2
+	endif
+	return val
+endfunction
+
+#setx
+
+function val64_phase_0()
+	sd p;setcall p val64_p_get();set p# 0
+endfunction
+function val64_phase_1()
+	sd b;setcall b is_for_64()
+	if b==(TRUE)
+		sd p;setcall p val64_p_get();set p# 1
+	endif
+endfunction
+function val64_phase_2()
+	sd p;setcall p val64_p_get()
+	if p#==1;set p# 2;endif
+endfunction
+#er
+function val64_phase_3()
+	sd p;setcall p val64_p_get()
+	if p#==2
+		sd er;call rex_w(#er);if er!=(noerror);return er;endif
+		set p# 0
+	endif
+	return (noerror)
+endfunction
+function val64_p_get()
+	data x#1;return #x
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -0,0 +1,344 @@
+
+
+#err
+Function twoargs(data ptrcontent,data ptrsize,data subtype,data ptrcondition)
+	Data lowprim#1
+	Data ptrlowprim^lowprim
+	Data lowsec#1
+	Data ptrlowsec^lowsec
+	Data dataargprim#1
+	Data ptrdataargprim^dataargprim
+	Data dataargsec#1
+	Data ptrdataargsec^dataargsec
+
+	Data sufixprim#1
+	Data sufixsec#1
+	Data ptrsufixprim^sufixprim
+	Data ptrsufixsec^sufixsec
+
+	Data false=FALSE
+	Data true=TRUE
+
+	Data noreg=noregnumber
+	Data eaxreg=eaxregnumber
+	Data ecxreg=ecxregnumber
+	
+	Data intchar#1
+	Set intchar noreg
+
+	Data sameimportant#1
+	Set sameimportant true
+	
+	Chars opprim#1
+	Chars opsec#1
+	Chars atprocthemem={moveatprocthemem}
+	Chars atmemtheproc={moveatmemtheproc}
+	Set opsec atprocthemem
+	
+	Data divmul#1
+	Set divmul false
+	Data regprep#1
+	Set regprep eaxreg
+	Data regopcode#1
+	Set regopcode eaxreg
+
+	sd imm
+	call unsetimm()
+	Data errnr#1
+	Data noerr=noerror
+	SetCall errnr argfilters(ptrcondition,ptrcontent,ptrsize,ptrdataargprim,ptrlowprim,ptrsufixprim)
+	If errnr!=noerr
+		Return errnr
+	EndIf
+	#need to remind first prefix: p1 p2 need_p2 need_p1
+	sd remind_first_prefix
+	sd p_prefix
+	setcall p_prefix prefix_bool()
+	set remind_first_prefix p_prefix#
+	set p_prefix# 0
+	call storefirst_isimm()
+
+	Data primcalltype#1
+	Chars two=2
+
+	Set primcalltype false
+	If ptrcondition==false
+		#imm second arg
+		call setimm()
+		sd subtype_test;set subtype_test subtype;and subtype_test (x_call_flag)
+		if subtype_test!=0
+			xor subtype (x_call_flag)
+			Set primcalltype true
+			if subtype==(cSETX)
+				if lowprim==(TRUE)
+					return "SetX is not encodable at an 8-bit argument."
+				endif
+				set subtype (cSET);call val64_phase_1()
+			endif
+		elseif subtype==(cSETX);return "SetX is used at SetXCall only.64 bit variables are not available at the moment."
+		endelseif
+		if subtype==(cSET)
+			Set opprim atmemtheproc
+		ElseIf subtype==(cADD)
+			Chars addprim={0x01}
+			Set opprim addprim
+		ElseIf subtype==(cSUB)
+			Chars subprim={0x29}
+			Set opprim subprim
+		ElseIf subtype<(cAND)
+			Set opprim atprocthemem
+			Set regprep ecxreg
+			Set regopcode ecxreg
+			Set divmul true
+		ElseIf subtype<=(cXOR)
+			Set sameimportant false
+			If subtype==(cAND)
+				Chars andprim={0x21}
+				Set opprim andprim
+			ElseIf subtype==(cOR)
+				Chars orprim={0x09}
+				Set opprim orprim
+			Else
+			#(cXOR)
+				Chars xorprim={0x31}
+				Set opprim xorprim
+			EndElse
+		Else
+		#(cCALLEX)
+			Set opprim atprocthemem
+			Set regprep ecxreg
+			Set regopcode ecxreg
+		EndElse
+	Else
+		Data sz#1
+		Data condition#1
+		Set condition ptrcondition#
+		SetCall sz strlen(condition)
+		Add condition sz
+		Call advancecursors(ptrcontent,ptrsize,sz)
+
+		Data one=1
+		Add condition one
+
+		Data conditionmodrm#1
+		Set conditionmodrm condition#
+
+		Chars compare=0x39
+		Set opprim compare
+
+		#imm specific
+		chars compimminitial={0x39}
+		chars compimmop#1
+		set compimmop compimminitial
+	EndElse
+	
+	If primcalltype==false
+		SetCall errnr arg(ptrcontent,ptrsize,ptrdataargsec,ptrlowsec,ptrsufixsec,true)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+	Else
+		Data callfn=callfunction
+		SetCall errnr parsefunction(ptrcontent,ptrsize,callfn)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+	EndElse
+
+	If ptrcondition==false
+		If lowprim==true
+			Dec opsec
+			Dec opprim
+		ElseIf lowsec==true
+			Dec opsec
+			If sameimportant==true
+				Set intchar regprep
+			Else
+				Dec opprim
+			EndElse
+		EndElseIf
+	Else
+		If lowprim==lowsec
+			If lowprim==true
+				Dec opprim
+				Dec opsec
+			EndIf
+		Else
+			Dec opsec
+			Set intchar eaxreg
+			If lowprim==true
+				#case compare low vs high, then: get low on all eax compare with high but op from mem vs proc becomes proc vs mem
+				Add opprim two
+				Data aux#1
+				Set aux dataargprim
+				Set dataargprim dataargsec
+				Set dataargsec aux
+				Set aux sufixprim
+				Set sufixprim sufixsec
+				Set sufixsec aux
+				call switchimm()
+				add compimmop two
+			EndIf
+		EndElse
+	EndElse
+	
+	Data codeptr%ptrcodesec
+
+	If primcalltype==false
+		setcall imm getisimm()
+		if imm==true
+			chars immtake=0xB8
+			set opsec immtake
+			if divmul==(TRUE)
+				add opsec 1
+			elseif subtype==(cCALLEX)
+				add opsec 1
+			endelseif
+		endif
+		SetCall errnr writeop_immfilter(dataargsec,opsec,intchar,sufixsec,regopcode)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+	Else
+		if divmul==(TRUE)
+			#only at multcall and divcall
+			chars transferreturntoecx={0x89,0xc1}
+			str ptrcall^transferreturntoecx
+			data calltransfersize=2
+			setcall errnr addtosec(ptrcall,calltransfersize,codeptr)
+			If errnr!=noerr
+				Return errnr
+			EndIf
+		else
+			call val64_phase_2()
+		endelse
+	EndElse
+	
+	#write first arg, the second already was
+	set p_prefix# remind_first_prefix
+	call restorefirst_isimm()
+	setcall imm getisimm()
+	if imm==true
+	#comparations
+		#first value is imm or was the switch
+		chars immcomparationtake=0xb9
+		set opprim immcomparationtake
+	endif
+	SetCall errnr writeop_immfilter(dataargprim,opprim,noreg,sufixprim,eaxreg)
+	If errnr!=noerr
+		Return errnr
+	EndIf
+	if imm==true
+		#continue to write the imm comparation(first is imm, second doesnt care)ex: 1(constant)==1(constant)->cmp ecx,eax (eax,ecx can be if switch)
+		chars immcompdata#1
+		set immcompdata compimmop
+		chars *immcompdatamodrm=0xc1
+		str immcomp^immcompdata
+		data immcompsz=2
+		SetCall errnr addtosec(immcomp,immcompsz,codeptr)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+	endif
+
+	If divmul==true
+		Data regreg=RegReg
+
+		Chars regopcodemult={5}
+		Chars regopcodediv={7}
+		Chars regopcodeex#1
+
+		If subtype==(cMULT)
+			Set regopcodeex regopcodemult
+		Else
+			Set regopcodeex regopcodediv
+			#33D2 85c0 7902 f7d2
+			#32E4 84c0 7902 f6d4
+			Chars d1_0#1
+			Chars d1_1#1
+			Chars d2_0#1
+			Chars *d2_1={0xc0}
+			Chars *d3={0x79,0x02}
+			Chars d4_0#1
+			Chars d4_1#1
+			
+			Const bitsregreg=RegReg*8*8
+			Const bitsedxregop=edxregnumber*8
+			Const bitsahregop=ahregnumber*8
+			Const bitsnotop=Notregopcode*8
+
+			Const pre1_1_h=bitsregreg|bitsedxregop|edxregnumber
+			Chars predef1_1_high={pre1_1_h}
+			Const pre4_1_h=bitsregreg|bitsnotop|edxregnumber
+			Chars predef4_1_high={pre4_1_h}
+			Const pre1_1_l=bitsregreg|bitsahregop|ahregnumber
+			Chars predef1_1_low={pre1_1_l}
+			Const pre4_1_l=bitsregreg|bitsnotop|ahregnumber
+			Chars predef4_1_low={pre4_1_l}
+
+			Str setdivsign^d1_0
+			Data divsignsize=8
+
+			Chars d1_0ini={0x33}
+			Chars d2_0ini={0x85}
+			Chars d4_0ini={0xf7}
+
+			Set d1_0 d1_0ini
+			Set d2_0 d2_0ini
+			Set d4_0 d4_0ini
+
+			If lowprim==false
+				Set d1_1 predef1_1_high
+				Set d4_1 predef4_1_high
+			Else
+				Dec d1_0
+				Dec	d2_0
+				Dec d4_0
+				Set d1_1 predef1_1_low
+				Set d4_1 predef4_1_low
+			EndElse
+			SetCall errnr addtosec(setdivsign,divsignsize,codeptr)
+			If errnr!=noerr
+				Return errnr
+			EndIf
+		EndElse
+
+		Chars opcodexini={0xF7}
+		Chars opcodeex#1
+		Chars modrmex#1
+		Data sizeex=2
+		Str ptropcodeex^opcodeex
+		Chars storeex#1
+
+		Set opcodeex opcodexini
+		Set storeex atmemtheproc
+
+		If lowprim==true
+			Dec opcodeex
+			Dec storeex
+		EndIf
+
+		SetCall modrmex formmodrm(regreg,regopcodeex,ecxreg)
+		Set regopcodeex modrmex
+
+		SetCall errnr addtosec(ptropcodeex,sizeex,codeptr)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+
+		SetCall errnr writeop(dataargprim,storeex,noreg,sufixprim,eaxreg)
+		Return errnr
+	ElseIf ptrcondition!=false
+		Chars jumpifnotcond={0x0f}
+		Chars cond#1
+		Data *jump=0
+
+		Data jumpcond^jumpifnotcond
+		Data conddatasz=6
+
+		Set cond conditionmodrm
+
+		SetCall errnr addtosec(jumpcond,conddatasz,codeptr)
+	EndElseIf
+	Return errnr
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -0,0 +1,235 @@
+
+
+#err
+Function entryvarsfns(data content,data size)
+	Data notype=notype
+	Data pointer#1
+	SetCall pointer strinvars(content,size,notype)
+	Data noerr=noerror
+	Data zero=0
+	If pointer==zero
+		Data fns%ptrfunctions
+		SetCall pointer vars(content,size,fns)
+		If pointer==zero
+			Return noerr
+		EndIf
+	EndIf
+	
+	Chars varfndup="Variable/Function name is already defined."
+	Str ptrvarfndup^varfndup
+	Return ptrvarfndup
+EndFunction
+
+#relocated offset or offset at objects
+function get_img_vdata_dataReg()
+		Data value#1
+		Data inter#1
+
+		Data ptrimageoff%ptrimagebaseoffset
+		Data ptrdataoff%ptrstartofdata
+		Data ptrdataSec%ptrdatasec
+		Data ptrinter^inter
+
+		Set value ptrimageoff#
+		Set inter ptrdataoff#
+		Add value inter
+	
+		Call getcontReg(ptrdataSec,ptrinter)
+		Add value inter
+		return value
+endfunction
+
+#err
+Function addvarreference(data ptrcontent,data ptrsize,data valsize,data typenumber,data stackoffset)
+	#duplications
+	Data content#1
+	Set content ptrcontent#
+	Data zero=0
+	Data constantsnr=constantsnumber
+	Data value#1
+	Data errnr#1
+	Data noerr=noerror
+	data false=0
+	data mask#1
+	set mask zero
+
+	If typenumber!=constantsnr
+		SetCall errnr entryvarsfns(content,valsize)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+		data stack#1
+		data ptrS^stack
+		call stackfilter(typenumber,ptrS)
+		if stack==false
+			setcall value get_img_vdata_dataReg()
+		else
+			if stackoffset==zero
+				#stack free declared
+				data ebx_relative=ebxregnumber*tostack_relative
+				setcall value getramp_ebxrel()
+				or mask ebx_relative
+			else
+				#stack function argument
+				data ebp_relative=ebpregnumber*tostack_relative
+				set value stackoffset
+				or mask ebp_relative
+			endelse
+			data stackbit=stackbit
+			or mask stackbit
+		endelse
+	Else
+		Data structure#1
+		SetCall structure getstructcont(constantsnr)
+		Data pointer#1
+		SetCall pointer vars(content,valsize,structure)
+		If pointer!=zero
+			Chars constdup="Constant name is already defined."
+			Str pconstdup^constdup
+			Return pconstdup
+		EndIf
+		Set value zero
+	EndElse
+
+	SetCall errnr addaref(value,ptrcontent,ptrsize,valsize,typenumber,mask)
+	Return errnr
+EndFunction
+
+#err
+function addvarreferenceorunref(data ptrcontent,data ptrsize,data valsize,data typenumber,data stackoffset)
+	data err#1
+	data noerr=noerror
+
+	Data zero=0
+	If valsize==zero
+		Chars _namecverr="Name for variable/constant expected."
+		Str namecverr^_namecverr
+		Return namecverr
+	EndIf
+
+	data content#1
+	set content ptrcontent#
+	Chars unrefoption#1
+	Set unrefoption content#
+	Chars unrefsign="*"
+	
+	If unrefoption!=unrefsign
+		SetCall err addvarreference(ptrcontent,ptrsize,valsize,typenumber,stackoffset)
+		If err!=noerr
+			Return err
+		EndIf
+	Else
+		Data constnr=constantsnumber
+		If typenumber==constnr
+			Chars unrefconstant="Unexpected unreference sign ('*') at constant declaration."
+			Str ptrunrefconstant^unrefconstant
+			Return ptrunrefconstant
+		EndIf
+		Call advancecursors(ptrcontent,ptrsize,valsize)
+		Return noerr
+	EndElse
+endfunction
+
+#er
+function getsign(str content,data size,data typenumber,str assigntype,data relocbool,data ptrsz,data stack)
+	data true=TRUE
+	data noerr=noerror
+	Data valsize#1
+	Chars equalsign="="
+	SetCall valsize valinmem_pipes(content,size,equalsign,ptrsz)
+	If valsize!=size
+		Set assigntype# equalsign
+		return noerr
+	endif
+
+	Chars reservesign="#"
+	SetCall valsize valinmem_pipes(content,size,reservesign,ptrsz)
+	If valsize!=size
+		Data constnr=constantsnumber
+		If typenumber==constnr
+			Chars constreserveerr="Unexpected reserve sign ('#') at constant declaration."
+			Str ptrconstreserveerr^constreserveerr
+			Return ptrconstreserveerr
+		EndIf
+		Set assigntype# reservesign
+		return noerr
+	endif
+
+	Data charsnr=charsnumber
+	Chars pointersign="^"
+	SetCall valsize valinmem_pipes(content,size,pointersign,ptrsz)
+	If valsize!=size
+		If typenumber==charsnr
+			Chars ptrchar="Incorrect pointer sign ('^') used at CHARS declaration."
+			Str ptrptrchar^ptrchar
+			Return ptrptrchar
+		EndIf
+		Set assigntype# pointersign
+		If typenumber!=constnr
+			Set relocbool# true
+		EndIf
+		return noerr
+	endif
+
+	Chars relsign="%"
+	SetCall valsize valinmem_pipes(content,size,relsign,ptrsz)
+	If valsize!=size
+		Chars ptrrelchar="Incorrect relocation sign ('%') used at CHARS/CONST declaration."
+		Str ptrptrrelchar^ptrrelchar
+		If typenumber==charsnr
+			Return ptrptrrelchar
+		EndIf
+		If typenumber==constnr
+			Return ptrptrrelchar
+		EndIf
+		Set assigntype# equalsign
+		Set relocbool# true
+		return noerr
+	endif
+
+	if stack==true
+const nosign=0
+		chars nosign=nosign
+		Set assigntype# nosign
+		return noerr
+	endif
+
+	Chars _assignoperatorerr="One from the assign operators expected."
+	Str assignoperatorerr^_assignoperatorerr
+	Return assignoperatorerr
+endfunction
+
+#err
+Function dataparse(data ptrcontent,data ptrsize,data typenumber,str assigntype,data relocbool,data stack)
+	Str content#1
+	Data size#1
+	Data noerr=noerror
+	Data false=FALSE
+	Data err#1
+
+	Set content ptrcontent#
+	Set size ptrsize#
+
+	Set relocbool# false
+
+	Data valsize#1
+	data ptrvalsize^valsize
+	setcall err getsign(content,size,typenumber,assigntype,relocbool,ptrvalsize,stack)
+	If err!=noerr
+		Return err
+	EndIf
+	if stack!=false
+		data totalmemvariables=totalmemvariables
+		add typenumber totalmemvariables
+	endif
+	SetCall err addvarreferenceorunref(ptrcontent,ptrsize,valsize,typenumber,false)
+	If err!=noerr
+		Return err
+	EndIf
+
+	chars nosign=nosign
+	if assigntype#!=nosign
+		Call stepcursors(ptrcontent,ptrsize)
+	endif
+	Return noerr
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -0,0 +1,191 @@
+
+#e
+function writevar(data ptrvalue,data unitsize,data relindex,data stack,data rightstackpointer)
+	data err#1
+	data noerr=noerror
+	Data ptrrelocbool%ptrrelocbool
+	data true=TRUE
+	data false=FALSE
+	data ptrobject%ptrobject
+
+	if ptrobject#==1
+		If ptrrelocbool#==true
+			if stack==false
+				#data
+				Data ptraddresses%ptraddresses
+				Data relocoff=0
+				SetCall err adddirectrel(ptraddresses,relocoff,relindex)
+			else
+				#code
+				data ptrextra%ptrextra
+				data stackoff=rampadd_value_off
+				setcall err adddirectrel(ptrextra,stackoff,relindex)
+			endelse
+			If err!=noerr
+				Return err
+			EndIf
+		EndIf
+	endif
+	if stack==false
+		data ptrdatasec%ptrdatasec
+		SetCall err addtosec(ptrvalue,unitsize,ptrdatasec)
+	else
+		setcall err addtocodeforstack(ptrvalue#,rightstackpointer)
+	endelse
+	return err
+endfunction
+
+const fndecandgroup=1
+#er
+Function enumcommas(data ptrcontent,data ptrsize,data sz,data fndecandgroupOrpush,data typenumber,data stack,sd hex)
+	Data zero=0
+	Data argsize#1
+	Chars comma=","
+	Data err#1
+	Data noerr=noerror
+	Data content#1
+	Data csv#1
+	Data csvloop=1
+
+	Data true=TRUE
+	Data false=FALSE
+	Data sens#1
+	Data forward=FORWARD
+	Data backward=BACKWARD
+
+	Set csv csvloop
+	Set content ptrcontent#
+
+	Data fnnr=functionsnumber
+	If fndecandgroupOrpush==true
+		If typenumber==fnnr
+			Data stackoffset#1
+			Set stackoffset zero
+			Data ptrstackoffset^stackoffset
+		Else
+			Data bSz=bsz
+			Data dwSz=dwsz
+			Data unitsize#1
+			Data charsnr=charsnumber
+			If typenumber==charsnr
+				Set unitsize bSz
+			Else
+				Set unitsize dwSz
+			EndElse
+		EndElse
+		Set sens forward
+	Else
+		Data storecontent#1
+		Add content sz
+		Set ptrcontent# content
+		Set storecontent content
+		Set sens backward
+	EndElse
+	While csv==csvloop
+		If fndecandgroupOrpush==true
+			SetCall argsize valinmemsens(content,sz,comma,sens)
+			#allow (x,    y,   z) spaces
+			sd sizeaux
+			set sizeaux ptrsize#
+			call spaces(ptrcontent,ptrsize)
+			sub sizeaux ptrsize#
+			sd argumentsize
+			set argumentsize argsize
+			sub argumentsize sizeaux
+			#
+			If typenumber==fnnr
+				SetCall err fndecargs(ptrcontent,ptrsize,argumentsize,ptrstackoffset)
+				If err!=noerr
+					Return err
+				EndIf
+			Else
+				Data value#1
+				Data ptrvalue^value
+				SetCall err parseoperations(ptrcontent,ptrsize,argumentsize,ptrvalue)
+				If err!=noerr
+					Return err
+				EndIf
+				if hex==(not_hexenum)
+					data dataind=dataind
+					setcall err writevar(ptrvalue,unitsize,dataind,stack,zero)
+					If err!=noerr
+						Return err
+					EndIf
+				else
+					sd ptrcodesec%ptrcodesec
+					setcall err addtosec(ptrvalue,unitsize,ptrcodesec)
+					If err!=noerr
+						Return err
+					EndIf
+				endelse
+			EndElse
+		Else
+			#push
+			call nr_of_args_64need_count()
+			sd delim
+			set delim comma
+			if sz!=0
+				ss test
+				set test content
+				dec test
+				chars quot="\""
+				if test#==quot
+					set delim quot
+					#look later at escapes, here only at the margins
+					ss c
+					sd s
+					set c content
+					set s sz
+					set argsize s
+					#case "abc,"
+					dec test
+					if test#==comma
+						sub c 2
+						sub s 2
+					endif
+					#
+					sd len
+					sd loop=1
+					while loop==1
+						#here the sens is backward and ," or (" represents the end of the string
+						SetCall len valinmemsens(c,s,comma,sens)
+						mult len -1
+						Call advancecursors(#c,#s,len)
+						if c#==quot
+							set loop 0
+						else
+							#here the string ".." is in a good condition when quotes_forward was called at fn(...)
+							Call advancecursors(#c,#s,-1)
+						endelse
+					endwhile
+					sub argsize s
+				endif
+			endif
+			if delim==comma
+				SetCall argsize valinmemsens(content,sz,comma,sens)
+			endif
+			
+			Data negvalue#1
+			Set negvalue zero
+			Sub negvalue argsize
+			Call advancecursors(ptrcontent,ptrsize,negvalue)
+			Data ptrargsize^argsize
+			SetCall err argument(ptrcontent,ptrargsize,zero,backward)
+			If err!=noerr
+				Return err
+			EndIf
+		EndElse
+		Sub sz argsize
+		If sz!=zero
+			Dec sz
+			Call advancecursors(ptrcontent,ptrsize,sens)
+			Set content ptrcontent#
+		Else
+			Set csv zero
+		EndElse
+	EndWhile
+	If fndecandgroupOrpush==false
+		Set ptrcontent# storecontent
+	EndIf
+	Return noerr
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -0,0 +1,500 @@
+
+#err
+Function unresolvedcallsfn(data struct,data inneroffset,data valuedata,data atend)
+	data structure#1
+	Data offset#1
+	data addatend#1
+
+	Data poff^offset
+	Call getcontReg(struct,poff)
+	add offset inneroffset
+
+	Data err#1
+	Data true=TRUE
+	Data ptrobject%ptrobject
+
+	If ptrobject#==true
+		Chars elf_rel_info_type={R_386_PC32}
+		Data ptrextra%ptrextra
+		SetCall err addrel(offset,elf_rel_info_type,valuedata,ptrextra)
+	Else
+		#add to resolve at end
+		Data unressz=3*dwsz
+		Data uncall%ptrunresolvedcalls
+		data ptrstruct^structure
+
+		set structure struct
+		set addatend atend
+
+		SetCall err addtosec(ptrstruct,unressz,uncall)
+	EndElse
+	Return err
+EndFunction
+
+#subtype is only when declarefn(not callfn)
+#err
+Function parsefunction(data ptrcontent,data ptrsize,data declare,sd subtype)
+	Data true=TRUE
+	Data false=FALSE
+
+	Chars fnbegin="("
+	Data zero=0
+	Data fns%ptrfunctions
+	Data code%ptrcodesec
+
+	Data err#1
+	Data noerr=noerror
+
+	Str content#1
+	Data size#1
+	Data sz#1
+
+	Set content ptrcontent#
+	Set size ptrsize#
+	
+	SetCall sz valinmem(content,size,fnbegin)
+	If sz==zero
+		Chars funnameexp="Function name expected."
+		Str fnerr^funnameexp
+		Return fnerr
+	EndIf
+	If sz==size
+		Chars startfnexp="Open parenthesis sign ('(') expected."
+		Str starterr^startfnexp
+		Return starterr
+	EndIf
+
+	sd b
+	If declare==true
+		Data fnnr=functionsnumber
+		Data value#1
+		Data ptrvalue^value
+
+		data p_two_parse%cptr_twoparse
+		if p_two_parse#==2
+			Data globalinnerfunction%globalinnerfunction
+			#set for searching in the main scope for unique value
+			Data aux#1
+			Set aux globalinnerfunction#
+			Set globalinnerfunction# false
+			SetCall err entryvarsfns(content,sz)
+			If err!=noerr
+				Return err
+			EndIf
+			Set globalinnerfunction# aux
+
+			#is objfnmask related to the introduction of entry tag at objects, is interacting there
+			Data mask#1
+			Data ptrobjfnmask%ptrobjfnmask
+			Set mask ptrobjfnmask#
+			if subtype==(cFUNCTIONX)
+				setcall b is_for_64()
+				if b==(TRUE);or mask (x86_64bit);endif
+			endif
+			SetCall err addaref(value,ptrcontent,ptrsize,sz,fnnr,mask)
+			If err!=noerr
+				Return err
+			EndIf
+			#skip the rest of the command at recon
+			Call advancecursors(ptrcontent,ptrsize,ptrsize#)
+			return noerr
+		else
+			sd pointer
+			setcall pointer vars_ignoreref(content,sz,fns)
+			Call advancecursors(ptrcontent,ptrsize,sz)
+			
+			#add the function name to the code section if the option is set
+			sd fn_text
+			setcall fn_text fn_text_info()
+			if fn_text#==1
+				sd fn_name
+				set fn_name pointer
+				add fn_name (nameoffset)
+				sd len
+				setcall len strlen(fn_name)
+				inc len
+				SetCall err addtoCode_set_programentrypoint(fn_name,len)
+				If err!=(noerror)
+					Return err
+				EndIf
+			endif
+			
+			Call getcontReg(code,ptrvalue)
+			set pointer# value
+
+			#resolve the previous calls at this value
+			Data ptrobject%ptrobject
+			If ptrobject#==true
+				Data STT_FUNC=STT_FUNC
+				Data STB_GLOBAL=STB_GLOBAL
+				Data codeind=codeind
+				Data ptrtable%ptrtable
+				SetCall err elfaddstrszsym(content,sz,value,zero,STT_FUNC,STB_GLOBAL,codeind,ptrtable)
+				If err!=noerr
+					Return err
+				EndIf
+			EndIf
+			
+			if subtype==(cFUNCTIONX)
+				setcall b is_for_64()
+				if b==(TRUE)
+					const functionx_start=!
+					#mov [rsp+8h],rcx
+					chars functionx_code={REX_Operand_64,moveatmemtheproc,0x4C,0x24,0x08}
+					#mov [rsp+10h],rdx
+					chars *={REX_Operand_64,moveatmemtheproc,0x54,0x24,0x10}
+					#mov [rsp+18h],r8
+					chars *={REX_R8_15,moveatmemtheproc,0x44,0x24,0x18}
+					#mov [rsp+20h],r9
+					chars *={REX_R8_15,moveatmemtheproc,0x4C,0x24,0x20}
+					SetCall err addtosec(#functionx_code,(!-functionx_start),code)
+					If err!=noerr
+						Return err
+					EndIf
+				endif
+			endif
+		endelse
+	Else
+		data boolindirect#1
+		Data ptrdata#1
+		setcall err prepare_function_call(ptrcontent,ptrsize,sz,#ptrdata,#boolindirect)
+		if err!=(noerror)
+			return err
+		endif
+		setcall err nr_of_args_64need_set();if err!=(noerror);return err;endif
+	EndElse
+	
+	Call stepcursors(ptrcontent,ptrsize)
+	data ptr_sz^sz
+	setcall err parenthesis_size(ptrcontent#,ptrsize#,ptr_sz)
+	if err!=noerr
+		return err
+	endif
+
+	If sz!=zero
+		#declare is bool
+		SetCall err enumcommas(ptrcontent,ptrsize,sz,declare,fnnr,(not_used),(not_used))
+		If err!=noerr
+			Return err
+		EndIf
+	EndIf
+	
+	If declare==true
+		call entryscope()
+	else
+		setcall err write_function_call(ptrdata,boolindirect,(FALSE))
+		If err!=noerr
+			Return err
+		EndIf
+	endelse
+	Call stepcursors(ptrcontent,ptrsize)
+	Return noerr
+EndFunction
+#p
+function fn_text_info()
+	data text_info#1
+	return #text_info
+endfunction
+
+#err
+function prepare_function_call(sd pcontent,sd psize,sd sz,sd p_data,sd p_bool_indirect)
+	set p_bool_indirect# (FALSE)
+	Data fns%ptrfunctions
+	
+	SetCall p_data# vars(pcontent#,sz,fns)
+	If p_data#==0
+		setcall p_data# vars_number(pcontent#,sz,(integersnumber))
+		If p_data#==0
+			setcall p_data# vars_number(pcontent#,sz,(stackdatanumber))
+			If p_data#==0
+				Chars unfndeferr="Undefined function/data name."
+				Str ptrunfndef^unfndeferr
+				Return ptrunfndef
+			EndIf
+		EndIf
+		set p_bool_indirect# (TRUE)
+	Else
+		#at functions
+		call is_for_64_is_impX_or_fnX_set(p_data#)
+	EndElse
+	Call advancecursors(pcontent,psize,sz)
+	
+	#move over the stack arguments
+	#mov esp,ebx
+		#callex(64) also use ebx to find the number of args
+	Data code%ptrcodesec
+	sd err
+	#
+	setcall err rex_w_if64();if err!=(noerror);return err;endif
+	#
+	chars espebx={moveatregthemodrm,0xe3}
+	Str ptrespebx^espebx
+	Data sizeespebx=2
+	SetCall err addtosec(ptrespebx,sizeespebx,code)
+	Return err
+endfunction
+
+#err
+function write_function_call(sd ptrdata,sd boolindirect,sd is_callex)
+	sd err
+	Data code%ptrcodesec
+	
+	sd b;setcall b is_for_64_is_impX_or_fnX_get()
+	if b==(TRUE)
+		#rcx,[rsp+0]
+		chars hex_1={REX_Operand_64,0x8B,0x0C,0x24}
+		#rdx,rsp+8
+		chars hex_2={REX_Operand_64,0x8B,0x54,0x24,0x08}
+		#r8,rsp+16
+		chars hex_3={REX_R8_15,0x8B,0x44,0x24,0x10}
+		#r9,rsp+24
+		chars hex_4={REX_R8_15,0x8B,0x4C,0x24,0x18}
+		#sub esp,x;default 4 args stack space convention
+		chars hex_x={0x83,0xEC};chars args_push#1
+			
+		if is_callex==(FALSE)
+			sd nr_of_args;setcall nr_of_args nr_of_args_64need()
+			if nr_of_args>0
+				SetCall err addtosec(#hex_1,4,code);If err!=(noerror);Return err;EndIf
+				if nr_of_args>1
+					SetCall err addtosec(#hex_2,5,code);If err!=(noerror);Return err;EndIf
+					if nr_of_args>2
+						SetCall err addtosec(#hex_3,5,code);If err!=(noerror);Return err;EndIf
+						if nr_of_args>3
+							SetCall err addtosec(#hex_4,5,code);If err!=(noerror);Return err;EndIf
+						endif
+					endif
+				endif
+			endif
+			#shadow space
+			set args_push 4
+			if nr_of_args<args_push;set args_push nr_of_args;endif
+			sub args_push 4;mult args_push -1
+			if args_push!=0
+				mult args_push (qwsz)
+				call rex_w(#err);If err!=(noerror);Return err;EndIf
+				SetCall err addtosec(#hex_x,3,code);If err!=(noerror);Return err;EndIf
+			endif
+			#stack align,more to see when the offset was taken
+			sd stack_align_p;setcall stack_align_p stack_align_off_p_get()
+			ss code_pointer;call getcont(code,#code_pointer)
+			add code_pointer stack_align_p#
+			sd against_one=4;if nr_of_args>4;set against_one nr_of_args;endif;and against_one 1
+			#Jump short if not carry
+			if against_one==0;set code_pointer# (0x73)
+			#Jump short if carry
+			else;set code_pointer# (0x72);endelse
+		else
+			#cmp eax,imm32
+			chars cmp_je=0x3d;data cmp_imm32#1
+			#jump
+			chars callex_jump#1;chars j_off#1
+			##
+			#mov eax,ebx
+			chars find_args={0x8b,0xc3}
+			#sub eax,esp
+			chars *={0x2b,0xc4}
+			#edx=0;ecx=QWORD;div edx:eax,ecx
+			chars *=0xba;data *=0;chars *=0xb9;data *=qwsz;chars *={0xF7,0xF1}
+			#
+			SetCall err addtosec(#find_args,0x10,code);If err!=(noerror);Return err;EndIf
+			#jump if equal
+			set callex_jump (0x74)
+			#
+			set cmp_imm32 0
+			set j_off (4+7+5+7+5+7+5)
+			SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+				SetCall err addtosec(#hex_1,4,code);If err!=(noerror);Return err;EndIf
+			#
+				set cmp_imm32 1
+				set j_off (5+7+5+7+5)
+				SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+					SetCall err addtosec(#hex_2,5,code);If err!=(noerror);Return err;EndIf
+			#
+					set cmp_imm32 2
+					set j_off (5+7+5)
+					SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+						SetCall err addtosec(#hex_3,5,code);If err!=(noerror);Return err;EndIf
+			#
+						set cmp_imm32 3
+						set j_off (5)
+						SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+							SetCall err addtosec(#hex_4,5,code);If err!=(noerror);Return err;EndIf
+			#jump if above
+			set callex_jump (0x77)
+			set args_push (qwsz)
+			#4*REX.W
+			data jump64#1;set jump64 4
+			#
+			set cmp_imm32 3
+			set j_off (3+7+3+7+3+7+3);add j_off jump64
+			SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+				subcall jump64 rex_w(#err);If err!=(noerror);Return err;EndIf
+				SetCall err addtosec(#hex_x,3,code);If err!=(noerror);Return err;EndIf
+				set cmp_imm32 2
+				set j_off (3+7+3+7+3);add j_off jump64
+				SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+					subcall jump64 rex_w(#err);If err!=(noerror);Return err;EndIf
+					SetCall err addtosec(#hex_x,3,code);If err!=(noerror);Return err;EndIf
+					set cmp_imm32 1
+					set j_off (3+7+3);add j_off jump64
+					SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+						subcall jump64 rex_w(#err);If err!=(noerror);Return err;EndIf
+						SetCall err addtosec(#hex_x,3,code);If err!=(noerror);Return err;EndIf
+						set cmp_imm32 0
+						set j_off (3);add j_off jump64
+						SetCall err addtosec(#cmp_je,7,code);If err!=(noerror);Return err;EndIf
+							call rex_w(#err);If err!=(noerror);Return err;EndIf
+							SetCall err addtosec(#hex_x,3,code);If err!=(noerror);Return err;EndIf
+		endelse
+	endif
+
+	Data ptrfnmask#1
+	Set ptrfnmask ptrdata
+	Add ptrfnmask (maskoffset)
+	
+	Data fnmask#1
+	Data idatafn=idatabitfunction
+	Data ptrobject%ptrobject
+	Set fnmask ptrfnmask#
+	And fnmask idatafn
+	
+	If fnmask==idatafn
+		data ptrvirtualimportsoffset%ptrvirtualimportsoffset
+		SetCall err unresolvedcallsfn(code,1,ptrdata#,ptrvirtualimportsoffset)
+		If err!=(noerror)
+			Return err
+		EndIf
+		If ptrobject#==(FALSE)
+			Set boolindirect (TRUE)
+		EndIf
+	EndIf
+
+	If boolindirect==(FALSE)
+		Chars directcall={0xe8}
+		Data directcalloff#1
+
+		Data ptrdirectcall^directcall
+		Data directcallsize=1+dwsz
+		data ptrdirectcalloff^directcalloff
+
+		If fnmask!=idatafn
+			setcall err unresolvedLocal(1,code,ptrdata,ptrdirectcalloff)
+			If err!=(noerror)
+				Return err
+			EndIf
+		Else
+			#reloc when linking;0-dwsz(appears to be dwsz from Data directcallsize=1+dwsz)
+			Set directcalloff (0-dwsz)
+		EndElse
+
+		SetCall err addtosec(ptrdirectcall,directcallsize,code)
+		If err!=(noerror)
+			Return err
+		EndIf
+	Else
+		Chars callaction={0xff}
+		Data noreg=noregnumber
+		Chars callactionopcode={2}
+		Data eaxregnumber=eaxregnumber
+		call stack64_op_set()
+		SetCall err writeoperation(ptrdata,callaction,noreg,(FALSE),callactionopcode,eaxregnumber)
+		If err!=(noerror)
+			Return err
+		EndIf
+	EndElse
+	
+	sd global_err_pB;setcall global_err_pB global_err_pBool()
+	if global_err_pB#!=(FALSE)
+		sd global_err_ptr;setcall global_err_ptr global_err_p()
+		Data ptrextra%ptrextra
+		#pointing to data. at 32 disp32 is absolute,at 64 relative
+		If ptrobject#==(FALSE)
+		#absolute
+			const global_err_ex_start=!
+			#mov ecx,imm32
+			chars g_err_mov=0xb8+ecxregnumber;data g_err_mov_disp32#1
+			#cmp byte[ecx],0
+			chars *={0x80,7*toregopcode|ecxregnumber};chars *=0
+			const global_err_ex_sz=!-global_err_ex_start
+			#add rel,1 is (b8+ecx), one byte
+			set g_err_mov_disp32 global_err_ptr#
+			#
+			SetCall err addtosec(#g_err_mov,(global_err_ex_sz),code)
+		Else
+			sd is64;setcall is64 is_for_64()
+			if is64==(FALSE)
+			#relative: using ecx(code absolute)+disp32
+				const g_err_o32_b=!
+				#mov ecx,coderel
+				chars g_err_o32=0xb8+ecxregnumber;data g_err_rel#1
+				#cmp byte[ecx+imm32],0
+				chars *={0x80,7*toregopcode|ecxregnumber|0x80}
+				#
+				const g_err_o32_sz=!-g_err_o32_b
+				#
+				call getcontReg(code,#g_err_rel);add g_err_rel (bsz+dwsz+bsz+bsz+dwsz+bsz)
+				SetCall err adddirectrel(ptrextra,(bsz),(codeind));If err!=(noerror);Return err;EndIf
+				SetCall err addtosec(#g_err_o32,(g_err_o32_sz),code);If err!=(noerror);Return err;EndIf
+			else
+			#relative
+			#cmp byte[imm32],0
+				chars g_err_cmp={0x80,7*toregopcode|5}
+				#
+				SetCall err addtosec(#g_err_cmp,(bsz+bsz),code);If err!=(noerror);Return err;EndIf
+			endelse
+				const global_err_obj_start=!
+			data g_err_cmp_disp32#1
+			chars *=0
+				const global_err_obj_sz=!-global_err_obj_start
+			set g_err_cmp_disp32 (0-global_err_obj_sz)
+			sd ac_off;call getcontReg(code,#ac_off)
+			SetCall err addrel(ac_off,(R_386_PC32),global_err_ptr#,ptrextra);If err!=(noerror);Return err;EndIf
+			#
+			SetCall err addtosec(#g_err_cmp_disp32,(global_err_obj_sz),code)
+		EndElse
+		If err!=(noerror);Return err;EndIf
+		#jz
+		chars g_err_jz=0x74;chars ret_end_sz#1
+		#
+		ss ret_end_p
+		setcall ret_end_sz getreturn(#ret_end_p)
+		sd is_linux_term;setcall is_linux_term is_linux_end()
+		if is_linux_term==(TRUE)
+			#int 0x80, sys_exit, eax 1,ebx the return number
+			const g_err_sys_start=!
+			chars g_err_sys={0x8b,ebxregnumber*toregopcode|0xc0|eaxregnumber}
+			chars *={0xb8,1,0,0,0}
+			Chars *={0xCD,0x80}
+			const g_err_sys_size=!-g_err_sys_start
+			set ret_end_sz (g_err_sys_size)
+			set ret_end_p #g_err_sys
+		endif
+		SetCall err addtosec(#g_err_jz,(bsz+bsz),code);If err!=(noerror);Return err;EndIf
+		#return
+		SetCall err addtosec(ret_end_p,ret_end_sz,code);If err!=(noerror);Return err;EndIf
+	endif
+	
+	return (noerror)
+endfunction
+
+#p
+function global_err_p()
+	data e#1
+	return #e
+endfunction
+#p
+function global_err_pBool()
+	data bool#1
+	return #bool
+endfunction
+
+#p
+function entrylinux_bool_p()
+	data entrylinux_bool#1;return #entrylinux_bool
+endfunction
+#bool
+function is_linux_end()
+	sd entrylinux_bool_ptr;setcall entrylinux_bool_ptr entrylinux_bool_p()
+	return entrylinux_bool_ptr#
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/actions/fndecargs.s
@@ -0,0 +1,117 @@
+
+
+Function fndecargs(data ptrcontent,data ptrsize,data sz,data ptr_stackoffset)
+	Data zero=0
+	If sz==zero
+		Chars szexp="Variable declaration expected."
+		Str szexpptr^szexp
+		Return szexpptr
+	EndIf
+
+	Data noerr=noerror
+	Data pointerset%compointersvarsloc
+	Data err#1
+	Data perr^err
+	data subtype#1
+	
+	Data ptrsearchsize^sz
+	Data len#1
+	Set len sz
+	Set err noerr
+
+	Call getcommand(ptrcontent,ptrsearchsize,#subtype,perr,pointerset)
+	If err!=noerr
+		Return err
+	EndIf
+	Data vartype#1
+	setcall vartype commandSubtypeDeclare_to_typenumber(subtype)
+	
+	#substract from the big size the parsed size
+	Sub len sz
+	Data length#1
+	Set length ptrsize#
+	Sub length len
+	Set ptrsize# length
+
+
+	Chars stacktransfer1={0,0x84,0x24}
+	Data stackoff#1
+	Chars stacktransfer2#1
+	Data memoff#1
+	Data sizeoftransfer=3*bsz+dwsz+bsz+dwsz
+
+	Data dwrdsz=dwsz
+	Set stackoff ptr_stackoffset#
+	AddCall stackoff stack64_add(dwrdsz)
+	Set ptr_stackoffset# stackoff
+
+	data stackindex#1
+	set stackindex stackoff
+	addcall stackindex stack64_add((stackinitpush))
+
+	setcall err addvarreferenceorunref(ptrcontent,ptrsize,sz,vartype,stackindex)
+	If err!=noerr
+		Return err
+	EndIf
+
+	data stack#1
+	data ptrstack^stack
+	call stackfilter(vartype,ptrstack)
+
+	if stack!=zero
+		return noerr
+	endif
+
+	Chars stackt1ini={moveatprocthemem}
+	Chars stackt2ini={0xA3}
+
+	Set stacktransfer1 stackt1ini
+	Set stacktransfer2 stackt2ini
+
+	setcall memoff get_img_vdata_dataReg()
+
+	Data datasize#1
+	Data btsz=bsz
+	Data charsnr=charsnumber
+	If vartype==charsnr
+		Set datasize btsz
+		Dec stacktransfer1
+		Dec stacktransfer2
+	Else
+		Set datasize dwrdsz
+	EndElse
+
+	Data null=NULL
+	Data ptrnull^null
+	Data _datasec%ptrdatasec
+	SetCall err addtosec(ptrnull,datasize,_datasec)
+	If err!=noerr
+		Return err
+	EndIf
+
+	Const offend^memoff
+	Const offstart^stacktransfer1
+	Data ptrextra%ptrextra
+	Data reloff=offend-offstart
+	Data dataind=dataind
+	SetCall err adddirectrel(ptrextra,reloff,dataind)
+	If err!=noerr
+		Return err
+	EndIf
+
+	Str codeops^stacktransfer1
+	Data _codesec%ptrcodesec
+	SetCall err addtosec(codeops,sizeoftransfer,_codesec)
+	If err!=noerr;Return err;EndIf
+	
+	sd b;setcall b is_for_64()
+	if b==(TRUE)
+		#at 64 code:
+		#A3 XX.XX.XX.XX_XX.XX.XX.XX
+		sd z=0
+		SetCall err addtosec(#z,(dwsz),_codesec)
+		If err!=noerr;Return err;EndIf
+	endif
+	
+	Return err
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/add/add.s
@@ -0,0 +1,99 @@
+
+
+
+#bool
+Function is_variable_char(sd byte)
+	If byte<(asciizero)
+		Return (FALSE)
+	ElseIf byte<=(asciinine)
+		Return (TRUE)
+	EndElseIf
+	sd bool
+	setcall bool is_variable_char_not_numeric(byte)
+	return bool
+EndFunction
+
+#bool
+function is_variable_char_not_numeric(sd in_byte)
+	if in_byte==(asciiaround)
+		return (TRUE)
+	elseif in_byte<(asciiA)
+		return (FALSE)
+	elseif in_byte<=(asciiZ)
+		return (TRUE)
+	elseif in_byte==(asciiunderscore)
+		return (TRUE)
+	elseif in_byte<(asciia)
+		return (FALSE)
+	elseif in_byte<=(asciiz)
+		return (TRUE)
+	endelseif
+	return (FALSE)
+endfunction
+
+#errnr
+Function addaref(data value,data ptrcontent,data ptrsize,data size,data typenumber,data mask)
+	Str content#1
+	Set content ptrcontent#
+	Chars byte#1
+
+	Chars err="The declarations must contain only alphanumeric, underscore and around chars and cannot start with a number."
+	Str _err^err
+
+	sd bool
+	setcall bool is_variable_char_not_numeric(content#)
+	if bool!=(TRUE)
+		Return _err
+	EndIf
+	Data len#1
+	Set len size
+	Data zero=0
+	Data false=FALSE
+	While len!=zero
+		Set byte content#
+		SetCall bool is_variable_char(byte)
+		If bool==false
+			Return _err
+		EndIf
+		Inc content
+		Dec len
+	EndWhile
+
+	#set the referenced bit if warnings are off
+	Data warningsboolptr%ptrwarningsbool
+	if warningsboolptr#==(FALSE)
+		or mask (referencebit)
+	endif
+	
+	sd dest
+	SetCall dest getstructcont(typenumber)
+	sd errnr
+	setcall errnr add_ref_to_sec(dest,value,mask,ptrcontent#,size)
+	If errnr!=(noerror)
+		Return errnr
+	EndIf
+	
+	Call advancecursors(ptrcontent,ptrsize,size)
+
+	Return errnr
+EndFunction
+
+#err
+function add_ref_to_sec(sd sec,sd value,sd mask,sd name,sd size)
+	sd errnr
+	SetCall errnr addtosec(#value,(dwsz),sec)
+	If errnr!=(noerror)
+		Return errnr
+	EndIf
+	#Mask is described at header.h
+	SetCall errnr addtosec(#mask,(dwsz),sec)
+	If errnr!=(noerror)
+		Return errnr
+	EndIf
+	SetCall errnr addtosecstr(name,size,sec)
+	If errnr!=(noerror)
+		Return errnr
+	EndIf
+	
+	return (noerror)
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/add/addstresc.s
@@ -0,0 +1,69 @@
+
+
+#errnr
+Function addtosecstresc(data pcontent,data psize,data sz,data escapes,data pdest,data allowOdd)
+	Data odd=0
+	Data zero=0
+	Data nonzero=1
+	
+	#set destination start
+	Data destReg#1
+	Data ptrdestReg^destReg
+	Call getcontReg(pdest,ptrdestReg)
+
+	# size of the string out with term
+	Data sizeEsc=0
+	Set sizeEsc sz
+	Sub sizeEsc escapes
+	# the "str" on src
+	Data sizeonsrc=0
+	Set sizeonsrc sizeEsc
+	Inc sizeEsc
+
+	Data sznr=0
+	Set odd zero
+	#into idata string is padded to word
+	If allowOdd!=zero
+		Set sznr sizeEsc
+		While sznr!=zero
+			If odd==zero
+				Set odd nonzero
+			Else
+				Set odd zero
+			EndElse
+			Dec sznr
+		EndWhile
+		If odd==nonzero
+			Inc sizeEsc
+		EndIf
+	EndIf
+
+	Data noerr=noerror
+	Data errnr#1
+	SetCall errnr addtosec(zero,sizeEsc,pdest)
+	If errnr!=noerr
+		Return errnr
+	EndIf
+
+	#set destination start
+	Str destloc#1
+	Data ptrdestloc^destloc
+	SetCall destloc getcont(pdest,ptrdestloc)
+	Add destloc destReg
+
+	While sizeonsrc!=zero
+		Chars byte={0}
+		SetCall byte quotescaped(pcontent,psize,zero)
+		Set destloc# byte
+		Inc destloc
+		Call stepcursors(pcontent,psize)
+		Dec sizeonsrc
+	EndWhile
+	Set destloc# zero
+	If odd==nonzero
+		Inc destloc
+		Set destloc# zero
+	EndIf
+
+	Return noerr
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/add/addtomem.s
@@ -0,0 +1,124 @@
+
+
+
+
+#one for code and one for rest
+Const maxsectionvalue=0x7fFFffFF/4
+
+#err
+Function maxvaluecheck(data value)
+	Data secmax=maxsectionvalue
+	If value>secmax
+		Chars secsizeerr="Reserve/Section size cannot be greater than 536 870 911."
+		Str ptrsecsizeerr^secsizeerr
+		Return ptrsecsizeerr
+	EndIf
+	Data noerr=noerror
+	Return noerr
+EndFunction
+
+#errnr
+Function addtosec(str content,data size,data dst)
+	Data destMax#1
+	Data pdestReg#1
+	Data ppdestReg^pdestReg
+	
+	Call getptrcontReg(dst,ppdestReg)
+	
+	Set destMax dst#
+
+	Data null=0
+	Data destData#1
+	Data avail#1
+	Data noerr=noerror
+
+	Set destData pdestReg#
+	Set avail destMax
+	Sub avail destData
+	If avail<size
+		Data datasec%ptrdatasec
+		Data codesec%ptrcodesec
+		Data ptrfileformat%ptrfileformat
+		Data elf_unix=elf_unix
+		Data false=FALSE
+		Data true=TRUE
+		Data sectionexpand#1
+		Set sectionexpand false
+		If ptrfileformat#==elf_unix
+			Set sectionexpand true
+		Else
+			If dst==datasec
+				Set sectionexpand true
+			ElseIf dst==codesec
+				Set sectionexpand true
+			EndElseIf
+		EndElse
+		If sectionexpand==false
+			Chars _memerr="Memory space error."
+			Str memerr^_memerr
+			Return memerr
+		Else
+			Data value#1
+			Set value destData
+			Add value size
+			Data pad#1
+			Data ptrsecalign%ptrpage_sectionalignment
+			Data secalign#1
+			Set secalign ptrsecalign#
+			SetCall pad requiredpad(value,secalign)
+			Add value pad
+
+			Data err#1
+			SetCall err maxvaluecheck(value)
+			If err!=noerr
+				Return err
+			EndIf
+
+			Data contoffset=containersdataoffset
+			Data container#1
+			Set container dst
+			Add container contoffset
+
+			SetCall err memrealloc(container,value)
+			If err!=noerr
+				Return err
+			EndIf
+			Set dst# value
+		EndElse
+	EndIf
+	If content!=null
+		Str destloc#1
+		Data ptrdest^destloc
+		SetCall destloc getcont(dst,ptrdest)
+		Add destloc destData
+		Call memtomem(destloc,content,size)
+	EndIf
+	Add destData size
+	Set pdestReg# destData
+	Return noerr
+EndFunction
+#errnr
+function addtoCode_set_programentrypoint(ss content,sd size)
+	sd err;data code%ptrcodesec
+	setcall err addtosec(content,size,code)
+	if err!=(noerror);return err;endif
+	data c#1
+	Call getcontReg(code,#c)
+	data e%ptrprogramentrypoint
+	Set e# c
+	return (noerror)
+endfunction
+#errnr
+Function addtosecstr(str content,data size,data dst)
+	Data errnr#1
+	Data noerr=noerror
+	SetCall errnr addtosec(content,size,dst)
+	If errnr!=noerr
+		Return errnr
+	EndIf
+	Chars null={0}
+	Data sz=1
+	Str ptrnull^null
+	SetCall errnr addtosec(ptrnull,sz,dst)
+	Return errnr
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/argument/arg.s
@@ -0,0 +1,308 @@
+
+
+
+function verify_syntax_end(sd ptrcontent,sd ptrsize,sd argsize,sd *data2)
+	Call advancecursors(ptrcontent,ptrsize,argsize)
+	Call spaces(ptrcontent,ptrsize)
+	data z=0
+	if ptrsize#!=z
+		str er="Unrecognized inner text."
+		return er
+	endif
+	data noer=noerror
+	return noer
+endfunction
+
+#err
+function arg_size(ss content,sd sizetoverify,sd p_argsize)
+	Chars spc=" "
+	Chars tab={0x09}
+	sd szargspc
+	sd szargtab
+	SetCall szargspc valinmem(content,sizetoverify,spc)
+	SetCall szargtab valinmem(content,sizetoverify,tab)
+	If szargspc<szargtab
+		Set p_argsize# szargspc
+	Else
+		Set p_argsize# szargtab
+	EndElse
+	if p_argsize#==0
+		return "Expecting argument name."
+	endif
+	return (noerror)
+endfunction
+
+#err
+Function getarg(data ptrcontent,data ptrsize,data sizetoverify,data ptrdata,data ptrlow,data ptrsufix,data sens)
+	ss content
+	sd size
+	sd errnr
+	
+	Set content ptrcontent#
+	set size ptrsize#
+
+	chars string_arg="\""
+
+	Str argnameerr="Argument name expected."
+	if sizetoverify==0
+		Return argnameerr
+	endif
+	
+	sd argsize
+	if content#!=string_arg
+		setcall errnr arg_size(content,sizetoverify,#argsize)
+		If errnr!=(noerror)
+			Return errnr
+		EndIf
+	endif
+
+	Data noerr=noerror
+	data false=0
+	
+	call resetisimm()
+	sd bool
+	setcall bool is_constant_related_ascii(content#)
+	if bool==(TRUE)
+		#verify if imm is ok
+		sd canhaveimm
+		setcall canhaveimm getimm()
+		if canhaveimm==false
+			str immnothere="Unexpected numbers/constants, expecting a variable."
+			return immnothere
+		endif
+		#extend to parenthesis if found
+		sd ptr_sz^argsize
+		setcall errnr parenthesis_all_size(content,size,ptr_sz)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+		#find the imm
+		setcall errnr findimm(ptrcontent,ptrsize,argsize,ptrdata)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+		#
+		set ptrlow# false
+		#sufix is not used at imm value
+	else
+		sd prefix
+		if content#==string_arg
+			#get entry
+			sd sec%ptrdummyEntry
+			call getcont(sec,ptrdata)
+			sd location
+			set location ptrdata#
+			setcall location# get_img_vdata_dataReg()
+			#set string to data
+			sd q_size
+			sd escapes
+			SetCall errnr quotinmem(#content,#size,#q_size,#escapes)
+			If errnr!=(noerror)
+				return errnr
+			endif
+			data ptrdatasec%ptrdatasec
+			SetCall errnr addtosecstresc(#content,#size,q_size,escapes,ptrdatasec,(FALSE))
+			If errnr!=(noerror)
+				return errnr
+			endif
+			#argsize for advancing
+			set argsize 2
+			add argsize q_size
+			#set low and sufix
+			set ptrlow# (FALSE)
+			set ptrsufix# (FALSE)
+			#the code operation is a "prefix" like
+			setcall prefix prefix_bool()
+			set prefix# 1
+		else
+			#lower than argsize in case of a prefix
+			sd argsize_filter
+			set argsize_filter argsize
+			
+			#at object var/fn,non-object var
+			sd undvar_err
+			sd possible_err
+			setcall undvar_err undefinedvariable()
+			set possible_err undvar_err
+			set ptrdata# 0
+			
+			chars arg_pointer="#"
+			if content#==arg_pointer
+				#prefix
+				setcall prefix prefix_bool()
+				set prefix# 1
+				inc content
+				dec argsize_filter
+			else
+				data ptrobject%ptrobject
+				if ptrobject#==1
+					#verify for function
+					data ptrfunctions%ptrfunctions
+					setcall ptrdata# vars(content,argsize,ptrfunctions)
+					if ptrdata#==0
+						setcall possible_err undefinedvar_fn()
+					else
+						set ptrlow# (FALSE)
+						set ptrsufix# (FALSE)
+						sd var
+						setcall var function_in_code()
+						set var# 1
+						#the code operation is a "prefix" like
+						setcall prefix prefix_bool()
+						set prefix# 1
+					endelse
+				endif
+			endelse
+			if ptrdata#==0
+				SetCall errnr varsufix(content,argsize_filter,ptrdata,ptrlow,ptrsufix)
+				if errnr!=(noerror)
+					if errnr==undvar_err
+						set errnr possible_err
+					endif
+					return errnr
+				EndIf
+			endif
+		endelse
+	endelse
+	#
+	If sens==(FORWARD)
+		Call advancecursors(ptrcontent,ptrsize,argsize)
+		Call spaces(ptrcontent,ptrsize)
+		Return noerr
+	Else
+		data f^verify_syntax_end
+		setcall errnr restore_cursors_onok(ptrcontent,ptrsize,f,argsize)
+		return errnr
+	EndElse
+EndFunction
+
+function function_in_code()
+	data bool#1
+	return #bool
+endfunction
+
+function is_constant_related_ascii(sd in_byte)
+#! data cursor
+	if in_byte==(asciiExclamationmark)
+		return (TRUE)
+	elseif in_byte==(asciiparenthesisstart)
+		return (TRUE)
+#negative number
+	elseif in_byte==(asciiminus)
+		return (TRUE)
+	elseif in_byte<(asciizero)
+		return (FALSE)
+	elseif in_byte<=(asciinine)
+		return (TRUE)
+#: size of integer
+	elseif in_byte==(asciiColon)
+		return (TRUE)
+#not,~
+	elseif in_byte==(asciiequiv)
+		return (TRUE)
+	endelseif
+	return (FALSE)
+endfunction
+
+#err
+Function arg(data ptrcontent,data ptrsize,data ptrdata,data ptrlow,data ptrsufix,data sens)
+	sd szarg
+	set szarg ptrsize#
+
+	Data errnr#1
+	SetCall errnr getarg(ptrcontent,ptrsize,szarg,ptrdata,ptrlow,ptrsufix,sens)
+	Return errnr
+EndFunction
+
+#err
+Function argfilters(data ptrcondition,data ptrcontent,data ptrsize,data ptrdata,data ptrlow,data ptrsufix)
+	Data null=NULL
+	Data err#1
+	Data forward=FORWARD
+
+	If ptrcondition==null
+		SetCall err arg(ptrcontent,ptrsize,ptrdata,ptrlow,ptrsufix,forward)
+		Return err
+	Else
+		call setimm()
+
+		Data content#1
+		Data size#1
+		Set content ptrcontent#
+		Set size ptrsize#
+		Data argsz#1
+		
+Const enterifNOTequal=0x84
+		Chars s1="!="
+		Data *=enterifNOTequal
+
+Const enterifLESSorEQUAL=0x8F
+		Chars *s2="<="
+		Data *=enterifLESSorEQUAL
+
+Const enterifGREATERorEQUAL=0x8C
+		Chars *s3=">="
+		Data *=enterifGREATERorEQUAL
+
+Const enterifEQUAL=0x85
+		Chars *s4="=="
+		Data *=enterifEQUAL
+
+Const enterifLESS=0x8D
+		Chars *s5="<"
+		Data *=enterifLESS
+
+Const enterifGREATER=0x8E
+		Chars *s6=">"
+		Data *=enterifGREATER
+
+		Chars term={0}
+
+		Data ptr#1
+		Data ptrini^s1
+		Chars byte#1
+
+		Set ptr ptrini
+		Set byte ptr#
+		
+		While byte!=term
+			SetCall argsz strinmem(content,size,ptr)
+			If argsz!=size
+				Set ptrcondition# ptr
+				Data errnr#1
+				sd verifyafter
+				set verifyafter content
+				add verifyafter argsz
+				SetCall errnr getarg(ptrcontent,ptrsize,argsz,ptrdata,ptrlow,ptrsufix,forward)
+				data noerrnr=noerror
+				if errnr!=noerrnr
+					Return errnr
+				endif
+				if verifyafter!=ptrcontent#
+					str moreatprimcond="Unrecognized characters at first condition argument."
+					return moreatprimcond
+				endif
+				return noerrnr
+			EndIf
+			Data sz#1
+			Data one=1
+			Data four=4
+			SetCall sz strlen(ptr)
+			Add ptr sz
+			Add ptr one
+			Add ptr four
+			Set byte ptr#
+		EndWhile
+		Chars conderr="Condition sign(s) expected."
+		Str _conderr^conderr
+		Return _conderr
+		Return err
+	EndElse
+EndFunction
+
+
+function prefix_bool()
+	data value#1
+	data p^value
+	return p
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -0,0 +1,182 @@
+
+
+function getreturn(data ptrptrcontinuation)
+	Chars returncontinuation={0xc9,0x5b,retcom}
+	str ptrreturncontinuation^returncontinuation
+	data sizeretcontinuation=3
+	set ptrptrcontinuation# ptrreturncontinuation
+	return sizeretcontinuation
+endfunction
+
+#err
+Function argument(data ptrcontent,data ptrsize,data subtype,data forwardORcallsens)
+	Data false=FALSE
+	Data true=TRUE
+
+	Data noreg=noregnumber
+	Data eaxreg=eaxregnumber
+	Data intchar#1
+	Set intchar noreg
+
+	Data integerreminder#1
+	Set integerreminder false
+
+	Chars op#1
+	Data zero=0
+
+	Str ptrcontinuation#1
+	Data sizeofcontinuation#1
+	data ptrptrcontinuation^ptrcontinuation
+
+	Set sizeofcontinuation zero
+
+	data termswitch#1
+	set termswitch false
+	if subtype==(cEXIT)
+		set termswitch true
+		set subtype (cRETURN)
+	endif
+
+	Data codeptr%ptrcodesec
+	Data regopcode#1
+	
+	Data err#1
+	Data noerr=noerror
+	chars immop#1
+	chars immtake=0xB8
+
+	call unsetimm()
+	Data forward=FORWARD
+	If forwardORcallsens==forward
+		If subtype==(cRETURN)
+			call setimm()
+			set immop immtake
+
+			Chars return={moveatprocthemem}
+
+			setcall sizeofcontinuation getreturn(ptrptrcontinuation)
+
+			Set op return
+			set regopcode (eaxregnumber)
+			Set integerreminder true
+
+			#not cEXIT
+			if termswitch==(FALSE)
+				setcall termswitch is_linux_end();endif
+			if termswitch==true
+				#int 0x80, sys_exit, eax 1,ebx the return number
+				chars sys_exit={0xb8,1,0,0,0}
+				data exinit^sys_exit
+				data exitsize=5
+				SetCall err addtosec(exinit,exitsize,codeptr)
+				If err!=noerr
+					Return err
+				EndIf
+
+				#
+				data ebxregnumber=ebxregnumber
+				set regopcode ebxregnumber
+
+				add immop ebxregnumber
+
+				#
+				Chars unixcontinuation={0xCD,0x80}
+				data ptrunixcontinuation^unixcontinuation
+				Data two=2
+				Set ptrcontinuation ptrunixcontinuation
+				set sizeofcontinuation two
+			endif
+			#fileformat#
+		ElseIf subtype==(cNOT)
+			Chars not={0xF7}
+			Chars notregopcode={Notregopcode}
+			Set op not
+			Set regopcode notregopcode
+		ElseIf subtype==(cINC)
+			Chars inc={0xFF}
+			Set op inc
+			set regopcode 0
+		ElseIf subtype==(cINCST)
+			set op (0x83)
+			set regopcode 0
+			chars incs_sz#1
+			sd b;setcall b is_for_64()
+			if b==(FALSE);set incs_sz (dwsz)
+			else;set incs_sz (qwsz);endelse
+			set ptrcontinuation #incs_sz
+			set sizeofcontinuation (bsz)
+		Else
+		#dec
+			Chars dec={0xFF}
+			Chars decregopcode={1}
+			Set op dec
+			Set regopcode decregopcode
+		EndElse
+	Else
+	#push imm prepare test
+		call setimm()
+		chars immpush=0x68
+		set immop immpush
+	EndElse
+
+	Data lowbyte#1
+	Data ptrlowbyte^lowbyte
+	Data dataarg#1
+	Data ptrdataarg^dataarg
+	Data sufix#1
+	Data ptrsufix^sufix
+	SetCall err arg(ptrcontent,ptrsize,ptrdataarg,ptrlowbyte,ptrsufix,forwardORcallsens)
+	If err!=noerr
+		Return err
+	EndIf
+
+	sd imm
+	setcall imm getisimm()
+	if imm==false
+		If forwardORcallsens!=forward
+		#push
+			If lowbyte==false
+				Chars push={0xff}
+				Chars pushopcode={6}
+				Set op push
+				Set regopcode pushopcode
+				call stack64_op_set()
+			Else
+				Set intchar eaxreg
+				Chars pushaction={moveatprocthemem}
+				Set op pushaction
+				set regopcode (eaxregnumber)
+
+				chars pushadvance={0x50}
+				data pushcontinuationsize=1
+				data ptrpushcontinuation^pushadvance
+				Set ptrcontinuation ptrpushcontinuation
+				set sizeofcontinuation pushcontinuationsize
+			EndElse
+		EndIf
+	Else
+	#imm
+		set op immop
+	EndElse
+
+	If lowbyte==true
+		Dec op
+		If integerreminder==true
+			Set intchar eaxreg
+		EndIf
+	EndIf
+	
+	SetCall err writeop_immfilter(dataarg,op,intchar,sufix,regopcode)
+	If err!=noerr
+		Return err
+	EndIf
+
+	If sizeofcontinuation!=zero
+		SetCall err addtosec(ptrcontinuation,sizeofcontinuation,codeptr)
+		return err
+	EndIf
+	
+	return noerr
+
+endfunction
+
--- /dev/null
+++ ocompiler-1/src/files/functions/argument/comwrite.s
@@ -0,0 +1,192 @@
+
+Function rol(data number,data times)
+	Data nr#1
+	Data i#1
+	Data zero=0
+	Data two=2
+
+	Set nr number
+	Set i zero
+	While i<times
+		Mult nr two
+		Inc i
+	EndWhile
+	Return nr
+EndFunction
+#modrm
+Function formmodrm(data mod,data regopcode,data rm)
+	Data toregopcode=3
+	Data tomod=3
+	Data initialbitshift=1
+	Data bitshift#1
+
+	Data modrm#1
+	Data store#1
+
+	Set bitshift initialbitshift
+
+	Set modrm rm
+	
+	SetCall bitshift rol(bitshift,toregopcode)
+	Set store bitshift
+	Mult store regopcode
+	Or modrm store
+
+	SetCall bitshift rol(bitshift,tomod)
+	Set store bitshift
+	Mult store mod
+	Or modrm store
+
+	Return modrm
+EndFunction
+
+function writetake(sd takeindex,sd entry)
+	Data ptrcodesec%ptrcodesec
+	data null=0
+
+	Data errnr#1
+	Data noerr=noerror
+
+	Chars takeini={0xb8}
+
+	Chars takeop#1
+	Data takeloc#1
+
+	Data ptrtake^takeop
+	Data sz1=bsz+dwsz
+
+	Set takeop takeini
+	Add takeop takeindex
+
+	Set takeloc entry#
+
+	
+	data stack#1
+	setcall stack is_stack(entry)
+
+	if stack==null
+		Data ptrextra%ptrextra
+		data relocoff=1
+		sd var
+		setcall var function_in_code()
+		if var#==0
+			Data dataind=dataind
+			SetCall errnr adddirectrel(ptrextra,relocoff,dataind)
+			If errnr!=(noerror)
+				Return errnr
+			EndIf
+		else
+			#function in code
+			set var# 0
+			sd importbit
+			setcall importbit get_importbit(entry)
+			setcall takeloc get_function_value(importbit,entry)
+			sd index
+			setcall index get_function_values(importbit,#takeloc,entry)
+			SetCall errnr adddirectrel(ptrextra,relocoff,index)
+			If errnr!=(noerror)
+				Return errnr
+			EndIf
+			if importbit==0
+				setcall errnr unresLc(1,ptrcodesec,0)
+				If errnr!=(noerror)
+					Return errnr
+				EndIf
+			endif
+		endelse
+	endif
+
+	SetCall errnr addtosec(ptrtake,sz1,ptrcodesec)
+	If errnr!=noerr
+		Return errnr
+	EndIf
+	
+	if stack==null
+		return noerr
+	else
+		setcall errnr rex_w_if64();if errnr!=(noerror);return (noerror);endif
+		
+		chars getfromstack={0x03}
+		chars getfromstack_modrm#1
+
+		chars stack_relative#1
+		chars regreg=RegReg
+
+		setcall stack_relative stack_get_relative(entry)
+		SetCall getfromstack_modrm formmodrm(regreg,takeindex,stack_relative)
+
+		data ptrgetfromstack^getfromstack
+		data sizegetfromstack=2
+
+		SetCall errnr addtosec(ptrgetfromstack,sizegetfromstack,ptrcodesec)
+		Return errnr
+	endelse
+endfunction
+
+#er
+Function writeoperation(data location,chars operationopcode,data regprepare,data sufix,data regopcode,data takeindex)
+	Data ptrcodesec%ptrcodesec
+	Data errnr#1
+	Data noerr=noerror
+
+	setcall errnr writetake(takeindex,location)
+	If errnr!=noerr
+		Return errnr
+	EndIf
+
+	Data noreg=noregnumber
+	Data sz2=bsz+bsz
+
+	Data true=TRUE
+	If sufix==true
+		Chars newtake={moveatprocthemem}
+		Const edxtoedx=edxregnumber*8|edxregnumber
+		Chars *newtakemodrm={edxtoedx}
+		Str ptrnewtake^newtake
+		SetCall errnr addtosec(ptrnewtake,sz2,ptrcodesec)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+	EndIf
+	
+	If regprepare!=noreg
+		Chars comprepare1={0x33}
+		Chars comprepare2#1
+		setcall comprepare2 formmodrm((RegReg),regprepare,regprepare)
+		SetCall errnr addtosec(#comprepare1,sz2,ptrcodesec)
+		If errnr!=noerr
+			Return errnr
+		EndIf
+	EndIf
+
+	Chars actionop#1
+	Chars actionmodrm#1
+	
+	Set actionop operationopcode
+	
+	sd mod=0
+	#prefix is tested here; the suffix is above
+	sd prefix
+	setcall prefix prefix_bool()
+	if prefix#!=0
+		set mod (RegReg)
+		set prefix# 0
+	endif
+	#reset the behaviour, return if (RegReg), write
+	SetCall errnr stack64_op(takeindex,#mod)
+	If errnr!=noerr;Return errnr;EndIf
+	SetCall actionmodrm formmodrm(mod,regopcode,takeindex)
+	
+	SetCall errnr val64_phase_3();If errnr!=noerr;Return errnr;EndIf
+	
+	SetCall errnr addtosec(#actionop,sz2,ptrcodesec)
+	Return errnr
+EndFunction
+
+#er
+Function writeop(data location,chars operationopcode,data regprepare,data sufix,data regopcode)
+	Data err#1
+	Data edxregnumber=edxregnumber
+	SetCall err writeoperation(location,operationopcode,regprepare,sufix,regopcode,edxregnumber)
+	Return err
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/argument/imm.s
@@ -0,0 +1,123 @@
+
+
+function imm_values(sd ptrcontent,sd ptrsize,sd sz,sd outvalue)
+#parenthesis is already verified
+	call stepcursors(ptrcontent,ptrsize)
+	dec sz
+	dec sz
+	sd err
+	setcall err parseoperations(ptrcontent,ptrsize,sz,outvalue)
+	return err
+endfunction
+
+function canbeimm_orerror(sd ptrcontent,sd ptrsize,sd sz,sd outvalue)
+#size is not 0(zero)
+	ss content
+	set content ptrcontent#
+
+	sd err
+
+	chars canbeconstantsnumbers="("
+	if content#!=canbeconstantsnumbers
+		setcall err numbersconstants(content,sz,outvalue)
+		return err
+	endif
+	data f^imm_values
+	setcall err restore_cursors_onok(ptrcontent,ptrsize,f,sz,outvalue)
+	return err
+endfunction
+
+#err
+function findimm(data ptrcontent,data ptrsize,data sz,data outvalue)
+#size is not 0(zero)
+	data canhaveimm#1
+	const immpointer^canhaveimm
+	data isimm#1
+	const ptr_isimm^isimm
+
+	Data noerr=noerror
+	sd err
+	setcall err canbeimm_orerror(ptrcontent,ptrsize,sz,outvalue)
+	if err!=noerr
+		return err
+	endif
+
+	data true=1
+	set isimm true
+	return noerr
+endfunction
+
+
+function setimm()
+	data ptratimm%immpointer
+	data true=1
+	set ptratimm# true
+endfunction
+function unsetimm()
+	data ptratimm%immpointer
+	data false=0
+	set ptratimm# false
+endfunction
+function getimm()
+	data ptratimm%immpointer
+	return ptratimm#
+endfunction
+
+
+function resetisimm()
+	data ptr%ptr_isimm
+	data false=0
+	set ptr# false
+endfunction
+function getisimm()
+	data ptr%ptr_isimm
+	return ptr#
+endfunction
+
+
+
+#er
+function writeop_immfilter(sd dataarg,sd op,sd intchar,sd sufix,sd regopcode)
+	sd isimm
+	setcall isimm getisimm()
+	data false=0
+	sd err
+	if isimm==false
+		setcall err writeop(dataarg,op,intchar,sufix,regopcode)
+		return err
+	endif
+	chars immop#1
+	data value#1
+	data immadd^immop
+	set immop op
+	set value dataarg
+	data sz=5
+	data code%ptrcodesec
+	setcall err addtosec(immadd,sz,code)
+	return err
+endfunction
+
+
+function storefirst_isimm()
+	data firstimm#1
+	const ptr_first_isimm^firstimm
+	data ptr%ptr_isimm
+	set firstimm ptr#
+endfunction
+
+function restorefirst_isimm()
+	data first%ptr_first_isimm
+	data ptr%ptr_isimm
+	set ptr# first#
+endfunction
+
+function switchimm()
+	data ptr%ptr_isimm
+	data true=1
+	if ptr#==true
+		data first%ptr_first_isimm
+		set first# true
+		data false=0
+		set ptr# false
+	endif
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/commands/cond.s
@@ -0,0 +1,259 @@
+
+
+#err
+Function coderegtocondloop()
+	Data codesec%ptrcodesec
+	Data codeReg#1
+	Data ptrcodeReg^codeReg
+
+	Call getcontReg(codesec,ptrcodeReg)
+
+	Data err#1
+	Data condloopsec%ptrconditionsloops
+	Data dsz=dwsz
+
+	SetCall err addtosec(ptrcodeReg,dsz,condloopsec)
+	Return err
+EndFunction
+
+#err
+Function condbeginwrite(data condnumber)
+	Data err#1
+	Data noerr=noerror
+
+	SetCall err coderegtocondloop()
+	If err!=noerr
+		Return err
+	EndIf
+
+	Data condloopsec%ptrconditionsloops
+	Data dsz=dwsz
+
+	Data ptrcondnumber^condnumber
+	SetCall err addtosec(ptrcondnumber,dsz,condloopsec)
+	Return err
+EndFunction
+
+#err
+Function condbegin(data ptrcontent,data ptrsize,data condnumber)
+	Data cond#1
+	Data ptrcond^cond
+	Data err#1
+	Data noerr=noerror
+	
+	SetCall err twoargs(ptrcontent,ptrsize,(not_a_subtype),ptrcond)
+	If err!=noerr
+		Return err
+	EndIf
+
+	SetCall err condbeginwrite(condnumber)
+	Return err
+EndFunction
+
+#err
+Function checkcondloopclose()
+	Data regnr#1
+	Data ptrregnr^regnr
+	Data condloop%ptrconditionsloops
+	Call getcontReg(condloop,ptrregnr)
+	Data zero=0
+	If regnr!=zero
+		Chars closeerr="All conditions/loops within a scope most be closed."
+		Str _closeerr^closeerr
+		Return _closeerr
+	EndIf
+	Data noerr=noerror
+	Return noerr
+EndFunction
+
+Const backjumpsize=5
+#err
+Function condjump(data size)
+	Chars jump={0xe9}
+	Data jsize#1
+	Data bjsz=backjumpsize
+
+	Data pjsize^jsize
+
+	Set pjsize# size
+
+	Data pjump^jump
+
+	Data err#1
+	Data code%ptrcodesec
+	SetCall err addtosec(pjump,bjsz,code)
+	Return err
+EndFunction
+
+#err
+Function condend(data number)
+	Data regnr#1
+	Data structure#1
+	Data ptrstructure^structure
+	Data condloop%ptrconditionsloops
+	Call getcont(condloop,ptrstructure)
+	Data ptrcReg#1
+	Data ptrptrcReg^ptrcReg
+	Call getptrcontReg(condloop,ptrptrcReg)
+	Set regnr ptrcReg#
+
+	Data zero=0
+	If regnr==zero
+		Chars uncloseerr="Unexpected condition/loop close command."
+		Str _uncloseerr^uncloseerr
+		Return _uncloseerr
+	EndIf
+
+	Data dsz=dwsz
+	Sub regnr dsz
+	Add structure regnr
+	
+	Data lastcondition#1
+	Set lastcondition structure#
+
+	If lastcondition!=number
+		Chars difcloseerr="The previous condition/loop is from a different type."
+		Str _difcloseerr^difcloseerr
+		Return _difcloseerr
+	EndIf
+
+	Sub regnr dsz
+	Sub structure dsz
+
+	Data jumploc#1
+	Set jumploc structure#
+
+	Data codeoffset#1
+	Data ptrcodeoff^codeoffset
+	Data codesec%ptrcodesec
+	
+	Call getcontReg(codesec,ptrcodeoff)
+
+	Data noerr=noerror
+
+	Data whilenr=whilenumber
+	If number==whilenr
+		Data bjsz=backjumpsize
+		Add codeoffset bjsz
+
+		Data whileloopstart#1
+		Data whileloopsize#1
+		
+		Sub regnr dsz
+		Sub structure dsz
+
+		Set whileloopstart structure#
+		Set whileloopsize codeoffset
+
+		Sub whileloopsize whileloopstart
+
+		Data inter#1
+
+		Set inter whileloopsize
+		Sub whileloopsize inter
+		Sub whileloopsize inter
+
+		Data err#1
+
+		SetCall err condjump(whileloopsize)
+		If err!=noerr
+			Return err
+		EndIf
+	EndIf
+
+	Data writeloc#1
+	Data ptrwriteloc^writeloc
+	Call getcont(codesec,ptrwriteloc)
+
+	Add writeloc jumploc
+	Sub writeloc dsz
+	Sub codeoffset jumploc
+
+	Set writeloc# codeoffset
+
+	Set ptrcReg# regnr
+
+	Return noerr
+EndFunction
+
+#err
+Function conditionscondend(data close1,data close2)
+	Data err#1
+	Data noerr=noerror
+
+	Data loop#1
+	Data loopini=1
+	Data loopstop=0
+	Set loop loopini
+	
+	Data number#1
+	Set number close1
+
+	Data ifnr=ifnumber
+	Data elsenr=elsenumber
+	Data structure%ptrconditionsloops
+	Data dsz=dwsz
+	sd guardian=0
+
+	While loop==loopini
+		SetCall err condend(number)
+		If err!=noerr
+			Return err
+		EndIf
+		If number==ifnr
+			If close2==elsenr
+				Set number elsenr
+				set guardian 1
+			Else
+				Set loop loopstop
+			EndElse
+		EndIf
+		If number==elsenr
+			Data clreg#1
+			Data cl#1
+			Data ptrclreg^clreg
+			Data ptrcl^cl
+			Call getcontandcontReg(structure,ptrcl,ptrclreg)
+			Add cl clreg
+			Sub cl dsz
+			Data conditionsterminator#1
+			Set conditionsterminator cl#
+			Data term=ifinscribe
+			If conditionsterminator==term
+				if guardian==1
+					call Message("Warning: ENDELSEIF not matching IF")
+				endif
+				Set loop loopstop
+			EndIf
+			set guardian 2
+		EndIf
+	EndWhile
+
+	Data ptrReg#1
+	Data ptrptrReg^ptrReg
+	Call getptrcontReg(structure,ptrptrReg)
+	Data Reg#1
+	Set Reg ptrReg#
+	Sub Reg dsz
+	Set ptrReg# Reg
+	Return err
+EndFunction
+
+Function closeifopenelse()
+	Data err#1
+	Data noerr=noerror
+
+	Data number=0
+	SetCall err condjump(number)
+	If err!=noerr
+		Return err
+	EndIf
+	Data ifnr=ifnumber
+	SetCall err condend(ifnr)
+	If err!=noerr
+		Return err
+	EndIf
+	Data elsenr=elsenumber
+	SetCall err condbeginwrite(elsenr)
+	Return err
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/commands/lib.s
@@ -0,0 +1,80 @@
+
+
+Data implibsstarted#1
+
+#er
+Function openlib()
+	Data addressesReg#1
+	Data namesReg#1
+	Data ptraddressesReg^addressesReg
+	Data ptrnamesReg^namesReg
+	Data iaddresses%ptraddresses
+	Data inames%ptrnames
+	Call getcontReg(iaddresses,ptraddressesReg)
+	Call getcontReg(inames,ptrnamesReg)
+
+	Data OriginalFirstThunk#1
+	Data *TimeDateStamp=0
+	Data *ForwarderChain=0
+	Data Name#1
+	Data FirstThunk#1
+	
+	Set Name namesReg
+	Set FirstThunk addressesReg
+
+	Data iid^OriginalFirstThunk
+	Data iid_size=IMAGE_IMPORT_DESCRIPTORsize
+	Data itable%ptrtable
+	Data err#1
+	SetCall err addtosec(iid,iid_size,itable)
+	Return err
+EndFunction
+
+#er
+Function closelib()
+	Data itable%ptrtable
+	Data itab#1
+	Data tabsize#1
+	Data ptritab^itab
+	Data ptrtabsize^tabsize
+	Call getcontandcontReg(itable,ptritab,ptrtabsize)
+
+	Data iaddresses%ptraddresses
+
+	Data null=NULL
+	Data ptrnull^null
+	Data dsz=dwsz
+	Data err#1
+	SetCall err addtosec(ptrnull,dsz,iaddresses)
+	Data noerr=noerror
+	If err!=noerr
+		Return err
+	EndIf
+
+	Data iadr#1
+	Data adrsize#1
+	Data ptriadr^iadr
+	Data ptradrsize^adrsize
+	Call getcontandcontReg(iaddresses,ptriadr,ptradrsize)
+
+	Add itab tabsize
+	Data ptrfirstthunk#1
+	Set ptrfirstthunk itab
+	Sub ptrfirstthunk dsz
+	Data firstthunk#1
+	Set firstthunk ptrfirstthunk#
+
+	Data iidsize=IMAGE_IMPORT_DESCRIPTORsize
+	Sub itab iidsize
+	
+	Set itab# adrsize
+
+	Data src#1
+	Set src iadr
+	Add src firstthunk
+
+	Sub adrsize firstthunk
+
+	SetCall err addtosec(src,adrsize,iaddresses)
+	Return err
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/commons/base.s
@@ -0,0 +1,130 @@
+
+#more situations: getmax getptrmax getptrcont
+
+Function getcont(data ptrstrucutre,data ptrcontainer)
+	Data offset=containersdataoffset
+	Add ptrstrucutre offset
+	Set ptrcontainer# ptrstrucutre#
+EndFunction
+
+Function getptrcontReg(data ptrstrucutre,data ptrptrcontainerReg)
+	Data offset=containersdataRegoffset
+	Add ptrstrucutre offset
+	Set ptrptrcontainerReg# ptrstrucutre
+EndFunction
+
+Function getcontReg(data ptrstrucutre,data ptrcontainerReg)
+	Data ptrcReg#1
+	Data ptrptrcReg^ptrcReg
+	Call getptrcontReg(ptrstrucutre,ptrptrcReg)
+	Set ptrcontainerReg# ptrcReg#
+EndFunction
+
+Function getcontandcontReg(data ptrstrucutre,data ptrcontainer,data ptrcontainerReg)
+	Call getcontReg(ptrstrucutre,ptrcontainerReg)
+	Call getcont(ptrstrucutre,ptrcontainer)
+EndFunction
+
+
+Data innerfunction#1
+Const globalinnerfunction^innerfunction
+
+#pdata
+Function getstructcont(data typenumber)
+	Data dest#1
+	Data scopes%ptrscopes
+	Data sizeofdataset=sizeofcontainer
+	
+	Data fnboolptr%globalinnerfunction
+	Data fnbool#1
+
+	Set fnbool fnboolptr#
+
+	Data true=TRUE
+	Data scopeindependent=afterscopes
+	
+	If fnbool==true
+		If typenumber<scopeindependent
+			Data nrofvars=numberofvars
+			Add typenumber nrofvars
+		EndIf
+	EndIf
+
+	Data offset#1
+	Set offset sizeofdataset
+	Mult offset typenumber
+	Set dest scopes
+	Add dest offset
+	Return dest
+EndFunction
+
+#return virtual value
+Function congruentmoduloatsegments(data virtual,data offset,data modulo,data newbytes)
+	Data offsettop#1
+	Data virtualtop#1
+
+    #add newbytes at virtual, offset already has them
+	Add virtual newbytes
+	
+	SetCall virtualtop remainder(virtual,modulo)
+
+	SetCall offsettop remainder(offset,modulo)
+
+	Data value#1
+
+	If virtualtop!=offsettop
+	    If virtualtop<offsettop
+		    #rise virtual to offset
+		    Sub offsettop virtualtop
+			Add virtual offsettop
+		Else
+		    #rise virtual to modulo+offset
+			Set value modulo
+			Sub value virtualtop
+			Add virtual value
+			Add virtual offsettop
+		EndElse
+	EndIf
+
+	#pad safe for avoiding segemntation faults
+	SetCall value remainder(offsettop,modulo)
+	Data zero=0
+	If value!=zero
+	     Add virtual modulo
+	EndIf
+	return virtual
+EndFunction
+
+#void
+function addtolog(str content)
+	data sizetowrite#1
+	setcall sizetowrite strlen(content)
+	call addtolog_ex(content,sizetowrite)
+endfunction
+#void
+function addtolog_ex(ss content,sd sizetowrite)
+	data ptrfilehandle%ptrlogfile
+	data filehandle#1
+	set filehandle ptrfilehandle#
+	call writefile(filehandle,content,sizetowrite)
+
+	chars textterm={0xd,0xa,0}
+	str text^textterm
+	data sz=2
+	call writefile(filehandle,text,sz)
+endfunction
+
+function restore_cursors_onok(sd ptrcontent,sd ptrsize,sd forward,sd data1,sd data2)
+	sd c
+	sd s
+	set c ptrcontent#
+	set s ptrsize#
+	sd err
+	data noerr=noerror
+	setcall err forward(ptrcontent,ptrsize,data1,data2)
+	if err==noerr
+		set ptrcontent# c
+		set ptrsize# s
+	endif
+	return err
+endfunction
--- /dev/null
+++ ocompiler-1/src/files/functions/commons/comfn.s
@@ -0,0 +1,378 @@
+
+#################Memory
+#err
+Function memrealloc(data ptrpointer,data size)
+	Data newpointer#1
+	Data oldpointer#1
+	Set oldpointer ptrpointer#
+	SetCall newpointer realloc(oldpointer,size)
+	Data null=NULL
+	If newpointer==null
+		Chars newmem="Memory allocation error."
+		Data pnewmem^newmem
+		Return pnewmem
+	EndIf
+	Set ptrpointer# newpointer
+	Data noerr=noerror
+	Return noerr
+EndFunction
+
+#err
+Function memoryalloc(data pathsize,data memptr)
+	Data err#1
+	Data null=NULL
+	Set memptr# null
+	SetCall err memrealloc(memptr,pathsize)
+	Return err
+EndFunction
+
+#null or ptr
+Function memalloc(data pathsize)
+	Data errmsg#1
+	Data mem#1
+	Data memptr^mem
+	SetCall errmsg memoryalloc(pathsize,memptr)
+	Data null=NULL
+	Data noerr=noerror
+	If errmsg==noerr
+		Return mem
+	Else
+		Call Message(errmsg)
+		Return null
+	EndElse
+EndFunction
+
+
+#null or ptr
+Function memcalloc(data pathsize)
+	Data path=0
+	Data null=NULL
+	SetCall path memalloc(pathsize)
+	If path==null
+		Return null
+	EndIf
+	Call memset(path,null,pathsize)
+	Return path
+EndFunction
+
+#0 equal -1 not
+Function memcmp(str m1,str m2,data size)
+	Data zero=0
+	
+	Data equal=0
+	Data notequal=-1
+	
+	Chars c1#1
+	Chars c2#1
+	While size!=zero
+		Set c1 m1#
+		Set c2 m2#
+		If c1!=c2
+			Return notequal
+		EndIf
+		Inc m1
+		Inc m2
+		Dec size
+	EndWhile
+	Return equal
+EndFunction
+
+#sizeof the string
+Function strlen(str str)
+	Chars term={0}
+	Chars byte={0}
+	Data sz#1
+	Data zero=0
+	Set sz zero
+	Set byte str#
+	While byte!=term
+		Inc str
+		Inc sz
+		Set byte str#
+	EndWhile
+	Return sz
+EndFunction
+
+#null or buffer
+Function printbuf(str format,str message)
+	Data bufsize#1
+	Data bufpartsize#1
+	SetCall bufpartsize strlen(format)
+	Set bufsize bufpartsize
+	SetCall bufpartsize strlen(message)
+	Add bufsize bufpartsize
+	Data safesize=100
+	Add bufsize safesize
+
+	Str buf#1
+	SetCall buf memalloc(bufsize)
+	Data null=NULL
+	If buf==null
+		Return null
+	EndIf
+	Return buf
+EndFunction
+
+#err
+function errorDefOut(str str1,str str2)
+	str format="%s%s"
+	data ptrallocerrormsg%ptrallocerrormsg
+	SetCall ptrallocerrormsg# printbuf(str1,str2)
+	data null=NULL
+	If ptrallocerrormsg#==null
+		return str1
+	EndIf
+	Call sprintf(ptrallocerrormsg#,format,str1,str2)
+	return ptrallocerrormsg#
+endfunction
+
+#################Files and Folders
+#err
+Function openfile(data pfile,str path,data oflag)
+	sd permission
+	sd creat_test;set creat_test oflag;and creat_test (flag_O_CREAT);if creat_test!=0
+		set permission (pmode_mode);endif
+	Data openfalse=openno
+	SetCall pfile# open(path,oflag,permission)
+	If pfile#==openfalse
+		str errorreturn#1
+		Str fileOpenErr="Cannot open a file:"
+		setcall errorreturn errorDefOut(fileOpenErr,path)
+		Return errorreturn
+	EndIf
+	Data noerr=noerror
+	Return noerr
+EndFunction
+
+#return _write (-1 or wrln)
+Function writefile(data hfile,str buf,data ln)
+	Data writefalse=writeno
+	Data writeres=0
+	SetCall writeres write(hfile,buf,ln)
+	If writeres==writefalse
+		Chars writeerr="Cannot write data to a file."
+		Call Message(writeerr)
+		Return writefalse
+	EndIf
+	Return writeres
+EndFunction
+
+#return required pad, so value can be a multiple of pad
+Function requiredpad(data value,data pad)
+	Data integers#1
+	Set integers value
+	Div integers pad
+	Mult integers pad
+	Sub value integers
+
+	Data zero=0
+	If value==zero
+		return zero
+	EndIf
+	Sub pad value
+	Return pad
+EndFunction
+
+#return writefile
+Function padwrite(data hfile,data size)
+	Data padmem#1
+	Data null=NULL
+	Data writefalse=writeno
+	SetCall padmem memcalloc(size)
+	If padmem==null
+		return writefalse
+	EndIf
+	Data writeres#1
+	SetCall writeres writefile(hfile,padmem,size)
+	Return writeres
+EndFunction
+
+#return writefile
+#write ln, and walk size value to pad
+Function paddedwrite(data hfile,str buf,data ln,data pad)
+	Data zero=0
+	Data padvalue#1
+	Set padvalue pad
+	Div padvalue padvalue
+	If padvalue==pad
+		Set padvalue zero
+	Else
+		Set padvalue pad
+	EndElse
+	Data writeres#1
+	If ln!=zero
+		Data writefalse=writeno
+		SetCall writeres writefile(hfile,buf,ln)
+		If writeres==writefalse
+			Return writefalse
+		EndIf
+
+		SetCall padvalue requiredpad(ln,pad)
+		If padvalue==zero
+			Return writeres
+		EndIf
+	EndIf
+	SetCall writeres padwrite(hfile,padvalue)
+	Return writeres
+EndFunction
+
+#return writeres
+Function padsec(data hfile,data value,data pad)
+	Data valuetopad#1
+	SetCall valuetopad requiredpad(value,pad)
+	Data writeres#1
+	SetCall writeres padwrite(hfile,valuetopad)
+	Return writeres
+EndFunction
+
+#true if match or false
+Function filepathdelims(chars chr)
+	Chars bslash="\\"
+	Chars slash=asciislash
+	Data true=TRUE
+	Data false=FALSE
+	If chr==bslash
+		Return true
+	EndIf
+	If chr==slash
+		Return true
+	EndIf
+	Return false
+EndFunction
+
+#folders ('c:\folder\file.txt' will be pointer starting at 'file.txt')
+Function endoffolders(ss path)
+	sd sz
+    setcall sz strlen(path)
+    ss cursor
+    set cursor path
+    add cursor sz
+    sd i=0
+    while i<sz
+        dec cursor
+        sd bool
+        setcall bool filepathdelims(cursor#)
+        if bool==(TRUE)
+			inc cursor
+            return cursor
+        endif
+        inc i
+    endwhile
+    return path
+EndFunction
+
+#chdir
+function changedir(ss path)
+	sd testsamefolder
+	data null=0
+	data chdirok=chdirok
+	data chdirresult#1
+
+	setcall testsamefolder strlen(path)
+	if testsamefolder==null
+		return chdirok
+	endif
+	SetCall chdirresult chdir(path)
+	return chdirresult
+endfunction
+
+#################Mixt
+#offset is when wanting to put the content at the allocation+offset
+Function file_get_content_ofs(str path,data ptrsize,data ptrmem,data offset)
+	Data err#1
+	Data noerr=noerror
+
+	Data file#1
+	Data ptrfile^file
+
+	Data ordflag=_open_read
+	SetCall err openfile(ptrfile,path,ordflag)
+	If err!=noerr
+		Return err
+	EndIf
+
+	Data size#1
+	Data zero=0
+	Data seek_set=SEEK_SET
+	Data seek_end=SEEK_END
+	SetCall size lseek(file,zero,seek_end)
+	If size<zero
+		Chars filesizeerr="File length function error."
+		Str ptrfilesizeerr^filesizeerr
+		Set err ptrfilesizeerr
+	Else
+		Call lseek(file,zero,seek_set)
+
+		#offset here
+		add size offset
+
+		Set ptrsize# size
+
+		SetCall err memoryalloc(size,ptrmem)
+		If err==noerr
+			Data mem#1
+			Set mem ptrmem#
+
+			#and offset here
+			add mem offset
+			sub size offset
+			#
+
+			Call read(file,mem,size)
+		EndIf
+	EndElse
+	Call close(file)
+	Return err
+EndFunction
+
+#return remainder
+Function remainder(data quotient,data dividend)
+    Data returnval#1
+	Set returnval quotient
+	Div quotient dividend
+	Mult quotient dividend
+	Sub returnval quotient
+	Return returnval
+EndFunction
+
+#return neg(nr)
+Function neg(data nr)
+	Data negative#1
+	Set negative nr
+	Sub nr negative
+	Sub nr negative
+	Return nr
+EndFunction
+
+#void
+function clearmessage()
+	data ptrallocerrormsg%ptrallocerrormsg
+	data null=NULL
+	If ptrallocerrormsg#!=null
+		Call free(ptrallocerrormsg#)
+		#at preferences, required next, clear here
+		set ptrallocerrormsg# null
+	EndIf
+endfunction
+
+#void
+function safeMessage(str text)
+	call Message(text)
+	#here if display msg only
+	call clearmessage()
+endfunction
+
+#err
+function compareagainstmaxpath(data sizetocompare)
+	data flag_max_path=flag_MAX_PATH
+	if sizetocompare>flag_max_path
+		chars greaterthanmax="A file path size is greater than maximum number."
+		str greater^greaterthanmax
+		return greater
+	else
+		data noerr=noerror
+		return noerr
+	endelse
+endfunction
+
+
--- /dev/null
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -0,0 +1,414 @@
+
+
+Const spacereq=1
+Const spacenotreq=0
+
+Chars cDATA_c="DATA";Chars cCHARS_c="CHARS";Chars cSTR_c="STR";Chars cSD_c="SD";Chars cSS_c="SS"
+	Chars cCONST_c="CONST";Chars cAFTERCALL_c="AFTERCALL";Chars cIMPORTAFTERCALL_c="IMPORTAFTERCALL"
+Chars cFORMAT_c="FORMAT"
+Chars cRETURN_c="RETURN";Chars cNOT_c="NOT";Chars cINC_c="INC";Chars cINCST_c="INCST";Chars cDEC_c="DEC";Chars cEXIT_c="EXIT"
+Chars cSET_c="SET";Chars cSETX_c="SETX";Chars cADD_c="ADD";Chars cSUB_c="SUB";Chars cMULT_c="MULT";Chars cDIV_c="DIV";Chars cAND_c="AND";Chars cOR_c="OR";Chars cXOR_c="XOR"
+Chars cLIBRARY_c="LIBRARY";
+Chars cIMPORT_c="IMPORT";Chars cIMPORTX_c="IMPORTX";
+Chars cFUNCTION_c="FUNCTION";Chars cFUNCTIONX_c="FUNCTIONX";Chars cENTRY_c="ENTRY";Chars cENTRYLINUX_c="ENTRYLINUX"
+Chars cENDFUNCTION_c="ENDFUNCTION"
+Chars cCALL_c="CALL"
+Chars cCALLEX_c="CALLEX"
+Chars cIF_c="IF";Chars cELSE_c="ELSE";Chars cWHILE_c="WHILE";Chars cELSEIF_c="ELSEIF";Chars cENDIF_c="ENDIF";Chars cENDELSE_c="ENDELSE";Chars cENDWHILE_c="ENDWHILE";Chars cENDELSEIF_c="ENDELSEIF"
+Chars cINCLUDE_c="INCLUDE"
+Chars cI3_c="I3"
+Chars cHEX_c="HEX"
+Chars cWARNING_c="WARNING"
+Chars cCOMMENT_c="#"
+
+const not_a_subtype=-1
+
+const coms_start=!
+const commandsvars_start=!
+	Const cDECLARE=!-coms_start
+	Const cDECLARE_top=!
+		Const cDATA=!-cDECLARE_top
+			data cDATA_s^cDATA_c
+			Data *=cDECLARE
+			Data *=cDATA
+			Data *=spacereq
+		Const cCHARS=!-cDECLARE_top
+			data *^cCHARS_c
+			Data *=cDECLARE
+			Data *=cCHARS
+			Data *=spacereq
+		Const cSTR=!-cDECLARE_top
+			data *^cSTR_c
+			Data *=cDECLARE
+			Data *=cSTR
+			Data *=spacereq
+		Const cSD=!-cDECLARE_top
+			data *^cSD_c
+			Data *=cDECLARE
+			Data *=cSD
+			Data *=spacereq
+		Const cSS=!-cDECLARE_top
+			data *^cSS_c
+			Data *=cDECLARE
+			Data *=cSS
+			Data *=spacereq
+#numberofcommandsvars to set these commands to search for them at function parameter declare
+Const numberofcommandsvars=!-commandsvars_start/4/dwsz
+		Const cCONST=!-cDECLARE_top
+			data *^cCONST_c
+			Data *=cDECLARE
+			Data *=cCONST
+			Data *=spacereq
+#aftercall can be at function parameters but the get_img_vdata_dataReg() is set inside and codding must be done for not a big deal
+	Const cDECLAREAFTERCALL=!-coms_start
+	Const cDECLAREAFTERCALL_top=!
+		Const cAFTERCALL=!-cDECLAREAFTERCALL_top
+			data *^cAFTERCALL_c
+			Data *=cDECLAREAFTERCALL
+			Data *=cAFTERCALL
+			Data *=spacereq
+		Const cIMPORTAFTERCALL=!-cDECLAREAFTERCALL_top
+			data *^cIMPORTAFTERCALL_c
+			Data *=cDECLAREAFTERCALL
+			Data *=cIMPORTAFTERCALL
+			Data *=spacereq
+	Const cFORMAT=!-coms_start
+		data *^cFORMAT_c
+		Data *=cFORMAT
+		Data *#1
+		Data *=spacereq
+	Const cONEARG=!-coms_start
+	Const cONEARG_top=!
+		Const cRETURN=!-cONEARG_top
+			data *^cRETURN_c
+			Data *=cONEARG
+			Data *=cRETURN
+			Data *=spacereq
+		Const cNOT=!-cONEARG_top
+			data *^cNOT_c
+			Data *=cONEARG
+			Data *=cNOT
+			Data *=spacereq
+		Const cINC=!-cONEARG_top
+			data *^cINC_c
+			Data *=cONEARG
+			Data *=cINC
+			Data *=spacereq
+		Const cINCST=!-cONEARG_top
+			data *^cINCST_c
+			Data *=cONEARG
+			Data *=cINCST
+			Data *=spacereq
+		Const cDEC=!-cONEARG_top
+			data *^cDEC_c
+			Data *=cONEARG
+			Data *=cDEC
+			Data *=spacereq
+		Const cEXIT=!-cONEARG_top
+			data *^cEXIT_c
+			Data *=cONEARG
+			Data *=cEXIT
+			Data *=spacereq
+	Const cPRIMSEC=!-coms_start
+	Const cPRIMSEC_top=!
+		Const cSET=!-cPRIMSEC_top
+			data *^cSET_c
+			Data *=cPRIMSEC
+			Data *=cSET
+			Data *=spacereq
+		Const cSETX=!-cPRIMSEC_top
+			data *^cSETX_c
+			Data *=cPRIMSEC
+			Data *=cSETX
+			Data *=spacereq
+		Const cADD=!-cPRIMSEC_top
+			data *^cADD_c
+			Data *=cPRIMSEC
+			Data *=cADD
+			Data *=spacereq
+		Const cSUB=!-cPRIMSEC_top
+			data *^cSUB_c
+			Data *=cPRIMSEC
+			Data *=cSUB
+			Data *=spacereq
+		Const cMULT=!-cPRIMSEC_top
+			data *^cMULT_c
+			Data *=cPRIMSEC
+			Data *=cMULT
+			Data *=spacereq
+		Const cDIV=!-cPRIMSEC_top
+			data *^cDIV_c
+			Data *=cPRIMSEC
+			Data *=cDIV
+			Data *=spacereq
+		Const cAND=!-cPRIMSEC_top
+			data *^cAND_c
+			Data *=cPRIMSEC
+			Data *=cAND
+			Data *=spacereq
+		Const cOR=!-cPRIMSEC_top
+			data *^cOR_c
+			Data *=cPRIMSEC
+			Data *=cOR
+			Data *=spacereq
+		Const cXOR=!-cPRIMSEC_top
+			data *^cXOR_c
+			Data *=cPRIMSEC
+			Data *=cXOR
+			Data *=spacereq
+	Const cLIBRARY=!-coms_start
+		data *^cLIBRARY_c
+		Data *=cLIBRARY
+		Data *#1
+		Data *=spacenotreq
+	Const cIMPORTLINK=!-coms_start;Const cIMPORTLINK_top=!
+		const cIMPORT=!-cIMPORTLINK_top
+			data *^cIMPORT_c
+			Data *=cIMPORTLINK
+			Data *=cIMPORT
+			Data *=spacenotreq
+		const cIMPORTX=!-cIMPORTLINK_top
+			data *^cIMPORTX_c
+			Data *=cIMPORTLINK
+			Data *=cIMPORTX
+			Data *=spacenotreq
+	Const cSTARTFUNCTION=!-coms_start
+	Const cSTARTFUNCTION_top=!
+		Const cFUNCTION=!-cSTARTFUNCTION_top
+			data *^cFUNCTION_c
+			Data *=cSTARTFUNCTION
+			Data *=cFUNCTION
+			Data *=spacereq
+		Const cFUNCTIONX=!-cSTARTFUNCTION_top
+			data *^cFUNCTIONX_c
+			Data *=cSTARTFUNCTION
+			Data *=cFUNCTIONX
+			Data *=spacereq
+		Const cENTRY=!-cSTARTFUNCTION_top
+			data *^cENTRY_c
+			Data *=cSTARTFUNCTION
+			Data *=cENTRY
+			Data *=spacereq
+		Const cENTRYLINUX=!-cSTARTFUNCTION_top
+			data *^cENTRYLINUX_c
+			Data *=cSTARTFUNCTION
+			Data *=cENTRYLINUX
+			Data *=spacereq
+	Const cENDFUNCTION=!-coms_start
+		data *^cENDFUNCTION_c
+		Data *=cENDFUNCTION
+		Data *#1
+		Data *=spacenotreq
+	Const cCALL=!-coms_start
+		data *^cCALL_c
+		Data *=cCALL
+		Data *#1
+		Data *=spacereq
+	Const cCALLEX=!-coms_start
+		data *^cCALLEX_c
+		Data *=cCALLEX
+		Data *#1
+		Data *=spacereq
+	Const cCONDITIONS=!-coms_start
+	Const cCONDITIONS_top=!
+		Const cIF=!-cCONDITIONS_top
+			data *^cIF_c
+			Data *=cCONDITIONS
+			Data *=cIF
+			Data *=spacereq
+		Const cELSE=!-cCONDITIONS_top
+			data *^cELSE_c
+			Data *=cCONDITIONS
+			Data *=cELSE
+			Data *=spacenotreq
+		Const cWHILE=!-cCONDITIONS_top
+			data *^cWHILE_c
+			Data *=cCONDITIONS
+			Data *=cWHILE
+			Data *=spacereq
+		Const cELSEIF=!-cCONDITIONS_top
+			data *^cELSEIF_c
+			Data *=cCONDITIONS
+			Data *=cELSEIF
+			Data *=spacereq
+		Const cENDIF=!-cCONDITIONS_top
+			data *^cENDIF_c
+			Data *=cCONDITIONS
+			Data *=cENDIF
+			Data *=spacenotreq
+		Const cENDELSE=!-cCONDITIONS_top
+			data *^cENDELSE_c
+			Data *=cCONDITIONS
+			Data *=cENDELSE
+			Data *=spacenotreq
+		Const cENDWHILE=!-cCONDITIONS_top
+			data *^cENDWHILE_c
+			Data *=cCONDITIONS
+			Data *=cENDWHILE
+			Data *=spacenotreq
+		Const cENDELSEIF=!-cCONDITIONS_top
+			data *^cENDELSEIF_c
+			Data *=cCONDITIONS
+			Data *=cENDELSEIF
+			Data *=spacenotreq
+	Const cINCLUDE=!-coms_start
+		data *^cINCLUDE_c
+		Data *=cINCLUDE
+		Data *#1
+		Data *=spacenotreq
+	Const cI3=!-coms_start
+		data *^cI3_c
+		Data *=cI3
+		Data *#1
+		Data *=spacenotreq
+	Const cHEX=!-coms_start
+		data *^cHEX_c
+		Data *=cHEX
+		Data *#1
+		Data *=spacereq
+	Const cWARNING=!-coms_start
+		data *^cWARNING_c
+		Data *=cWARNING
+		Data *#1
+		Data *=spacereq
+	Const cCOMMENT=!-coms_start
+		data *^cCOMMENT_c
+		Data *=cCOMMENT
+		Data *#1
+		Data *=spacenotreq
+Const numberofcommands=!-coms_start/4/dwsz
+
+Data pointers#numberofcommands+1
+Const compointersloc^pointers
+
+Data pointersvars#numberofcommandsvars+1
+Const compointersvarsloc^pointersvars
+
+Const cdataloc^cDATA_s
+
+const x_call_flag=0x80000000
+
+#declare coresp
+function commandSubtypeDeclare_to_typenumber(sd subtype)
+	if subtype==(cDATA);return (integersnumber)
+	elseif subtype==(cCHARS);return (charsnumber)
+	elseif subtype==(cSTR);return (stringsnumber)
+	elseif subtype==(cSD);return (stackdatanumber)
+	elseif subtype==(cSS);return (stackstringnumber)
+	else
+	#cCONST
+		return (constantsnumber)
+	endelse
+endfunction
+#set errormsg to pointer error or return the find
+Function getcommand(data pcontent,data psize,data ptrsubtype,data ptrerrormsg,data pointercommands)
+	Data zero=0
+	Data command#1
+	Data result#1
+	Data cursor#1
+	Data true=TRUE
+
+	Data dsz=dwsz
+	
+	Set cursor pointercommands#
+	While cursor!=zero
+		Data offset#1
+		Set offset cursor#
+		Add cursor dsz
+		Set command cursor#
+		Add cursor dsz
+		Set ptrsubtype# cursor#
+
+		Data spacebool#1
+		Add cursor dsz
+		Set spacebool cursor#
+
+		#implement for SetCall...
+		Chars calldata="CALL"
+		Str call^calldata
+		Str extstr#1
+		Data extbooldata#1
+		Data extbool^extbooldata
+		
+		If command==(cPRIMSEC)
+			Set extstr call
+		Else
+			Set extstr zero
+		EndElse
+
+		SetCall result stringsatmemspc(pcontent,psize,offset,spacebool,extstr,extbool)
+		If result==true
+			If command==(cPRIMSEC)
+				If extbooldata==true
+					#or first byte at subcommand to recognize the xcall at two args
+					or ptrsubtype# (x_call_flag)
+				EndIf
+			EndIf
+			Return command
+		EndIf
+		Add pointercommands dsz
+		Set cursor pointercommands#
+	EndWhile
+
+	Chars _unrecCom="Unrecognized command/declaration name."
+	Str unrecCom^_unrecCom
+	Set ptrerrormsg# unrecCom
+EndFunction
+
+
+
+Function sortcommands(data pointerscursor,data nrofcomms)
+#used for endelseif (first search),endelse (second search);the reverse order will not get endelseif
+	Data datacursor#1
+	Data datacursorini%cdataloc
+	Data i#1
+	Data zero=0
+	Data sz#1
+	Data j#1
+	Data dsize=dwsz
+	Data szval#1
+	Data ptrval#1
+	Data ptrvalstand#1
+	Data dataval#1
+
+	Set datacursor datacursorini
+	Set i zero
+	While i<nrofcomms
+		SetCall sz strlen(datacursor#)
+		Set j i
+		Set ptrval pointerscursor
+		Set ptrvalstand pointerscursor
+		While zero<j
+			Sub ptrval dsize
+			Set dataval ptrval#
+			SetCall szval strlen(dataval#)
+			If szval>=sz
+				Set j zero
+			Else
+				Set ptrvalstand# dataval
+				Sub ptrvalstand dsize
+				Dec j
+			EndElse
+		EndWhile
+		Set ptrvalstand# datacursor
+
+		Add pointerscursor dsize
+		Add datacursor dsize
+		Add datacursor dsize
+		Add datacursor dsize
+		Add datacursor dsize
+		Inc i
+	EndWhile
+	Set pointerscursor# zero
+EndFunction
+
+Function sortallcommands()
+	Data pointerscursor%compointersloc
+	Data comms=numberofcommands
+
+	Call sortcommands(pointerscursor,comms)
+
+	Data pointersvarscursor%compointersvarsloc
+	Data variables=numberofcommandsvars
+	Call sortcommands(pointersvarscursor,variables)
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/commons/strcommons.s
@@ -0,0 +1,353 @@
+
+#advance the content/size by value
+Function advancecursors(data ptrcontent,data ptrsize,data nr)
+	Str content#1
+	Data size#1
+	Set content ptrcontent#
+	Set size ptrsize#
+	Add content nr
+
+	#backward advance
+	#take nr if nr>0 or -nr if nr<0
+	Data zero=0
+	If nr<zero
+		SetCall nr neg(nr)
+	EndIf
+
+	Sub size nr
+	Set ptrcontent# content
+	Set ptrsize# size
+EndFunction
+
+#advance the content/size by one
+Function stepcursors(data ptrcontent,data ptrsize)
+	Data one=1
+	Call advancecursors(ptrcontent,ptrsize,one)
+EndFunction
+
+
+#String in mem; return size(if string is not),size before string(if string is)
+Function strinmem(str content,data size,str match)
+	Data zero=0
+	Data nrsz#1
+	SetCall nrsz strlen(match)
+	If size<nrsz
+		Return size
+	EndIf
+	Str cnt#1
+	Set cnt content
+	Data sz#1
+	Set sz size
+	Data b#1
+	While sz>=nrsz
+		SetCall b memcmp(cnt,match,nrsz)
+		If b==zero
+			Set nrsz sz
+			Inc nrsz
+		EndIf
+		If b!=zero
+			Inc cnt
+			Dec sz
+		EndIf
+	EndWhile
+	If b==zero
+		Sub cnt content
+		return cnt
+	EndIf
+	Return size
+EndFunction
+
+#bool
+#AB to ab
+#match have size
+Function stratmem(data pcontent,data psize,str match)
+	Data nrsz=0
+	Data sz=0
+	Str content=0
+	Data zero=0
+	Data one=1
+	Data sizetorun=0
+
+	SetCall nrsz strlen(match)
+	Set sz psize#
+	Set content pcontent#
+
+	If sz<nrsz
+		Return zero
+	EndIf
+
+	Set sizetorun nrsz
+	While sizetorun!=zero
+		Chars a_from_az={a_from_az}
+		Chars z_from_az={z_from_az}
+		Chars b={0}
+		Chars c={0}
+
+		Set b content#
+		If b>=a_from_az
+			If b<=z_from_az
+				Chars az_to_AZ={az_to_AZ}
+				Sub b az_to_AZ
+			EndIf
+		EndIf
+		Set c match#
+		If b!=c
+			Return zero
+		EndIf
+		Inc content
+		Inc match
+		Dec sizetorun
+	EndWhile
+	Set pcontent# content
+	Sub sz nrsz
+	Set psize# sz
+	Return one
+EndFunction
+
+#pointer
+function mem_spaces(ss content,ss last)
+	Chars spc=" "
+	Chars tab=0x9
+	while content!=last
+		if content#!=spc
+			if content#!=tab
+				return content
+			endif
+		endif
+		inc content
+	endwhile
+	return content
+endfunction
+#spaces;return 1 if at least one spc/tab;0 otherwise
+Function spaces(Str pcontent,data psize)
+	Data b=0
+	Data localview=0
+	Data true=TRUE
+	Data false=FALSE
+	Data var=0
+	Chars spc=" "
+	Str pspc^spc
+	Chars tab={0x9,0}
+	Str ptab^tab
+
+	Set b false
+	Set localview true
+	
+	While localview==true
+		Set localview false
+		SetCall var stratmem(pcontent,psize,pspc)
+		If var==true
+			Set b true
+			Set localview true
+		EndIf
+		SetCall var stratmem(pcontent,psize,ptab)
+		If var==true
+			Set b true
+			Set localview true
+		EndIf
+	EndWhile
+	Return b
+EndFunction
+
+#bool;return 1 or 0
+Function stringsatmemspc(data pcontent,data psize,str match,data spacereq,str extstr,data extbool)
+	Data content#1
+	Data size#1
+	Data bool#1
+	Data tocontent^content
+	Data tosize^size
+	Data zero=FALSE
+	Data nonzero=TRUE
+
+	Set content pcontent#
+	Set size psize#
+	SetCall bool stratmem(tocontent,tosize,match)
+	If bool==zero
+		Return zero
+	EndIf
+
+	If extstr!=zero
+		SetCall extbool# stratmem(tocontent,tosize,extstr)
+	EndIf
+
+	SetCall bool spaces(tocontent,tosize)
+	IF bool==zero
+		If spacereq==nonzero
+			Return zero
+		EndIf
+	EndIf
+	Set pcontent# content
+	Set psize# size
+	Return nonzero
+EndFunction
+
+#return stringsatmemspc
+Function stratmemspc(data pcontent,data psize,str match,data spacereq)
+	Data null=NULL
+	Data bool#1
+	SetCall bool stringsatmemspc(pcontent,psize,match,spacereq,null,null)
+	Return bool
+EndFunction
+
+#return the escaped char and change the size and cursor
+Function quotescaped(Data pcontent,Data psize,Data pescapes)
+	Str content#1
+	Data size#1
+	Chars byte#1
+	Chars bs={asciibs}
+	Data zero=0
+	
+	Set content pcontent#
+	Set size psize#
+	Set byte content#
+	If byte!=bs
+		Return byte
+	EndIf
+	Inc content
+	Dec size
+
+	If size==zero
+		Return byte
+	EndIf
+
+	Set byte content#
+	Set pcontent# content
+	Set psize# size
+
+	Data escapes#1
+	If pescapes!=zero
+		Set escapes pescapes#
+		Inc escapes
+		Set pescapes# escapes
+	EndIf
+
+	Return byte
+EndFunction
+
+#return false or true
+Function quotientinmem(data ptrcontent,data ptrsize,data pquotsz,data pescapes)
+	Chars quotation="\""
+	Str pquotation^quotation
+	Data intnr=0
+	Data zero=0
+	Data nonzero=1
+
+	SetCall intnr stratmem(ptrcontent,ptrsize,pquotation)
+	If intnr==zero
+		Return zero
+	EndIf
+
+	Str data#1
+	Data length#1
+	Str ptrdata^data
+	Data ptrlength^length
+
+	Set data ptrcontent#
+	Set length ptrsize#
+	Set pescapes# zero
+	Data escbefore=0
+	Data escafter=0
+	
+	Chars byte={0}
+	Chars bnull={0}
+	While length!=zero
+		Set escbefore pescapes#
+		SetCall byte quotescaped(ptrdata,ptrlength,pescapes)
+		If byte==quotation
+			Set escafter pescapes#
+			If escbefore==escafter
+				Str datastart#1
+				Set datastart ptrcontent#
+				Sub data datastart
+				Set pquotsz# data
+				Return nonzero
+			EndIf
+		ElseIf byte==bnull
+			Return zero
+		EndElseIf
+		Inc data
+		Dec length
+	EndWhile
+	Return zero
+EndFunction
+
+#err
+Function quotinmem(data ptrcontent,data ptrsize,data pquotsz,data pescapes)
+	Data bool#1
+	SetCall bool quotientinmem(ptrcontent,ptrsize,pquotsz,pescapes)
+	Data false=FALSE
+	If bool==false
+		Chars strerr="Expecting string delimited by quotations and with the backslash the escape character."
+		Str ptrstrerr^strerr
+		Return ptrstrerr
+	EndIf
+	Data noerr=noerror
+	Return noerr
+EndFunction
+
+#err
+function maxpathverif(str safecurrentdirtopath,str logextension)
+	data size1#1
+	data size2#1
+	setcall size1 strlen(safecurrentdirtopath)
+	setcall size2 strlen(logextension)
+	add size1 size2
+	inc size1
+	
+	data err#1
+	setcall err compareagainstmaxpath(size1)
+	return err
+endfunction
+
+#err
+function quotes_forward(sd p_content,ss last,sd p_newlines)
+	if p_content#==last
+		return (noerror)
+	endif
+	ss content
+	set content p_content#
+	chars delim="\""
+	if content#!=delim
+		return (noerror)
+	endif
+	str unend="end string (\") expected"
+	sd escapes=0
+    inc content
+    if content==last
+		return unend
+	endif
+	sd newlines=0
+    while content#!=delim
+        chars escape="\\"
+        while content#==escape
+            if escapes==0
+                set escapes 1
+            else
+                set escapes 0
+            endelse
+            inc content
+            if content==last
+				return unend
+			endif
+        endwhile
+        chars newline=0xa
+        if content#==newline
+			inc newlines
+		endif
+        if escapes==1
+            inc content
+            set escapes 0
+        elseif content#!=delim
+            inc content
+        endelseif
+        if content==last
+			return unend
+		endif
+    endwhile
+    inc content
+    set p_content# content
+    if p_newlines!=0
+		set p_newlines# newlines
+    endif
+    return (noerror)
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/commons/valinmem.s
@@ -0,0 +1,50 @@
+
+
+
+
+#return the size of the value, if the delim is found the size counts until there
+Function valinmemsens(str content,data size,chars delim,data sens)
+	Data length#1
+	Set length size
+	Chars byte#1
+	Data zero=0
+
+	If size==zero
+		Return size
+	EndIf
+	Data backward=BACKWARD
+	If sens==backward
+		Dec content
+	EndIf
+	Set byte content#
+	While byte!=delim
+		If sens!=backward
+			Inc content
+		Else
+			Dec content
+		EndElse
+		Dec size
+		If size==zero
+			Set byte delim
+		Else
+			Set byte content#
+		EndElse
+	EndWhile
+
+	Sub length size
+	Return length
+EndFunction
+
+Function valinmem(str content,data size,chars delim)
+	Data returnvalue#1
+	Data forward=FORWARD
+	SetCall returnvalue valinmemsens(content,size,delim,forward)
+	Return returnvalue
+EndFunction
+
+function valinmem_pipes(str content,data size,chars delim,data pipe)
+	data sz#1
+	setcall sz valinmem(content,size,delim)
+	set pipe# sz
+	return sz
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/commons/vars.s
@@ -0,0 +1,261 @@
+
+
+#null or a pointer to the constant/variable/function
+function vars_core_ref(str content,data size,data ptrstructure,data warningssearch,sd setref)
+	Data zero=0
+	Data varsize#1
+	Data dwlen=dwsz
+	Data blen=bsz
+
+	Str container#1
+	Data containerReg#1
+	Data ptrcontainer^container
+	Data ptrcontainerReg^containerReg
+	Call getcontandcontReg(ptrstructure,ptrcontainer,ptrcontainerReg)
+	Data entrypoint#1
+	
+	While containerReg>zero
+		Set entrypoint container
+		Add container dwlen
+		Sub containerReg dwlen
+		Data true=TRUE
+		Data false=FALSE
+		If warningssearch==true
+			Data ReferenceBit=referencebit
+			Data checkvalue#1
+			Set checkvalue container#
+			And checkvalue ReferenceBit
+			If checkvalue==zero
+				data returnvalue#1
+				set returnvalue entrypoint
+				data ptrfunctions%ptrfunctions
+				if ptrfunctions==ptrstructure
+					Set checkvalue container#
+					data idatabitfunction=idatabitfunction
+					And checkvalue idatabitfunction
+					if checkvalue==zero
+						data ptrobject%ptrobject
+						if ptrobject#==true
+							data ignorecodeFnObj=ignorecodeFnObj
+							data logcodeFnObj=logcodeFnObj
+							data ptrcodeFnObj%ptrcodeFnObj
+							if ptrcodeFnObj#==logcodeFnObj
+								set returnvalue zero
+								data ptrlogfile%ptrlogfile
+								if ptrlogfile#!=-1
+									data symbolname#1
+									set symbolname container
+									add symbolname dwlen
+									str str1="Symbol(unused in the obj):"
+									data log#1
+									setcall log errorDefOut(str1,symbolname)
+									call addtolog(log)
+									call clearmessage()
+								endif
+							elseif ptrcodeFnObj#==ignorecodeFnObj
+								set returnvalue zero
+							endelseif
+						endif
+					endif
+				endif
+				if returnvalue!=zero
+					Return returnvalue
+				endif
+			EndIf
+		EndIf
+		Add container dwlen
+		Sub containerReg dwlen
+		SetCall varsize strlen(container)
+		If warningssearch==false
+			If varsize==size
+				Data cmpret#1
+				SetCall cmpret memcmp(container,content,size)
+				If cmpret==zero
+					#go back from string to mask
+					Sub container dwlen
+					
+					#if set the reference is true
+					if setref==1
+						#get the value and change the reference bit of the mask to true
+						Data value#1
+						Set value container#
+						Data referenceBit=referencebit
+						Or value referenceBit
+						Set container# value
+					endif
+
+					Return entrypoint
+				EndIf
+			EndIf
+		EndIf
+		Add varsize blen
+		Add container varsize
+		Sub containerReg varsize
+	EndWhile
+	Return zero
+endfunction
+
+#null or a pointer to the constant/variable/function
+Function varscore(str content,data size,data ptrstructure,data warningssearch)
+	sd pointer
+	setcall pointer vars_core_ref(content,size,ptrstructure,warningssearch,1)
+	return pointer
+EndFunction
+
+#vars_core_ref
+function vars_ignoreref(str content,data size,data ptrstructure)
+	Data pointer#1
+	Data false=FALSE
+	SetCall pointer vars_core_ref(content,size,ptrstructure,false,false)
+	Return pointer
+endfunction
+
+#varscore
+Function vars(str content,data size,data ptrstructure)
+	Data pointer#1
+	Data false=FALSE
+	SetCall pointer varscore(content,size,ptrstructure,false)
+	Return pointer
+EndFunction
+
+function vars_number(ss content,sd size,sd number)
+	sd pointer
+	sd container
+	setcall container getstructcont(number)
+	setcall pointer vars(content,size,container)
+	return pointer
+endfunction
+
+Const notype=0
+
+#null or a pointer to the variable
+Function searchinvars(str content,data size,data ptrtype,data warningssearch)
+	Data data#1
+	Data ptrcontainer#1
+
+	Data i#1
+	Data null=NULL
+	Data nrofvars=numberofvars
+
+	Set i null
+
+	While i<nrofvars
+		SetCall ptrcontainer getstructcont(i)
+		SetCall data varscore(content,size,ptrcontainer,warningssearch)
+		If data!=null
+			If warningssearch==null
+				If ptrtype!=null
+					Set ptrtype# i
+				EndIf
+			EndIf
+			Return data
+		Else
+			Inc i
+		EndElse
+	EndWhile
+	Return null
+EndFunction
+
+#searchinvars
+Function strinvars(str content,data size,data ptrtype)
+	Data pointer#1
+	Data false=FALSE
+	SetCall pointer searchinvars(content,size,ptrtype,false)
+	Return pointer
+EndFunction
+
+#err
+Function undefinedvariable()
+	Chars undefinedvar="Undefined variable name."
+	Str _undefinedvar^undefinedvar
+	Return _undefinedvar
+EndFunction
+
+#bool
+function is_string(sd number)
+	Data stringsnumber=stringsnumber
+	Data stackstringnumber=stackstringnumber
+	data true=1
+	data false=0
+	if number==stringsnumber
+		return true
+	elseif number==stackstringnumber
+		return true
+	endelseif
+	return false
+endfunction
+
+#err
+Function varsufix(str content,data size,data ptrdata,data ptrlow,data ptrsufix)
+	Data type#1
+	Data ptrtype^type
+	Data false=FALSE
+	Data true=TRUE
+	
+	#size is expecting to be greater than zero
+	Str viewsfx#1
+	Set viewsfx content
+	Add viewsfx size
+	Dec viewsfx
+	Chars nrsgn="#"
+	Chars test#1
+	Set test viewsfx#
+	Data sufix#1
+	If test==nrsgn
+		Dec size
+		Set sufix true
+		#and, allow prefix and sufix same time, for fun
+	Else
+		Set sufix false
+	EndElse
+	
+	Data null=NULL
+	Data data#1
+
+	SetCall data strinvars(content,size,ptrtype)
+
+	If data==null
+		Data err#1
+		SetCall err undefinedvariable()
+		Return err
+	EndIf
+
+	Set ptrdata# data
+
+	Data charsnumber=charsnumber
+	sd is_str
+	setcall is_str is_string(type)
+	
+	sd prefix
+	setcall prefix prefix_bool()
+	If type==charsnumber
+		If sufix==true
+			Chars ptrsfxerr="CHARS statement cannot have the pointer sufix."
+			Str _ptrsfxerr^ptrsfxerr
+			Return _ptrsfxerr
+		EndIf
+		if prefix#==0
+			Set ptrlow# true
+		else
+			#need all chars address at prefix
+			set ptrlow# false
+		endelse
+	ElseIf is_str==false
+		Set ptrlow# false
+	Else
+		If sufix==true
+			if prefix#==0
+				Set ptrlow# true
+			else
+				Set ptrlow# false
+			endelse
+		Else
+			Set ptrlow# false
+		EndElse
+	EndElse
+
+	Set ptrsufix# sufix
+	
+	Data noerr=noerror
+	Return noerr
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -0,0 +1,368 @@
+
+
+
+
+#err
+Function dataassign(data ptrcontent,data ptrsize,data typenumber)
+	Data false=FALSE
+	Data true=TRUE
+	data null=0
+	data stack#1
+	data ptrS^stack
+	data rightstackpointer#1
+	
+	setcall typenumber stackfilter(typenumber,ptrS)
+	if stack==true
+		#######must be at the start
+		call entryscope_verify_code()
+	endif
+	set rightstackpointer false
+
+	Str err#1
+	Data noerr=noerror
+	Chars sign#1
+	Str assignsign^sign
+	chars nosign=0
+
+	Data constantsnr=constantsnumber
+	Data charsnr=charsnumber
+	Data stringsnr=stringsnumber
+
+	sd offset
+	Data ptroffset^offset
+	Data constantsstruct%ptrconstants
+	Data container#1
+	Data pointer_structure#1
+	Data ptrcontainer^container
+	#at constants and at data^sd,str^ss
+	If typenumber!=charsnr
+		if typenumber==constantsnr
+			set pointer_structure constantsstruct
+		else
+			setcall pointer_structure getstructcont(typenumber)
+		endelse
+		Call getcontReg(pointer_structure,ptroffset)
+	EndIf
+
+	Data ptrrelocbool%ptrrelocbool
+	Data relocindx#1
+	Data dataind=dataind
+	Set relocindx dataind
+	
+	SetCall err dataparse(ptrcontent,ptrsize,typenumber,assignsign,ptrrelocbool,stack)
+	If err!=noerr
+		Return err
+	EndIf
+	if assignsign#==nosign
+		#stack variable declared without assignation, only increment stack variables
+		call addramp()
+		Return noerr
+	endif
+
+	Data value#1
+	Data ptrvalue^value
+
+	Str content#1
+	Data size#1
+	Data ptrdatasec%ptrdatasec
+	Data ptrcodesec%ptrcodesec
+	Data ptrfunctions%ptrfunctions
+
+	Data zero=0
+	
+	Data dwSz=dwsz
+	data bsz=bsz
+	data valuewritesize#1
+	set valuewritesize dwSz
+	#is for chars name="value" or str name="value"
+	data stringtodata#1
+	set stringtodata false
+	#is for chars name="value"
+	data skipNumberValue#1
+	set skipNumberValue false
+	Data importbittest#1
+	set importbittest -1
+	
+	Set size ptrsize#
+	If size==zero
+		Chars rightsideerr="Right side of the assignment expected."
+		Str ptrrightsideerr^rightsideerr
+		Return ptrrightsideerr
+	Chars equal="="
+	ElseIf sign==equal
+		Chars byte#1
+		Set content ptrcontent#
+		Set byte content#
+		Chars groupstart="{"
+		If byte!=groupstart
+			chars stringstart="\""
+			If byte==stringstart
+			#"text"
+				If typenumber==charsnr
+					set stringtodata true
+					set skipNumberValue true
+				ElseIf typenumber==stringsnr
+					set stringtodata true
+					setcall value get_img_vdata_dataReg()
+					if stack==false
+						add value dwSz
+					endif
+					if ptrrelocbool#==true
+						str badrelocstr="Relocation sign and string surrounded by quotations is not allowed."
+						return badrelocstr
+					endif
+					set ptrrelocbool# true
+				EndElseIf
+				if stringtodata==false
+					chars bytesatintegers="The string assignment (\"\") can be used at CHARS, STR or SS."
+					str bytesatints^bytesatintegers
+					return bytesatints
+				endif
+			Else
+			#=value+constant-/&...
+				SetCall err parseoperations(ptrcontent,ptrsize,size,ptrvalue)
+				if err!=noerr
+					return err
+				endif
+				If typenumber==charsnr
+					set valuewritesize bsz
+				EndIf
+			EndElse
+		Else
+		#{} group
+			If typenumber==constantsnr
+				Chars constgroup="Group begin sign ('{') is not expected to declare a constant."
+				Str ptrconstgroup^constgroup
+				Return ptrconstgroup
+			EndIf
+			Call stepcursors(ptrcontent,ptrsize)
+			Set content ptrcontent#
+			Set size ptrsize#
+			Data sz#1
+			Chars groupstop="}"
+			SetCall sz valinmem(content,size,groupstop)
+			If sz==size
+				Chars groupend="Group end sign ('}') expected."
+				Str ptrgroupend^groupend
+				Return ptrgroupend
+			EndIf
+			SetCall err enumcommas(ptrcontent,ptrsize,sz,true,typenumber,stack,(not_hexenum))
+			If err!=noerr
+				Return err
+			EndIf
+			Call stepcursors(ptrcontent,ptrsize)
+			Return noerr
+		EndElse
+	Chars reserve="#"
+	ElseIf sign==reserve
+		SetCall err parseoperations(ptrcontent,ptrsize,size,ptrvalue)
+		If err!=noerr
+			Return err
+		EndIf
+		If value<zero
+			Chars negreserve="Unexpected negative value at reserve declaration."
+			Str ptrnegreserve^negreserve
+			Return ptrnegreserve
+		EndIf
+		Data dsz=dwsz
+		if stack==false
+			SetCall err maxvaluecheck(value)
+			If err!=noerr
+				Return err
+			EndIf
+			If typenumber!=charsnr
+				Mult value dsz
+				SetCall err maxvaluecheck(value)
+				If err!=noerr
+					Return err
+				EndIf
+			EndIf
+			SetCall err addtosec(null,value,ptrdatasec)
+			Return err
+		else
+			Mult value dsz
+			call growramp(value)
+			return noerr
+		endelse
+	Else
+	#^ pointer
+		Set content ptrcontent#
+		data doublepointer#1
+		set doublepointer zero
+		Chars pointersign="^"
+		if content#==pointersign
+			inc doublepointer
+			call stepcursors(ptrcontent,ptrsize)
+			Set content ptrcontent#
+			set size ptrsize#
+		endif
+		Data tp=notype
+		Data pointer#1
+		SetCall pointer strinvars(content,size,tp)
+		If pointer!=zero
+			data rightstackbool#1
+			setcall rightstackbool is_stack(pointer)
+			if rightstackbool==false
+				Set value pointer#
+			else
+				set ptrrelocbool# false
+				if stack==false
+					data eax=eaxregnumber
+					setcall err writetake(eax,pointer)
+					If err!=noerr
+						Return err
+					EndIf
+					data op=moveatmemtheproc
+					Data noreg=noregnumber
+					Call getcont(pointer_structure,ptrcontainer)
+					Add container offset
+					SetCall err writeop(container,op,noreg,false,eax)
+					If err!=noerr
+						Return err
+					EndIf
+				else
+					set rightstackpointer pointer
+				endelse
+			endelse
+		Else
+			If typenumber==constantsnr
+				SetCall err undefinedvariable()
+				Return err
+			EndIf
+			SetCall pointer vars(content,size,ptrfunctions)
+			If pointer==zero
+				setcall err undefinedvar_fn()
+				return err
+			EndIf
+
+			setcall importbittest get_importbit(pointer)
+			setcall value get_function_value(importbittest,pointer)
+
+			Data ptrobject%ptrobject
+			If ptrobject#==false
+				data addatend#1
+				data ptrvirtualimportsoffset%ptrvirtualimportsoffset
+				data ptrvirtuallocalsoffset%ptrvirtuallocalsoffset
+				If importbittest==false
+					set addatend ptrvirtuallocalsoffset
+				else
+					if doublepointer==zero
+						str doubleexp="Double pointer (^^) expected in this case: executable format and imported function."
+						return doubleexp
+					endif
+					dec doublepointer
+					set addatend ptrvirtualimportsoffset
+				endelse
+				
+				sd section
+				sd section_offset
+				if stack==false
+					set section ptrdatasec
+					set section_offset zero
+				else
+					set section ptrcodesec
+					data stackoff=rampadd_value_off
+					set section_offset stackoff
+				endelse
+				#third value is not used at object==false
+				setcall err unresolvedcallsfn(section,section_offset,0,addatend)
+				If err!=noerr
+					Return err
+				EndIf
+			Else
+				setcall relocindx get_function_values(importbittest,#value,pointer)
+			EndElse
+		EndElse
+		if doublepointer!=zero
+			str unexpdp="Unexpected double pointer."
+			return unexpdp
+		endif
+		Call advancecursors(ptrcontent,ptrsize,size)
+	EndElse
+	if skipNumberValue==false
+		If typenumber!=constantsnr
+			setcall err writevar(ptrvalue,valuewritesize,relocindx,stack,rightstackpointer)
+			If err!=noerr
+				Return err
+			EndIf
+			#init -1, 0 is local function in the right
+			if importbittest==0
+				if stack==false
+					setcall err unresLc(-4,ptrdatasec,0)
+				else
+					setcall err unresLc(-4,ptrcodesec,0)
+				endelse
+				if err!=(noerror)
+					return err
+				endif
+			endif
+		Else
+			Call getcont(constantsstruct,ptrcontainer)
+			Add container offset
+			Set container# value
+		EndElse
+	endif
+	if stringtodata==true
+		setcall err add_string_to_data(ptrcontent,ptrsize)
+		if err!=(noerror)
+			return err
+		endif
+		Call stepcursors(ptrcontent,ptrsize)
+	endif
+	Return noerr
+EndFunction
+
+function undefinedvar_fn()
+	return "Undefined variable/function name."
+endfunction
+
+#import bit
+function get_importbit(sd pointer)
+	Add pointer (maskoffset)
+	sd value
+	set value pointer#
+	And value (idatabitfunction)
+	return value
+endfunction
+#value
+function get_function_value(sd importbit,sd pointer)
+	if importbit!=0
+		#imports
+		return pointer#
+	else
+		#local
+		sd value
+		call get_fn_pos(pointer,#value)
+		return value
+	endelse
+endfunction
+#relocindex
+function get_function_values(sd importbit,sd p_value,sd pointer)
+	If importbit==0
+		#code
+		return (codeind)
+	Else
+		#import
+		set p_value# 0
+		return pointer#
+	EndElse
+endfunction
+
+#err
+function add_string_to_data(sd ptrcontent,sd ptrsize)
+	sd err
+	Data ptrdatasec%ptrdatasec
+	Data quotsz#1
+	Data ptrquotsz^quotsz
+	Data escapes#1
+	Data ptrescapes^escapes
+	SetCall err quotinmem(ptrcontent,ptrsize,ptrquotsz,ptrescapes)
+	If err!=(noerror)
+		return err
+	endif
+	SetCall err addtosecstresc(ptrcontent,ptrsize,quotsz,escapes,ptrdatasec,(FALSE))
+	If err!=(noerror)
+		return err
+	endif
+	return (noerror)
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/elf/elf.s
@@ -0,0 +1,237 @@
+
+#err
+Function addtonamessized(data str,data sz,data regoff)
+	Data ptrnames%ptrnames
+	Call getcontReg(ptrnames,regoff)
+	Data err#1
+	SetCall err addtosecstr(str,sz,ptrnames)
+	Return err
+EndFunction
+
+#err
+Function addtonames(data str,data regoff)
+	Data sz#1
+	SetCall sz strlen(str)
+	Data err#1
+	SetCall err addtonamessized(str,sz,regoff)
+	Return err
+EndFunction
+
+#err
+Function elfaddsec(data stringname,data type,data flags,data fileoffset,data seccont,data link,data info,data align,data entsize)
+	#Section header
+	#Section name (string tbl index)
+	Data sh_name#1
+	#Section type
+	Data sh_type#1
+	#Section flags
+	Data sh_flags#1
+	#Section virtual addr at execution
+	Data *sh_addr=0
+	#Section file offset
+	Data sh_offset#1
+	#Section size in bytes
+	Data sh_size#1
+	#Link to another section
+	Data sh_link#1
+	#Additional section information
+	Data sh_info#1
+	#Section alignment
+	Data sh_addralign#1
+	#Entry size if section holds table
+	Data sh_entsize#1
+
+	Const elf_section^sh_name
+	Const lastsectionh^sh_entsize
+	Const elf_section_size=lastsectionh+dwsz-elf_section
+	Data elf_section%elf_section
+	Data elf_section_size=elf_section_size
+
+	Const SHT_NULL=0
+	Const SHT_PROGBITS=1
+	Const SHT_NOBITS=8
+		
+		#Occupies memory during execution,1 << 1
+	Const SHF_ALLOC=2*1
+		#Executable,1 << 2
+	Const SHF_EXECINSTR=2*2
+		#`sh_info' contains SHT index,1 << 6
+	Const SHF_INFO_LINK=2*6
+
+	Data err#1
+	Data ptrmiscbag%ptrmiscbag
+
+	Data SHT_NULL=SHT_NULL
+	Data SHT_PROGBITS=SHT_PROGBITS
+	Data SHT_NOBITS=SHT_NOBITS
+	Data zero=0
+
+	If type==SHT_NULL
+		Call memset(elf_section,zero,elf_section_size)
+	Else
+		Set sh_name stringname
+		
+		Data ptrsh_size^sh_size
+		Call getcontReg(seccont,ptrsh_size)
+		If type==SHT_PROGBITS
+			If sh_size==zero
+				Set type SHT_NOBITS
+			EndIf
+		EndIf
+		Set sh_type type
+
+		Set sh_flags flags
+		Set sh_offset fileoffset
+		#   sh_size
+		Set sh_link link
+		Set sh_info info
+		Set sh_addralign align
+		Set sh_entsize entsize
+	EndElse
+	SetCall err addtosec(elf_section,elf_section_size,ptrmiscbag)
+	Return err
+EndFunction
+
+#err
+Function elfaddstrsec(data stringoffname,data type,data flags,data fileoffset,data seccont,data link,data info,data align,data entsize)
+	Data regnr#1
+	Data ptrregnr^regnr
+	Data err#1
+	Data noerr=noerror
+	SetCall err addtonames(stringoffname,ptrregnr)
+	If err==noerr
+		SetCall err elfaddsec(regnr,type,flags,fileoffset,seccont,link,info,align,entsize)
+	EndIf
+	Return err
+EndFunction
+
+#err
+Function elfaddsym(data stringoff,data value,data size,chars type,chars bind,data index,data struct)
+	#Symbol table entry
+	#Symbol name (string tbl index)
+	Data elf32_sym_st_name#1
+	#Symbol value
+	Data elf32_sym_st_value#1
+	#Symbol size
+	Data elf32_sym_st_size#1
+	#Symbol type and binding
+	Const STB_LOCAL=0
+	Const STB_GLOBAL=1
+	Const STT_NOTYPE=0
+	Const STT_FUNC=2
+	Const STT_SECTION=3
+	Chars elf32_sym_st_info#1
+	#Symbol visibility
+	Chars *elf32_sym_st_other={0}
+	#Section index
+	Chars elf32_sym_st_shndx#2
+
+	Const elf_sym_start^elf32_sym_st_name
+	Data elf_sym_size=!-elf_sym_start
+	Data elf_sym%elf_sym_start
+
+	Set elf32_sym_st_name stringoff
+	Set elf32_sym_st_value value
+	Set elf32_sym_st_size size
+
+	Set elf32_sym_st_info type
+	Chars tohibyte={16}
+	Mult bind tohibyte
+	Or elf32_sym_st_info bind
+
+	Data ptrndxdest^elf32_sym_st_shndx
+	Data ptrndxsrc^index
+	Data wsz=wsz
+	Call memtomem(ptrndxdest,ptrndxsrc,wsz)
+
+	sd err
+	SetCall err addtosec(elf_sym,elf_sym_size,struct)
+	Return err
+EndFunction
+#err
+Function elfaddstrszsym(data stringstroff,data sz,data value,data size,chars type,chars bind,data index,data struct)
+	Data regnr#1
+	Data ptrregnr^regnr
+	Data err#1
+	Data noerr=noerror
+	SetCall err addtonamessized(stringstroff,sz,ptrregnr)
+	If err==noerr
+		SetCall err elfaddsym(regnr,value,size,type,bind,index,struct)
+	EndIf
+	Return err
+EndFunction
+#err
+Function elfaddstrsym(data stringstroff,data value,data size,chars type,chars bind,data index,data struct)
+	Data sz#1
+	SetCall sz strlen(stringstroff)
+	Data err#1
+	SetCall err elfaddstrszsym(stringstroff,sz,value,size,type,bind,index,struct)
+	Return err
+EndFunction
+
+Data STB_LOCAL=STB_LOCAL
+Data STB_GLOBAL=STB_GLOBAL
+Data STT_NOTYPE=STT_NOTYPE
+Data STT_FUNC=STT_FUNC
+Data STT_SECTION=STT_SECTION
+
+Const dataind=1
+Const codeind=2
+Const symind=3
+Data datastrtab#1
+Data codestrtab#1
+
+Data objfnmask#1
+Const ptrobjfnmask^objfnmask
+
+#err
+Function addrel(data offset,chars type,data symbolindex,data struct)
+	#offset
+	Data elf_rel_offset#1
+	#Relocation type and symbol index
+	#Direct 32 bit
+	Const R_386_32=1
+	#PC relative 32 bit
+	Const R_386_PC32=2
+	
+	Chars elf_rel_info_type#1
+	Data elf_rel_info_symbolindex#1
+	
+	Data elf_rel^elf_rel_offset
+	Data elf_rel_sz=elf32_dyn_d_val_relent
+
+	Set elf_rel_offset offset
+	Set elf_rel_info_type type
+	Set elf_rel_info_symbolindex symbolindex
+
+	Data err#1
+	SetCall err addtosec(elf_rel,elf_rel_sz,struct)
+	Return err
+EndFunction
+
+#err
+Function adddirectrel(data relsec,data extraoff,data index)
+	Data noerr=noerror
+	Data ptrobject%ptrobject
+	Data false=FALSE
+	If ptrobject#==false
+		Return noerr
+	EndIf
+	Data err#1
+	Data off#1
+	Data ptroff^off
+	Data ptrdatasec%ptrdatasec
+	Data ptrcodesec%ptrcodesec
+	Data ptraddresses%ptraddresses
+	Data struct#1
+	If relsec==ptraddresses
+		Set struct ptrdatasec
+	Else
+		Set struct ptrcodesec
+	EndElse
+	Call getcontReg(struct,ptroff)
+	Add off extraoff
+	Chars elf_rel_info_type={R_386_32}
+	SetCall err addrel(off,elf_rel_info_type,index,relsec)
+	Return err
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/enumbags.s
@@ -0,0 +1,84 @@
+
+
+#err
+Function enumbags(data declare)
+	Data true=TRUE
+
+	Data containersbegin%containersbegin
+	Data containerssize=containerssize
+	Data pointer#1
+	Data size#1
+	Data dsz=dwsz
+	Data maxalloc#1
+	Data noerr=noerror
+
+	Data value#1
+	Data zero=0
+
+	Set pointer containersbegin
+	Set size containerssize
+	While size>zero
+		Set maxalloc pointer#
+		Add pointer dsz
+		Sub size dsz
+		If declare==true
+			Data err#1
+			SetCall err memoryalloc(maxalloc,pointer)
+			If err!=noerr
+				Return err
+			EndIf
+		Else
+			Set value pointer#
+			If value!=zero
+				Call free(value)
+			EndIf
+		EndElse
+		Add pointer dsz
+		Sub size dsz
+		Add pointer dsz
+		Sub size dsz
+	EndWhile
+	Return noerr
+EndFunction
+
+#no return
+Function freeclose()
+	Data value#1
+	Data zero=0
+	
+	Data ptrpath%ptrpath
+	Set value ptrpath#
+	If value!=zero
+		Call free(value)
+	EndIf
+
+	Call enumbags(zero)
+	
+	Data negative=-1
+
+	Data ptrfileout%ptrfileout
+	Set value ptrfileout#
+	If value!=negative
+		Call close(value)
+	EndIf
+
+	data ptrlogfile%ptrlogfile
+	Set value ptrlogfile#
+	If value!=negative
+		Call close(value)
+	EndIf
+
+	#here if allocerrormsg was a submessage(included in sprintf)
+	#here at some main msgerrexits
+	call clearmessage()
+EndFunction
+
+Function msgerrexit(data msg)
+	Call Message(msg)
+	call errexit()
+EndFunction
+
+Function errexit()
+	Call freeclose()
+	Call exit(-1)
+EndFunction
--- /dev/null
+++ ocompiler-1/src/files/functions/global/funcs.s
@@ -0,0 +1,88 @@
+
+
+
+function localResolve(sd unrLc,sd unrLcReg)
+	data funcs#1
+	data ptr_funcs^funcs
+	data fns%ptrfunctions
+
+	sd struct
+	sd offset
+	
+	while unrLcReg!=0
+		set struct unrLc#
+		sd cont
+		sd ptr_cont^cont
+		call getcont(struct,ptr_cont)
+		
+		add unrLc 4
+
+		set offset unrLc#
+
+		add cont offset
+
+		call getcont(fns,ptr_funcs)
+		add funcs cont#
+		sd value
+		set value funcs#
+
+		add unrLc 4
+
+		if unrLc#==1
+			add offset 4
+			sub offset value
+			setcall offset neg(offset)
+		else
+			set offset value
+		endelse
+
+		set cont# offset
+
+		add unrLc 4
+		sub unrLcReg 12
+	endwhile
+endfunction
+
+function get_fn_pos(sd varfnpointer,sd ptr_out)
+	Data ptrfunctions%ptrfunctions
+	#store the functions reg
+	sd fns_cont
+	sd ptr_fns_cont^fns_cont
+	call getcont(ptrfunctions,ptr_fns_cont)
+	sub varfnpointer fns_cont
+	set ptr_out# varfnpointer
+endfunction
+
+#e
+function unresLc(sd addition,sd structure,sd direct)
+	data struct#1
+	data offset#1
+	data isdirect#1
+
+	sd ptradd^struct
+	sd ptroff^offset
+				
+	Call getcontReg(structure,ptroff)
+			
+	add offset addition
+
+	set struct structure
+	set isdirect direct
+
+	data unresLocal%ptrunresLocal
+	sd err
+	SetCall err addtosec(ptradd,12,unresLocal)
+	return err
+endfunction
+
+#e
+function unresolvedLocal(sd addition,sd structure,sd currentfnpointer,sd ptr_out)
+	sd err
+	setcall err unresLc(addition,structure,1)
+	If err!=(noerror)
+		Return err
+	EndIf
+	
+	call get_fn_pos(currentfnpointer,ptr_out)
+	return (noerror)
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/incld.s
@@ -0,0 +1,157 @@
+
+Data includebool#1
+
+Str contentoffile#1
+Data sizeoffile#1
+Data offsetoffile#1
+Data lineoffile#1
+Data nameofstoffile#1
+
+Const contentoffileoff=2*dwsz
+Const lineoffile_offset=contentoffileoff+dwsz
+
+Const includestructure^contentoffile
+
+function offsetoffile_value()
+	sd offsetoffl
+	data null=NULL
+	data true=TRUE
+	set offsetoffl null
+	data ptrincludedir%ptrincludedir
+	data flag_max_path=flag_MAX_PATH
+	if ptrincludedir#==true
+		add offsetoffl flag_max_path
+	endif
+	return offsetoffl
+endfunction
+
+#err
+Function include(Str path)
+	Data zero=0
+	Data one=1
+	data negative=-1
+
+	data ptrlogfile%ptrlogfile
+	if ptrlogfile#!=negative
+		call addtolog(path)
+	endif
+	
+	Str contentoffl#1
+	Data sizeoffl#1
+	Data offsetoffl#1
+	Data *lineoffl=0
+	Chars nameoffl#shortstrsize
+
+	Data err#1
+	Data noerr=noerror
+	
+	Const includeset^contentoffl
+	Data includeset%includeset
+
+	Data psizeoffl^sizeoffl
+	Data pcontentoffl%includeset
+	
+	setcall offsetoffl offsetoffile_value()
+
+	SetCall err file_get_content_ofs(path,psizeoffl,pcontentoffl,offsetoffl)
+	If err!=noerr
+		Return err
+	EndIf
+
+	Str folders#1
+	SetCall folders endoffolders(path)
+
+	data ptrincludedir%ptrincludedir
+	if ptrincludedir#==(TRUE)
+		data charpointer#1
+		setcall charpointer getcwd(pcontentoffl#,(flag_MAX_PATH))
+		if charpointer==(NULL)
+			str getcwderr="Getcdw error."
+			return getcwderr
+		endif
+
+		if ptrlogfile#!=negative
+			call addtolog(pcontentoffl#)
+		endif
+
+
+		chars storechar#1
+		set storechar folders#
+		set folders# 0
+		
+		data int#1
+		data chdirok=chdirok
+		setcall int changedir(path)
+		#0 success
+		if int!=chdirok
+			str chdirerr="Chdir error."
+			return chdirerr
+		endif
+
+		set folders# storechar
+	endif
+
+
+	Data strsz#1
+	SetCall strsz strlen(path)
+	Data fnamesize#1
+	Set fnamesize path
+	Add fnamesize strsz
+	Sub fnamesize folders
+
+	Data allowedforsize=shortstrsize
+	Data allowedsize#1
+
+	Set allowedsize allowedforsize
+	Sub allowedsize one
+
+	Data moresize#1
+	Set moresize zero
+
+	If fnamesize>allowedsize
+		Set fnamesize allowedsize
+		Sub fnamesize one
+		Set moresize one
+	EndIf
+	
+	Str dest#1
+	Str initialdest^nameoffl
+	Set dest initialdest
+	Call memtomem(dest,folders,fnamesize)
+
+	Add dest fnamesize
+	If moresize==one
+		Chars morestr="~"
+		Set dest# morestr
+		Add dest one
+	EndIf
+	
+	Set dest# 0
+	
+	
+	Data pincludes%ptrincludes
+	Data isetsize=includesetSz
+	
+	SetCall err addtosec(includeset,isetsize,pincludes)
+	If err!=noerr
+		Return err
+	EndIf
+	
+	Data pointers%includestructure
+	Data sizeadd#1
+	Set sizeadd isetsize
+	Sub sizeadd allowedforsize
+	Call memtomem(pointers,includeset,sizeadd)
+
+	Data includespoint#1
+	Data ptrincludespoint^includespoint
+	Call getcontReg(pincludes,ptrincludespoint)
+	Sub includespoint allowedforsize
+
+	Data envinccursor#1
+	Set envinccursor pointers
+	Add envinccursor sizeadd
+	Set envinccursor# includespoint
+	
+	Return noerr
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/preffuncs.s
@@ -0,0 +1,164 @@
+
+
+#void
+Function warnings(data searchinfunctions,data includes,data nameoffset)
+	Data warningsboolptr%ptrwarningsbool
+	Data warningsbool#1
+	Data null=NULL
+	Data true=TRUE
+	Data false=FALSE
+
+	Set warningsbool warningsboolptr#
+	If warningsbool==false
+		Return null
+	EndIf
+
+	Data var#1
+	
+	SetCall var searchinvars(null,null,null,true)
+	If var==null
+		If searchinfunctions==true
+			Data functionsptr%ptrfunctions
+			SetCall var varscore(null,null,functionsptr,true)
+		EndIf
+	EndIf
+	If var!=null
+		Chars unrefformat="Unreferenced variable/function: %s. Scope Termination File: %s. To disable this warning see '.ocompiler.txt'"
+		Str ptrunrefformat^unrefformat
+
+		Data printbuffer#1
+
+		Data fileoff=nameoffset
+		Add var fileoff
+		SetCall printbuffer printbuf(ptrunrefformat,var)
+		If printbuffer!=null
+			Add includes nameoffset
+			Call sprintf(printbuffer,ptrunrefformat,var,includes)
+			Call Message(printbuffer)
+			Call free(printbuffer)
+		EndIf
+	EndIf
+EndFunction
+
+#void
+#parse and set the value, 0-9(one digit) values are expected here
+function parsepreferences(data ptrcontent,data ptrsize,data ptrvalue)
+	Chars searchsign="="
+	Data sizeuntilsign#1
+
+	str content#1
+	data size#1
+	set content ptrcontent#
+	set size ptrsize#
+
+	SetCall sizeuntilsign valinmem(content,size,searchsign)
+	call advancecursors(ptrcontent,ptrsize,sizeuntilsign)
+
+	If sizeuntilsign!=size
+		Call stepcursors(ptrcontent,ptrsize)
+		set content ptrcontent#
+		set size ptrsize#
+		data zero=0
+		If size!=zero
+			Call stepcursors(ptrcontent,ptrsize)
+			Set ptrvalue# content#
+			data asciiNumbersStart=asciizero
+			Sub ptrvalue# asciiNumbersStart
+		EndIf
+	EndIf
+
+	data false=FALSE
+	return false
+endfunction
+
+#void
+function setpreferences(str scrpath)
+	data null=0
+	data void#1
+
+	str folders#1
+	setcall folders endoffolders(scrpath)
+	set folders# null
+	sub folders scrpath
+
+	Str preferences=".ocompiler.txt"
+	data prefsz#1
+	setcall prefsz strlen(preferences)
+	inc prefsz
+
+	data total#1
+	set total folders
+	add total prefsz
+
+	data err#1
+	data noerr=noerror
+	data ptrmem#1
+	data allocptrmem^ptrmem
+	setcall err memoryalloc(total,allocptrmem)
+	if err!=noerr
+		call Message(err)
+		return void
+	endif
+
+	call memtomem(ptrmem,scrpath,folders)
+
+	str apppath#1
+	set apppath ptrmem
+	add apppath folders
+	call memtomem(apppath,preferences,prefsz)
+
+	#defaults
+	data ptrwarningsbool%ptrwarningsbool
+	data ptrlogbool%ptrlogbool
+	data ptrincludedir%ptrincludedir
+	data ptrcodeFnObj%ptrcodeFnObj
+	data ptr_log_import_functions%ptr_log_import_functions
+	
+	data true=TRUE
+	data false=FALSE
+	data defaultcodeFnObj=logcodeFnObj
+
+	set ptrwarningsbool# true
+	set ptrlogbool# false
+	set ptrincludedir# true
+	set ptrcodeFnObj# defaultcodeFnObj
+	sd text_fn_info
+	setcall text_fn_info fn_text_info()
+	set text_fn_info# false
+	set ptr_log_import_functions# true
+	sd neg_64
+	setcall neg_64 p_neg_is_for_64()
+	set neg_64# false
+	
+	Str preferencescontent#1
+	Data ptrpreferencescontent^preferencescontent
+	Data preferencessize#1
+	Data ptrpreferencessize^preferencessize
+
+	SetCall err file_get_content_ofs(ptrmem,ptrpreferencessize,ptrpreferencescontent,null)
+	call free(ptrmem)
+	If err!=noerr
+		Call safeMessage(err)
+		If err!=noerr
+			setcall err prefextra(preferences,ptrpreferencessize,ptrpreferencescontent)
+			If err!=noerr
+				Call safeMessage(err)
+			endif
+		endif
+	EndIf
+	If err==noerr
+		Data freepreferences#1
+		Set freepreferences preferencescontent
+
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,ptrwarningsbool)
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,ptrlogbool)
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,ptrincludedir)
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,ptrcodeFnObj)
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,text_fn_info)
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,ptr_log_import_functions)
+		call parsepreferences(ptrpreferencescontent,ptrpreferencessize,neg_64)
+
+		Call free(freepreferences)
+	endif
+EndFunction
+#void
--- /dev/null
+++ ocompiler-1/src/files/functions/stack/stack.s
@@ -0,0 +1,154 @@
+
+
+#set(0)/get(1) index
+function ramp_index(data mode,data container)
+	data reg#1
+	data set=0
+	if mode==set
+		data ptrreg^reg
+		const ramppointer^reg
+		call getcontReg(container,ptrreg)
+		data dword=4
+		sub reg dword
+	else
+		return reg
+	endelse
+endfunction
+
+
+#typenumber
+function stackfilter(data nr,data ptrstack)
+	data totalmemvariables=totalmemvariables
+	data numberofvars=numberofvars
+	data false=0
+	data true=1
+	set ptrstack# false
+	if nr>=totalmemvariables
+		if nr<numberofvars
+			sub nr totalmemvariables
+			set ptrstack# true
+		endif
+	endif
+	return nr
+endfunction
+
+
+#p
+function getptrramp()
+	data code#1
+	data ptrcode^code
+	data ptrcodesec%ptrcodesec
+	call getcont(ptrcodesec,ptrcode)
+	data get=1
+	addcall code ramp_index(get)
+	return code
+endfunction
+#ind(before)
+function growramp(data value)
+	data ptrramp#1
+	setcall ptrramp getptrramp()
+	sd ret;set ret ptrramp#
+	subcall ptrramp# stack64_add(value)
+	return ret
+endfunction
+#ind(before)
+function addramp()
+	data dword=4
+	data ramp#1
+	setcall ramp growramp(dword)
+	return ramp
+endfunction
+#ind
+function getramp_ebxrel()
+	data ptrramp#1
+	setcall ptrramp getptrramp()
+	data ramp#1
+	setcall ramp neg(ptrramp#)
+	return ramp
+endfunction
+
+#er
+function entryscope()
+	data container%ptrcodesec
+	sd err
+	#push ebx,push ebp
+	const scope1_start=!;chars scope1={0x53,0x55};const scope1_sz=!-scope1_start
+	const stackinitpush=2*dwsz
+	#mov e(r)bp e(r)sp
+	const scope2_start=!;chars scope2={moveatregthemodrm,0xec};const scope2_sz=!-scope2_start
+	#mov e(r)bx e(r)sp
+	const scope3_start=!;chars scope3={moveatregthemodrm,0xdc};const scope3_sz=!-scope3_start
+	#sub e(r)bx dword
+	const scope4_start=!;chars scope4={0x81,0xc3};const scope4_sz=!-scope4_start
+	data scopestack=0
+	
+	setcall err addtosec(#scope1,(scope1_sz),container);if err!=(noerror);return err;endif
+	setcall err rex_w_if64();if err!=(noerror);return err;endif
+	setcall err addtosec(#scope2,(scope2_sz),container);if err!=(noerror);return err;endif
+	setcall err rex_w_if64();if err!=(noerror);return err;endif
+	setcall err addtosec(#scope3,(scope3_sz),container);if err!=(noerror);return err;endif
+	setcall err rex_w_if64();if err!=(noerror);return err;endif
+	setcall err addtosec(#scope4,(scope4_sz),container);if err!=(noerror);return err;endif
+	setcall err addtosec(#scopestack,(dwsz),container);if err!=(noerror);return err;endif
+	#
+	data set=0;call ramp_index(set,container)
+	return (noerror)
+endfunction
+
+#
+function entryscope_verify_code()
+	data ptrfnavailable%ptrfnavailable
+	data one=1
+	if ptrfnavailable#==one
+		data ptrinnerfunction%globalinnerfunction
+		if ptrinnerfunction#!=one
+			data two=2
+			set ptrfnavailable# two
+			call entryscope()
+		endif
+	endif
+endfunction
+
+
+
+#er
+function addtocodeforstack(data value,data rightstackpointer)
+	data eax=eaxregnumber
+
+	data null=0
+	chars movtostack#1
+	chars *modrm=disp32*tomod|ebxregnumber
+	data rampindex#1
+	data rampvalue#1
+
+	data stack^movtostack
+	data size#1
+	data ptrcodesec%ptrcodesec
+	data noerr=noerror
+	sd err
+
+	if rightstackpointer==null
+		chars movimm=0xc7
+		set movtostack movimm
+		data sizeimm=2+4+4
+		set size sizeimm
+	else
+		setcall err writetake(eax,rightstackpointer)
+		if err!=noerr
+			return err
+		endif
+		chars movreg=moveatmemtheproc
+		set movtostack movreg
+		data sizereg=2+4
+		set size sizereg
+	endelse
+
+	setcall rampindex addramp()
+	setcall rampindex neg(rampindex)
+	set rampvalue value
+	
+	setcall err addtosec(stack,size,ptrcodesec)
+	return err
+endfunction
+
+
--- /dev/null
+++ ocompiler-1/src/files/functions/stack/stack_inits.s
@@ -0,0 +1,31 @@
+
+
+
+function is_stack(data pointer)
+	data mask#1
+	data maskoffset=maskoffset
+	data stackb=stackbit
+	data stack#1
+	
+	set mask pointer
+	add mask maskoffset
+	set stack stackb
+	and stack mask#
+	return stack
+endfunction
+
+
+
+function stack_get_relative(sd location)
+	sd mask
+	data maskoffset=maskoffset
+	data to_relative=tostack_relative
+
+	set mask location
+	add mask maskoffset
+	set mask mask#
+	div mask to_relative
+	data regopcode_mask=regopcode_mask
+	and mask regopcode_mask
+	return mask
+endfunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/values/numbersandconstants.s
@@ -0,0 +1,304 @@
+
+
+#bool numeric
+Function numeric(chars c)
+	Chars zero={asciizero}
+	Chars nine={asciinine}
+	Data false=FALSE
+	Data true=TRUE
+	If c<zero
+		Return false
+	ElseIf c>nine
+		Return false
+	EndElseIf
+	Return true
+EndFunction
+
+#bool
+Function memtoint(str content,data size,data outvalue,data minusbool)
+	#if size==0 not required in the program, it already comes at least 1
+	
+	Data value#1
+	Data number#1
+	
+	data multx#1
+	Set value 0
+	set multx 1
+	Add content size
+	While size!=0
+		Dec content;Dec size
+		
+		Data bool#1
+		Chars byte#1
+		Set byte content#
+		SetCall bool numeric(byte)
+		If bool==(FALSE)
+			Return (FALSE)
+		EndIf
+		Sub byte (asciizero)
+		Set number byte
+		
+		const bil_1=1000*1000*1000
+		const bil_2=2*bil_1
+		const max_int=0x80*0x100*0x100*0x100
+		const max_int_bil_2_rest=max_int-bil_2
+		if multx==(bil_1)
+			if size!=0
+				#(...)x xxx xxx xxx
+				while size!=0
+					Dec content;Dec size
+					if content#!=(asciizero)
+						return (FALSE)
+					endif
+				endwhile
+			endif
+			if number>2
+				#3 xxx xxx xxx-9 xxx xxx xxx
+				return (FALSE)
+			elseif number==2
+				if value>(max_int_bil_2_rest)
+					#2 147 483 649-2 999 999 999
+					return (FALSE)
+				elseif value==(max_int_bil_2_rest)
+					if minusbool==(FALSE)
+						#2 147 483 648 is the first positive overflow
+						return (FALSE)
+					endif
+				endelseif
+			endelseif
+		endif
+		
+		mult number multx;mult multx 10
+		Add value number
+	EndWhile
+	Set outvalue# value
+	Return (TRUE)
+EndFunction
+
+const nothex_value=-1
+
+#out -1 or the converted number
+Function hexnr(chars byte)
+	Chars Asciizero={asciizero}
+	Chars Asciinine={asciinine}
+	Chars AsciiA={asciiA}
+	Chars AsciiF={asciiF}
+	Chars Asciia={asciia}
+	Chars Asciif={asciif}
+	Chars afternine={10}
+	If byte<Asciizero
+		Return (nothex_value)
+	ElseIf byte<=Asciinine
+		Sub byte Asciizero
+	ElseIf byte<AsciiA
+		Return (nothex_value)
+	ElseIf byte<=AsciiF
+		Sub byte AsciiA
+		Add byte afternine
+	ElseIf byte<Asciia
+		Return (nothex_value)
+	ElseIf byte<=Asciif
+		Sub byte Asciia
+		Add byte afternine
+	Else
+		Return (nothex_value)
+	EndElse
+	Return byte
+EndFunction
+
+#bool
+Function memtohex(str content,data size,data outvalue)
+	Data initialval=0
+	Data initiallimit=3
+	Data val#1
+	Data limit#1
+	Data false=FALSE
+	Data true=TRUE
+	Data seven=7
+
+	Set val initialval
+	Set limit initiallimit
+	
+	If size<limit
+		Return false
+	EndIf
+	Add limit seven
+	If limit<size
+		Return false
+	EndIf
+
+	Str pc^content
+	Data ps^size
+	Data bool=0
+	Data zero=0
+	Chars byte#1
+	Data nr#1
+	Data initialmultp=1
+	Data multp#1
+	
+	Set multp initialmultp
+	SetCall bool stratmem(pc,ps,"0X")
+	If bool==false
+		Return false
+	EndIf
+	Add content size
+	While size!=zero
+		Dec content
+		Dec size
+		Set byte content#
+		SetCall nr hexnr(byte)
+		If nr==(nothex_value)
+			Return false
+		EndIf
+		Mult nr multp
+		Add val nr
+		Data hextimes=16
+		Mult multp hextimes
+	EndWhile
+	Set outvalue# val
+	Return true
+EndFunction
+
+#error
+function numbertoint(str content,data size,data outval,data minusbool)
+	Data bool#1
+	#test to see if the ! sign is present that means the current data cursor
+	chars data_cursor=asciiExclamationmark
+	if content#==data_cursor
+		setcall outval# get_img_vdata_dataReg()
+		if size!=1
+			str er="The text after the data cursor sign isn't recognized."
+			return er
+		endif
+		return (noerror)
+	#test for : sign (the size of a stack value, 4B on 32-bits, 8B on 64-bits)
+	chars int_size=asciiColon
+	elseif content#==int_size
+		if size!=1;return "The text after the size of an integer sign isn't recognized.";endif
+		sd b;setcall b is_for_64()
+		if b==(FALSE);set outval# (dwsz)
+		else;set outval# (qwsz);endelse
+		return (noerror)
+	endelseif
+	#decimal or hex number
+	SetCall bool memtoint(content,size,outval,minusbool)
+	If bool==0
+		SetCall bool memtohex(content,size,outval)
+		If bool==0
+			Chars _intvalerr="Integer(dec/hex) value not recognized."
+			Str intvallerr^_intvalerr
+			Return intvallerr
+		EndIf
+	EndIf
+	return (noerror)
+endfunction
+
+#err pointer
+Function numbersconstants(str content,data size,data outval)
+	Str intconsterr="Integer(dec/hex) or constant value expected."
+	If size<=0
+		Return intconsterr
+	EndIf
+	chars not=asciiequiv
+	sd notbool=FALSE
+	if content#==not
+		set notbool (TRUE)
+		inc content
+		dec size
+		If size<=0
+			Return intconsterr
+		EndIf
+	endif
+	sd minusbool=FALSE
+	if content#==(asciiminus)
+		set minusbool (TRUE)
+		inc content
+		dec size
+		If size<=0
+			Return intconsterr
+		EndIf
+	endif
+	sd bool
+	setcall bool is_variable_char_not_numeric(content#)
+	If bool==(FALSE)
+		sd err
+		setcall err numbertoint(content,size,outval,minusbool)
+	Else
+		Data constr%ptrconstants
+		Data pointer#1
+		SetCall pointer vars(content,size,constr)
+		If pointer==0
+			Chars unconst="Undefined constant name."
+			Str ptruncost^unconst
+			Return ptruncost
+		EndIf
+		Set outval# pointer#
+		set err (noerror)
+	EndElse
+	if err==(noerror)
+		if notbool==(TRUE)
+			not outval#
+		endif
+		if minusbool==(TRUE)
+			mult outval# -1
+		endif
+	endif
+	return err
+EndFunction
+
+#er
+function parenthesis_size(ss content,sd size,sd ptr_sz)
+	sd opens=1
+	data z=0
+	sd mark
+	data noerr=noerror
+	sd last
+	Chars closefnexp="Close parenthesis sign (')') expected."
+	Str closeerr^closefnexp
+	
+	set mark content
+	set last content
+	add last size
+	while content!=last
+		sd er
+		setcall er quotes_forward(#content,last,0)
+		if er!=(noerror)
+			return er
+		endif
+		if content==last
+			return closeerr
+		endif
+		Chars fnbegin="("
+		Chars fnend=")"
+		if content#==fnend
+			dec opens
+			if opens==z
+				sub content mark
+				set ptr_sz# content
+				return noerr
+			endif
+		elseif content#==fnbegin
+			inc opens
+		endelseif
+		inc content
+	endwhile
+	Return closeerr
+endfunction
+#er
+function parenthesis_all_size(sd content,sd size,sd ptr_sz)
+	data noerr=noerror
+	Chars fnbegin="("
+	if content!=fnbegin
+		return noerr
+	endif
+	inc content
+	dec size
+	sd err
+	setcall err parenthesis_size(content,size,ptr_sz)
+	if err!=noerr
+		return err
+	endif
+	data two=2
+	add ptr_sz# two
+	return err
+endfunction
--- /dev/null
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -0,0 +1,216 @@
+
+
+Const addNumber=0
+Const subNumber=1
+Const mulNumber=2
+Const divNumber=3
+Const andNumber=4
+Const orNumber=5
+Const xorNumber=6
+Const powNumber=7
+
+#err pointer
+Function operation(str content,data size,data inoutvalue,data number)
+	Data newitem#1
+	Data ptrnewitem^newitem
+	Data initialnewitem=0
+	Data errptr#1
+	Data noerr=noerror
+
+	Set newitem initialnewitem
+	SetCall errptr numbersconstants(content,size,ptrnewitem)
+	If errptr!=noerr
+		Return errptr
+	EndIf
+
+	Data addnumber=addNumber
+	Data subnumber=subNumber
+	Data mulnumber=mulNumber
+	Data divnumber=divNumber
+	Data andnumber=andNumber
+	Data ornumber=orNumber
+	Data xornumber=xorNumber
+
+	Data currentitem=0
+	Set currentitem inoutvalue#
+	If number==addnumber
+		Add currentitem newitem
+	ElseIf number==subnumber
+		Sub currentitem newitem
+	ElseIf number==mulnumber
+		Mult currentitem newitem
+	ElseIf number==divnumber
+		Data zero=0
+		If newitem==zero
+			Chars zerodiv="Division by 0 error."
+			Str ptrzerodiv^zerodiv
+			Return ptrzerodiv
+		EndIf
+		Div currentitem newitem
+	ElseIf number==andnumber
+		And currentitem newitem
+	ElseIf number==ornumber
+		Or currentitem newitem
+	ElseIf number==xornumber
+		Xor currentitem newitem
+	Else
+		if newitem<0
+			if currentitem==0
+				#is 0 power -n
+				Return ptrzerodiv
+			elseif currentitem==1
+				#is 1/(1 power n)
+			else
+				#is 1/(>1)
+				set currentitem 0
+			endelse
+		elseif newitem==0
+			set currentitem 1
+		else
+			sd item
+			set item currentitem
+			while newitem!=1
+				mult currentitem item
+				dec newitem
+			endwhile
+		endelse
+	EndElse
+
+	Set inoutvalue# currentitem
+	Return noerr
+EndFunction
+
+#bool
+Function signop(chars byte,data outval)
+	Chars plus={asciiplus}
+	Chars minus={asciiminus}
+
+	Chars mult={asciiast}
+	Chars div={asciislash}
+	
+	Chars and={asciiand}
+	Chars or={asciivbar}
+	Chars xor={asciicirc}
+	
+	Chars pow="$"
+
+	Data addnumber=addNumber
+	Data subnumber=subNumber
+	Data mulnumber=mulNumber
+	Data divnumber=divNumber
+	Data andnumber=andNumber
+	Data ornumber=orNumber
+	Data xornumber=xorNumber
+	Data pownumber=powNumber
+
+	Data false=FALSE
+	Data true=TRUE
+
+	If byte==plus
+		Set outval# addnumber
+		Return true
+	ElseIf byte==minus
+		Set outval# subnumber
+		Return true
+	ElseIf byte==mult
+		Set outval# mulnumber
+		Return true
+	ElseIf byte==div
+		Set outval# divnumber
+		Return true
+	ElseIf byte==and
+		Set outval# andnumber
+		Return true
+	ElseIf byte==or
+		Set outval# ornumber
+		Return true
+	ElseIf byte==xor
+		Set outval# xornumber
+		Return true
+	ElseIf byte==pow
+		Set outval# pownumber
+		Return true
+	EndElseIf
+	
+	Return false
+EndFunction
+
+#err
+Function oneoperation(data ptrcontent,str initial,str content,data val,data op)
+	Data size#1
+	Data errptr#1
+	Data noerr=noerror
+
+	Set size content
+	Sub size initial
+
+	SetCall errptr operation(initial,size,val,op)
+	If errptr!=noerr
+		Set ptrcontent# initial
+		Return errptr
+	EndIf
+	Return noerr
+EndFunction
+
+#err pointer
+Function parseoperations(data ptrcontent,data ptrsize,data sz,data outvalue)
+	Str content#1
+	Str initial#1
+	Data number#1
+	Data val#1
+	Data ptrval^val
+	Data zero=0
+	Data errptr#1
+	Data noerr=noerror
+
+	Set content ptrcontent#
+
+	Set initial content
+	Set number zero
+	Set val zero
+
+	Data bool#1
+	Data false=FALSE
+	Data true=TRUE
+	Data nr#1
+	Data pnr^nr
+	Chars byte#1
+	Data find#1
+	
+	Data opsize#1
+	Set opsize sz
+
+	While sz!=zero
+		Set bool false
+		Set byte content#
+		SetCall find signop(byte,pnr)
+		If find==true
+			If initial!=content
+				SetCall errptr oneoperation(ptrcontent,initial,content,ptrval,number)
+				If errptr!=noerr
+					Return errptr
+				EndIf
+				Set bool true
+				Set number nr
+			EndIf
+		EndIf
+		Inc content
+		Dec sz
+		If bool==true
+			Data p_content^content
+			Data p_sz^sz
+			Call spaces(p_content,p_sz)
+
+			Set initial content
+		EndIf
+	EndWhile
+
+	SetCall errptr oneoperation(ptrcontent,initial,content,ptrval,number)
+	If errptr!=noerr
+		Return errptr
+	EndIf
+	Set outvalue# val
+
+	Call advancecursors(ptrcontent,ptrsize,opsize)
+	Return noerr
+EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/headers.h
@@ -0,0 +1,12 @@
+
+
+
+#headers
+Include "./headers/ascii.h"
+Include "./headers/commons.h"
+Include "./headers/header.h"
+Include "./headers/asm.h"
+Include "./headers/pe_format.h"
+Include "./headers/elf_format.h"
+Include "./headers/cond.h"
+
--- /dev/null
+++ ocompiler-1/src/files/headers/ascii.h
@@ -0,0 +1,29 @@
+
+
+#some ascii Constants commonly used
+Const asciiExclamationmark=0x21
+Const asciiNumber=0x23
+Const asciiand=0x26
+Const asciiparenthesisstart=0x28
+Const asciiast=0x2A
+Const asciiplus=0x2B
+Const asciiminus=0x2D
+Const asciislash=0x2F
+Const asciizero=0x30
+Const asciinine=0x39
+Const asciiColon=0x3A
+Const asciiSemicolon=0x3B
+Const asciiaround=0x40
+Const asciiA=0x41
+Const asciiE=0x45
+Const asciiF=0x46
+Const asciiL=0x4c
+Const asciiZ=0x5A
+Const asciibs=0x5C
+Const asciiunderscore=0x5F
+Const asciia=0x61
+Const asciif=0x66
+Const asciiz=0x7A
+Const asciicirc=0x5E
+Const asciivbar=0x7C
+Const asciiequiv=0x7E
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/headers/asm.h
@@ -0,0 +1,47 @@
+
+#movers
+Const tomod=0x40
+Const toregopcode=8
+
+#REX Prefix
+const REX_default=2$6
+const REX_W=2$3
+const REX_R=2$2
+#const REX_X=2$1
+#const REX_B=2$0
+const REX_Operand_64=REX_default|REX_W
+const REX_R8_15=REX_default|REX_W|REX_R
+
+#opcodes
+
+Const retcom=0xc3
+Const atedximm=0xba
+
+Const moveatmemtheproc=0x89
+Const moveatprocthemem=0x8b
+Const moveatregthemodrm=moveatprocthemem
+
+#mod,reg/opcode,r/m
+
+#mods
+Const mod_0=0
+#Const disp8=1
+Const disp32=2
+Const RegReg=3
+
+#regopcodes
+Const noregnumber=-1
+Const eaxregnumber=0
+Const ecxregnumber=1
+Const edxregnumber=2
+Const ebxregnumber=3
+Const espregnumber=4
+Const ebpregnumber=5
+Const ahregnumber=4
+Const regopcode_mask=0x7
+#mixt
+Const Notregopcode=2
+#
+const bt_reg_imm8=4*toregopcode|0xc0
+
+#rms
--- /dev/null
+++ ocompiler-1/src/files/headers/commons.h
@@ -0,0 +1,60 @@
+
+#Constants
+Const TRUE=1
+Const FALSE=0
+Const NULL=0
+
+#files
+ #open
+Const _O_RDONLY=0
+
+Const openno=-1
+Const _O_WRONLY=0x0001
+Const _O_TRUNC=0x0200
+
+ #seek
+Const SEEK_SET=0
+Const SEEK_CUR=1
+Const SEEK_END=2
+ #write
+Const writeno=-1
+ #chdir
+Const chdirok=0
+data chdirok=chdirok
+
+#more Constants
+Const bsz=1
+Const wsz=2
+Const dwsz=4
+Const qwsz=8
+Const A_from_AZ=asciiA
+Const Z_from_AZ=asciiZ
+Const a_from_az=asciia
+Const z_from_az=asciiz
+Const az_to_AZ=a_from_az-A_from_AZ
+
+
+#Integers
+Data null=NULL
+Data true=TRUE
+Data false=FALSE
+Data flag_max_path=flag_MAX_PATH
+
+#more values
+Const noerror=0
+Const FORWARD=1
+Const BACKWARD=-1
+Const not_used=0
+Const void=0
+
+Data bytesize=bsz
+Data wordsize=wsz
+Data dwordsize=dwsz
+Data zero=0
+Data one=1
+data two=2
+Data negative=-1
+Data i#1
+Chars dot="."
+
+const sym_with_size=dwsz
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/headers/cond.h
@@ -0,0 +1,20 @@
+
+
+Const ifinscribe=-1
+Const ifnumber=0
+Const elsenumber=1
+Const whilenumber=2
+
+Const condmiscs=whilenumber+1
+
+Const elseifnumber=condmiscs+0
+
+Const condends=elseifnumber+1
+
+Const endifnumber=condends+ifnumber
+Const endelsenumber=condends+elsenumber
+Const endwhilenumber=condends+whilenumber
+
+Const endelseifnumber=condends+elseifnumber
+
+Const nocondnumber=-1
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/headers/elf_format.h
@@ -0,0 +1,245 @@
+
+
+#sectionalignment
+Const elf_startofdata=0x200
+Data elf_startofdata=elf_startofdata
+Const elf_imagebase=0x8048000
+
+
+const ELFMAG0=0x7f
+const ELFMAG1=asciiE
+const ELFMAG2=asciiL
+const ELFMAG3=asciiF
+
+chars elf32_ehd_e_ident_sign={ELFMAG0,ELFMAG1,ELFMAG2,ELFMAG3}
+
+#32-bit objects
+const ELFCLASS32=1
+#const ELFCLASS64=2
+chars *elf32_ehd_e_ident_class={ELFCLASS32}
+
+#2's complement, little endian
+const ELFDATA2LSB=1
+chars *elf32_ehd_e_ident_data={ELFDATA2LSB}
+
+#Current version
+const EV_CURRENT=1
+chars *elf32_ehd_e_ident_version={EV_CURRENT}
+
+#EI_OSABI
+const ELFOSABI_NONE=0
+chars *elf32_ehd_e_ident_osabi={ELFOSABI_NONE}
+
+#If no values are specified for the EI_OSABI field by the processor supplement or no version values are specified for the ABI determined by a particular value of the EI_OSABI byte, the value 0 shall be used for the EI_ABIVERSION byte; it indicates unspecified.
+const EI_ABIVERSION=0
+chars *elf32_ehd_e_ident_abiversion={EI_ABIVERSION}
+
+#pad to 0x10
+chars *elf32_ehd_e_ident_pad={0,0,0,0,0,0,0}
+
+
+#Object file type
+Chars elf32_ehd_e_type#2
+#Architecture,Intel 80386
+const EM_386=3
+#const EM_X86_64=62
+Chars *elf32_ehd_e_machine={EM_386,0}
+
+data *elf32_ehd_e_version=EV_CURRENT
+#entry point
+data elf32_ehd_e_entry#1
+#Start of program headers
+data elf32_ehd_e_phoff#1
+#Start of section headers
+data elf32_ehd_e_shoff#1
+data *elf32_ehd_e_flags=0
+#Size of this header
+Const elfhdsize=52
+chars *elf32_ehd_e_ehsize={elfhdsize,0}
+#Program header table entry size
+Const elf32_ehd_e_phentsize=32
+chars *elf32_ehd_e_phentsize={elf32_ehd_e_phentsize,0}
+#Program header table entry count
+chars elf32_ehd_e_phnum#2
+#Section header table entry size
+Const elf32_ehd_e_shentsize=40
+chars *elf32_ehd_e_shentsize={elf32_ehd_e_shentsize,0}
+#Section header table entry count
+chars elf32_ehd_e_shnum#2
+#Section header string table index
+chars elf32_ehd_e_shstrndx#2
+
+
+Const elf_fileheaders_start^elf32_ehd_e_ident_sign
+Const elf_fileheaders_lastdata^elf32_ehd_e_shstrndx
+Const elf_fileheaders_end=elf_fileheaders_lastdata+wsz
+Data elf_fileheaders%elf_fileheaders_start
+Data elf_fileheaders_size=elf_fileheaders_end-elf_fileheaders_start
+
+Data ptrelf32_ehd_e_type^elf32_ehd_e_type
+data ptrelf32_ehd_e_phnum^elf32_ehd_e_phnum
+data ptrelf32_ehd_e_shnum^elf32_ehd_e_shnum
+data ptrelf32_ehd_e_shstrndx^elf32_ehd_e_shstrndx
+
+#program headers
+
+const PF_X=1
+const PF_W=2
+const PF_R=4
+const PT_LOAD=1
+
+#Program data section
+const elf_data_voff=elf_imagebase+elf_startofdata
+data elf32_phdr_p_type_data=PT_LOAD
+#Segment file offset
+data elf32_phdr_p_offset_data=elf_startofdata
+#Segment virtual address
+data elf32_phdr_p_vaddr_data=elf_data_voff
+#Segment physical address
+data *elf32_phdr_p_paddr_data=elf_data_voff
+#Segment size in file
+data elf32_phdr_p_filesz_data#1
+#Segment size in memory
+data elf32_phdr_p_memsz_data#1
+#Segment flags
+data *elf32_phdr_p_flags_data=PF_R|PF_W
+#Segment align
+data *elf32_phdr_p_align_data=page_sectionalignment
+
+#Code section
+data *elf32_phdr_p_type_code=PT_LOAD
+#Segment file offset
+data elf32_phdr_p_offset_code#1
+#Segment virtual address
+data elf32_phdr_p_vaddr_code#1
+#Segment physical address
+data elf32_phdr_p_paddr_code#1
+#Segment size in file
+data elf32_phdr_p_filesz_code#1
+#Segment size in memory
+data elf32_phdr_p_memsz_code#1
+#Segment flags
+data *elf32_phdr_p_flags_code=PF_X|PF_R
+#Segment align
+data elf32_phdr_p_align_code=page_sectionalignment
+
+Const elf_progdeffileheaders_start^elf32_phdr_p_type_data
+Const elf_progdeffileheaders_lastdata^elf32_phdr_p_align_code
+Const elf_progdeffileheaders_end=elf_progdeffileheaders_lastdata+dwsz
+Data elf_progdeffileheaders%elf_progdeffileheaders_start
+Data elf_progdeffileheaders_size=elf_progdeffileheaders_end-elf_progdeffileheaders_start
+
+#Imports
+const PT_DYNAMIC=2
+const PT_INTERP=3
+
+#Interpreter section
+data elf32_phdr_p_type_interp=PT_INTERP
+#Segment file offset
+data elf32_phdr_p_offset_interp#1
+#Segment virtual address
+data elf32_phdr_p_vaddr_interp#1
+#Segment physical address
+data elf32_phdr_p_paddr_interp#1
+#Segment size in file
+data elf32_phdr_p_filesz_interp#1
+#Segment size in memory
+data elf32_phdr_p_memsz_interp#1
+#Segment flags
+data *elf32_phdr_p_flags_interp=PF_R
+#Segment align
+data *elf32_phdr_p_align_interp=0x1
+
+#Dynamic section
+data *elf32_phdr_p_type_dyn=PT_DYNAMIC
+#Segment file offset
+data elf32_phdr_p_offset_dyn#1
+#Segment virtual address
+data elf32_phdr_p_vaddr_dyn#1
+#Segment physical address
+data elf32_phdr_p_paddr_dyn#1
+#Segment size in file
+data elf32_phdr_p_filesz_dyn#1
+#Segment size in memory
+data elf32_phdr_p_memsz_dyn#1
+#Segment flags
+data *elf32_phdr_p_flags_dyn=PF_R
+#Segment align
+data *elf32_phdr_p_align_dyn=0x1
+
+#Library section
+data *elf32_phdr_p_type_lib=PT_LOAD
+#Segment file offset
+data elf32_phdr_p_offset_lib#1
+#Segment virtual address
+data elf32_phdr_p_vaddr_lib#1
+#Segment physical address
+data elf32_phdr_p_paddr_lib#1
+#Segment size in file
+data elf32_phdr_p_filesz_lib#1
+#Segment size in memory
+data elf32_phdr_p_memsz_lib#1
+#Segment flags
+data *elf32_phdr_p_flags_lib=PF_R|PF_W
+#Segment align
+data elf32_phdr_p_align_lib=page_sectionalignment
+
+Const elf_importfileheaders^elf32_phdr_p_type_interp
+Const elf_importfileheaders_lastdata^elf32_phdr_p_align_lib
+Const elf_importfileheaders_end=elf_importfileheaders_lastdata+dwsz
+
+Data elf_importfileheaders%elf_importfileheaders
+Data elf_importfileheaders_size=elf_importfileheaders_end-elf_importfileheaders
+
+Chars interpreter="/lib/ld-linux.so.2"
+Str ptrinterpreter^interpreter
+Data interpretersize#1
+
+Data DT_HASH=0x4
+Data elf32_dyn_d_ptr_hash#1
+Data *DT_SYMTAB=6
+Data elf32_dyn_d_ptr_symtab#1
+Data *DT_SYMENT=11
+Const elf32_dyn_d_val_syment=16
+Data elf32_dyn_d_val_syment=elf32_dyn_d_val_syment
+Data *DT_STRTAB=5
+Data elf32_dyn_d_ptr_strtab#1
+Data *DT_STRSZ=10
+Data elf32_dyn_d_val_strsz#1
+Data *DT_REL=17
+Data elf32_dyn_d_ptr_rel#1
+Data *DT_RELSZ=18
+Data elf32_dyn_d_val_relsz#1
+Data *DT_RELENT=19
+Const elf32_dyn_d_val_relent=8
+Data elf32_dyn_d_val_relent=elf32_dyn_d_val_relent
+Data *DT_NULL=0
+Data elf32_dyn_d_val_null=0
+
+Const elf_dynfix_start^DT_HASH
+Const elf_dynfix_lastdata^elf32_dyn_d_val_null
+Const elf_dynfix_end=elf_dynfix_lastdata+dwsz
+Data elf_dynfix_size=elf_dynfix_end-elf_dynfix_start
+
+Data sizeofbucket=1
+Data sizeofchain#1
+Data fakebucket=0
+
+Const elf_hash_start^sizeofbucket
+Const elf_hash_lastdata^fakebucket
+Const elf_hash_end=elf_hash_lastdata+dwsz
+Data elf_hash_minsize=elf_hash_end-elf_hash_start
+
+
+Data sizeofElf32_Dyn=2*dwsz
+
+## import command linked
+Data hash_var_size#1
+Data rel_var_size#1
+Data elf_rel_entries_size#1
+##
+
+
+
+
+
--- /dev/null
+++ ocompiler-1/src/files/headers/header.h
@@ -0,0 +1,312 @@
+
+
+#ref entry start
+#bit offset 0: 1 means referenced
+Const referencebit=0x01
+#bit offset 1: 1 means idata function
+Const idatabitfunction=0x02
+#bit offset 2: 1 means stack variable
+Const stackbit=0x04
+#bit offset 3,4,5: stack ebx/ebp
+#0x8,0x10,0x20
+Const tostack_relative=0x08
+#bit offset 6: is importX
+const x86_64bit=0x40
+#bit offset 7=unused
+const dummy_mask=0
+
+Const maskoffset=dwsz
+Const nameoffset=maskoffset+dwsz
+
+const sizeof_minimumentry=nameoffset+1
+#ref entry end
+
+
+Data errormsg#1
+Data _errormsg^errormsg
+Data noerr=noerror
+
+
+Str path#1
+Const ptrpath^path
+Data fileout#1
+Const ptrfileout^fileout
+Data ptrfileout%ptrfileout
+
+#alloc.o
+Const mainscope=10*0x1000
+Const subscope=2*0x1000
+Const _open_read=_O_RDONLY|flag_O_BINARY
+Const _open_write=_O_WRONLY|flag_O_BINARY|flag_O_CREAT|_O_TRUNC
+Const shortstrsize=16
+Const includesetSz=4*dwsz+shortstrsize
+
+Const containersdataoffset=4
+Const containersdataRegoffset=8
+Const sizeofcontainer=3*dwsz
+#base containers
+Const includesSize=50*includesetSz
+#includesSize
+Data includesMax#1
+Data includes#1
+Data includesReg#1
+Const ptrincludes^includesMax
+
+#subscope
+Data miscbagMax#1
+Data miscbag#1
+Data miscbagReg#1
+Const ptrmiscbag^miscbagMax
+
+Const conditionssize=200*dwsz
+#conditionssize
+Data conditionsloopsMax#1
+Data *conditionsloops#1
+Data *conditionsloopsReg#1
+Const ptrconditionsloops^conditionsloopsMax
+
+Data unresolvedcallsMax=mainscope
+Data unresolvedcalls#1
+Data unresolvedcallsReg#1
+Const ptrunresolvedcalls^unresolvedcallsMax
+
+#variables, constants and functions containers
+Data integerMax#1
+Data *#1
+Data *#1
+Data stringMax#1
+Data *#1
+Data *#1
+Data charsMax#1
+Data *#1
+Data *#1
+Data sdMax#1
+Data *#1
+Data *#1
+Data ssMax#1
+Data *#1
+Data *#1
+
+Data integerfnscopeMax#1
+Data *#1
+Data *#1
+Data stringfnscopeMax#1
+Data *#1
+Data *#1
+Data charsfnscopeMax#1
+Data *#1
+Data *#1
+Data sdfnMax#1
+Data *#1
+Data *#1
+Data ssfnMax#1
+Data *#1
+Data *#1
+
+Const memvariablesnumber=0
+	Const integersnumber=memvariablesnumber+0
+	Const stringsnumber=memvariablesnumber+1
+	Const charsnumber=memvariablesnumber+2
+Const totalmemvariables=charsnumber+1
+	Const stackdatanumber=totalmemvariables+integersnumber
+	Const stackstringnumber=totalmemvariables+stringsnumber
+Const numberofvars=stackstringnumber+1
+#from numberofvars to afterscopes comes inner function local scopes
+Const afterscopes=numberofvars*2
+	Const constantsnumber=afterscopes+0
+	Const functionsnumber=afterscopes+1
+
+Const constantssize=10*mainscope
+#constantssize
+Data constantsMax#1
+Data *constants#1
+Data *constantsReg#1
+Const ptrconstants^constantsMax
+
+Data functionsMax#1
+Data *functions#1
+Data *functionsReg#1
+Const ptrfunctions^functionsMax
+
+Const ptrscopes^integerMax
+
+#file containers
+Const sizeofsecdata=0x1000
+Data datasecMax#1
+Data datasec#1
+Data datasecReg#1
+Const ptrdatasec^datasecMax
+
+Data codesecMax=sizeofsecdata
+Data codesec#1
+Data codesecReg#1
+Const ptrcodesec^codesecMax
+
+#table
+Const sizeofiedataparts=sizeofsecdata/0x10
+Const itablesize=sizeofiedataparts
+Data tableMax#1
+Data table#1
+Data tableReg#1
+Const IMAGE_IMPORT_DESCRIPTORsize=dwsz*5
+Const ptrtable^tableMax
+
+Const iaddressessize=3*sizeofiedataparts
+#addressessize
+Data addressesMax#1
+Data addresses#1
+Data addressesReg#1
+Const ptraddresses^addressesMax
+
+Const sizeofienames=sizeofsecdata-iaddressessize-itablesize
+Const inamessize=sizeofienames
+#namessize
+Data namesMax#1
+Data names#1
+Data namesReg#1
+Const ptrnames^namesMax
+
+Data extraMax#1
+Data extra#1
+Data extraReg#1
+Const ptrextra^extraMax
+
+Data unresLocalMax#1
+Data unresLocal#1
+Data unresLocalReg#1
+Const ptrunresLocal^unresLocalMax
+
+Const containersbegin^includesMax
+Const containersalmostend^unresLocalReg
+Const containersend=containersalmostend+dwsz
+Const containerssize=containersend-containersbegin
+
+chars dummyEntry_data#sizeof_minimumentry
+
+Data dummyEntryMax=sizeof_minimumentry
+Data *dummyEntry^dummyEntry_data
+Data dummyEntryReg#1
+data ptrdummyEntry^dummyEntryMax
+Const ptrdummyEntry^dummyEntryMax
+
+#fileformat#
+#file format variable
+Data fileformat#1
+Const ptrfileformat^fileformat
+Const pe_exec=0
+Const elf_unix=1
+Data pe_exec=pe_exec
+Data elf_unix=elf_unix
+Data formatdefined#1
+
+##section alignment for mem realloc and section padding
+Const page_sectionalignment=0x1000
+Data page_sectionalignment=page_sectionalignment
+Const ptrpage_sectionalignment^page_sectionalignment
+#Const ptrvirtualsectionalignment^virtualsectionalignment
+##imagebase for both unresolved and data
+Data imagebaseoffset#1
+Const ptrimagebaseoffset^imagebaseoffset
+##startofdata for data section
+Data startofdata#1
+Const ptrstartofdata^startofdata
+##imports,locals offset for unresolved calls
+Data virtualimportsoffset#1
+Const ptrvirtualimportsoffset^virtualimportsoffset
+Data virtuallocalsoffset#1
+Const ptrvirtuallocalsoffset^virtuallocalsoffset
+##file headers
+Data fileheaders#1
+Data sizefileheaders#1
+
+Data importfileheaders#1
+Data sizeimportfileheaders#1
+##object at elf
+Data object#1
+Const ptrobject^object
+#fileformat#
+
+
+#functions
+Const callfunction=0
+Const declarefunction=1
+
+
+#more values
+Data ptrdatasec%ptrdatasec
+Data ptrcodesec%ptrcodesec
+Data ptrmiscbag%ptrmiscbag
+Data ptrtable%ptrtable
+Data ptrnames%ptrnames
+Data ptraddresses%ptraddresses
+Data ptrextra%ptrextra
+Data ptrconditionsloops%ptrconditionsloops
+Data ptrnull^null
+
+Data relocbool#1
+Const ptrrelocbool^relocbool
+
+Data allocerrormsg#1
+const ptrallocerrormsg^allocerrormsg
+
+Data _open_write=_open_write
+
+
+Data warningsbool#1
+Const ptrwarningsbool^warningsbool
+
+data logbool#1
+const ptrlogbool^logbool
+data logfile#1
+data ptrlogfile^logfile
+const ptrlogfile^logfile
+
+
+data includedir#1
+const ptrincludedir^includedir
+
+
+const ignorecodeFnObj=0
+const showcodeFnObj=1
+const logcodeFnObj=2
+data codeFnObj#1
+const ptrcodeFnObj^codeFnObj
+
+Data log_import_functions#1
+const ptr_log_import_functions^log_import_functions
+
+
+
+#main alloc error msg
+Data fnavailable#1
+const ptrfnavailable^fnavailable
+
+#entry point address for comparing for functions and entry point rule
+#entry point address is compared at function declare
+Data programentrypoint#1
+const ptrprogramentrypoint^programentrypoint
+
+#getcommand
+Str commandset#1
+Data subtype#1
+Data ptrsubtype^subtype
+
+
+
+
+
+##stack
+#chars movtostack={0xc7,0x85}
+#data rampindex#1
+#data rampvalue#1
+const rampadd_value_off=wsz+dwsz
+
+
+
+data twoparse#1
+const cptr_twoparse^twoparse
+
+
+
+Const not_hexenum=0
+Const hexenum=1
--- /dev/null
+++ ocompiler-1/src/files/headers/pe_format.h
@@ -0,0 +1,117 @@
+
+
+
+
+
+
+#File Structures
+
+Const dossize=0x1e*wsz+dwsz
+Const alldossize=dossize+0x40
+Chars dos_header#dossize
+Const stublength=0x40
+Chars stub#stublength
+
+Chars *coffmagic="PE"
+#IMAGE_FILE_HEADER
+Chars *align={0}
+Chars fileheader#4*wsz+dwsz+dwsz+dwsz
+
+#IMAGE_OPTIONAL_HEADER
+#Standard fields.
+####set later
+Chars Magic#2
+####system linker i think
+Chars *MajorLinkerVersion={1}
+Chars *MinorLinkerVersion={0x45}
+####hard (file pad)
+Data SizeOfCode=0x1000
+Data SizeOfInitializedData=0x2000
+Data *SizeOfUninitializedData=0
+####completed later
+Data AddressOfEntryPoint#1
+####virtual base code section
+Data BaseOfCode=0x3000
+####virtual base data section
+Data *BaseOfData=0x1000
+#NT additional fields.
+Const pe_imagebase=0x00400000
+Data *ImageBase=pe_imagebase
+Data SectionAlignment=page_sectionalignment
+Data FileAlignment=0x200
+Const VersionsSize=6*wsz
+Chars *MajorOperatingSystemVersion={1,0}
+Chars *MinorOperatingSystemVersion={0,0}
+Chars *MajorImageVersion={0,0}
+Chars *MinorImageVersion={0,0}
+Chars *MajorSubsystemVersion={5,0}
+Chars *MinorSubsystemVersion={1,0}
+Data *Win32VersionValue=0
+	#all virtuals(sec pad)
+Data SizeOfImage=0x4000
+	#hard (file align)
+Data SizeOfHeaders#1
+Data *CheckSum=0
+
+#Const IMAGE_SUBSYSTEM_WINDOWS_GUI=2
+Const IMAGE_SUBSYSTEM_WINDOWS_CUI=3
+Chars *Subsystem={IMAGE_SUBSYSTEM_WINDOWS_CUI,0}
+Chars DllCharacteristics#2
+Data *SizeOfStackReserve=0x1000
+Data *SizeOfStackCommit=0x1000
+Data *SizeOfHeapReserve=0x10000
+Data *SizeOfHeapCommit=0x1000
+Data *LoaderFlags=0
+Const IMAGE_NUMBEROF_DIRECTORY_ENTRIES=16
+Data *NumberOfRvaAndSizes=IMAGE_NUMBEROF_DIRECTORY_ENTRIES
+Const img_dir_entry=2
+Const imgdirsInts=img_dir_entry*IMAGE_NUMBEROF_DIRECTORY_ENTRIES
+Data directoryentries#imgdirsInts
+#IMAGE_DATA_DIRECTORY
+	#DWORD   VirtualAddress
+    #DWORD   Size
+Const IMAGE_DIRECTORY_ENTRY_EXPORT=0
+Const IMAGE_DIRECTORY_ENTRY_IMPORT=1
+Const img_dir_entry_sz=img_dir_entry*dwsz
+Const im_d_entry_export_offset=IMAGE_DIRECTORY_ENTRY_EXPORT*img_dir_entry_sz
+Const im_d_entry_import_offset=IMAGE_DIRECTORY_ENTRY_IMPORT*img_dir_entry_sz
+
+#IMAGE_SECTION_HEADERs
+Const IMAGE_SCN_CNT_INITIALIZED_DATA=0x00000040
+Const IMAGE_SCN_MEM_READ=0x40000000
+Const IMAGE_SCN_MEM_WRITE=0x80000000
+Const IMAGE_SCN_CNT_CODE=0x00000020
+Const IMAGE_SCN_MEM_EXECUTE=0x20000000
+
+Chars *datasection=".data"
+#IMAGE_SIZEOF_SHORT_NAME=8
+Chars *alignmenttoEight_data_name={0,0}
+Data dVirtualSize=0x1000
+Const pe_data_offset=0x1000
+Data *dVirtualAddress=pe_data_offset
+Data dSizeOfRawData=0x1000
+Data *dPointerToRawData=0x1000
+#DWORD   PointerToRelocations;
+#DWORD   PointerToLinenumbers;
+#WORD    NumberOfRelocations;
+#WORD    NumberOfLinenumbers;
+Data *moreatdata={0,0,0}
+Data *datasectionCharacteristics=IMAGE_SCN_CNT_INITIALIZED_DATA|IMAGE_SCN_MEM_READ|IMAGE_SCN_MEM_WRITE
+
+Chars *codesection=".code"
+Chars *alignmenttoEight_code_name={0,0}
+Data cVirtualSize#1
+Data cVirtualAddress#1
+Data cSizeOfRawData#1
+Data cPointerToRawData#1
+Data *moreatcode={0,0,0}
+Data codesectionCharacteristics=IMAGE_SCN_CNT_CODE|IMAGE_SCN_MEM_EXECUTE|IMAGE_SCN_MEM_READ
+
+Chars idatasection=".idata"
+Chars *alignmenttoEight_idata_name={0}
+Data *iVirtualSize=0x1000
+Data iVirtualAddress#1
+Data iSizeOfRawData=0x1000
+Data iPointerToRawData#1
+Data *moreatidata={0,0,0}
+Data idatasectionCharacteristics=IMAGE_SCN_CNT_INITIALIZED_DATA|IMAGE_SCN_MEM_READ
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/inits.s
@@ -0,0 +1,136 @@
+
+
+
+
+#fileformat#
+#file format variable
+
+Set fileformat pe_exec
+Set formatdefined 0
+
+#set default imagebase for data
+Data default_imagebase=pe_imagebase
+Set imagebaseoffset default_imagebase
+
+#start of data, here and at format command
+Set startofdata page_sectionalignment
+
+Set object false
+#fileformat#
+
+
+#for function in function rule
+Set innerfunction false
+
+Set programentrypoint zero
+
+#include or not include for applying after command parse
+Set includebool zero
+
+#input path
+Set path zero
+
+#files
+Set fileout negative
+set logfile negative
+
+#error message
+Set errormsg zero
+
+
+#containers initialisations
+Data containersptr%containersbegin
+Data containerssize=containerssize
+
+Call memset(containersptr,null,containerssize)
+
+Data mainscope=mainscope
+Data subscope=subscope
+
+##base containers
+Data includesSize=includesSize
+Data conditionssize=conditionssize
+Set includesMax includesSize
+Set miscbagMax subscope
+Set conditionsloopsMax conditionssize
+Set unresolvedcallsMax mainscope
+
+##variables, constants and functions containers
+Data constantssize=constantssize
+Set integerMax mainscope
+Set stringMax mainscope
+Set charsMax mainscope
+Set sdMax mainscope
+Set ssMax mainscope
+
+Set integerfnscopeMax subscope
+Set stringfnscopeMax subscope
+Set charsfnscopeMax subscope
+Set sdfnMax subscope
+Set ssfnMax subscope
+
+Set constantsMax constantssize
+Set functionsMax mainscope
+
+##file containers
+Data ienamessize=sizeofienames
+
+Set datasecMax page_sectionalignment
+Set codesecMax page_sectionalignment
+
+Data itablesize=sizeofiedataparts
+Data iaddressessize=iaddressessize
+Set tableMax itablesize
+Set addressesMax iaddressessize
+Set namesMax ienamessize
+
+Set extraMax subscope
+
+Set unresLocalMax mainscope
+
+#sort the commands
+Call sortallcommands()
+
+
+#the detailed functions and entry point informations
+#main alloc error msg
+Chars entrystartfile#shortstrsize
+Str ptrentrystartfile^entrystartfile
+Data entrylinenumber#1
+
+Set fnavailable one
+
+Set allocerrormsg null
+
+#implibsstarted for closing at the end and for import parts
+Set implibsstarted false
+
+#fn info text is at preferences
+
+#pref
+sd prefix
+setcall prefix prefix_bool()
+set prefix# 0
+
+set dummyEntryReg 0
+call add_ref_to_sec(ptrdummyEntry,0,(dummy_mask),"",0)
+
+sd var
+setcall var function_in_code()
+set var# 0
+
+#64bit
+#is init , is tested at any import and is set TRUE/FALSE only at elfobj... syntax
+sd p_is_for_64_value;setcall p_is_for_64_value p_is_for_64();set p_is_for_64_value# (FALSE)
+call stack64_op_set_get((TRUE),(FALSE))
+call val64_phase_0()
+
+#afterCall
+data g_e_b_p#1;setcall g_e_b_p global_err_pBool();set g_e_b_p# (FALSE)
+
+#entrylinux bool
+data el_b_p#1;setcall el_b_p entrylinux_bool_p();set el_b_p# (FALSE)
+
+Include "../files/inits/alloc.s"
+
+
--- /dev/null
+++ ocompiler-1/src/files/inits/alloc.s
@@ -0,0 +1,11 @@
+
+
+SetCall path memalloc(flag_max_path)
+If  path==null
+	Call errexit()
+EndIf
+
+SetCall errormsg enumbags(true)
+If errormsg!=noerr
+	Call msgerrexit(errormsg)
+EndIf
--- /dev/null
+++ ocompiler-1/src/linux/files/prefextra.s
@@ -0,0 +1,30 @@
+
+#err
+function prefextra(ss prefpath,sd ptrpreferencessize,sd ptrpreferencescontent)
+	ss homestr="HOME"
+	ss envhome
+	sd err
+	setcall envhome getenv(homestr)
+	if envhome!=(NULL)
+		sd s1;sd s2;sd s3=2
+		setcall s1 strlen(envhome);setcall s2 strlen(prefpath);add s3 s1;add s3 s2
+		sd mem
+		setcall err memoryalloc(s3,#mem)
+		if err==(noerror)
+			call memtomem(mem,envhome,s1)
+			ss p;set p mem;add p s1;set p# (asciislash);inc p
+			call memtomem(p,prefpath,s2);add p s2;set p# (NULL)
+			sd a;setcall a access(mem,(F_OK))
+			if a==0
+				SetCall err file_get_content_ofs(mem,ptrpreferencessize,ptrpreferencescontent,(NULL))
+				call free(mem)
+				return err
+			endif
+			str er="No preferences file found."
+			return er
+		endif
+		return err
+	endif
+	str enverr="Getenv error on HOME."
+	return enverr
+endfunction
--- /dev/null
+++ ocompiler-1/src/linux/files/xcomimports.h
@@ -0,0 +1,22 @@
+
+
+Include "../../files/_/cimports.h"
+
+Import "open" open
+Import "close" close
+Import "lseek" lseek
+Import "read" read
+Import "write" write
+Import "chdir" chdir
+Import "getcwd" getcwd
+
+Import "fprintf" fprintf
+Import "stderr" stderr
+
+Import "getpid" getpid
+Import "fopen" fopen
+Import "fclose" fclose
+Import "getdelim" getdelim
+
+import "getenv" getenv
+import "access" access
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/linux/files/xgetfile.s
@@ -0,0 +1,145 @@
+
+
+
+
+Chars cmdfileformpathdata="/proc/%u/cmdline"
+Str cmdfilepathform^cmdfileformpathdata
+Chars cmdfilepathdata#32
+Str cmdfilepath^cmdfilepathdata
+
+Data pid#1
+SetCall pid getpid()
+
+Call sprintf(cmdfilepath,cmdfilepathform,pid)
+
+Data cmdfile#1
+Data openno=openno
+Chars fopenreaddata="rb"
+Str fopenread^fopenreaddata
+SetCall cmdfile fopen(cmdfilepath,fopenread)
+If cmdfile==openno
+	Chars cmdopenerr="Cannot open command line file."
+	Str ptrcmdopenerr^cmdopenerr
+	Call msgerrexit(ptrcmdopenerr)
+EndIf
+
+Str script#1
+Data argumentssize#1
+
+Data ptrscript^script
+Data ptrargumentssize^argumentssize
+
+Data qwordsize=qwsz
+
+Call memset(ptrscript,zero,qwordsize)
+
+Data getdelimreturn#1
+Data getdelimreturnerr=-1
+
+#returns the argument+nullbyte size
+SetCall getdelimreturn getdelim(ptrscript,ptrargumentssize,null,cmdfile)
+If getdelimreturn==getdelimreturnerr
+	Chars cmdscripterr="Cannot parse to input file name."
+	Str ptrcmdscripterr^cmdscripterr
+	Call msgerrexit(ptrcmdscripterr)
+EndIf
+
+#if the file was executed from the PATH, then the root folder it is searched
+str scriptfullname#1
+set scriptfullname null
+chars slash=asciislash
+data accessresult#1
+data slashtest#1
+
+set accessresult negative
+setcall slashtest valinmem(script,argumentssize,slash)
+if slashtest!=argumentssize
+	set scriptfullname script
+else
+	str envpath#1
+	str pathstr="PATH"
+	setcall envpath getenv(pathstr)
+	if envpath==null
+		str enverr="Getenv error on PATH."
+		call Message(enverr)
+	endif
+	data sizeofpath#1
+	setcall sizeofpath strlen(envpath)
+	while sizeofpath!=zero
+		chars pathdelim=":"
+		data sizeoffolder#1
+		setcall sizeoffolder valinmem(envpath,sizeofpath,pathdelim)
+
+		data sizetocreate#1
+		set sizetocreate sizeoffolder
+		#this one is if '/' needs to be added after the folder
+		inc sizetocreate
+		add sizetocreate argumentssize
+		inc sizetocreate
+		setcall scriptfullname memalloc(sizetocreate)
+		if scriptfullname==null
+			set sizeofpath zero
+		else
+			#do not work on null PATH parts
+			if sizeoffolder!=null
+				str scrpointer#1
+				set scrpointer scriptfullname
+				call memtomem(scrpointer,envpath,sizeoffolder)
+				add scrpointer sizeoffolder
+				dec scrpointer
+
+				chars slashcompare#1
+				set slashcompare scrpointer#
+				inc scrpointer
+				if slashcompare!=slash
+					set scrpointer# slash
+					inc scrpointer
+				endif
+				call memtomem(scrpointer,script,argumentssize)
+				add scrpointer argumentssize
+				set scrpointer# null
+
+				data runaccess=X_OK
+				setcall accessresult access(scriptfullname,runaccess)
+			endif
+			if accessresult==zero
+				#continue with this path to preferences
+				set sizeofpath zero
+				Call free(script)
+				set script scriptfullname
+			else
+				call free(scriptfullname)
+				set scriptfullname null
+				add envpath sizeoffolder
+				sub sizeofpath sizeoffolder
+				if envpath#==pathdelim
+					inc envpath
+					dec sizeofpath
+				endif
+			endelse
+		endelse
+	endwhile
+endelse
+
+if scriptfullname==false
+	str patherr="Pathfind error."
+	call Message(patherr)
+else
+	call setpreferences(scriptfullname)
+endelse
+
+Call free(script)
+
+Data ptrpath%ptrpath
+Set argumentssize flag_max_path
+SetCall getdelimreturn getdelim(ptrpath,ptrargumentssize,null,cmdfile)
+
+If getdelimreturn==getdelimreturnerr
+	Chars cmdnoinput="Enter the input file. O Compiler - usage: o \"filename.o\""
+	Str ptrcmdnoinput^cmdnoinput
+	Call msgerrexit(ptrcmdnoinput)
+EndIf
+
+Call fclose(cmdfile)
+
+
--- /dev/null
+++ ocompiler-1/src/linux/files/xheaders.h
@@ -0,0 +1,17 @@
+
+
+
+
+Const PATH_MAX=4096
+
+Const flag_O_BINARY=0
+Const flag_MAX_PATH=PATH_MAX
+
+Const flag_O_CREAT=0x0040
+const S_IRWXU=0x1C0
+const S_IRGRP=0x20;const S_IXGRP=0x8
+const S_IROTH=0x4;const S_IXOTH=0x1
+Const pmode_mode=S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH
+
+Const F_OK=0
+Const X_OK=1
--- /dev/null
+++ ocompiler-1/src/linux/files/ximports.h
@@ -0,0 +1,8 @@
+
+
+
+
+Library "libc.so.6"
+
+Include "./xcomimports.h"
+
--- /dev/null
+++ ocompiler-1/src/linux/head.h
@@ -0,0 +1,9 @@
+
+
+#headers
+Include "./files/xheaders.h"
+Include "../files/headers.h"
+
+#functions
+include "./files/prefextra.s"
+Include "../files/functions.s"
--- /dev/null
+++ ocompiler-1/src/linux/o.s
@@ -0,0 +1,26 @@
+
+#linux elf exec
+
+Format Elf
+
+Include "./files/ximports.h"
+
+Function Message(str text)
+	data stderrorobject_init^^stderr
+	data stderrorobject#1
+
+	set stderrorobject stderrorobject_init#
+	set stderrorobject stderrorobject#
+
+	Chars visiblemessagedata={0x0a,0}
+	Str visiblemessage^visiblemessagedata
+
+	Call fprintf(stderrorobject,visiblemessage)
+	Call fprintf(stderrorobject,text)
+	Call fprintf(stderrorobject,visiblemessage)
+EndFunction
+
+Include "./head.h"
+
+Include "./text.s"
+
--- /dev/null
+++ ocompiler-1/src/linux/obj.s
@@ -0,0 +1,26 @@
+
+#linux elf rel format
+
+Format ElfObj
+
+Include "./files/xcomimports.h"
+
+Function Message(str text)
+	data stderrorobject_init^stderr
+	data stderrorobject#1
+	set stderrorobject stderrorobject_init#
+
+	Chars visiblemessagedata={0x0a,0}
+	Str visiblemessage^visiblemessagedata
+
+	Call fprintf(stderrorobject,visiblemessage)
+	Call fprintf(stderrorobject,text)
+	Call fprintf(stderrorobject,visiblemessage)
+EndFunction
+
+Include "./head.h"
+
+Entry _start()
+	Include "./text.s"
+
+
--- /dev/null
+++ ocompiler-1/src/linux/text.s
@@ -0,0 +1,10 @@
+
+
+#main
+Include "../files/inits.s"
+
+Include "./files/xgetfile.s"
+
+Include "../files/actions.s"
+
+Exit zero
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/prefextra.s
@@ -0,0 +1,4 @@
+
+function prefextra(ss *file,sd *ptrpreferencessize,sd *ptrpreferencescontent)
+	return (noerror)
+endfunction
--- /dev/null
+++ ocompiler-1/src/windows/files/winend.s
@@ -0,0 +1,24 @@
+
+
+
+If openfilenamemethod==true
+	Data timeatend#1
+	SetCall timeatend GetTickCount()
+	Sub timeatend timeatbegin
+	Data MillisecperSec=1000
+	Data seconds#1
+	Set seconds timeatend
+	Div seconds MillisecperSec
+	Data SectoMil#1
+	Set SectoMil seconds
+	Mult SectoMil MillisecperSec
+	Sub timeatend SectoMil
+	Const sizeofouttime=100
+	Chars outtime#sizeofouttime
+	Str ptrouttime^outtime
+	Chars outtimeformat="Done. %u.%u seconds"
+	Str ptrouttimeformat^outtimeformat
+
+	Call sprintf(ptrouttime,ptrouttimeformat,seconds,timeatend)
+	Call MessageBox(null,ptrouttime,ptrocompiler,null)
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/wingetfile.s
@@ -0,0 +1,29 @@
+
+
+data ptrmem#1
+setcall ptrmem memalloc(flag_max_path)
+if ptrmem!=null
+	data sizep#1
+	setcall sizep GetModuleFileName(null,ptrmem,flag_max_path)
+	if sizep==null
+		str getmoderr="GetModuleFileName error."
+		call Message(getmoderr)
+	else
+		call setpreferences(ptrmem)
+	endelse
+	call free(ptrmem)
+endif
+
+
+Data commandchar#1
+Set path# null
+Include "./wingetfile/getfilefromcommand.s"
+
+Set commandchar path#
+If commandchar==null
+	#open file name
+	Include "./wingetfile/getfilefromopenfilename.s"
+	Data timeatbegin#1
+	SetCall timeatbegin GetTickCount()
+	Set openfilenamemethod true
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/wingetfile/getfilefromcommand.s
@@ -0,0 +1,57 @@
+
+
+Str commandname#1
+Data commnamesize#1
+Data ptrcommandname^commandname
+Data ptrcommnamesize^commnamesize
+
+SetCall commandname GetCommandName()
+
+SetCall commnamesize strlen(commandname)
+If commnamesize!=zero
+	Call spaces(ptrcommandname,ptrcommnamesize)
+	If commnamesize!=zero
+		Chars quotation="\""
+		Chars space=" "
+		Data launchsize#1
+		Set commandchar commandname#
+		If commandchar==quotation
+			Call stepcursors(ptrcommandname,ptrcommnamesize)
+			SetCall launchsize valinmem(commandname,commnamesize,quotation)
+		Else
+			SetCall launchsize valinmem(commandname,commnamesize,space)
+		EndElse
+		
+#
+		
+		Add commandname launchsize
+		Sub commnamesize launchsize
+		If commnamesize!=zero
+			Set commandchar commandname#
+			If commandchar==quotation
+				Call stepcursors(ptrcommandname,ptrcommnamesize)
+			EndIf
+			Call spaces(ptrcommandname,ptrcommnamesize)
+			If commnamesize!=zero
+				Data sizeofpathin#1
+				#
+				Set commandchar commandname#
+				If commandchar==quotation
+					Call stepcursors(ptrcommandname,ptrcommnamesize)
+					SetCall sizeofpathin valinmem(commandname,commnamesize,quotation)
+				Else
+					set sizeofpathin commnamesize
+				EndElse
+				If sizeofpathin!=zero
+					Data maximumallowed=flag_MAX_PATH-1
+					If sizeofpathin<=maximumallowed
+						Call memtomem(path,commandname,sizeofpathin)
+						Set commandname path
+						Add commandname sizeofpathin
+						Set commandname# null
+					EndIf
+				EndIf
+			EndIf
+		EndIf
+	EndIf
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/wingetfile/getfilefromopenfilename.s
@@ -0,0 +1,60 @@
+
+
+#OPENFILENAME
+Const OFN_FILEMUSTEXIST=0x1000
+Const OFN_PATHMUSTEXIST=0x0800
+
+Const ofnFlags=OFN_FILEMUSTEXIST|OFN_PATHMUSTEXIST
+
+Str ofnfiltermemvalue#1
+
+Include "./getfilefromopenfilename/lpstrFilter.s"
+
+Data ofnlStructSize=0x58
+Data *ofnhwndOwner=0
+Data *ofnhInstance=0
+Str ofnfiltermem#1
+Set ofnfiltermem ofnfiltermemvalue
+
+Data *ofnlpstrCustomFilter=0
+Data *ofnnMaxCustFilter=0
+Data *ofnnFilterIndex=0
+Str ofnlpstrFile=0
+Set ofnlpstrFile path
+
+Data ofnnMaxFile#1
+Set ofnnMaxFile flag_max_path
+Data *ofnlpstrFileTitle=0
+Data *ofnnMaxFileTitle=0
+Data *ofnlpstrInitialDir=0
+
+Data *ofnlpstrTitle=0
+Data *ofnFlags=ofnFlags
+Data *ofnnFileOffset=0
+Data *ofnnFileExtension=0
+Data *ofnlpstrDefExt=0
+
+Data *ofnlCustData=0
+Data *ofnlpfnHook=0
+Data *ofnlpTemplateName=0
+#if (_WIN32_WINNT >= 0x0500)
+Data *ofnpvReserved=0
+
+Data *ofndwReserved=0
+Data *ofnFlagsEx=0
+#endif
+
+Data OFNfile^ofnlStructSize
+Data openfilenameresult#1
+SetCall openfilenameresult GetOpenFileName(OFNfile)
+
+Call free(ofnfiltermem)
+
+If openfilenameresult==zero
+	Chars ofnstop="No file selected or an error occurs."
+	Str ptrofnstop^ofnstop
+	Chars ocompiler="O Compiler"
+	Str ptrocompiler^ocompiler
+	Call MessageBox(null,ptrofnstop,ptrocompiler,null)
+	Call errexit()
+EndIf
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/wingetfile/getfilefromopenfilename/lpstrFilter.s
@@ -0,0 +1,37 @@
+
+
+Chars allfiles="All Files (*.*)"
+Str ptrallfiles^allfiles
+Chars filter2="*.*"
+Str ptrfilter2^filter2
+chars nullstr=""
+
+Data ofnfiltersize#1
+Data str1sz#1
+Data filter2sz#1
+
+SetCall str1sz strlen(ptrallfiles)
+SetCall filter2sz strlen(ptrfilter2)
+Set ofnfiltersize str1sz
+Add ofnfiltersize bytesize
+Add ofnfiltersize filter2sz
+Add ofnfiltersize bytesize
+Add ofnfiltersize bytesize
+SetCall ofnfiltermemvalue memalloc(ofnfiltersize)
+If ofnfiltermemvalue==null
+	Call errexit()
+EndIf
+Str cursor#1
+Set cursor ofnfiltermemvalue
+Set cursor# nullstr
+Call strcat(cursor,ptrallfiles)
+Add cursor str1sz
+Set cursor# nullstr
+Add cursor bytesize
+Set cursor# nullstr
+Call strcat(cursor,ptrfilter2)
+Add cursor filter2sz
+Set cursor# nullstr
+Add cursor bytesize
+Set cursor# nullstr
+
--- /dev/null
+++ ocompiler-1/src/windows/files/winheaders.h
@@ -0,0 +1,9 @@
+
+
+
+Const flag_O_BINARY=0x8000
+Const flag_MAX_PATH=260
+
+Const flag_O_CREAT=0x0100
+const _S_IREAD=0x100;const _S_IWRITE=0x80
+Const pmode_mode=_S_IREAD|_S_IWRITE
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/winimports.h
@@ -0,0 +1,24 @@
+Library "msvcrt.dll"
+
+Include "../../files/_/cimports.h"
+
+Import "_open" open
+Import "_close" close
+Import "_read" read
+Import "_write" write
+Import "_chdir" chdir
+Import "_getcwd" getcwd
+
+Import "_lseek" lseek
+Import "strcat" strcat
+
+Library "kernel32.dll"
+Import "GetCommandLineA" GetCommandName
+Import "GetTickCount" GetTickCount
+Import "GetModuleFileNameA" GetModuleFileName
+
+Library "user32.dll"
+Import "MessageBoxA" MessageBox
+
+Library "comdlg32.dll"
+Import "GetOpenFileNameA" GetOpenFileName
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/winobj64imports.h
@@ -0,0 +1,30 @@
+
+
+
+Importx "realloc" realloc
+Importx "free" free
+Importx "sprintf" sprintf
+Importx "memcpy" memtomem
+Importx "memset" memset
+Importx "exit" exit
+
+Importx "_open" open
+Importx "_close" close
+Importx "_read" read
+Importx "_write" write
+Importx "_chdir" chdir
+Importx "_getcwd" getcwd
+
+Importx "_lseek" lseek
+Importx "strcat" strcat
+
+#kernel32
+Importx "GetCommandLineA" GetCommandName
+Importx "GetTickCount" GetTickCount
+Importx "GetModuleFileNameA" GetModuleFileName
+
+#user32
+Importx "MessageBoxA" MessageBox
+
+#comdlg32
+Importx "GetOpenFileNameA" GetOpenFileName
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/files/winobjimports.h
@@ -0,0 +1,24 @@
+
+
+include "../../files/_/cimports.h"
+
+Import "_open" open
+Import "_close" close
+Import "_read" read
+Import "_write" write
+Import "_chdir" chdir
+Import "_getcwd" getcwd
+
+Import "_lseek" lseek
+Import "strcat" strcat
+
+#kernel32
+Import "GetCommandLineA" GetCommandName
+Import "GetTickCount" GetTickCount
+Import "GetModuleFileNameA" GetModuleFileName
+
+#user32
+Import "MessageBoxA" MessageBox
+
+#comdlg32
+Import "GetOpenFileNameA" GetOpenFileName
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/head.h
@@ -0,0 +1,13 @@
+
+
+#headers
+Include "./files/winheaders.h"
+Include "../files/headers.h"
+
+#functions
+include "./files/prefextra.s"
+Function Message(str text)
+	Data null=NULL
+	Call MessageBox(null,text,null,null)
+EndFunction
+Include "../files/functions.s"
--- /dev/null
+++ ocompiler-1/src/windows/o.s
@@ -0,0 +1,12 @@
+
+
+#windows exe build
+
+Format Exe
+
+Include "./files/winimports.h"
+
+Include "./head.h"
+
+Include "./text.s"
+
--- /dev/null
+++ ocompiler-1/src/windows/obj.s
@@ -0,0 +1,5 @@
+
+Include "./head.h"
+
+Entry _start()
+	Include "./text.s"
--- /dev/null
+++ ocompiler-1/src/windows/obj32.s
@@ -0,0 +1,8 @@
+
+
+#windows elf rel format
+
+Format ElfObj
+
+Include "./files/winobjimports.h"
+Include "./obj.s"
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/obj32_64code.s
@@ -0,0 +1,7 @@
+
+#windows elf rel format, with 64 code
+
+Format ElfObj64Microsoft
+
+Include "./files/winobj64imports.h"
+Include "./obj.s"
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/windows/text.s
@@ -0,0 +1,15 @@
+
+
+#main
+
+Include "../files/inits.s"
+
+Data openfilenamemethod#1
+Set openfilenamemethod false
+Include "./files/wingetfile.s"
+
+Include "../files/actions.s"
+
+Include "./files/winend.s"
+
+Call exit(zero)
\ No newline at end of file
