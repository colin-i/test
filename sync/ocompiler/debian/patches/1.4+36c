Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-4+36c) xenial; urgency=medium
 .
   * version dot
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-06-29

--- /dev/null
+++ ocompiler-1/.github/workflows/appimage.yml
@@ -0,0 +1,160 @@
+
+#name: appimage
+
+on:
+ # Triggers the workflow on push or pull request events but only for the main branch
+ #push:
+ # branches: [ main ]
+ #pull_request:
+ # branches: [ main ]
+ # Allows you to run this workflow manually from the Actions tab
+ workflow_dispatch:
+  inputs:
+   ppa:
+    description: "ppa sufix"
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ build:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-18.04
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   - uses: actions/checkout@v3
+   #Runs a set of commands using the runners shell
+   - name: Run a multi-line script
+     run: |
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      name2=OCompiler
+      #
+      mkdir -p AppDir
+      file=runtime
+      arch_ai=-x86_64
+      archfile=${file}${arch_ai}
+      kitpart () {
+       #https://github.com/AppImage/pkg2appimage
+       urlpart=`wget -q https://github.com/AppImage/AppImageKit/releases/latest -O - | grep "${archfile}" | head -n 1 | cut -d '"' -f 2`
+      }
+      if [ ! -e "${file}" ]; then
+       kitpart
+       #"pkg2appimage-.*-x86_64.AppImage"
+       wget -c https://github.com/${urlpart}
+       mv ${archfile} ${file}
+       chmod a+x ${file}
+      fi
+      dist=`cat debian/changelog | head -1 | grep -Poe "[^ ]*(?=;)"`
+      if [ ! -e "${name}.deb" ]; then
+       arh=i386
+       version=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
+       if [ ! -e "lp.py" ]; then
+        wget -q https://raw.githubusercontent.com/colin-i/test/master/lp.py
+        sudo apt install python3-launchpadlib
+       fi
+       OUTPUT=$(python3 lp.py ppa${{ github.event.inputs.ppa }} ${dist} ${arh} ${name} ${version})
+       wget ${OUTPUT}/+files/${name}_${version}_${arh}.deb -O ${name}.deb
+       dpkg -x ${name}.deb AppDir
+      fi
+      pkg=libc6-i386
+      maindeb=${pkg}.deb
+      if [ ! -e "${maindeb}" ]; then
+       src=ro.archive.ubuntu.com
+       inter=Packages
+       if [ ! -e "${inter}" ]; then
+        wget http://${src}/ubuntu/dists/${dist}/main/binary-amd64/${inter}.xz
+        xz -d ${inter}.xz
+       fi
+       debfilename=`grep "^Filename.*/${pkg}_" ${inter} | tail -1 | cut -d ' ' -f 2`
+       wget_url=http://${src}/ubuntu/${debfilename}
+       wget ${wget_url} -O ${maindeb}
+       dpkg -x ${maindeb} AppDir
+      fi
+      cd AppDir
+      file2=AppRun
+      if [ ! -e "${file2}" ]; then
+       if [ -z "${urlpart}" ]; then
+        kitpart
+       fi
+       archfile2=${file2}${arch_ai}
+       urlpart=${urlpart:0:`echo ${urlpart} | grep -ob '[^/]*$' | cut -d ':' -f 1`}${archfile2}
+       wget -c https://github.com/${urlpart}
+       chmod a+x ${archfile2}
+       mv ${archfile2} ${file2}
+      fi
+      pngfile=${name}.png
+      if [ ! -e "${pngfile}" ]; then
+       wget https://github.com/colin-i/test/releases/download/1.5/${name}.png -O ${pngfile}
+       cat > ${name}.desktop <<EOF
+      [Desktop Entry]
+      Type=Application
+      Name=${name2}
+      Exec=${name}
+      Icon=${name}
+      Categories=Utility
+      EOF
+       ln -s ${pngfile} .DirIcon
+      fi
+      #
+      if [ ! -e "usr/bin/${name}" ]; then
+       echo launcher
+       cd usr/bin
+       cat > ${name} <<EOF
+      #!/bin/bash
+      if [ "\${1}" != "0" ] && [ "\${1}" != "1" ] ; then
+       echo first argument: 0 for ocompiler, 1 for ounused
+       exit 1
+      fi
+      if [ "\${1}" = "0" ]; then
+       cmd=o
+      else
+       cmd=ounused
+      fi
+      shift
+      cd "\$(dirname "\$0")"
+      cd ../../
+      LD_LIBRARY_PATH="\$(pwd)/lib32" \
+       ./lib32/ld-linux.so.2 ./usr/bin/\${cmd} "\$@"
+      EOF
+       chmod 755 ${name}
+       cd ../../
+      fi
+      #metadata file
+      mi=usr/share/metainfo
+      mif=${mi}/com.colin.${name}.appdata.xml
+      if [ ! -e "${mif}" ]; then
+       page=`cat ../debian/control | grep "^Homepage" | cut -d ' ' -f2`
+       mkdir -p ${mi}
+       cat > ${mif} <<EOF
+      <?xml version="1.0" encoding="UTF-8"?>
+      <!-- Copyright 2022 -->
+      <component type="desktop-application">
+       <id>com.colin.${name}</id>
+       <metadata_license>FSFAP</metadata_license>
+       <name>${name2}</name>
+       <summary>O language compiler</summary>
+       <description>
+        <ul>
+         <li>Compile code</li>
+         <li>Easy language</li>
+         <li>Linux/Windows x86_64/i386</li>
+        </ul>
+       </description>
+       <url type="homepage">${page}</url>
+       <content_rating/>
+      </component>
+      EOF
+      fi
+      #
+      cd ..
+      #
+      if [ ! -e "${name}.AppImage" ]; then
+       mksquashfs AppDir ${name}.squashfs -root-owned -noappend
+       cat runtime >> ${name}.AppImage
+       cat ${name}.squashfs >> ${name}.AppImage
+       chmod a+x ${name}.AppImage
+      fi
+   - name: artifact
+     uses: actions/upload-artifact@v3
+     with:
+      name: appimage
+      path: ./*.AppImage
--- /dev/null
+++ ocompiler-1/.github/workflows/rel.yml
@@ -0,0 +1,46 @@
+
+on:
+ # Allows you to run this workflow manually from the Actions tab
+ workflow_dispatch:
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ rbuild:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-latest
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   - uses: actions/checkout@v3
+   - name: Run a multi-line script
+     run: |
+      #get the version from changelog/launchpad/input
+      tag=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
+      echo "tag=${tag}" >> $GITHUB_ENV
+   - name: Create Release
+     id: create_release
+     uses: actions/create-release@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      tag_name: ${{ env.tag }}
+      release_name: Release ${{ env.tag }}
+      draft: false
+      prerelease: false
+      #this can be undone. example: git push origin :refs/tags/1.6
+   - name: Store upload url for assets
+     run: |
+      #echo straight will not escape {}
+      a=${{ steps.create_release.outputs.upload_url }}
+      echo -n ${a} > 1.txt
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      echo "proj=${name}" >> $GITHUB_ENV
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: https://uploads.github.com/repos/colin-i/test/releases/67484178/assets{?name,label}
+      asset_path: ./1.txt
+      asset_name: ${{ env.proj }}
+      asset_content_type: text/plain
--- /dev/null
+++ ocompiler-1/.github/workflows/rpm.yml
@@ -0,0 +1,59 @@
+on:
+ workflow_dispatch:
+  inputs:
+   ppa:
+    description: "ppa sufix"
+   unpublished:
+    description: "don't wait to publish, take from build page"
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ rpbuild:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-22.04 #focal alien is not testing ok on docker fedora
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   - uses: actions/checkout@v3
+   #Runs a set of commands using the runners shell
+   - name: Run a multi-line script
+     run: |
+      #proj
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      #get deb
+      if [ "${{ github.event.inputs.unpublished }}" = "" ]; then
+       echo published
+       dist=`cat debian/changelog | head -1 | grep -Poe "[^ ]*(?=;)"`
+       src=ppa.launchpadcontent.net/colin-i/ppa${{ github.event.inputs.ppa }}
+       wget http://${src}/ubuntu/dists/${dist}/main/binary-i386/Packages.xz
+       xz -d Packages.xz
+       debfilename=`grep "^Filename.*/${name}_" Packages | tail -1 | cut -d ' ' -f 2`
+       wget http://${src}/ubuntu/${debfilename} -O ${name}.deb
+      else
+       echo unpublished
+       f=`wget -q https://launchpad.net/~colin-i/+archive/ubuntu/ppa${{ github.event.inputs.ppa }}/+build/${{ github.event.inputs.unpublished }} -O - | grep -Poe "[^\"]*(?=\.deb\")"`
+       wget ${f}.deb -O ${name}.deb
+      fi
+      #make rpm
+      mkdir out
+      cd out
+      sudo apt update
+      sudo apt install alien
+      sudo alien -rk ../${name}.deb
+      #fname first - to .
+      fname=`ls`
+      fnamefinal=`echo ${fname} | sed "s/-/./"`
+      mv ${fname} ../${fnamefinal}
+      echo "file=${fnamefinal}" >> $GITHUB_ENV
+      #get up_url
+      wget https://github.com/colin-i/test/releases/download/1.5/${name} -O 1.txt
+      echo "up_url=`cat 1.txt`" >> $GITHUB_ENV
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: ${{ env.up_url }}
+      asset_path: ./${{ env.file }}
+      asset_name: ${{ env.file }}
+      asset_content_type: application/x-rpm
--- /dev/null
+++ ocompiler-1/.github/workflows/up.yml
@@ -0,0 +1,30 @@
+
+on:
+ workflow_dispatch:
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ ubuild:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-18.04 #latest is ok but it must be downloaded first
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   #token or opts.auth is required (maybe at remote)
+   - name: Run a multi-line script
+     run: |
+      if [ -n "${{ env.init }}" ]; then
+       exit 1
+      fi
+      #get up_url
+      wget https://github.com/colin-i/test/releases/download/1.5/${{ env.proj }} -O 1.txt
+      echo "up_url=`cat 1.txt`" >> $GITHUB_ENV
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: ${{ env.up_url }}
+      asset_path: ./${{ env.proj }}.zip
+      asset_name: ${{ env.proj }}.windows.zip
+      asset_content_type: application/zip
--- /dev/null
+++ ocompiler-1/.github/workflows/upapp.yml
@@ -0,0 +1,47 @@
+
+on:
+ workflow_dispatch:
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ uabuild:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-18.04
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   #- uses: Bhacaz/checkout-files@master
+   #  with:
+   #   files: debian/changelog debian/control #is git rev-parse ...
+   - uses: actions/checkout@v3
+   - name: Run a multi-line script
+     run: |
+      #proj
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      #get up_url
+      wget https://github.com/colin-i/test/releases/download/1.5/${name} -O 1.txt
+      echo "up_url=`cat 1.txt`" >> $GITHUB_ENV
+      #get appimage artifact
+      id=$(gh run list --workflow=appimage.yml -b $(git rev-parse --abbrev-ref HEAD) | cut -f7 | head -1)
+      repo_at_gh=`cat debian/control | grep "^Homepage" | grep -o [^/]*$`
+      #
+      url=`gh api -H "Accept: application/vnd.github.v3+json" /repos/colin-i/${repo_at_gh}/actions/runs/${id}/artifacts | jq ".artifacts[0].archive_download_url"`
+      url=${url:1:-1}
+      echo ${url}
+      curl -L -H "Authorization: token ${{ secrets.PAT }}" ${url} --output a.zip
+      #to env
+      unzip ./a.zip
+      echo "file=${name}.AppImage" >> $GITHUB_ENV
+      echo "fullfile=${name}.amd64.AppImage" >> $GITHUB_ENV
+     env:
+      #for gh
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: ${{ env.up_url }}
+      asset_path: ./${{ env.file }}
+      asset_name: ${{ env.fullfile }}
+      asset_content_type: application/x-executable
--- ocompiler-1.orig/README.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# O Compiler
-
-## Install
-On Windows here https://github.com/colin-i/o/releases .\
-\
-On Ubuntu from PPA.
-```sh
-sudo add-apt-repository ppa:colin-i/ppa
-```
-Or the *manual installation step* from this link *https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6* \
-Install:
-```sh
-sudo apt-get install ocompiler
-```
-\
-Documentation is at [o.html](https://htmlpreview.github.io/?https://github.com/colin-i/o/blob/master/o.html).
-
-## Donations
-The *donations* section is here
-*https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6*
--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -802,7 +802,7 @@
   <div>
 	<p>
 	Append <b>SO</b> at format to inform the log parser (ounused) to skip input/output functions and constants.
-	This can be used when building a project as executable and as shared object and wanting to initialize data only at shared object recalls.
+	This is a debugging option.
 	<br>Example: Format elfobj64so
 	</p>
   </div>
--- /dev/null
+++ ocompiler-1/readme.md
@@ -0,0 +1,29 @@
+# O Compiler
+
+## Install
+On Ubuntu from PPA.
+```sh
+sudo add-apt-repository ppa:colin-i/ppa
+```
+Or the *manual installation step* from this link *https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6* \
+Install:
+```sh
+sudo apt-get install ocompiler
+```
+\
+On linux distributions, <i>.AppImage</i> file from [releases](https://github.com/colin-i/o/releases).\
+\
+On Fedora, <i>.rpm</i> file from [releases](https://github.com/colin-i/o/releases).
+```sh
+yum install ocompiler.*.*.rpm
+```
+\
+On Windows, <i>.windows.zip</i> file from [releases](https://github.com/colin-i/o/releases).
+
+## Info
+Documentation is at [o.html](https://htmlpreview.github.io/?https://github.com/colin-i/o/blob/master/o.html).\
+[Preferences file](https://raw.githubusercontent.com/colin-i/o/master/.ocompiler.txt).
+
+## Donations
+The *donations* section is here
+*https://gist.github.com/colin-i/e324e85e0438ed71219673fbcc661da6*
