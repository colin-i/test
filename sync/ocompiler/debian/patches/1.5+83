Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+83) xenial; urgency=medium
 .
   * disallow "argument #comment", make it "argument ##comment"
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2023-03-29

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -658,7 +658,7 @@
         Entry main()<br>
 &emsp;	Call test()<br>
 &emsp;	Add a test.b<br>
-&emsp;	Exit a #9<br></a>
+&emsp;	Exit a ##9<br></a>
 </p>
 <h3><a name="usingfunctions">VII. Using functions</a></h3>
 <p>
@@ -812,7 +812,7 @@
 &emsp;	sd d<br>
 &emsp;	set d c#:b<br>
 &emsp;	add d a:b<br>
-&emsp;	exit d  #3+3</a>
+&emsp;	exit d  ##3+3</a>
 </p>
 <h3><a name="includingfiles">XII. Including files</a></h3>
 <p>
@@ -917,7 +917,7 @@
 &emsp;	2222<br>
 &emsp;	 3333<br>
 &emsp;	 ! ; inc a<br>
-&emsp;	exit a #will be 3
+&emsp;	exit a ##will be 3
 	</a>
 	<br>
 	2. Interrupts
@@ -941,6 +941,7 @@
 	<a class="code">
         #This is a comment and it will not be executed<br>
         I3 #a line ending comment<br>
+        sd a;set a a ##line ending comment (with two), only one #, in this case, is a pointer<br>
         #this will pause the program into a debugger<br>
         HEX 0x33,0xc0,0xC3<br>
         #this will write 3 bytes in the code section<br>
--- ocompiler-1.orig/ostrip/file.s
+++ ocompiler-1/ostrip/file.s
@@ -194,7 +194,7 @@ function get_section_many(sd file,sd off
 		datax offs#1;call read(file,#offs,(datasize))
 		if offs==nrsec
 			sd sz;setcall sz get_section(file,offset,p_sec)
-			return sz   #it's in use at rels,syms and can verify errors at data/text . and also at data/text
+			return sz   ##it's in use at rels,syms and can verify errors at data/text . and also at data/text
 		endif
 		call seekc(file,rest)
 		add offset shentsize
--- ocompiler-1.orig/ostrip/ostrip.s
+++ ocompiler-1/ostrip/ostrip.s
@@ -165,7 +165,7 @@ if argc>=(1+3)  #0 is all the time
 		set s3c (NULL)  #write will stop there
 	endelse
 
-	add frees.exedatasize datainneroffset    #set leading size back for write
+	add frees.exedatasize datainneroffset    ##set leading size back for write
 	call write(#sN,pexe)
 	call write_sec(".rela.dyn",frees.execreladyn,frees.execreladynsize)
 
--- ocompiler-1.orig/ostrip/reldynt.s
+++ ocompiler-1/ostrip/reldynt.s
@@ -104,7 +104,7 @@ function reloc_iteration(sv pointer,sd e
 			set reloc_dyn_initobj.objects frees.objects
 			set reloc_dyn_initobj.destdnext datavaddr
 			set reloc_dyn_initobj.destvnext datavaddr
-			add reloc_dyn_initobj.destvnext frees.exedatasize  #this is after the new size was set
+			add reloc_dyn_initobj.destvnext frees.exedatasize  ##this is after the new size was set
 			setcall datavaddr reloc_dyn_initobj(datavaddr)
 			while cursor!=pointer
 				sd offset;set offset cursor#
--- ocompiler-1.orig/src/files/actions.s
+++ ocompiler-1/src/files/actions.s
@@ -4,7 +4,7 @@ Include "./inits/alloc.s"
 
 Include "./actions/setdefdir.s"
 
-Set includebool zero #include or not include for applying after command parse
+Set includebool zero ##include or not include for applying after command parse
 SetCall errormsg include(safecurrentdirtopath,(TRUE),(cINCLUDE))
 If errormsg!=noerr
 	Call msgerrexit(errormsg)
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -51,7 +51,7 @@ If errormsg==noerr
 				SetCall errormsg elfaddsym(namesReg,zero,(sym_with_size),STT_NOTYPE,(STB_GLOBAL),null,ptrtable)
 			EndIf
 			If errormsg==noerr
-				sd imp_mark;set imp_mark namesReg #this is because the null at end makes code harder
+				sd imp_mark;set imp_mark namesReg ##this is because the null at end makes code harder
 				SetCall errormsg addtosecstresc(pcontent,pcomsize,impquotsz,impescapes,ptrnames,true)
 				If errormsg==noerr
 					Call stepcursors(pcontent,pcomsize)
--- ocompiler-1.orig/src/files/functions/64/align.s
+++ ocompiler-1/src/files/functions/64/align.s
@@ -4,7 +4,7 @@ data *stackalign_size#1
 const ptrstackalign^stackalign
 #er
 function align_alloc(sd sz)
-	inc sz   #for entry
+	inc sz   ##for entry
 	mult sz (dwsz)
 	sv s%ptrstackalign
 	setcall s# memcalloc(sz) #need 0 by default
--- ocompiler-1.orig/src/files/functions/64/bit.s
+++ ocompiler-1/src/files/functions/64/bit.s
@@ -162,7 +162,7 @@ endfunction
 function convdata(sd type,sd dest,sd fnargs)
 	if type==(convdata_total)
 		data nr_of_args#1
-		return nr_of_args   #ms_convention or lin
+		return nr_of_args   ##ms_convention or lin
 	elseif type==(convdata_call)
 		#rdi
 		char hex_1={REX_Operand_64,moveatprocthemem,ediregnumber*toregopcode|espregnumber,0x24,0}
--- ocompiler-1.orig/src/files/functions/actions/declare.s
+++ ocompiler-1/src/files/functions/actions/declare.s
@@ -123,10 +123,10 @@ function declare(sv pcontent,sd pcomsize
 				#                                                                               since %%|
 				if is_expand==(FALSE)
 					sd pdataReg%%ptr_dataReg
-					add pdataReg# unitsize    #this is init by 0
+					add pdataReg# unitsize    ##this is init by 0
 				else
 					sd pnobitsReg%ptrdataSize
-					add pnobitsReg# unitsize    #this is init by 0
+					add pnobitsReg# unitsize    ##this is init by 0
 				endelse
 			endelse
 		else
--- ocompiler-1.orig/src/files/functions/actions/enumcomma.s
+++ ocompiler-1/src/files/functions/actions/enumcomma.s
@@ -120,7 +120,7 @@ Function enumcommas(sv ptrcontent,sd ptr
 			if punitsizeOrparses==(NULL)
 				If typenumberOrparses==charnr
 				#ignored at stack value   grep stackfilter2  1
-					Set unitsize bSz    #used also at hex
+					Set unitsize bSz    ##used also at hex
 				Else
 					Set unitsize dwSz
 				EndElse
--- ocompiler-1.orig/src/files/functions/argument/arg.s
+++ ocompiler-1/src/files/functions/argument/arg.s
@@ -15,8 +15,8 @@ endfunction
 
 #err
 function arg_size(ss content,sd sizetoverify,sd p_argsize)
-	Char spc=" "
-	Char tab={0x09}
+	Char spc=asciispace
+	Char tab=asciitab
 	sd szargspc
 	sd szargtab
 	SetCall szargspc valinmem(content,sizetoverify,spc)
@@ -32,6 +32,47 @@ function arg_size(ss content,sd sizetove
 	return (noerror)
 endfunction
 
+function extend_arg_size(ss content,sd sizetoverify,sd p_argsize)
+	sub sizetoverify p_argsize#
+	if sizetoverify!=0
+		add content p_argsize#
+		sd marker;set marker content
+		ss test;set test content
+		dec test	##argsize is not 0
+		if test#!=(pointerascii)
+			if test#!=(castascii)
+				call spaces(#content,#sizetoverify)
+				if sizetoverify!=0
+					if content#==(pointerascii)
+						call stepcursors(#content,#sizetoverify)
+						if sizetoverify!=0
+							if content#==(pointerascii)
+								#this " ##" is the only line end comment after sufix and allowing spaces
+								ret
+							endif
+							#this disallow "arg #comment"
+							addcall p_argsize# find_whitespaceORcomment(content,sizetoverify)
+						endif
+						#and not letting "arg #" as comment to not regret later
+						sub content marker
+						add p_argsize# content
+					endif
+				endif
+			endif
+		endif
+	endif
+endfunction
+function extend_sufix_test(ss content,sd p_size)
+	while p_size#!=0
+		dec content
+		sd b;setcall b is_whitespace(content#)
+		if b==(FALSE)
+			ret
+		endif
+		dec p_size#
+	endwhile
+endfunction
+
 #err
 Function getarg(sv ptrcontent,sd ptrsize,sd argsize,sd allowdata,sd sens,sd ptrdata,sd ptrlow,sd ptrsufix)
 	ss content
@@ -122,6 +163,11 @@ Function getarg(sv ptrcontent,sd ptrsize
 				set ptrlow# false
 				#sufix is not used at imm value
 			else
+				if allowdata==(allow_yes)
+					#at last/only argument it is better to allow space before sufix to not regret later
+					#"##" will be a comment and "#" a sufix
+					call extend_arg_size(content,size,#argsize)
+				endif
 				sd argsize_filter
 				sd container_sz
 				if content#==(pointerascii)
--- ocompiler-1.orig/src/files/functions/commons/comfn.s
+++ ocompiler-1/src/files/functions/commons/comfn.s
@@ -323,7 +323,7 @@ Function file_get_content_ofs(str path,d
 		#The disk space won't be released until the last process with an open file descriptor for the file finally closes the file.
 		call lseek(file,0,seek_set)
 		#offset here
-		add size offset       #this is only with MAX_PATH more on a int file size
+		add size offset       ##this is only with MAX_PATH more on a int file size
 		#setcall err addfull(offset,#size)
 		SetCall err memoryalloc(size,ptrmem)
 		If err==noerr
--- ocompiler-1.orig/src/files/functions/commons/strcommons.s
+++ ocompiler-1/src/files/functions/commons/strcommons.s
@@ -116,7 +116,7 @@ function mem_spaces(ss content,ss last)
 endfunction
 #new size
 function find_whitespaceORcomment(ss content,sd size)
-#size is greater than zero
+#size is greater than zero but this is not a problem here
 	ss end;set end content;add end size
 	ss start;set start content
 	while content!=end
@@ -271,7 +271,7 @@ Function quotescaped(Data pcontent,Data
 	Set psize# size
 	If pescapes!=zero
 		Inc pescapes#
-		Return byte   #quotation/null/another are relevant here
+		Return byte   ##quotation/null/another are relevant here
 	EndIf
 
 	if byte==(asciin)
--- ocompiler-1.orig/src/files/functions/commons/vars.s
+++ ocompiler-1/src/files/functions/commons/vars.s
@@ -306,7 +306,7 @@ function sufix_test(ss content,sd p_size
 	add content p_size#
 	dec content
 	if content#!=(pointerascii)
-		if content#==(asciicirc)
+		if content#==(castascii)
 			setcall p_cast# cast_test(content,p_size)
 			return (TRUE)
 		endif
@@ -315,6 +315,7 @@ function sufix_test(ss content,sd p_size
 	endif
 	dec p_size#
 	set p_cast# (no_cast)
+	call extend_sufix_test(content,p_size)
 	#and, allow prefix and sufix same time, for fun
 	return (TRUE)
 endfunction
@@ -338,6 +339,7 @@ function cast_test(ss content,sd p_size)
 			dec content
 			if content#==(pointerascii)
 				sub p_size# 3
+				call extend_sufix_test(content,p_size)
 				return c
 			endif
 		endif
--- ocompiler-1.orig/src/files/functions/values/operations.s
+++ ocompiler-1/src/files/functions/values/operations.s
@@ -21,7 +21,8 @@ function const_security(sd item)
 	#at 64? 1 shl 63 is last one
 	#only <32? yes, else is 0/-1 at constants
 	sd maximum=dwsz*8
-	if item#>=^maximum
+	if item#>=maximum     ##don't use unsigned ^ comparation, item# is already positive, will be extra code in source
+	#                            , at this commit time was not a technical/extra problem in compilation
 		sd p%p_over_pref
 		if p#==(TRUE)
 			vstr err="Overflow at constants."
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -400,6 +400,7 @@ const sd_as_sv_get=1
 const commentascii=asciinumber
 const reserveascii=asciinumber
 const pointerascii=asciinumber
+const castascii=asciicirc
 
 #const max_uint64=20
 char uint32c#dw_char_0
