Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+18) xenial; urgency=medium
 .
   * fix at resp64 and optimizations
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-08-11

--- ocompiler-1.orig/src/files/actions/fileformat/elf_resolve.s
+++ ocompiler-1/src/files/actions/fileformat/elf_resolve.s
@@ -264,7 +264,7 @@ Else
 	#######
 
 	sd syment;sd relent
-	if p_is_for_64_resp#==(TRUE)
+	if p_is_for_64_value#==(TRUE)
 		Set elf64_ehd_e_shoff (elf64_fileheaders_size)
 		call memtomem(#elf64_ehd_e_shnum,ptrelf_sec_nr,wordsize)
 		call memtomem(#elf64_ehd_e_shstrndx,ptrelf_sec_strtab_nr,wordsize)
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -84,9 +84,11 @@ if loop==1
 					if parses==(pass_fns_imps)
 						#tested at function gather; FORMAT is here starting with FUNCTIONX to set the mask knowing the format
 							if formatdefined==0;Set formatdefined 1;endif
-							if commandset==(cFORMAT);elseif commandset==(cINCLUDE)
+							If commandset==(cIMPORTLINK) #needing importx here
 							elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
-							ElseIf commandset==(cLIBRARY);ElseIf commandset==(cIMPORTLINK) #needing importx here
+							ElseIf commandset==(cLIBRARY)
+							elseif commandset==(cINCLUDE)
+							Elseif commandset==(cFORMAT)
 							elseif commandset==(cWARNING)    #for addaref
 							else;set commandset (cCOMMENT);endelse
 					else
@@ -96,25 +98,31 @@ if loop==1
 					endelse
 				endif
 			endif
-			If commandset==(cFORMAT)
-				if parses==(pass_fns_imps);Include "./index/format.s"
-				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+			if commandset==(cCOMMENT)
+				Call advancecursors(pcontent,pcomsize,comsize)
+				#1 is last
+				if parses==(pass_write)
+					set was_whitespaces content;dec was_whitespaces;setcall was_whitespaces is_whitespace(was_whitespaces#)
+					if was_whitespaces==(TRUE)
+						setcall errormsg warn_hidden_whitespaces(includes,nameofstoffile)
+					endif
+				endif
 			ElseIf commandset==(cDECLARE)
 				Include "./index/declare.s"
-			ElseIf commandset==(cDECLAREAFTERCALL)
-				Include "./index/aftercall.s"
+			ElseIf commandset==(cPRIMSEC)
+		call entryscope_verify_code()
+				Include "./index/primsec.s"
 			ElseIf commandset==(cONEARG)
 		call entryscope_verify_code()
 				Include "./index/onearg.s"
-			ElseIf commandset==(cPRIMSEC)
+			ElseIf commandset==(cCALL)
+				if parses==(pass_write)
 		call entryscope_verify_code()
-				Include "./index/primsec.s"
-			ElseIf commandset==(cRET)
+				endif
+				Include "./index/call.s"
+			ElseIf commandset==(cCONDITIONS)
 		call entryscope_verify_code()
-				Include "./index/ret.s"
-			ElseIf commandset==(cLIBRARY)
-				if parses==(pass_fns_imps);Include "./index/library.s"
-				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+				Include "./index/conditions.s"
 			ElseIf commandset==(cIMPORTLINK)
 				if parses==(pass_fns_imps);Include "./index/import.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
@@ -122,39 +130,33 @@ if loop==1
 				Include "./index/function.s"
 			ElseIf commandset==(cENDFUNCTION)
 				Include "./index/endfunction.s"
-			ElseIf commandset==(cCALL)
-				if parses==(pass_write)
-		call entryscope_verify_code()
-				endif
-				Include "./index/call.s"
-			ElseIf commandset==(cCALLEX)
-		call entryscope_verify_code()
-				Include "./index/callex.s"
-			ElseIf commandset==(cCONDITIONS)
+			ElseIf commandset==(cRET)
 		call entryscope_verify_code()
-				Include "./index/conditions.s"
+				Include "./index/ret.s"
 			ElseIf commandset==(cINCLUDE)
 				Include "./index/include.s"
-			ElseIf commandset==(cI3)
-		call entryscope_verify_code()
-				Include "./index/i3.s"
-			ElseIf commandset==(cHEX)
-		call entryscope_verify_code()
-				Include "./index/hex.s"
+			ElseIf commandset==(cFORMAT)
+				if parses==(pass_fns_imps);Include "./index/format.s"
+				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+			ElseIf commandset==(cDECLAREAFTERCALL)
+				Include "./index/aftercall.s"
 			ElseIf commandset==(cWARNING)
 				Include "./index/warning.s"
+			ElseIf commandset==(cCALLEX)
+		call entryscope_verify_code()
+				Include "./index/callex.s"
 			ElseIf commandset==(cOVERRIDE)
 				Include "./index/override.s"
+			ElseIf commandset==(cLIBRARY)
+				if parses==(pass_fns_imps);Include "./index/library.s"
+				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+			ElseIf commandset==(cHEX)
+		call entryscope_verify_code()
+				Include "./index/hex.s"
 			Else
-	#comments command
-				Call advancecursors(pcontent,pcomsize,comsize)
-				#1 is last
-				if parses==(pass_write)
-					set was_whitespaces content;dec was_whitespaces;setcall was_whitespaces is_whitespace(was_whitespaces#)
-					if was_whitespaces==(TRUE)
-						setcall errormsg warn_hidden_whitespaces(includes,nameofstoffile)
-					endif
-				endif
+			#If commandset==(cI3)
+		call entryscope_verify_code()
+				Include "./index/i3.s"
 			EndElse
 			If errormsg==(noerror)
 				If comsize!=zero
--- ocompiler-1.orig/src/files/actions/main/index/aftercall.s
+++ ocompiler-1/src/files/actions/main/index/aftercall.s
@@ -7,7 +7,14 @@ else
 	set ac_store_content pcontent#;set ac_store_size comsize
 	data acsym_value#1;data acsym_size#1;data acsym_shndx#1
 	sd g_e_p;setcall g_e_p global_err_p()
-	if subtype==(cAFTERCALL)
+	if subtype==(cIMPORTAFTERCALL)
+		If object==(FALSE);set errormsg "ImportAfterCall is used at objects."
+		else
+			set acsym_value 0;set acsym_size (sym_with_size);set acsym_shndx (NULL)
+			call advancecursors(pcontent,pcomsize,comsize)
+		endelse
+	else
+	#(cAFTERCALL)
 		SetCall errormsg entryvarsfns(pcontent#,pcomsize#)
 		if errormsg==(noerror)
 			sd ac_current_data;setcall ac_current_data get_img_vdata_dataReg()
@@ -23,19 +30,12 @@ else
 				endif
 			endif
 		endif
-	else
-	#(cIMPORTAFTERCALL)
-		If object==(FALSE);set errormsg "ImportAfterCall is used at objects."
-		else
-			set acsym_value 0;set acsym_size (sym_with_size);set acsym_shndx (NULL)
-			call advancecursors(pcontent,pcomsize,comsize)
-		endelse
 	endelse
 	if errormsg==(noerror)
 		set g_e_b_p# (TRUE)
 		if object==(TRUE)
 			set g_e_p# tableReg
-			if p_is_for_64_resp#==(TRUE)
+			if p_is_for_64_value#==(TRUE)
 				div g_e_p# (elf64_dyn_d_val_syment)
 			else
 				div g_e_p# elf32_dyn_d_val_syment
--- ocompiler-1.orig/src/files/actions/main/index/conditions.s
+++ ocompiler-1/src/files/actions/main/index/conditions.s
@@ -10,24 +10,25 @@ If subtype==(cIF)
 	If errormsg==noerr
 		SetCall errormsg condbegin(pcontent,pcomsize,(ifnumber))
 	EndIf
+ElseIf subtype==(cENDIF)
+	SetCall errormsg conditionscondend((ifnumber),nocond)
 ElseIf subtype==(cELSE)
 	SetCall errormsg closeifopenelse()
+ElseIf subtype==(cENDELSE)
+	SetCall errormsg conditionscondend((elsenumber),nocond)
 ElseIf subtype==(cWHILE)
 	SetCall errormsg coderegtocondloop()
 	If errormsg==noerr
 		SetCall errormsg condbegin(pcontent,pcomsize,(whilenumber))
 	EndIf
+ElseIf subtype==(cENDWHILE)
+	SetCall errormsg condend((whilenumber))
 ElseIf subtype==(cELSEIF)
 	SetCall errormsg closeifopenelse()
 	If errormsg==noerr
 		SetCall errormsg condbegin(pcontent,pcomsize,(ifnumber))
 	EndIf
-ElseIf subtype==(cENDIF)
-	SetCall errormsg conditionscondend((ifnumber),nocond)
-ElseIf subtype==(cENDELSE)
-	SetCall errormsg conditionscondend((elsenumber),nocond)
-ElseIf subtype==(cENDWHILE)
-	SetCall errormsg condend((whilenumber))
 Else
+#cENDELSEIF
 	SetCall errormsg conditionscondend((ifnumber),(elsenumber))
 EndElse
\ No newline at end of file
--- ocompiler-1.orig/src/files/actions/main/index/declare.s
+++ ocompiler-1/src/files/actions/main/index/declare.s
@@ -1,18 +1,18 @@
 
 if subtype==(cVDATA)
-	if p_is_for_64_resp#==(TRUE)
+	if p_is_for_64_value#==(TRUE)
 		SetCall errormsg dataassign(pcontent,pcomsize,(integersnumber),(datapointbit))
 	else
 		SetCall errormsg dataassign(pcontent,pcomsize,(integersnumber),0)
 	endelse
 elseif subtype==(cVSTR)
-	if p_is_for_64_resp#==(TRUE)
+	if p_is_for_64_value#==(TRUE)
 		SetCall errormsg dataassign(pcontent,pcomsize,(stringsnumber),(datapointbit))
 	else
 		SetCall errormsg dataassign(pcontent,pcomsize,(stringsnumber),0)
 	endelse
 elseif subtype==(cVALUE)
-	if p_is_for_64_resp#==(TRUE)
+	if p_is_for_64_value#==(TRUE)
 		SetCall errormsg dataassign(pcontent,pcomsize,(integersnumber),(valueslongmask))
 	else
 		SetCall errormsg dataassign(pcontent,pcomsize,(integersnumber),0)
--- ocompiler-1.orig/src/files/actions/main/index/format.s
+++ ocompiler-1/src/files/actions/main/index/format.s
@@ -18,9 +18,7 @@ If formatresponse==false
 		Str ptrelfobjformat^elfobjformat
 		Data elfobjformresp#1
 
-		sd p_is_for_64_resp;setcall p_is_for_64_resp p_is_for_64()
-
-		SetCall elfobjformresp stringsatmemspc(pcontent,pcomsize,ptrelfobjformat,false,"64",p_is_for_64_resp)
+		SetCall elfobjformresp stringsatmemspc(pcontent,pcomsize,ptrelfobjformat,false,"64",p_is_for_64_value)
 		If elfobjformresp==true
 			sd is_so
 			setcall is_so stratmemspc(pcontent,pcomsize,"SO",false)
@@ -30,10 +28,10 @@ If formatresponse==false
 				endif
 			endif
 			If errormsg==noerr
-				if p_is_for_64_resp#==(TRUE)
+				if p_is_for_64_value#==(TRUE)
 					set convention_64 convention_64#
 					if convention_64==(ignore_convention_input)
-						set p_is_for_64_resp# (FALSE)
+						set p_is_for_64_value# (FALSE)
 					else
 						call reloc64_init()
 						if convention_64==(direct_convention_input)
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -36,7 +36,7 @@ If errormsg==noerr
 			#get the dword offset to call at, index*dword
 			Mult functionoffset dwordsize
 			SetCall errormsg elfaddsym(namesReg,null,null,STT_FUNC,(STB_GLOBAL),null,ptraddresses)
-		ElseIf p_is_for_64_resp#==(TRUE)
+		ElseIf p_is_for_64_value#==(TRUE)
 			div functionoffset (elf64_dyn_d_val_syment)
 		Else
 			Div functionoffset elf32_dyn_d_val_syment
--- ocompiler-1.orig/src/files/functions/argument/argument.s
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -89,11 +89,6 @@ Function argument(data ptrcontent,data p
 			If err!=(noerror)
 				Return err
 			EndIf
-		ElseIf subtype==(cNOT)
-			Chars not={0xF7}
-			Chars notregopcode={Notregopcode}
-			Set op not
-			Set regopcode notregopcode
 		ElseIf subtype==(cINC)
 			Chars inc={0xFF}
 			Set op inc
@@ -116,15 +111,15 @@ Function argument(data ptrcontent,data p
 			else;set incs_sz (qwsz);endelse
 			set ptrcontinuation #incs_sz
 			set sizeofcontinuation (bsz)
-		ElseIf subtype==(cEXIT)
-			setcall err argument_return((TRUE),#op,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
-			If err!=(noerror)
-				Return err
-			EndIf
 		ElseIf subtype==(cNEG)
 			set op (0xf7)
 			set regopcode 3
-		Else
+		ElseIf subtype==(cNOT)
+			Chars not={0xF7}
+			Chars notregopcode={Notregopcode}
+			Set op not
+			Set regopcode notregopcode
+		ElseIf subtype<=(cSAR)
 			set op (0xD1)
 			If subtype==(cSHL)
 				set regopcode 4
@@ -134,6 +129,12 @@ Function argument(data ptrcontent,data p
 			#cSAR
 				set regopcode 7
 			EndElse
+		Else
+		#If subtype==(cEXIT)
+			setcall err argument_return((TRUE),#op,#regprepare_bool,#ptrcontinuation,#sizeofcontinuation,#regopcode)
+			If err!=(noerror)
+				Return err
+			EndIf
 		EndElse
 	Else
 	#push imm prepare test
--- ocompiler-1.orig/src/files/functions/commons/getcommand.s
+++ ocompiler-1/src/files/functions/commons/getcommand.s
@@ -5,36 +5,43 @@ Const spacenotreq=0
 
 #with caution like elseif before else for getcommand comparations
 
+Chars cCOMMENT_c={commentascii,0}
 Chars cDATA_c="DATA";Chars cSTR_c="STR";Chars cCHARS_c="CHARS";Chars cSD_c="SD";Chars cSS_c="SS";Chars cSV_c="SV"
-	Chars cCONST_c="CONST"
 	Chars cVDATA_c="VDATA";Chars cVSTR_c="VSTR";Chars cVALUE_c="VALUE"
-Chars cAFTERCALL_c="AFTERCALL";Chars cIMPORTAFTERCALL_c="IMPORTAFTERCALL"
-Chars cFORMAT_c="FORMAT"
-Chars cRETURN_c="RETURN";Chars cNOT_c="NOT";Chars cINCST_c="INCST";Chars cINC_c="INC";Chars cDECST_c="DECST";Chars cDEC_c="DEC";Chars cEXIT_c="EXIT";Chars cNEG_c="NEG";Chars cSHL_c="SHL";Chars cSHR_c="SHR";Chars cSAR_c="SAR"
+	Chars cCONST_c="CONST"
 Chars cSET_c="SET";Chars cADD_c="ADD";Chars cSUB_c="SUB";Chars cMULT_c="MULT";Chars cDIV_c="DIV";Chars cREM_c="REM";Chars cAND_c="AND";Chars cOR_c="OR";Chars cXOR_c="XOR"
-Chars cRET_c="RET"
-Chars cLIBRARY_c="LIBRARY"
-Chars cIMPORTX_c="IMPORTX";Chars cIMPORT_c="IMPORT"
-Chars cFUNCTIONX_c="FUNCTIONX";Chars cFUNCTION_c="FUNCTION";Chars cENTRYLINUX_c="ENTRYLINUX";Chars cENTRY_c="ENTRY"
-Chars cENDFUNCTION_c="ENDFUNCTION"
+Chars cRETURN_c="RETURN";Chars cINCST_c="INCST";Chars cINC_c="INC";Chars cDECST_c="DECST";Chars cDEC_c="DEC";Chars cNEG_c="NEG";Chars cNOT_c="NOT";Chars cSHL_c="SHL";Chars cSHR_c="SHR";Chars cSAR_c="SAR";Chars cEXIT_c="EXIT"
 Chars cCALL_c="CALL"
-Chars cCALLEX_c="CALLEX"
-Chars cIF_c="IF";Chars cELSEIF_c="ELSEIF";Chars cELSE_c="ELSE";Chars cWHILE_c="WHILE";Chars cENDIF_c="ENDIF";Chars cENDELSEIF_c="ENDELSEIF";Chars cENDELSE_c="ENDELSE";Chars cENDWHILE_c="ENDWHILE"
-Chars cCOMMENT_c={commentascii,0}
+Chars cIF_c="IF";Chars cENDIF_c="ENDIF";Chars cELSEIF_c="ELSEIF";Chars cELSE_c="ELSE";Chars cENDELSEIF_c="ENDELSEIF";Chars cENDELSE_c="ENDELSE";Chars cWHILE_c="WHILE";Chars cENDWHILE_c="ENDWHILE"
+Chars cIMPORT_c="IMPORT";Chars cIMPORTX_c="IMPORTX"
+Chars cFUNCTION_c="FUNCTION";Chars cFUNCTIONX_c="FUNCTIONX";Chars cENTRYLINUX_c="ENTRYLINUX";Chars cENTRY_c="ENTRY"
+Chars cENDFUNCTION_c="ENDFUNCTION"
+Chars cRET_c="RET"
 Chars cINCLUDE_c="INCLUDE"
+Chars cFORMAT_c="FORMAT"
+Chars cIMPORTAFTERCALL_c="IMPORTAFTERCALL";Chars cAFTERCALL_c="AFTERCALL"
 Chars cWARNING_c="WARNING"
+Chars cCALLEX_c="CALLEX"
 Chars cOVERRIDE_c="OVERRIDE"
+Chars cLIBRARY_c="LIBRARY"
 Chars cHEX_c="HEX"
 Chars cI3_c="I3"
 
 const not_a_subtype=-1
 
 const coms_start=!
+	Const cCOMMENT=!-coms_start
+		data cCOMMENT_s^cCOMMENT_c
+Const comsloc^cCOMMENT_s
+		Data *=cCOMMENT
+		Data *#1
+		Data *=spacenotreq
 const commandsvars_start=!
 	Const cDECLARE=!-coms_start
 	Const cDECLARE_top=!
 		Const cDATA=!-cDECLARE_top
 			data cDATA_s^cDATA_c
+Const cdataloc^cDATA_s
 			Data *=cDECLARE
 			Data *=cDATA
 			Data *=spacereq
@@ -86,81 +93,6 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cDECLARE
 			Data *=cCONST
 			Data *=spacereq
-#aftercall can be at function parameters but the get_img_vdata_dataReg() is set inside and codding must be done for not a big deal
-	Const cDECLAREAFTERCALL=!-coms_start
-	Const cDECLAREAFTERCALL_top=!
-		Const cAFTERCALL=!-cDECLAREAFTERCALL_top
-			data *^cAFTERCALL_c
-			Data *=cDECLAREAFTERCALL
-			Data *=cAFTERCALL
-			Data *=spacereq
-		Const cIMPORTAFTERCALL=!-cDECLAREAFTERCALL_top
-			data *^cIMPORTAFTERCALL_c
-			Data *=cDECLAREAFTERCALL
-			Data *=cIMPORTAFTERCALL
-			Data *=spacereq
-	Const cFORMAT=!-coms_start
-		data *^cFORMAT_c
-		Data *=cFORMAT
-		Data *#1
-		Data *=spacereq
-	Const cONEARG=!-coms_start
-	Const cONEARG_top=!
-		Const cRETURN=!-cONEARG_top
-			data *^cRETURN_c
-			Data *=cONEARG
-			Data *=cRETURN
-			Data *=spacereq
-		Const cNOT=!-cONEARG_top
-			data *^cNOT_c
-			Data *=cONEARG
-			Data *=cNOT
-			Data *=spacereq
-		Const cINCST=!-cONEARG_top
-			data *^cINCST_c
-			Data *=cONEARG
-			Data *=cINCST
-			Data *=spacereq
-		Const cINC=!-cONEARG_top
-			data *^cINC_c
-			Data *=cONEARG
-			Data *=cINC
-			Data *=spacereq
-		Const cDECST=!-cONEARG_top
-			data *^cDECST_c
-			Data *=cONEARG
-			Data *=cDECST
-			Data *=spacereq
-		Const cDEC=!-cONEARG_top
-			data *^cDEC_c
-			Data *=cONEARG
-			Data *=cDEC
-			Data *=spacereq
-		Const cEXIT=!-cONEARG_top
-			data *^cEXIT_c
-			Data *=cONEARG
-			Data *=cEXIT
-			Data *=spacereq
-		Const cNEG=!-cONEARG_top
-			data *^cNEG_c
-			Data *=cONEARG
-			Data *=cNEG
-			Data *=spacereq
-		Const cSHL=!-cONEARG_top
-			data *^cSHL_c
-			Data *=cONEARG
-			Data *=cSHL
-			Data *=spacereq
-		Const cSHR=!-cONEARG_top
-			data *^cSHR_c
-			Data *=cONEARG
-			Data *=cSHR
-			Data *=spacereq
-		Const cSAR=!-cONEARG_top
-			data *^cSAR_c
-			Data *=cONEARG
-			Data *=cSAR
-			Data *=spacereq
 	Const cPRIMSEC=!-coms_start
 	Const cPRIMSEC_top=!
 		Const cSET=!-cPRIMSEC_top
@@ -208,65 +140,68 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cPRIMSEC
 			Data *=cXOR
 			Data *=spacereq
-	Const cRET=!-coms_start
-		data *^cRET_c
-		Data *=cRET
-		Data *#1
-		Data *=spacenotreq
-	Const cLIBRARY=!-coms_start
-		data *^cLIBRARY_c
-		Data *=cLIBRARY
-		Data *#1
-		Data *=spacereq
-	Const cIMPORTLINK=!-coms_start
-	Const cIMPORTLINK_top=!
-		const cIMPORTX=!-cIMPORTLINK_top
-			data *^cIMPORTX_c
-			Data *=cIMPORTLINK
-			Data *=cIMPORTX
+	Const cONEARG=!-coms_start
+	Const cONEARG_top=!
+		Const cRETURN=!-cONEARG_top
+			data *^cRETURN_c
+			Data *=cONEARG
+			Data *=cRETURN
 			Data *=spacereq
-		const cIMPORT=!-cIMPORTLINK_top
-			data *^cIMPORT_c
-			Data *=cIMPORTLINK
-			Data *=cIMPORT
+		Const cINCST=!-cONEARG_top
+			data *^cINCST_c
+			Data *=cONEARG
+			Data *=cINCST
 			Data *=spacereq
-	Const cSTARTFUNCTION=!-coms_start
-	Const cSTARTFUNCTION_top=!
-		Const cFUNCTIONX=!-cSTARTFUNCTION_top
-			data *^cFUNCTIONX_c
-			Data *=cSTARTFUNCTION
-			Data *=cFUNCTIONX
+		Const cINC=!-cONEARG_top
+			data *^cINC_c
+			Data *=cONEARG
+			Data *=cINC
 			Data *=spacereq
-		Const cFUNCTION=!-cSTARTFUNCTION_top
-			data *^cFUNCTION_c
-			Data *=cSTARTFUNCTION
-			Data *=cFUNCTION
+		Const cDECST=!-cONEARG_top
+			data *^cDECST_c
+			Data *=cONEARG
+			Data *=cDECST
 			Data *=spacereq
-		Const cENTRYLINUX=!-cSTARTFUNCTION_top
-			data *^cENTRYLINUX_c
-			Data *=cSTARTFUNCTION
-			Data *=cENTRYLINUX
+		Const cDEC=!-cONEARG_top
+			data *^cDEC_c
+			Data *=cONEARG
+			Data *=cDEC
 			Data *=spacereq
-		Const cENTRY=!-cSTARTFUNCTION_top
-			data *^cENTRY_c
-			Data *=cSTARTFUNCTION
-			Data *=cENTRY
+		Const cNEG=!-cONEARG_top
+			data *^cNEG_c
+			Data *=cONEARG
+			Data *=cNEG
+			Data *=spacereq
+		Const cNOT=!-cONEARG_top
+			data *^cNOT_c
+			Data *=cONEARG
+			Data *=cNOT
+			Data *=spacereq
+		Const cSHL=!-cONEARG_top
+			data *^cSHL_c
+			Data *=cONEARG
+			Data *=cSHL
+			Data *=spacereq
+		Const cSHR=!-cONEARG_top
+			data *^cSHR_c
+			Data *=cONEARG
+			Data *=cSHR
+			Data *=spacereq
+		Const cSAR=!-cONEARG_top
+			data *^cSAR_c
+			Data *=cONEARG
+			Data *=cSAR
+			Data *=spacereq
+		Const cEXIT=!-cONEARG_top
+			data *^cEXIT_c
+			Data *=cONEARG
+			Data *=cEXIT
 			Data *=spacereq
-	Const cENDFUNCTION=!-coms_start
-		data *^cENDFUNCTION_c
-		Data *=cENDFUNCTION
-		Data *#1
-		Data *=spacenotreq
 	Const cCALL=!-coms_start
 		data *^cCALL_c
 		Data *=cCALL
 		Data *#1
 		Data *=spacereq
-	Const cCALLEX=!-coms_start
-		data *^cCALLEX_c
-		Data *=cCALLEX
-		Data *#1
-		Data *=spacereq
 	Const cCONDITIONS=!-coms_start
 	Const cCONDITIONS_top=!
 		Const cIF=!-cCONDITIONS_top
@@ -274,6 +209,11 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cCONDITIONS
 			Data *=cIF
 			Data *=spacereq
+		Const cENDIF=!-cCONDITIONS_top
+			data *^cENDIF_c
+			Data *=cCONDITIONS
+			Data *=cENDIF
+			Data *=spacenotreq
 		Const cELSEIF=!-cCONDITIONS_top
 			data *^cELSEIF_c
 			Data *=cCONDITIONS
@@ -284,16 +224,6 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cCONDITIONS
 			Data *=cELSE
 			Data *=spacenotreq
-		Const cWHILE=!-cCONDITIONS_top
-			data *^cWHILE_c
-			Data *=cCONDITIONS
-			Data *=cWHILE
-			Data *=spacereq
-		Const cENDIF=!-cCONDITIONS_top
-			data *^cENDIF_c
-			Data *=cCONDITIONS
-			Data *=cENDIF
-			Data *=spacenotreq
 		Const cENDELSEIF=!-cCONDITIONS_top
 			data *^cENDELSEIF_c
 			Data *=cCONDITIONS
@@ -304,14 +234,58 @@ Const numberofcommandsvars=(!-commandsva
 			Data *=cCONDITIONS
 			Data *=cENDELSE
 			Data *=spacenotreq
+		Const cWHILE=!-cCONDITIONS_top
+			data *^cWHILE_c
+			Data *=cCONDITIONS
+			Data *=cWHILE
+			Data *=spacereq
 		Const cENDWHILE=!-cCONDITIONS_top
 			data *^cENDWHILE_c
 			Data *=cCONDITIONS
 			Data *=cENDWHILE
 			Data *=spacenotreq
-	Const cCOMMENT=!-coms_start
-		data *^cCOMMENT_c
-		Data *=cCOMMENT
+	Const cIMPORTLINK=!-coms_start
+	Const cIMPORTLINK_top=!
+		const cIMPORT=!-cIMPORTLINK_top
+			data *^cIMPORT_c
+			Data *=cIMPORTLINK
+			Data *=cIMPORT
+			Data *=spacereq
+		const cIMPORTX=!-cIMPORTLINK_top
+			data *^cIMPORTX_c
+			Data *=cIMPORTLINK
+			Data *=cIMPORTX
+			Data *=spacereq
+	Const cSTARTFUNCTION=!-coms_start
+	Const cSTARTFUNCTION_top=!
+		Const cFUNCTION=!-cSTARTFUNCTION_top
+			data *^cFUNCTION_c
+			Data *=cSTARTFUNCTION
+			Data *=cFUNCTION
+			Data *=spacereq
+		Const cFUNCTIONX=!-cSTARTFUNCTION_top
+			data *^cFUNCTIONX_c
+			Data *=cSTARTFUNCTION
+			Data *=cFUNCTIONX
+			Data *=spacereq
+		Const cENTRYLINUX=!-cSTARTFUNCTION_top
+			data *^cENTRYLINUX_c
+			Data *=cSTARTFUNCTION
+			Data *=cENTRYLINUX
+			Data *=spacereq
+		Const cENTRY=!-cSTARTFUNCTION_top
+			data *^cENTRY_c
+			Data *=cSTARTFUNCTION
+			Data *=cENTRY
+			Data *=spacereq
+	Const cENDFUNCTION=!-coms_start
+		data *^cENDFUNCTION_c
+		Data *=cENDFUNCTION
+		Data *#1
+		Data *=spacenotreq
+	Const cRET=!-coms_start
+		data *^cRET_c
+		Data *=cRET
 		Data *#1
 		Data *=spacenotreq
 	Const cINCLUDE=!-coms_start
@@ -319,16 +293,44 @@ Const numberofcommandsvars=(!-commandsva
 		Data *=cINCLUDE
 		Data *#1
 		Data *=spacereq
+	Const cFORMAT=!-coms_start
+		data *^cFORMAT_c
+		Data *=cFORMAT
+		Data *#1
+		Data *=spacereq
+#aftercall can be at function parameters but the get_img_vdata_dataReg() is set inside and codding must be done for not a big deal
+	Const cDECLAREAFTERCALL=!-coms_start
+	Const cDECLAREAFTERCALL_top=!
+		Const cIMPORTAFTERCALL=!-cDECLAREAFTERCALL_top
+			data *^cIMPORTAFTERCALL_c
+			Data *=cDECLAREAFTERCALL
+			Data *=cIMPORTAFTERCALL
+			Data *=spacereq
+		Const cAFTERCALL=!-cDECLAREAFTERCALL_top
+			data *^cAFTERCALL_c
+			Data *=cDECLAREAFTERCALL
+			Data *=cAFTERCALL
+			Data *=spacereq
 	Const cWARNING=!-coms_start
 		data *^cWARNING_c
 		Data *=cWARNING
 		Data *#1
 		Data *=spacereq
+	Const cCALLEX=!-coms_start
+		data *^cCALLEX_c
+		Data *=cCALLEX
+		Data *#1
+		Data *=spacereq
 	Const cOVERRIDE=!-coms_start
 		data *^cOVERRIDE_c
 		Data *=cOVERRIDE
 		Data *#1
 		Data *=spacereq
+	Const cLIBRARY=!-coms_start
+		data *^cLIBRARY_c
+		Data *=cLIBRARY
+		Data *#1
+		Data *=spacereq
 	Const cHEX=!-coms_start
 		data *^cHEX_c
 		Data *=cHEX
@@ -347,8 +349,6 @@ Const compointersloc^pointers
 Data pointersvars#numberofcommandsvars+1
 Const compointersvarsloc^pointersvars
 
-Const cdataloc^cDATA_s
-
 const x_call_flag=0x80000000
 
 #declare coresp
@@ -417,12 +417,9 @@ EndFunction
 
 
 
-Function sortcommands(data pointerscursor,data nrofcomms)
+Function sortcommands(sv pointerscursor,sd nrofcomms,sd datacursor)
 #it's that old strategy elseif will be only else if let unsorted, endelseif/endelse, maybe more
-	Data datacursor#1
-	Data datacursorini%cdataloc
-	Data i#1
-	Data zero=0
+	sd i=0
 #	Data sz#1
 #	Data j#1
 	Data dsize=dwsz
@@ -431,8 +428,6 @@ Function sortcommands(data pointerscurso
 #	Data ptrvalstand#1
 #	Data dataval#1
 
-	Set datacursor datacursorini
-	Set i zero
 	While i<nrofcomms
 #		SetCall sz strlen(datacursor#)
 #		Set j i
@@ -459,17 +454,19 @@ Function sortcommands(data pointerscurso
 		Add datacursor dsize
 		Inc i
 	EndWhile
-	Set pointerscursor# zero
+	Set pointerscursor# (NULL)
 EndFunction
 
 Function sortallcommands()
 #put commands pointers at init
-	Data pointerscursor%compointersloc
+	vdata commandscursorini%comsloc
+	vData pointerscursor%compointersloc
 	Data comms=numberofcommands
 
-	Call sortcommands(pointerscursor,comms)
+	Call sortcommands(pointerscursor,comms,commandscursorini)
 
-	Data pointersvarscursor%compointersvarsloc
+	vData datacursorini%cdataloc
+	vData pointersvarscursor%compointersvarsloc
 	Data variables=numberofcommandsvars
-	Call sortcommands(pointersvarscursor,variables)
+	Call sortcommands(pointersvarscursor,variables,datacursorini)
 EndFunction
