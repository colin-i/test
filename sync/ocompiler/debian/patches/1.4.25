Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-4.25) bionic; urgency=medium
 .
   * include sec
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-01-25

--- ocompiler-1.orig/.ocompiler.txt
+++ ocompiler-1/.ocompiler.txt
@@ -65,4 +65,8 @@ underscore_pref=0
 
 16. RETURNs at main scope like EXIT.
 0 is No; 1 is Yes
-exit_end=0
\ No newline at end of file
+exit_end=0
+
+17. Take second file path at INCLUDE statement.
+0 is No; 1 is Yes
+include_sec=0
\ No newline at end of file
--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -346,7 +346,8 @@
 	<br>
 	The return command is used to terminate the program or a function.
 	<br>
-	It returns the value. The asm value termination is <i>ret</i> (0xc3). To return <i>int 0x80</i>(0xcd,0x80;linux sys_exit;eax=1,ebx=return value) use <b>Exit</b> or set exit_end preference to 1.
+	It returns the value. The asm value termination is <i>ret</i> (0xc3). To return <i>int 0x80</i>(0xcd,0x80;linux sys_exit;eax=1,ebx=return value) use <b>Exit</b>.
+	To return like <b>Exit</b> at main scope but usign <b>Return</b> set exit_end preference to 1.
 	<br>
 	Example:
 	<br>
@@ -721,12 +722,14 @@
 <h3><a name="includingfiles">X. Including files</a></h3>
 <p>
 	The program can be formed with multiple files using the <b>Include</b> command.
+	If compiling for multiple oses add a second path at <b>INCLUDE</b>;
+		the preference include_sec 0 will take the first path, 1 will take the second path.
 	<p>
 	Example:
 	<br>
 	<a class="code">
         Include "files\\headers.h"<br>
-        Include "files\\main.o"</a>
+        Include "files\\headers_win.h" "files\\headers_lin.h"</a>
 	</p>
 </p>
 <h3><a name="exec">XI. Creating executable files</a></h3>
--- ocompiler-1.orig/src/files/actions/main/index/function.s
+++ ocompiler-1/src/files/actions/main/index/function.s
@@ -32,4 +32,4 @@ Else
 		Data declarefn=declarefunction
 		SetCall errormsg parsefunction(pcontent,pcomsize,declarefn,subtype)
 	endif
-EndElse
\ No newline at end of file
+EndElse
--- ocompiler-1.orig/src/files/actions/main/index/include.s
+++ ocompiler-1/src/files/actions/main/index/include.s
@@ -1,16 +1,27 @@
 
 
-Data quotsz=0
-Data escapes=0
+Data quotsz#1
+Data escapes#1
 Data pquotsz^quotsz
 Data pescapes^escapes
 
 SetCall errormsg quotinmem(pcontent,pcomsize,pquotsz,pescapes)
 if errormsg==noerr
-	SetCall errormsg addtosecstresc(pcontent,pcomsize,quotsz,escapes,ptrmiscbag,zero)
-	If errormsg==noerr
+	if include_sec==(TRUE)
+		add quotsz escapes
+		call advancecursors(pcontent,pcomsize,quotsz)
 		Call stepcursors(pcontent,pcomsize)
-		Set includebool one
-	EndIf
+		call spaces(pcontent,pcomsize)
+		SetCall errormsg quotinmem(pcontent,pcomsize,pquotsz,pescapes)
+	endif
+	if errormsg==noerr
+		SetCall errormsg addtosecstresc(pcontent,pcomsize,quotsz,escapes,ptrmiscbag,zero)
+		If errormsg==noerr
+			Call stepcursors(pcontent,pcomsize)
+			Set includebool one
+			if include_sec==(FALSE)
+				SetCall errormsg include_sec_skip(pcontent,pcomsize)
+			endif
+		EndIf
+	endif
 EndIf
-
--- ocompiler-1.orig/src/files/functions.s
+++ ocompiler-1/src/files/functions.s
@@ -43,7 +43,7 @@ Include "./functions/pref/sdsv.s"
 Include "./functions/64/bit.s"
 Include "./functions/64/reloc.s"
 
-Include "./functions/incld.s"
+Include "./functions/include.s"
 Include "./functions/dataassign.s"
 Include "./functions/enumbags.s"
 Include "./functions/import.s"
--- ocompiler-1.orig/src/files/functions/incld.s
+++ /dev/null
@@ -1,151 +0,0 @@
-
-Data includebool#1
-
-Str contentoffile#1
-Data sizeoffile#1
-Data offsetoffile#1
-Data lineoffile#1
-Data nameofstoffile#1
-
-Const contentoffileoff=2*dwsz
-Const lineoffile_offset=contentoffileoff+dwsz
-
-Const includestructure^contentoffile
-
-function offsetoffile_value()
-	sd offsetoffl
-	data null=NULL
-	data true=TRUE
-	set offsetoffl null
-	data ptrincludedir%ptrincludedir
-	data flag_max_path=flag_MAX_PATH
-	if ptrincludedir#==true
-		add offsetoffl flag_max_path
-	endif
-	return offsetoffl
-endfunction
-
-#err
-Function include(Str path)
-	Data zero=0
-	Data one=1
-
-	Str contentoffl#1
-	Data sizeoffl#1
-	Data offsetoffl#1
-	Data *lineoffl=0
-	Chars nameoffl#shortstrsize
-
-	Data err#1
-	Data noerr=noerror
-
-	Const includeset^contentoffl
-	Data includeset%includeset
-
-	Data psizeoffl^sizeoffl
-	Data pcontentoffl%includeset
-
-	setcall offsetoffl offsetoffile_value()
-
-	SetCall err file_get_content_ofs(path,psizeoffl,pcontentoffl,offsetoffl)
-	If err!=noerr
-		Return err
-	EndIf
-
-	Str folders#1
-	SetCall folders endoffolders(path)
-
-	data ptrincludedir%ptrincludedir
-	if ptrincludedir#==(TRUE)
-		data charpointer#1
-		setcall charpointer getcwd(pcontentoffl#,(flag_MAX_PATH))
-		if charpointer==(NULL)
-			str getcwderr="Getcdw error."
-			return getcwderr
-		endif
-
-		setcall err addtolog_withchar(pcontentoffl#,(log_pathfolder))
-		If err!=noerr;Return err;EndIf
-
-		chars storechar#1
-		set storechar folders#
-		set folders# 0
-
-		data int#1
-		data chdirok=chdirok
-		setcall int changedir(path)
-		#0 success
-		if int!=chdirok
-			str chdirerr="Chdir error."
-			return chdirerr
-		endif
-
-		set folders# storechar
-	endif
-
-	setcall err addtolog_withchar(path,(log_pathname))
-	If err!=noerr;Return err;EndIf
-
-	Data strsz#1
-	SetCall strsz strlen(path)
-	Data fnamesize#1
-	Set fnamesize path
-	Add fnamesize strsz
-	Sub fnamesize folders
-
-	Data allowedforsize=shortstrsize
-	Data allowedsize#1
-
-	Set allowedsize allowedforsize
-	Sub allowedsize one
-
-	Data moresize#1
-	Set moresize zero
-
-	If fnamesize>allowedsize
-		Set fnamesize allowedsize
-		Sub fnamesize one
-		Set moresize one
-	EndIf
-
-	Str dest#1
-	Str initialdest^nameoffl
-	Set dest initialdest
-	Call memtomem(dest,folders,fnamesize)
-
-	Add dest fnamesize
-	If moresize==one
-		Chars morestr="~"
-		Set dest# morestr
-		Add dest one
-	EndIf
-
-	Set dest# 0
-
-
-	Data pincludes%ptrincludes
-	Data isetsize=includesetSz
-
-	SetCall err addtosec(includeset,isetsize,pincludes)
-	If err!=noerr
-		Return err
-	EndIf
-
-	Data pointers%includestructure
-	Data sizeadd#1
-	Set sizeadd isetsize
-	Sub sizeadd allowedforsize
-	Call memtomem(pointers,includeset,sizeadd)
-
-	Data includespoint#1
-	Data ptrincludespoint^includespoint
-	Call getcontReg(pincludes,ptrincludespoint)
-	Sub includespoint allowedforsize
-
-	Data envinccursor#1
-	Set envinccursor pointers
-	Add envinccursor sizeadd
-	Set envinccursor# includespoint
-
-	Return noerr
-EndFunction
\ No newline at end of file
--- /dev/null
+++ ocompiler-1/src/files/functions/include.s
@@ -0,0 +1,172 @@
+
+Data includebool#1
+
+Str contentoffile#1
+Data sizeoffile#1
+Data offsetoffile#1
+Data lineoffile#1
+Data nameofstoffile#1
+
+Const contentoffileoff=2*dwsz
+Const lineoffile_offset=contentoffileoff+dwsz
+
+Const includestructure^contentoffile
+
+function offsetoffile_value()
+	sd offsetoffl
+	data null=NULL
+	data true=TRUE
+	set offsetoffl null
+	data ptrincludedir%ptrincludedir
+	data flag_max_path=flag_MAX_PATH
+	if ptrincludedir#==true
+		add offsetoffl flag_max_path
+	endif
+	return offsetoffl
+endfunction
+
+#err
+Function include(Str path)
+	Data zero=0
+	Data one=1
+
+	Str contentoffl#1
+	Data sizeoffl#1
+	Data offsetoffl#1
+	Data *lineoffl=0
+	Chars nameoffl#shortstrsize
+
+	Data err#1
+	Data noerr=noerror
+
+	Const includeset^contentoffl
+	Data includeset%includeset
+
+	Data psizeoffl^sizeoffl
+	Data pcontentoffl%includeset
+
+	setcall offsetoffl offsetoffile_value()
+
+	SetCall err file_get_content_ofs(path,psizeoffl,pcontentoffl,offsetoffl)
+	If err!=noerr
+		Return err
+	EndIf
+
+	Str folders#1
+	SetCall folders endoffolders(path)
+
+	data ptrincludedir%ptrincludedir
+	if ptrincludedir#==(TRUE)
+		data charpointer#1
+		setcall charpointer getcwd(pcontentoffl#,(flag_MAX_PATH))
+		if charpointer==(NULL)
+			str getcwderr="Getcdw error."
+			return getcwderr
+		endif
+
+		setcall err addtolog_withchar(pcontentoffl#,(log_pathfolder))
+		If err!=noerr;Return err;EndIf
+
+		chars storechar#1
+		set storechar folders#
+		set folders# 0
+
+		data int#1
+		data chdirok=chdirok
+		setcall int changedir(path)
+		#0 success
+		if int!=chdirok
+			str chdirerr="Chdir error."
+			return chdirerr
+		endif
+
+		set folders# storechar
+	endif
+
+	setcall err addtolog_withchar(path,(log_pathname))
+	If err!=noerr;Return err;EndIf
+
+	Data strsz#1
+	SetCall strsz strlen(path)
+	Data fnamesize#1
+	Set fnamesize path
+	Add fnamesize strsz
+	Sub fnamesize folders
+
+	Data allowedforsize=shortstrsize
+	Data allowedsize#1
+
+	Set allowedsize allowedforsize
+	Sub allowedsize one
+
+	Data moresize#1
+	Set moresize zero
+
+	If fnamesize>allowedsize
+		Set fnamesize allowedsize
+		Sub fnamesize one
+		Set moresize one
+	EndIf
+
+	Str dest#1
+	Str initialdest^nameoffl
+	Set dest initialdest
+	Call memtomem(dest,folders,fnamesize)
+
+	Add dest fnamesize
+	If moresize==one
+		Chars morestr="~"
+		Set dest# morestr
+		Add dest one
+	EndIf
+
+	Set dest# 0
+
+
+	Data pincludes%ptrincludes
+	Data isetsize=includesetSz
+
+	SetCall err addtosec(includeset,isetsize,pincludes)
+	If err!=noerr
+		Return err
+	EndIf
+
+	Data pointers%includestructure
+	Data sizeadd#1
+	Set sizeadd isetsize
+	Sub sizeadd allowedforsize
+	Call memtomem(pointers,includeset,sizeadd)
+
+	Data includespoint#1
+	Data ptrincludespoint^includespoint
+	Call getcontReg(pincludes,ptrincludespoint)
+	Sub includespoint allowedforsize
+
+	Data envinccursor#1
+	Set envinccursor pointers
+	Add envinccursor sizeadd
+	Set envinccursor# includespoint
+
+	Return noerr
+EndFunction
+
+#er
+function include_sec_skip(sv pcontent,sd pcomsize)
+	ss content;set content pcontent#
+	sd size;set size pcomsize#
+	call spaces(#content,#size)
+	if content#==(asciidoublequote)
+		sd err
+		sd s;sd e
+		SetCall err quotinmem(#content,#size,#s,#e)
+		if err==(noerror)
+			add s e
+			add content s;sub size s
+			call stepcursors(#content,#size)
+			set pcontent# content;set pcomsize# size
+			return (noerror)
+		endif
+		return err
+	endif
+	return (noerror)
+endfunction
--- ocompiler-1.orig/src/files/functions/pref/preffuncs.s
+++ ocompiler-1/src/files/functions/pref/preffuncs.s
@@ -156,6 +156,7 @@ function initpreferences()
 	sd p_pref_reloc_64%p_pref_reloc_64
 	sd p_underscore_pref%p_underscore_pref
 	sd p_exit_end%p_exit_end
+	sd p_include_sec%p_include_sec
 
 	data true=TRUE
 	data false=FALSE
@@ -176,13 +177,14 @@ function initpreferences()
 	set p_pref_reloc_64# true
 	set p_underscore_pref# false
 	set p_exit_end# false
+	set p_include_sec# false
 
 	#this is used also at arguments
 
 	sv q%nr_of_prefs_pointers_p
-	set q# ptrwarningsbool;incst q; set q# p_over_pref;incst q; set q# p_hidden_pref;incst q; set q# p_w_as_e;incst q; set q# ptrlogbool;incst q; set q# ptrcodeFnObj;incst q; set q# cb;incst q;           set q# ptrincludedir;incst q; set q# text_fn_info;incst q;    set q# conv_64;incst q;   set q# p_nul_res_pref;incst q; set q# sdsv_p;incst q;     set q# p_inplace_reloc_pref;incst q; set q# p_pref_reloc_64;incst q; set q# p_underscore_pref;incst q; set q# p_exit_end
+	set q# ptrwarningsbool;incst q; set q# p_over_pref;incst q; set q# p_hidden_pref;incst q; set q# p_w_as_e;incst q; set q# ptrlogbool;incst q; set q# ptrcodeFnObj;incst q; set q# cb;incst q;           set q# ptrincludedir;incst q; set q# text_fn_info;incst q;    set q# conv_64;incst q;   set q# p_nul_res_pref;incst q; set q# sdsv_p;incst q;     set q# p_inplace_reloc_pref;incst q; set q# p_pref_reloc_64;incst q; set q# p_underscore_pref;incst q; set q# p_exit_end;incst q; set q# p_include_sec
 	sv t%nr_of_prefs_strings_p
-	set t# "warnings";incst t;      set t# "over_pref";incst t; set t# "hidden_pref";incst t; set t# "w_as_e";incst t; set t# "logfile";incst t;  set t# "codeFnObj";incst t;  set t# "const_warn";incst t; set t# "includedir";incst t;  set t# "function_name";incst t; set t# "conv_64";incst t; set t# "nul_res_pref";incst t; set t# "sd_as_sv";incst t; set t# "inplace_reloc";incst t;      set t# "reloc_64";incst t;      set t# "underscore_pref";incst t; set t# "exit_end"
+	set t# "warnings";incst t;      set t# "over_pref";incst t; set t# "hidden_pref";incst t; set t# "w_as_e";incst t; set t# "logfile";incst t;  set t# "codeFnObj";incst t;  set t# "const_warn";incst t; set t# "includedir";incst t;  set t# "function_name";incst t; set t# "conv_64";incst t; set t# "nul_res_pref";incst t; set t# "sd_as_sv";incst t; set t# "inplace_reloc";incst t;      set t# "reloc_64";incst t;      set t# "underscore_pref";incst t; set t# "exit_end";incst t; set t# "include_sec"
 endfunction
 
 #void
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -377,7 +377,7 @@ const p_hidden_pref^hidden_pref
 Data safecurrentdirtopath#1
 const p_safecurrentdirtopath^safecurrentdirtopath
 
-const nr_of_prefs=16
+const nr_of_prefs=17
 const nr_of_prefs_jumper=nr_of_prefs*:
 
 vdata nr_of_prefs_pointers#nr_of_prefs;vdata nr_of_prefs_strings#nr_of_prefs
@@ -394,3 +394,6 @@ data exit_end#1
 const p_exit_end^exit_end
 data real_exit_end#1
 const p_real_exit_end^real_exit_end
+
+data include_sec#1
+const p_include_sec^include_sec
