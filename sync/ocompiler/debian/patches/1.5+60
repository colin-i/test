Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+60) jammy; urgency=medium
 .
   * ostrip: dynsym and fix the build
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-11-03

--- ocompiler-1.orig/arh/pub
+++ ocompiler-1/arh/pub
@@ -2,7 +2,7 @@
 #1
 
 last=`curl https://api.github.com/repos/colin-i/o/releases/latest -s | jq .tag_name -r` && \
-~/test/debinit2 "${1}" bionic && \
+~/test/debinit2 "${1}" jammy && \
 ~/test/keyring2 && \
 ~/test/deb && \
 ~/test/publp && \
@@ -17,17 +17,19 @@ last=`curl https://api.github.com/repos/
 ~/test/pub upapp rpm && \
 ~/test/pub2 && \
 ~/test/publp2 && \
-~/test/lp && \
-~/test/lp x && \
 ~/test/keyring && \
 ~/test/del x ${last} && \
 ~/test/arh2 ${last} && \
-sed -i '1s/bionic/xenial/' debian/changelog && \
+sed -i '1s/jammy/xenial/' debian/changelog && \
 sed -i '1s/)/x)/' debian/changelog && \
+~/test/debuild && \
 ~/test/deb && \
 ~/test/publp && \
+git restore debian/changelog && \
 ~/test/publp2 && \
-git restore debian/changelog
+~/test/lp 0 "bionic focal" && \
+~/test/lp x "bionic focal" && \
+git diff
 #is something wrong with copy package and rebuild (maybe same with copy-package without -b)
 
 #plans:
--- ocompiler-1.orig/ostrip/Makefile
+++ ocompiler-1/ostrip/Makefile
@@ -26,8 +26,9 @@ compile: ${OBJ}
 	@echo
 	${ATCCCOM} ${FULLOBJO}
 
+#xenial do wrong access somehow, bionic and focal do extra code at text and need to extra code at realoffset for .text
 strip:
-	if [ "$(shell lsb_release -cs)" != "xenial" ]; then \
+	if [ "$(shell lsb_release -cs)" = "jammy" ]; then \
 		${FULLOBJ} ${FULLOBJ} ${FULLOBJLOG} ${FULLOBJO}; \
 		if [ "$$?" = "0" ]; then \
 			python3 strip.py ${FULLOBJ} ${FULLOBJ}; \
--- ocompiler-1.orig/ostrip/after.s
+++ ocompiler-1/ostrip/after.s
@@ -52,6 +52,7 @@ const sym__to_shndx=datasize+charsize+ch
 	return (NULL)
 endfunction
 
+#bool
 function aftercall_replace(sv psym,sv pstr,ss astr,sv aoffset)
 	sd pos;setcall pos shnames_find_sec(pstr,astr)
 	if pos!=-1
@@ -66,11 +67,12 @@ function aftercall_replace(sv psym,sv ps
 				set sec#v^ aoffset
 				call verbose((verbose_count))
 				call verbose((verbose_flush))
-				ret
+				return (TRUE)
 			endif
 			add sec (sym_size)
 		endwhile
 	endif
+	return (FALSE)
 endfunction
 
 function aftercall_in_objects(sv objects,ss astr,sv aoffset,sd textinneroffset)
--- ocompiler-1.orig/ostrip/file.s
+++ ocompiler-1/ostrip/file.s
@@ -83,12 +83,20 @@ function get_file(sd name,sv p_file,sv s
 				#exec
 					#get sec indexes from section names table
 					sd reladyn
+					sd dynsym
+					sd dynstr
 					setcall return_value shnames(file,offset,shentsize,shstrndx,secN,pnrsec,(NULL),#reladyn)
 					call get_section_item(file,offset,end,#return_value,0,shentsize)
 					call write_symtab_offset(file,offset,end,shentsize,only_at_exec)
 					if reladyn!=-1
 						setcall frees.execreladynsize get_section_many(file,offset,end,shentsize,reladyn,#frees.execreladyn)
 					endif
+					if dynsym!=-1
+						if dynstr!=-1
+							setcall frees.execdynsymsize get_section_many(file,offset,end,shentsize,dynsym,#frees.execdynsym)
+							setcall frees.execdynstrsize get_section_many(file,offset,end,shentsize,dynstr,#frees.execdynstr)
+						endif
+					endif
 				endelse
 
 				#get sections
@@ -164,6 +172,10 @@ function shnames(sd file,sd offset,sd sh
 		setcall psecond_sec# shnames_find(mem,end,".text")
 	else
 		setcall only_at_exec# shnames_find(mem,end,".rela.dyn")
+		incst only_at_exec
+		setcall only_at_exec# shnames_find(mem,end,".dynsym")
+		incst only_at_exec
+		setcall only_at_exec# shnames_find(mem,end,".dynstr")
 	endelse
 	#else set datasec firstnrsec
 
--- ocompiler-1.orig/ostrip/header.h
+++ ocompiler-1/ostrip/header.h
@@ -4,6 +4,8 @@ include "../src/files/headers/strip.h"
 const EXIT_SUCCESS=0
 const EXIT_FAILURE=1
 const NULL=0
+const TRUE=1
+const FALSE=0
 
 Const SEEK_SET=0
 Const SEEK_CUR=1
--- ocompiler-1.orig/ostrip/ostrip.s
+++ ocompiler-1/ostrip/ostrip.s
@@ -100,6 +100,8 @@ if argc>=(1+3)  #0 is all the time
 	#and set data null here, it is useless there for objects call
 	set pexe# (NULL)   #data
 	set frees.execreladyn (NULL)
+	set frees.execdynsym (NULL)
+	set frees.execdynstr (NULL)
 
 	sv pobjects%pobjects
 	set pobjects# (NULL) #this is on the main plan, is after ss exec at frees
@@ -149,6 +151,15 @@ if argc>=(1+3)  #0 is all the time
 
 		#replace on the field
 		call aftercall_in_objects(pobjects#,acall,datavaddr,textinneroffset)
+
+		#replace in dynsym (can be at shared, mainly)
+		if frees.execdynsym!=(NULL)
+			sd bool;setcall bool aftercall_replace(#frees.execdynsym,#frees.execdynstr,acall,datavaddr)
+			#it is not in all cases here (even at shared)
+			if bool==(TRUE)
+				call write_sec(".dynsym",frees.execdynsym,frees.execdynsymsize)
+			endif
+		endif
 	else
 		#skip symtab if no aftercall
 		set s3c (NULL)  #write will stop there
--- ocompiler-1.orig/ostrip/strip.py
+++ ocompiler-1/ostrip/strip.py
@@ -45,10 +45,15 @@ if (os.path.exists(s3)):
 			with open(s3,'rb') as s:
 				f.write(s.read())
 s4=".rela.dyn"
+objcopy=["objcopy",outputfile,"--update-section",s1+"="+s1,"--update-section",s2+"="+s2]
 if (os.path.exists(s4)):
-	proc=subprocess.run(["objcopy",outputfile,"--update-section",s1+"="+s1,"--update-section",s2+"="+s2,"--update-section",s4+"="+s4])
-else:
-	proc=subprocess.run(["objcopy",outputfile,"--update-section",s1+"="+s1,"--update-section",s2+"="+s2])
+	objcopy.append("--update-section")
+	objcopy.append(s4+"="+s4)
+s5=".dynsym"
+if (os.path.exists(s5)):
+	objcopy.append("--update-section")
+	objcopy.append(s5+"="+s5)
+proc=subprocess.run(objcopy)
 
 if proc.returncode==0:
 	import lief
--- ocompiler-1.orig/ostrip/throwless.s
+++ ocompiler-1/ostrip/throwless.s
@@ -8,11 +8,13 @@ function frees()
 	valuex exetext#1;valuex exetextsize#1
 	valuex exesym#section_nr_of_values
 	valuex exestr#section_nr_of_values
-	valuex execreladyn#1;valuex execreladynsize#1
 	const pexedata^exedata;const pexedatasize^exedatasize
 	const pexetext^exetext
 	const pexesym^exesym
 	const pexestr^exestr
+	valuex execreladyn#1;valuex execreladynsize#1
+	valuex execdynsym#1;valuex execdynsymsize#1
+	valuex execdynstr#1;valuex execdynstrsize#1
 		if exedata!=(NULL)
 			call free(exedata)
 			if exetext!=(NULL)
@@ -28,6 +30,12 @@ function frees()
 		if execreladyn!=(NULL)
 			call free(execreladyn)
 		endif
+		if execdynsym!=(NULL)
+			call free(execdynsym)
+			if execdynstr!=(NULL)
+				call free(execdynstr)
+			endif
+		endif
 		valuex objects#1
 		const pobjects^objects
 		if objects!=(NULL)
