Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+29) xenial; urgency=medium
 .
   * Cast two args fix, and two args second Imm optim
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-08-14

--- ocompiler-1.orig/src/files/functions/actions/argstwo.s
+++ ocompiler-1/src/files/functions/actions/argstwo.s
@@ -213,12 +213,15 @@ Function twoargs(data ptrcontent,data pt
 			#elseif subtype==(cCALLEX)
 			#	add opsec 1
 			#endelseif
-			SetCall errnr write_imm_sign(dataargsec,regopcode)
+			if subtype!=(cCALLEX)
+				SetCall errnr write_imm_trunc(dataargsec,regopcode,lowprim,dataargprim,sufixprim)
+			else
+				SetCall errnr write_imm_sign(dataargsec,regopcode)
+			endelse
 		else
 			if p_prefix#==(FALSE)
 				sd comp_at_bigs
-				setcall imm getfirst_isimm()
-				setcall comp_at_bigs comp_sec(lowsec,dataargprim,sufixprim,dataargsec,sufixsec,sameimportant,is_prepare,imm)
+				setcall comp_at_bigs comp_sec(lowsec,dataargprim,sufixprim,dataargsec,sufixsec,sameimportant,is_prepare)
 				setcall errnr writeop_promotes(dataargsec,opsec,sufixsec,regopcode,lowsec,comp_at_bigs)
 			else
 			#only take at prefix on regcode
@@ -226,7 +229,7 @@ Function twoargs(data ptrcontent,data pt
 				#call writeoperation_take(#errnr,dataargsec,sufixsec,regopcode,lowsec)
 				#pprefix is reset in the road at remind
 			endelse
-			call restore_argmask()
+			call restore_argmask_ex(dataargsec)
 		endelse
 		If errnr!=noerr
 			Return errnr
@@ -356,10 +359,10 @@ Function twoargs(data ptrcontent,data pt
 EndFunction
 
 #-1 normal, 0 unpromote, 1 sign extend, 2 zero extend
-function comp_sec(sd lowsec,sd dataargprim,sd sufixprim,sd dataargsec,sd sufixsec,sd sameimportant,sd is_prepare,sd immprim)
+function comp_sec(sd lowsec,sd dataargprim,sd sufixprim,sd dataargsec,sd sufixsec,sd sameimportant,sd is_prepare)
 	sd prim
 	if lowsec==(FALSE)
-		setcall prim is_big_imm(immprim,dataargprim,sufixprim)
+		setcall prim is_big_imm(dataargprim,sufixprim)
 		sd sec;setcall sec is_big(dataargsec,sufixsec)
 		if prim!=sec
 			if sec==(TRUE)
@@ -371,7 +374,7 @@ function comp_sec(sd lowsec,sd dataargpr
 			endelseif
 		endif
 	elseif is_prepare==(TRUE)
-		setcall prim is_big_imm(immprim,dataargprim,sufixprim)
+		setcall prim is_big_imm(dataargprim,sufixprim)
 		if prim==(TRUE)
 			#zero extend all r64
 			sd p;setcall p val64_p_get()
@@ -383,8 +386,10 @@ function comp_sec(sd lowsec,sd dataargpr
 endfunction
 
 #bool
-function is_big_imm(sd imm,sd data,sd sufix)
-	if imm==(FALSE)
+function is_big_imm(sd data,sd sufix)
+	sd immprim
+	setcall immprim getfirst_isimm()
+	if immprim==(FALSE)
 		sd b
 		setcall b is_big(data,sufix)
 		return b
@@ -460,19 +465,26 @@ function store_argmask(sd data)
 	set a# data#
 endfunction
 function restore_argmask()
+	call restore_argmask_ex((NULL))
+endfunction
+function restore_argmask_ex(sd original)
 	sv a
 	setcall a argmasks()
 	if a#>0
-		dec a#
-		if a#==1
+		sv copy;set copy a
+		if a#==2
 			add a (2*:)
 		endif
 		incst a
 		sd data
 		set data a#
+		if data!=original
+			ret  #this is the case when catsfirst secondnothing and try to restore second onfirst
+		endif
 		incst a
 		add data (maskoffset)
 		set data# a#
+		dec copy
 	endif
 endfunction
 
--- ocompiler-1.orig/src/files/functions/argument/argument.s
+++ ocompiler-1/src/files/functions/argument/argument.s
@@ -243,20 +243,3 @@ function comp_one(sd low,sd dataarg,sd s
 	endif
 	return -1
 endfunction
-
-#er
-function write_imm_sign(sd dataarg,sd regopcode)
-	vData codeptr%ptrcodesec
-	sd err
-	setcall err rex_w_if64()
-	if err==(noerror)
-		chars movs_imm=mov_imm_to_rm
-		SetCall err addtosec(#movs_imm,1,codeptr)
-		if err==(noerror)
-			sd op
-			SetCall op formmodrm((RegReg),0,regopcode)
-			setcall err write_imm(dataarg,op)
-		endif
-	endif
-	return err
-endfunction
--- ocompiler-1.orig/src/files/functions/argument/imm.s
+++ ocompiler-1/src/files/functions/argument/imm.s
@@ -74,23 +74,6 @@ function getisimm()
 endfunction
 
 
-
-#er
-function write_imm(sd dataarg,sd op)
-	chars immop#1
-	data value#1
-	data immadd^immop
-	set immop op
-	set value dataarg
-	data sz=5
-	data code%ptrcodesec
-	sd err
-	setcall err addtosec(immadd,sz,code)
-	call resetisimm()
-	return err
-endfunction
-
-
 function storefirst_isimm()
 	data firstimm#1
 	const ptr_first_isimm^firstimm
@@ -118,3 +101,61 @@ function switchimm()
 		set ptr# false
 	endif
 endfunction
+
+
+#er
+function write_imm(sd dataarg,sd op)
+	chars immop#1
+	data value#1
+	data immadd^immop
+	set immop op
+	set value dataarg
+	data sz=5
+	data code%ptrcodesec
+	sd err
+	setcall err addtosec(immadd,sz,code)
+	call resetisimm()
+	return err
+endfunction
+#er
+function write_imm_sign(sd dataarg,sd regopcode)
+	vData codeptr%ptrcodesec
+	sd err
+	setcall err rex_w_if64()
+	if err==(noerror)
+		chars movs_imm=mov_imm_to_rm
+		SetCall err addtosec(#movs_imm,1,codeptr)
+		if err==(noerror)
+			sd op
+			SetCall op formmodrm((RegReg),0,regopcode)
+			setcall err write_imm(dataarg,op)
+		endif
+	endif
+	return err
+endfunction
+#err
+function write_imm_trunc(sd value,sd reg,sd low,sd data,sd sufix)
+	sd err
+	if low==(FALSE)
+		sd bool;setcall bool is_big_imm(data,sufix)
+		if bool==(FALSE)
+			#mediu
+			add reg (ateaximm)
+			setcall err write_imm(value,reg)
+			return err
+		endif
+		#big
+		setcall err write_imm_sign(value,reg)  #there is one if64 useless inside
+		return err
+	endif
+	#low
+	chars a#2
+	ss b^a;set b# (atalimm)
+	add b# reg
+	inc b
+	set b# value
+	dec b
+	vData codeptr%ptrcodesec
+	setcall err addtosec(b,2,codeptr)
+	return err
+endfunction
--- ocompiler-1.orig/src/files/headers/asm.h
+++ ocompiler-1/src/files/headers/asm.h
@@ -19,6 +19,7 @@ const intimm8=0xCD
 const jmp_rel8=0xeb
 const jnc_instruction=0x73
 
+const atalimm=0xb0
 const ateaximm=0xb8
 Const atedximm=0xba
 Const moveatmemtheproc=0x89
