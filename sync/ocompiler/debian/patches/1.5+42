Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+42) xenial; urgency=medium
 .
   * fix stack reserve
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-09-09

--- ocompiler-1.orig/arh/pub
+++ ocompiler-1/arh/pub
@@ -23,3 +23,8 @@ last=`curl https://api.github.com/repos/
 ~/test/keyring && \
 ~/test/del x ${last} && \
 ~/test/arh2 ${last}
+
+
+#plans
+#simple and or
+#={"a","b"}
--- ocompiler-1.orig/src/files/actions/main.s
+++ ocompiler-1/src/files/actions/main.s
@@ -7,7 +7,7 @@ data contentlineinclude=lineoffile_offse
 
 data dot_comma_end#1;set dot_comma_end 0
 
-set parses (pass_fns_imps)
+set parses (pass_init)
 data logaux#1
 set logaux logfile
 set logfile negative
@@ -96,7 +96,7 @@ While includesReg!=null
 					set errormsg endfnexp
 					Call Message(errormsg)
 				Else
-					if parses==(pass_fns_imps)
+					if parses==(pass_init)
 						set parses (pass_calls)
 						setcall errormsg align_alloc(functionTagIndex)
 						set g_e_b_p# (FALSE)  #in case was set, for writes
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -81,17 +81,24 @@ if loop==1
 		If errormsg==noerr
 			if parses!=(pass_write)
 				if commandset!=(cCOMMENT)
-					if parses==(pass_fns_imps)
+					if parses==(pass_init)
 						#tested at function gather; FORMAT is here starting with FUNCTIONX to set the mask knowing the format
-							if formatdefined==0;Set formatdefined 1;endif
-							If commandset==(cIMPORTLINK) #needing importx here
-							elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
-							ElseIf commandset==(cLIBRARY)
-							elseif commandset==(cINCLUDE)
-							Elseif commandset==(cFORMAT)
-							Elseif commandset==(cDECLAREAFTERCALL)  #and import
-							elseif commandset==(cWARNING)    #for addaref
-							else;set commandset (cCOMMENT);endelse
+						if formatdefined==0;Set formatdefined 1;endif
+						#if commandset==(cDECLARE)        #needing to find virtual start
+						#at object is difficult, there is no virtual, ostrip will use: ld...-Tdata calculated, objcopy --update-section, write memsize, ounused will include virtual point
+						#const at virtual start find
+						#	use offset on dataReg for !
+						#	const^ is not ok, use a mempbrk against ^ in declare.s at passes, init without ^,write only ^
+						#virtual.s,virtual_parse
+						#else
+						If commandset==(cIMPORTLINK) #needing importx here
+						elseif commandset==(cSTARTFUNCTION);elseif commandset==(cENDFUNCTION)
+						ElseIf commandset==(cLIBRARY)
+						elseif commandset==(cINCLUDE)
+						Elseif commandset==(cFORMAT)
+						Elseif commandset==(cDECLAREAFTERCALL)  #and import
+						elseif commandset==(cWARNING)    #for addaref
+						else;set commandset (cCOMMENT);endelse
 					else
 					#pass_calls
 						if commandset==(cCALL);elseif commandset==(cENDFUNCTION);elseif commandset==(cINCLUDE)
@@ -125,7 +132,7 @@ if loop==1
 		call entryscope_verify_code()
 				Include "./index/conditions.s"
 			ElseIf commandset==(cIMPORTLINK)
-				if parses==(pass_fns_imps);Include "./index/import.s"
+				if parses==(pass_init);Include "./index/import.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cSTARTFUNCTION)
 				Include "./index/function.s"
@@ -137,7 +144,7 @@ if loop==1
 			ElseIf commandset==(cINCLUDE)
 				Include "./index/include.s"
 			ElseIf commandset==(cFORMAT)
-				if parses==(pass_fns_imps);Include "./index/format.s"
+				if parses==(pass_init);Include "./index/format.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cDECLAREAFTERCALL)
 				if parses==(pass_write);Include "./index/aftercall.s";
@@ -151,7 +158,7 @@ if loop==1
 			ElseIf commandset==(cOVERRIDE)
 				Include "./index/override.s"
 			ElseIf commandset==(cLIBRARY)
-				if parses==(pass_fns_imps);Include "./index/library.s"
+				if parses==(pass_init);Include "./index/library.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cHEX)
 		call entryscope_verify_code()
--- ocompiler-1.orig/src/files/actions/main/index/declare.s
+++ ocompiler-1/src/files/actions/main/index/declare.s
@@ -20,5 +20,15 @@ elseif subtype==(cVALUE)
 else
 	sd declare_typenumber
 	setcall declare_typenumber commandSubtypeDeclare_to_typenumber(subtype)
-	SetCall errormsg dataassign(pcontent,pcomsize,declare_typenumber,0)
+	sd is_stack
+	sd typenumber
+	setcall typenumber stackfilter(declare_typenumber,#is_stack)
+	if is_stack==true
+		#must be at the start
+		call entryscope_verify_code()
+	endif
+	#	SetCall errormsg dataassign_ex(pcontent,pcomsize,typenumber,0,(TRUE))
+	#else
+		SetCall errormsg dataassign_ex(pcontent,pcomsize,typenumber,0,is_stack)
+	#endelse
 endelse
--- ocompiler-1.orig/src/files/actions/main/index/endfunction.s
+++ ocompiler-1/src/files/actions/main/index/endfunction.s
@@ -1,6 +1,6 @@
 
 
-if parses==(pass_fns_imps)
+if parses==(pass_init)
 	if innerfunction==false
 		Chars unexef="Unexpected ENDFUNCTION command."
 		Str unexeferr^unexef
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -86,7 +86,7 @@ Function parsefunction(data ptrcontent,d
 		Data ptrvalue^value
 		sd scope64
 		data p_parses%ptr_parses
-		if p_parses#==(pass_fns_imps)
+		if p_parses#==(pass_init)
 			setcall err fnimp_exists(content,sz) #it is at first pass when only fns and imports are
 			if err!=(noerror)
 				return err
--- ocompiler-1.orig/src/files/functions/dataassign.s
+++ ocompiler-1/src/files/functions/dataassign.s
@@ -1,20 +1,17 @@
 
 
 
-
 #err
 Function dataassign(sd ptrcontent,sd ptrsize,sd typenumber,sd long_mask)
+	sd err
+	setcall err dataassign_ex(ptrcontent,ptrsize,typenumber,long_mask,(FALSE))
+	return err
+endfunction
+
+#err
+Function dataassign_ex(sd ptrcontent,sd ptrsize,sd typenumber,sd long_mask,sd stack)
 	Data false=FALSE
 	Data true=TRUE
-	data stack#1
-	data ptrS^stack
-
-	setcall typenumber stackfilter(typenumber,ptrS)
-	if stack==true
-		#######must be at the start
-		call entryscope_verify_code()
-	endif
-
 	Str err#1
 	Data noerr=noerror
 	Chars sign#1
@@ -165,44 +162,23 @@ Function dataassign(sd ptrcontent,sd ptr
 			Return noerr
 		EndElse
 	ElseIf sign==(reserveascii)
-		SetCall err parseoperations(ptrcontent,ptrsize,size,ptrvalue,(TRUE))
-		If err!=noerr
-			Return err
-		EndIf
-		Chars negreserve="Unexpected negative value at reserve declaration."
-		Str ptrnegreserve^negreserve
-		If value<zero
-			Return ptrnegreserve
-		EndIf
-		Data dsz=dwsz
-		if stack==false
-			If typenumber!=charsnr
-				SetCall err maxvaluecheck(value)
-				If err!=noerr
-					Return err
-				EndIf
-				Mult value dsz
-				if long_mask!=0
-					mult value 2
+		setcall err get_reserve_size(ptrcontent,ptrsize,size,ptrvalue,stack,typenumber,long_mask)
+		if err==(noerror)
+			if stack==false
+				sd p_nul_res_pref%p_nul_res_pref
+				if p_nul_res_pref#==(TRUE)
+					sd datacont;call getcontplusReg(ptrdatasec,#datacont)
 				endif
-			EndIf
-			If value<zero
-				return ptrnegreserve
-			endIf
-			sd p_nul_res_pref%p_nul_res_pref
-			if p_nul_res_pref#==(TRUE)
-				sd datacont;call getcontplusReg(ptrdatasec,#datacont)
-			endif
-			SetCall err addtosec(0,value,ptrdatasec)
-			If err!=noerr;Return err;EndIf
-			if p_nul_res_pref#==(TRUE)
-				call memset(datacont,0,value)
-			endif
-		else
-			Mult value dsz
-			call growramp(value)
-		endelse
-		Return (noerror)
+				SetCall err addtosec(0,value,ptrdatasec)
+				If err!=noerr;Return err;EndIf
+				if p_nul_res_pref#==(TRUE)
+					call memset(datacont,0,value)
+				endif
+			else
+				call growramp(value)
+			endelse
+		endif
+		Return err
 	Else
 	#^ pointer
 		Set content ptrcontent#
@@ -383,3 +359,35 @@ function add_string_to_data(sd ptrconten
 	endif
 	return (noerror)
 endfunction
+
+#err
+function get_reserve_size(sv ptrcontent,sd ptrsize,sd size,sd ptrvalue,sd is_stack,sd typenumber,sd long_mask)
+	sd err
+	SetCall err parseoperations(ptrcontent,ptrsize,size,ptrvalue,(TRUE))
+	If err!=(noerror)
+		Return err
+	EndIf
+	Chars negreserve="Unexpected negative value at reserve declaration."
+	vStr ptrnegreserve^negreserve
+	If ptrvalue#<0
+		Return ptrnegreserve
+	EndIf
+	if is_stack==(FALSE)
+		If typenumber!=(charsnumber)
+			SetCall err maxvaluecheck(ptrvalue#)
+			If err!=(noerror)
+				Return err
+			EndIf
+			Mult ptrvalue# (dwsz)
+			if long_mask!=0
+				mult ptrvalue# 2
+			endif
+		EndIf
+		If ptrvalue#<0
+			return ptrnegreserve
+		endIf
+	else
+		Mult ptrvalue# :
+	endelse
+	return (noerror)
+endfunction
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -416,6 +416,6 @@ const odd_align=1
 data functionTagIndex#1  #need to be at call pass and last pass(scopes) and scopes alloc
 const ptrfunctionTagIndex^functionTagIndex
 
-const pass_fns_imps=3
+const pass_init=3
 const pass_calls=2
 const pass_write=1
