Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ocompiler (1-5+41) xenial; urgency=medium
 .
   * throw management
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-09-07

--- ocompiler-1.orig/o.html
+++ ocompiler-1/o.html
@@ -326,18 +326,26 @@
 	<br>
 	<b>ImportAfterCall</b> is used in objects to import an extern defined AfterCall.
 	<br>
+	<b>^</b> sign will create throwless variables.
+	<br>
 	<a class="code">
-	aftercall qwer<br>
-	const z^qwer<br>
+	function pre_test()<br>
+		return 3<br>
+	endfunction<br>
+	aftercall interrupt<br>
 	function test()<br>
-	str x%z<br>
-	set x# 1<br>
-	return 3<br>
+		return 3<br>
 	endfunction<br>
 	entry main()<br>
+	set interrupt 1<br>
+	call pre_test()<br>
+	#it is still going on<br>
+	value ^throwless^test<br>
+	call throwless()<br>
+	#it is still going on<br>
 	call test()<br>
-	return 5<br>
-	#this return will not be executed and the last EAX(RAX) will be 3</a>
+	#here is the end, the program last return was 3<br>
+	return 5</a>
 	</p>
 </p>
 
--- ocompiler-1.orig/src/files/actions/main.s
+++ ocompiler-1/src/files/actions/main.s
@@ -99,6 +99,7 @@ While includesReg!=null
 					if parses==(pass_fns_imps)
 						set parses (pass_calls)
 						setcall errormsg align_alloc(functionTagIndex)
+						set g_e_b_p# (FALSE)  #in case was set, for writes
 					else
 						set parses (pass_write)
 						set logfile logaux
--- ocompiler-1.orig/src/files/actions/main/index.s
+++ ocompiler-1/src/files/actions/main/index.s
@@ -89,6 +89,7 @@ if loop==1
 							ElseIf commandset==(cLIBRARY)
 							elseif commandset==(cINCLUDE)
 							Elseif commandset==(cFORMAT)
+							Elseif commandset==(cDECLAREAFTERCALL)  #and import
 							elseif commandset==(cWARNING)    #for addaref
 							else;set commandset (cCOMMENT);endelse
 					else
@@ -139,7 +140,9 @@ if loop==1
 				if parses==(pass_fns_imps);Include "./index/format.s"
 				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
 			ElseIf commandset==(cDECLAREAFTERCALL)
-				Include "./index/aftercall.s"
+				if parses==(pass_write);Include "./index/aftercall.s";
+				else;Call advancecursors(pcontent,pcomsize,comsize);endelse
+				set g_e_b_p# (TRUE)
 			ElseIf commandset==(cWARNING)
 				Include "./index/warning.s"
 			ElseIf commandset==(cCALLEX)
--- ocompiler-1.orig/src/files/actions/main/index/aftercall.s
+++ ocompiler-1/src/files/actions/main/index/aftercall.s
@@ -32,7 +32,7 @@ else
 		endif
 	endelse
 	if errormsg==(noerror)
-		set g_e_b_p# (TRUE)
+		#set g_e_b_p# (TRUE)
 		if object==(TRUE)
 			set g_e_p# tableReg
 			if p_is_for_64_value#==(TRUE)
--- ocompiler-1.orig/src/files/actions/main/index/import.s
+++ ocompiler-1/src/files/actions/main/index/import.s
@@ -77,6 +77,10 @@ If errormsg==noerr
 								if subtype==(cIMPORTX)
 									or import_ref_mask (x86_64bit)
 								endif
+								if g_e_b_p#==(FALSE)
+									or import_ref_mask (aftercallthrowlessbit)
+								endif
+
 								Data functionsnr=functionsnumber
 								SetCall errormsg addaref(functionoffset,pcontent,pcomsize,imp_size,functionsnr,import_ref_mask)
 							endIf
--- ocompiler-1.orig/src/files/functions/actions/dataparse.s
+++ ocompiler-1/src/files/functions/actions/dataparse.s
@@ -64,14 +64,14 @@ Function addvarreference(data ptrcontent
 		else
 			if stackoffset==zero
 				#stack free declared
-				data ebx_relative=ebxregnumber*tostack_relative
 				setcall value getramp_ebxrel()
-				or mask ebx_relative
+				#data ebx_relative=ebxregnumber*tostack_relative
+				#or mask ebx_relative
 			else
 				#stack function argument
-				data ebp_relative=ebpregnumber*tostack_relative
 				set value stackoffset
-				or mask ebp_relative
+				#data ebp_relative=ebpregnumber*tostack_relative
+				or mask (stack_relative)
 			endelse
 			or mask (stackbit)
 			sd vbool
@@ -107,26 +107,41 @@ function addvarreferenceorunref(data ptr
 	Data zero=0
 	If valsize==zero
 		Chars _namecverr="Name for variable/constant expected."
-		Str namecverr^_namecverr
+		vStr namecverr^_namecverr
 		Return namecverr
 	EndIf
 
 	data content#1
 	set content ptrcontent#
-	Chars unrefoption#1
-	Set unrefoption content#
+	Chars firstchar#1
+	Set firstchar content#
 	Chars unrefsign="*"
 
-	If unrefoption!=unrefsign
+	If firstchar!=unrefsign
+		if firstchar==(asciicirc)   #throwless if on a throwing area
+			If typenumber==(constantsnumber)
+				Return "Unexpected throwless sign ('^') at constant declaration."
+			EndIf
+			dec valsize
+			If valsize==zero
+				Return namecverr
+			endif
+			or mask (aftercallthrowlessbit)
+			call stepcursors(ptrcontent,ptrsize)
+		elseIf typenumber!=(constantsnumber)
+			sd global_err_pB;setcall global_err_pB global_err_pBool()
+			if global_err_pB#==(FALSE)
+				or mask (aftercallthrowlessbit)
+			endif
+		endelseif
 		SetCall err addvarreference(ptrcontent,ptrsize,valsize,typenumber,stackoffset,mask)
 		If err!=noerr
 			Return err
 		EndIf
 	Else
-		Data constnr=constantsnumber
-		If typenumber==constnr
+		If typenumber==(constantsnumber)
 			Chars unrefconstant="Unexpected unreference sign ('*') at constant declaration."
-			Str ptrunrefconstant^unrefconstant
+			vStr ptrunrefconstant^unrefconstant
 			Return ptrunrefconstant
 		EndIf
 		Call advancecursors(ptrcontent,ptrsize,valsize)
--- ocompiler-1.orig/src/files/functions/actions/fn.s
+++ ocompiler-1/src/files/functions/actions/fn.s
@@ -99,11 +99,15 @@ Function parsefunction(data ptrcontent,d
 			else
 				set mask 0
 			endelse
-
 			setcall scope64 is_funcx_subtype(subtype)
 			if scope64==(TRUE)
 				or mask (x86_64bit)
 			endif
+			sd err_pb;setcall err_pb global_err_pBool()
+			if err_pb#==(FALSE)
+				or mask (aftercallthrowlessbit)
+			endif
+
 			SetCall err addaref(value,ptrcontent,ptrsize,sz,fnnr,mask)
 			If err!=noerr
 				Return err
@@ -327,14 +331,17 @@ function write_function_call(sd ptrdata,
 	Set ptrfnmask ptrdata
 	Add ptrfnmask (maskoffset)
 
-	Data fnmask#1
+	data mask#1
+	Data idatamask#1
 	Data idatafn=idatabitfunction
 	Data ptrobject%ptrobject
-	Set fnmask ptrfnmask#
-	And fnmask idatafn
+	Set mask ptrfnmask#
+	set idatamask mask
+	And idatamask idatafn
 
+	sd is_valuedata_call;set is_valuedata_call boolindirect
 	If ptrobject#==(FALSE)
-		If fnmask==idatafn
+		If idatamask==idatafn
 			Set boolindirect (TRUE)
 		EndIf
 	EndIf
@@ -347,7 +354,7 @@ function write_function_call(sd ptrdata,
 		const directcallsize=1+dwsz
 		data ptrdirectcalloff^directcalloff
 
-		If fnmask!=idatafn
+		If idatamask!=idatafn
 			set directcall 0xe8
 			setcall err unresolvedLocal(1,code,ptrdata,ptrdirectcalloff)
 			If err!=(noerror);Return err;EndIf
@@ -367,7 +374,7 @@ function write_function_call(sd ptrdata,
 		EndElse
 	Else
 		#this at object is call data() but the reloc is outside of this function
-		if fnmask==idatafn
+		if idatamask==idatafn
 			data ptrvirtualimportsoffset%ptrvirtualimportsoffset
 			SetCall err unresolvedcallsfn(code,1,ptrvirtualimportsoffset) #,ptrdata#
 			If err!=(noerror);Return err;EndIf
@@ -383,8 +390,18 @@ function write_function_call(sd ptrdata,
 		Return err
 	EndIf
 
-	sd global_err_pB;setcall global_err_pB global_err_pBool()
-	if global_err_pB#!=(FALSE)
+	#afterbit throwless is at fns imps if before aftercall; at values is throwless after aftercall if sign set
+	sd tless=aftercallthrowlessbit
+	and tless mask
+	if tless==0
+		if is_valuedata_call==(FALSE)
+			sd global_err_pB;setcall global_err_pB global_err_pBool()
+			if global_err_pB#==(FALSE)
+				set tless -1    #don't want to throw before aftercall
+			endif
+		endif
+	endif
+	if tless==0
 		sd global_err_ptr;setcall global_err_ptr global_err_p()
 		Data ptrextra%ptrextra
 		If ptrobject#==(FALSE)
--- ocompiler-1.orig/src/files/functions/stack/stack_inits.s
+++ ocompiler-1/src/files/functions/stack/stack_inits.s
@@ -31,14 +31,12 @@ endfunction
 
 function stack_get_relative(sd location)
 	sd mask
-	data maskoffset=maskoffset
-	data to_relative=tostack_relative
-
 	set mask location
-	add mask maskoffset
+	add mask (maskoffset)
 	set mask mask#
-	div mask to_relative
-	data regopcode_mask=regopcode_mask
-	and mask regopcode_mask
-	return mask
+	and mask (stack_relative)
+	if mask==0
+		return (ebxregnumber)
+	endif
+	return (ebpregnumber)
 endfunction
--- ocompiler-1.orig/src/files/headers/asm.h
+++ ocompiler-1/src/files/headers/asm.h
@@ -54,7 +54,7 @@ Const ebpregnumber=5
 Const esiregnumber=6
 Const ediregnumber=7
 Const ahregnumber=4
-Const regopcode_mask=0x7
+#Const regopcode_mask=0x7
 
 #mixt
 Const Notregopcode=2
--- ocompiler-1.orig/src/files/headers/header.h
+++ ocompiler-1/src/files/headers/header.h
@@ -7,14 +7,14 @@ Const referencebit=0x01
 Const idatabitfunction=0x02
 #bit offset 2: 1 means stack variable
 Const stackbit=0x04
-	#stackbit
-	#bit offset 3,4,5: stack ebx/ebp
-	#0x8,0x10,0x20
-	Const tostack_relative=0x08
-	#
-	#nostackbit
-	#bit offset 3: datapointbit
-	Const datapointbit=0x08
+#bit offset 3:
+	#stackbit: 1 means ebp fn arguments          #was bit offset 3,4,5: stack ebx/ebp
+Const stack_relative=0x08
+	#nostackbit: datapointbit
+Const datapointbit=0x08
+#bit offset 4:
+#bit offset 5: 1 means ignore aftercall
+const aftercallthrowlessbit=0x20
 #bit offset 6: is functionX/importX
 const x86_64bit=0x40
 #bit offset 7; pointer bit (sv# with rex, sd# without rex)
--- ocompiler-1.orig/src/files/inits/inits.s
+++ ocompiler-1/src/files/inits/inits.s
@@ -60,7 +60,7 @@ sd p_is_for_64_value;setcall p_is_for_64
 call val64_init()
 
 #afterCall
-data g_e_b_p#1;setcall g_e_b_p global_err_pBool();set g_e_b_p# (FALSE)
+vdata g_e_b_p#1;setcall g_e_b_p global_err_pBool();set g_e_b_p# (FALSE)
 
 set warn_hidden_whitespaces_times 0
 
