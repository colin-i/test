
#name: appimage

on:
 # Triggers the workflow on push or pull request events but only for the main branch
 #push:
 # branches: [ main ]
 #pull_request:
 # branches: [ main ]
 # Allows you to run this workflow manually from the Actions tab
 workflow_dispatch:
  inputs:
   ppa:
    description: "ppa sufix"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
 # This workflow contains a single job called "build"
 build:
  # The type of runner that the job will run on
  runs-on: ubuntu-18.04
  # Steps represent a sequence of tasks that will be executed as part of the job
  steps:
   - uses: actions/checkout@v3
   #Runs a set of commands using the runners shell
   - name: Run a multi-line script
     run: |
      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
      name2=OCompiler
      #
      mkdir -p AppDir
      file=runtime
      arch_ai=-x86_64
      archfile=${file}${arch_ai}
      kitpart () {
       #https://github.com/AppImage/pkg2appimage
       #this is not working anymore urlpart=`wget -q https://github.com/AppImage/AppImageKit/releases/latest -O - | grep "${archfile}" | head -n 1 | cut -d '"' -f 2`
       urlpart=AppImage/AppImageKit/releases/latest/download/${archfile}
      }
      if [ ! -e "${file}" ]; then
       kitpart
       #"pkg2appimage-.*-x86_64.AppImage"
       wget -c https://github.com/${urlpart}
       mv ${archfile} ${file}
       chmod a+x ${file}
      fi
      if [ ! -e "${name}.deb" ]; then
       arh=amd64
       version=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
       if [ ! -e "lp2.py" ]; then
        wget -q https://raw.githubusercontent.com/colin-i/test/master/lp2.py
        sudo apt install python3-launchpadlib
       fi
       #OUTPUT=$(python3 lp.py ppa${{ github.event.inputs.ppa }} ${dist} ${arh} ${name} ${version})
       OUTPUT=$(python3 lp2.py ppa${{ github.event.inputs.ppa }} ${name} ${version} ${arh})
       wget ${OUTPUT}/+files/${name}_${version}_${arh}.deb -O ${name}.deb
       dpkg -x ${name}.deb AppDir
      fi
      pkg=libc6-i386
      maindeb=${pkg}.deb
      if [ ! -e "${maindeb}" ]; then
       src=ro.archive.ubuntu.com
       inter=Packages
       if [ ! -e "${inter}" ]; then
        dist=`cat debian/changelog | head -1 | grep -Poe "[^ ]*(?=;)"`
        wget http://${src}/ubuntu/dists/${dist}/main/binary-amd64/${inter}.xz
        xz -d ${inter}.xz
       fi
       debfilename=`grep "^Filename.*/${pkg}_" ${inter} | tail -1 | cut -d ' ' -f 2`
       wget_url=http://${src}/ubuntu/${debfilename}
       wget ${wget_url} -O ${maindeb}
       dpkg -x ${maindeb} AppDir
      fi
      cd AppDir
      file2=AppRun
      if [ ! -e "${file2}" ]; then
       if [ -z "${urlpart}" ]; then
        kitpart
       fi
       archfile2=${file2}${arch_ai}
       urlpart=${urlpart:0:`echo ${urlpart} | grep -ob '[^/]*$' | cut -d ':' -f 1`}${archfile2}
       wget -c https://github.com/${urlpart}
       chmod a+x ${archfile2}
       mv ${archfile2} ${file2}
      fi
      pngfile=${name}.png
      if [ ! -e "${pngfile}" ]; then
       wget https://github.com/colin-i/test/releases/download/1.5/${name}.png -O ${pngfile}
       cat > ${name}.desktop <<EOF
      [Desktop Entry]
      Type=Application
      Name=${name2}
      Exec=${name}
      Icon=${name}
      Categories=Utility
      EOF
       ln -s ${pngfile} .DirIcon
      fi
      #
      if [ ! -e "usr/bin/${name}" ]; then
       echo launcher
       cd usr/bin
       cat > ${name} <<EOF
      #!/bin/bash
      if [ "\${1}" != "0" ] && [ "\${1}" != "1" ] && [ "\${1}" != "2" ] ; then
       echo first argument: 0 for ocompiler, 1 for ounused, 2 for ostrip
       exit 1
      fi
      cd "\$(dirname "\$0")"
      if [ "\${1}" = "0" ]; then
       cmd=o
      elif [ "\${1}" = "1" ]; then
       cmd=ounused
      else
       shift
       ./ostrip "\$@"
       exit $?
      fi
      shift
      cd ../../
      LD_LIBRARY_PATH="\$(pwd)/lib32" \
       ./lib32/ld-linux.so.2 ./usr/bin/\${cmd} "\$@"
      EOF
       chmod 755 ${name}
       cd ../../
      fi
      #metadata file
      mi=usr/share/metainfo
      mif=${mi}/com.colin.${name}.appdata.xml
      if [ ! -e "${mif}" ]; then
       page=`cat ../debian/control | grep "^Homepage" | cut -d ' ' -f2`
       mkdir -p ${mi}
       cat > ${mif} <<EOF
      <?xml version="1.0" encoding="UTF-8"?>
      <!-- Copyright 2022 -->
      <component type="desktop-application">
       <id>com.colin.${name}</id>
       <metadata_license>FSFAP</metadata_license>
       <name>${name2}</name>
       <summary>O language compiler</summary>
       <description>
        <ul>
         <li>Compile code</li>
         <li>Easy language</li>
         <li>Linux/Windows x86_64/i386</li>
        </ul>
       </description>
       <url type="homepage">${page}</url>
       <content_rating/>
      </component>
      EOF
      fi
      #
      cd ..
      #
      if [ ! -e "${name}.AppImage" ]; then
       mksquashfs AppDir ${name}.squashfs -root-owned -noappend
       cat runtime >> ${name}.AppImage
       cat ${name}.squashfs >> ${name}.AppImage
       chmod a+x ${name}.AppImage
      fi
   - name: artifact
     uses: actions/upload-artifact@v3
     with:
      name: appimage
      path: ./*.AppImage
