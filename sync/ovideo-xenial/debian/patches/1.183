Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 ovideo (1-183) bionic; urgency=medium
 .
   * minor fix
Author: bc <bc@bc-HP-Pavilion-x360-Convertible>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2022-06-18

--- ovideo-1.orig/.github/workflows/appimage.yml
+++ ovideo-1/.github/workflows/appimage.yml
@@ -229,7 +229,7 @@ jobs:
       Name=OVideo
       Exec=ovideo
       Icon=ovideo
-      Categories=GNOME;GTK;
+      Categories=AudioVideo
       EOF
        ln -s ${pngfile} .DirIcon #f for multiple times
       fi
@@ -268,16 +268,47 @@ jobs:
       LD_LIBRARY_PATH="\${rootbase}/lib32:\${rootbase}/usr/lib:\${rootbase}/usr/lib/i386-linux-gnu:\${rootbase}/lib/i386-linux-gnu" \
        GDK_PIXBUF_MODULEDIR="\${rootbase}${gpixf}" \
        \${loader} .${gpixd}gdk-pixbuf-query-loaders > "\${gpmf}"
-      GST_PLUGIN_SCANNER="\${rootbase}/usr/lib/i386-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner" \
-       LD_LIBRARY_PATH="\${rootbase}/lib32:\${rootbase}/usr/lib:\${rootbase}/usr/lib/i386-linux-gnu:\${rootbase}/lib/i386-linux-gnu" \
-       GIO_MODULE_DIR="\${rootbase}/usr/lib/i386-linux-gnu/gio/modules" \
+      LD_LIBRARY_PATH="\${rootbase}/lib32:\${rootbase}/usr/lib:\${rootbase}/usr/lib/i386-linux-gnu:\${rootbase}/lib/i386-linux-gnu" \
        GDK_PIXBUF_MODULE_FILE="\${gpmf}" \
+       GIO_EXTRA_MODULES="\${rootbase}/usr/lib/i386-linux-gnu/gio/modules" \
+       GST_PLUGIN_SCANNER="\${rootbase}/usr/lib/i386-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner" \
        GST_PLUGIN_SYSTEM_PATH="\${rootbase}/usr/lib/gstreamer-1.0" \
        \${loader} ./usr/bin/ostream "\${rootbase}"
       EOF
        chmod 755 ovideo
        cd ../../
       fi
+      #metadata file
+      mi=usr/share/metainfo
+      mif=${mi}/com.colin.ovideo.appdata.xml
+      if [ ! -e "${mif}" ]; then
+       mkdir -p ${mi}
+       cat > ${mif} <<EOF
+      <?xml version="1.0" encoding="UTF-8"?>
+      <!-- Copyright 2022 -->
+      <component type="desktop-application">
+       <id>com.colin.ovideo</id>
+       <metadata_license>FSFAP</metadata_license>
+       <name>O Video</name>
+       <summary>Video Editor</summary>
+       <description>
+        <ul>
+         <li>Create videos</li>
+         <li>Add animations</li>
+         <li>Edit frames</li>
+        </ul>
+       </description>
+       <screenshots>
+        <screenshot type="default">
+         <caption>OVideo image</caption>
+         <image>https://raw.github.com/colin-i/ostream/master/arh/ovideo.png</image>
+        </screenshot>
+       </screenshots>
+       <url type="homepage">https://www.github.com/colin-i/ostream</url>
+       <content_rating/>
+      </component>
+      EOF
+      fi
       #
       cd ..
       #
@@ -299,22 +330,3 @@ jobs:
      with:
       name: appimage
       path: ./*.AppImage
-   #- name: Create Release
-   #  id: create_release
-   #  uses: actions/create-release@v1
-   #  env:
-   #   GITHUB_TOKEN: ${{ secrets.PAT }}
-   #  with:
-   #   tag_name: ${{ env.tag }}
-   #   release_name: Release ${{ env.tag }}
-   #   draft: false
-   #   prerelease: false
-   #- name: Upload Release Asset
-   #  uses: actions/upload-release-asset@v1
-   #  env:
-   #   GITHUB_TOKEN: ${{ secrets.PAT }}
-   #  with:
-   #   upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
-   #   asset_path: ./LD-.glibc2.27-x86_64.AppImage
-   #   asset_name: LD-.glibc2.27-x86_64.AppImage
-   #   asset_content_type: application/x-executable
--- ovideo-1.orig/.github/workflows/rel.yml
+++ ovideo-1/.github/workflows/rel.yml
@@ -1,12 +1,5 @@
 
-#name: appimage
-
 on:
- # Triggers the workflow on push or pull request events but only for the main branch
- #push:
- # branches: [ main ]
- #pull_request:
- # branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
@@ -18,19 +11,37 @@ jobs:
   runs-on: ubuntu-18.04
   # Steps represent a sequence of tasks that will be executed as part of the job
   steps:
+   - uses: actions/checkout@v3
    - name: Run a multi-line script
      run: |
       #get the version from changelog/launchpad/input
+      tag=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
+      echo "tag=${tag}" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
       GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
-      tag_name: ${{ env.version }}
-      release_name: Release ${{ env.version }}
+      tag_name: ${{ env.tag }}
+      release_name: Release ${{ env.tag }}
       draft: false
       prerelease: false
+      #this can be undone. example: git push origin :refs/tags/1.6
    - name: Store upload url for assets
      run: |
-      #store at id=67484178
+      #echo straight will not escape {}
+      a=${{ steps.create_release.outputs.upload_url }}
+      echo -n ${a} > 1.txt
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      echo "proj=${name}" >> $GITHUB_ENV
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: https://uploads.github.com/repos/colin-i/test/releases/67484178/assets{?name,label}
+      #See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
+      asset_path: ./1.txt
+      asset_name: ${{ env.proj }}
+      asset_content_type: text/plain
--- /dev/null
+++ ovideo-1/.github/workflows/rpm.yml
@@ -0,0 +1,66 @@
+on:
+ workflow_dispatch:
+  inputs:
+   ppa:
+    description: "ppa sufix"
+   artifact:
+    description: "result is artifact"
+   unpublished:
+    description: "don't wait to publish, take from build page"
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ rpbuild:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-22.04 #focal alien is not testing ok on docker fedora
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   - uses: actions/checkout@v3
+   #Runs a set of commands using the runners shell
+   - name: Run a multi-line script
+     run: |
+      #proj
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      #get deb
+      if [ "${{ github.event.inputs.unpublished }}" = "" ]; then
+       echo published
+       dist=`cat debian/changelog | head -1 | grep -Poe "[^ ]*(?=;)"`
+       src=ppa.launchpadcontent.net/colin-i/ppa${{ github.event.inputs.ppa }}
+       wget http://${src}/ubuntu/dists/${dist}/main/binary-i386/Packages.xz
+       xz -d Packages.xz
+       debfilename=`grep "^Filename.*/${name}_" Packages | tail -1 | cut -d ' ' -f 2`
+       wget http://${src}/ubuntu/${debfilename} -O ${name}.deb
+      else
+       echo unpublished
+       f=`wget -q https://launchpad.net/~colin-i/+archive/ubuntu/ppa${{ github.event.inputs.ppa }}/+build/${{ github.event.inputs.unpublished }} -O - | grep -Poe "[^\"]*(?=\.deb\")"`
+       wget ${f} -O ${name}.deb
+      fi
+      #make rpm
+      mkdir out
+      cd out
+      sudo apt update
+      sudo apt install alien
+      sudo alien -rk ../${name}.deb
+      fname=`ls`
+      mv ${fname} ../
+      echo "file=${fname}" >> $GITHUB_ENV
+      #get up_url
+      wget https://github.com/colin-i/test/releases/download/1.5/${name} -O 1.txt
+      echo "up_url=`cat 1.txt`" >> $GITHUB_ENV
+   - name: Upload Release Asset
+     if: ${{ github.event.inputs.artifact = '' }}
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: ${{ env.up_url }}
+      asset_path: ./${{ env.file }}
+      asset_name: ${{ env.file }}
+      asset_content_type: application/x-rpm
+   - name: artifact
+     if: ${{ github.event.inputs.artifact != '' }}
+     uses: actions/upload-artifact@v3
+     with:
+      name: rpm
+      path: ./${{ env.file }}
--- ovideo-1.orig/.github/workflows/up.yml
+++ ovideo-1/.github/workflows/up.yml
@@ -1,13 +1,5 @@
 
-#name: appimage
-
 on:
- # Triggers the workflow on push or pull request events but only for the main branch
- #push:
- # branches: [ main ]
- #pull_request:
- # branches: [ main ]
- # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
 # A workflow run is made up of one or more jobs that can run sequentially or in parallel
@@ -18,15 +10,27 @@ jobs:
   runs-on: ubuntu-18.04
   # Steps represent a sequence of tasks that will be executed as part of the job
   steps:
+   #token or opts.auth is required (maybe at remote)
+   #- uses: Bhacaz/checkout-files@master
+   #  with:
+   #   files: ${{ env.proj }}.zip
    - name: Run a multi-line script
      run: |
-      echo test > test
+      if [ -n "${{ env.init }}" ]; then
+       exit 1
+      fi
+      #name with act --env proj=
+      #name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      #echo "proj=${name}" >> $GITHUB_ENV
+      #get up_url
+      wget https://github.com/colin-i/test/releases/download/1.5/${{ env.proj }} -O 1.txt
+      echo "up_url=`cat 1.txt`" >> $GITHUB_ENV
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
-      upload_url: https://uploads.github.com/repos/colin-i/test/releases/67474274/assets{?name,label}
-      asset_path: ./test
-      asset_name: test
+      upload_url: ${{ env.up_url }}
+      asset_path: ./${{ env.proj }}.zip
+      asset_name: ${{ env.proj }}.windows.zip
       asset_content_type: application/zip
--- /dev/null
+++ ovideo-1/.github/workflows/upapp.yml
@@ -0,0 +1,47 @@
+
+on:
+ workflow_dispatch:
+
+# A workflow run is made up of one or more jobs that can run sequentially or in parallel
+jobs:
+ # This workflow contains a single job called "build"
+ uabuild:
+  # The type of runner that the job will run on
+  runs-on: ubuntu-18.04
+  # Steps represent a sequence of tasks that will be executed as part of the job
+  steps:
+   #- uses: Bhacaz/checkout-files@master
+   #  with:
+   #   files: debian/changelog debian/control #is git rev-parse ...
+   - uses: actions/checkout@v3
+   - name: Run a multi-line script
+     run: |
+      #proj
+      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
+      #get up_url
+      wget https://github.com/colin-i/test/releases/download/1.5/${name} -O 1.txt
+      echo "up_url=`cat 1.txt`" >> $GITHUB_ENV
+      #get appimage artifact
+      id=$(gh run list --workflow=appimage.yml -b $(git rev-parse --abbrev-ref HEAD) | cut -f7 | head -1)
+      repo_at_gh=`cat debian/control | grep "^Homepage" | grep -o [^/]*$`
+      #
+      url=`gh api -H "Accept: application/vnd.github.v3+json" /repos/colin-i/${repo_at_gh}/actions/runs/${id}/artifacts | jq ".artifacts[0].archive_download_url"`
+      url=${url:1:-1}
+      echo ${url}
+      curl -L -H "Authorization: token ${{ secrets.PAT }}" ${url} --output a.zip
+      #to env
+      unzip ./a.zip
+      echo "file=${name}.AppImage" >> $GITHUB_ENV
+      echo "fullfile=${name}.amd64.AppImage" >> $GITHUB_ENV
+     env:
+      #for gh
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+   - name: Upload Release Asset
+     uses: actions/upload-release-asset@v1
+     env:
+      GITHUB_TOKEN: ${{ secrets.PAT }}
+     with:
+      upload_url: ${{ env.up_url }}
+      asset_path: ./${{ env.file }}
+      asset_name: ${{ env.fullfile }}
+      asset_content_type: application/x-executable
--- ovideo-1.orig/arh/a
+++ ovideo-1/arh/a
@@ -19,3 +19,12 @@ p="libc6-i386 libgtk2.0-0:i386 gstreamer
 #apt depends ${p} --recurse  --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances --no-pre-depends  | grep "^\w" > 1
 #dpkg -s libgtk2.0-0:i386
 sudo apt install --dry-run ${p}
+
+#convert rgba to rgb24
+#ffmpeg -i a.png -pix_fmt rgb24 b.png
+
+
+#rpmrebuild -enp ./*.rpm
+
+#libgstgdkpixbuf.so
+#libgstmxf.so
--- ovideo-1.orig/readme.md
+++ ovideo-1/readme.md
@@ -11,7 +11,14 @@ Install:
 sudo apt-get install ovideo
 ```
 \
-On Windows the program is at this [link](https://github.com/colin-i/ostream/releases).\
+On linux distributions, appimage from ubuntu bionic.\
+<i>.AppImage</i> file from [releases](https://github.com/colin-i/ostream/releases).\
+\
+On Fedora, not ready.\
+Missing libjpeg.so.8? https://download.copr.fedorainfracloud.org/results/aflyhorse/libjpeg/fedora-36-i386/ \
+Unacceptable TLS certificate? Put [glib-networking:i386 bionic release libgiognutls.so](https://github.com/colin-i/test/releases/download/1.1/libgiognutls.so) in a folder and point to that folder with GIO_EXTRA_MODULES variable. \
+\
+On Windows, <i>.windows.zip</i> file from [releases](https://github.com/colin-i/ostream/releases).\
 <i>Gstreamer sdk</i> is [here](https://www.freedesktop.org/software/gstreamer-sdk/data/packages/windows/x86/).
 
 ## From source
--- ovideo-1.orig/src/_dif/difl.s
+++ ovideo-1/src/_dif/difl.s
@@ -1,4 +1,15 @@
 
-entrylinux _start(sd argc,sd argv)
+entrylinux _start(sd argc,sv argv)
+
+#this is because fedora will wrong all plugin cache on 64 for 32
+sd argv0
+ss *argv1="--gst-disable-registry-fork"
+set argv0 argv
+
 import "init_args" init_args
 call init_args(argc,#argv)
+
+set argc 2
+set argv #argv0
+
+call gst_init(#argc,#argv)
--- ovideo-1.orig/src/_dif/difw.s
+++ ovideo-1/src/_dif/difw.s
@@ -1,2 +1,4 @@
 
 entry _start()
+
+call gst_init(0,0)
--- ovideo-1.orig/src/_exec/ostream.s
+++ ovideo-1/src/_exec/ostream.s
@@ -13,7 +13,6 @@ import "initfn" initfn
 include "../_dif/difl.s" "../_dif/difw.s"
 
 call gtk_init(0,0)
-call gst_init(0,0)
 
 importx "_setlocale" setlocale
 call setlocale((LC_NUMERIC),"C") #"English" was ok
--- ovideo-1.orig/src/net/net-base.s
+++ ovideo-1/src/net/net-base.s
@@ -31,11 +31,12 @@ function getSessionMessageBody(sv sessio
 	add sessionMsg (:+DWORD+:+          :)
 	sd status
 	set status sessionMsg#d^
+	add sessionMsg (DWORD)
 	if status!=(HTTP_STATUS_OK)
-		call uri_err(status)
+		call uri_err(status,sessionMsg#)
 		return (FALSE)
 	endif
-	add sessionMsg (DWORD+:+:+:)
+	add sessionMsg (:+:+:)
 
 	sd response_body#1
 	set response_body sessionMsg#
@@ -65,11 +66,14 @@ function uri_queue_content(ss uri,sd cal
 	#assertion `queue->head == NULL' failed
 endfunction
 
-function uri_err(sd status)
-	vstr urierr="Error status code: "
-	import "strvaluedisp" strvaluedisp
-	data su=stringUinteger
-	call strvaluedisp(urierr,status,su)
+function uri_err(sd status,sd msg)
+	importx "_sprintf" sprintf
+	import "printer" printer
+	import "texter" texter
+	chars n#dword_null
+	call sprintf(#n,"%u",status)
+	call printer(#n)
+	call texter(msg)
 endfunction
 
 importx "_g_object_unref" g_object_unref
--- ovideo-1.orig/src/util/util.s
+++ ovideo-1/src/util/util.s
@@ -77,7 +77,3 @@ function content_size(sd ptrdata1,sd ptr
     add ptrdata2 dw
     set ptrdata2# ptrdata1#
 endfunction
-
-
-
-
--- ovideo-1.orig/version.txt
+++ ovideo-1/version.txt
@@ -1 +1 @@
-1.182
\ No newline at end of file
+1.183
\ No newline at end of file
