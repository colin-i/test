
name=`cat debian/control | head -1 | grep -o "[^ ]*$"`
if [ -z "${py}" ]; then
	ve=`cat ${name}.spec | grep ^Version | grep -o "[^ ]*$"`
	re=`cat ${name}.spec | grep ^Release | grep -o "[^ ]*$"`
else
	name=python-${name}
	ve=`cat v2`
	re=1
fi

echo ${ve}-${re}
text="copr-cli build-package --name ${name} colin/project"
if [ -n "${exc}" ]; then
	text+=" --exclude-chroot fedora-42-${exc} --exclude-chroot fedora-43-${exc}"
fi
echo ${text}
echo -n ${text} | xclip -sel clip
echo "copr ready? y and enter"
read -t $((60*60*24)) ans
if [ "${ans}" != "y" ]; then exit 1; fi

f=~/Desktop/1json${name}

get_jq () {
	python ~/test/rpm/get.py $name $1 $2 > $f
	sed -i "s/'/\"/g" $f
	sed -i "s/False/false/g" $f
	sed -i "s/True/true/g" $f
	sed -i "s/None/0/g" $f
}

while true; do
	get_jq package_proxy get
	v=`cat $f | jq .builds.latest_succeeded.source_package.version`
	v=`echo $v | cut -d"\"" -f2`
	IFS='-' read -a a <<< "$v"
	ver=${a[0]}
	rel=${a[1]}

	echo $ver $rel and $ve $re
	if [ "$ver" = "$ve" ]; then
		if [ "$rel" = "$re" ]; then
			echo ok
			break
		else
			echo not ok
		fi
	else
		echo not ok
	fi
	sleep 60
done

get_jq build_proxy get_list
tofind="\"${ve}-${re}\""
n=`cat $f | jq ".items | length"`
for (( i=0; i < ${n}; i++)); do
	ver=`cat $f | jq .items[$i].source_package.version`
	id=`cat $f | jq .items[$i].id`
	if [ ${tofind} = ${ver} ]; then
		echo $id is ok
	else
		echo ${id} is old
		#echo build_proxy.delete is not working, use:
		text="copr-cli delete-build ${id}"
		echo ${text}
		echo -n ${text} | xclip -sel clip
		echo and y and enter
		read -t $((60*60*24)) ans
		if [ "${ans}" != "y" ]; then exit 1; fi
		break
	fi
done

rm $f
