
#1 name[-b]  optional 2 is_restore

name=${1}
root=`pwd`/

swt () {
	if [ "`git rev-parse --abbrev-ref HEAD`" != "${1}" ]; then
		git switch ${1}
	fi
}

parent=
if [ -e "parent" ]; then
	parent=`cat parent`
	files=( `cat ${parent}` )
fi

proj=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`

if [ -z "${2}" ]; then
	cd ~/sync && \
	swt ${name} && \
	#git switch will ignore deletions and at switch back will put them back
	mv debian/patches ${root}debian && \
	mv .pc ${root} && \
	if [ "${parent}" != "" ]; then
		swt ${proj}-${parent} || exit 1
		cd .pc || exit 1
		for var in "${files[@]}"; do
			mv ${var} ${root}.pc || exit 1
			#&& break will result in $?=0
		done
		#done && is useless, same $?=0
		cd ../debian/patches || exit 1
		for var in "${files[@]}"; do
			mv ${var} ${root}debian/patches || exit 1
		done
	fi
	exit $?
fi

#need to sync now, but can't delete parent because need to put it back if local debuild and can't put it back if not commiting sync folder
#the solution is to move parent to tmp and back

a=../tmp/.pc
b=../tmp/debian/patches
if [ "${parent}" != "" ]; then
	mkdir ${a} || exit 1
	cd .pc || exit 1
	for var in "${files[@]}"; do
		mv ${var} ../${a} || exit 1
	done
	cd .. || exit 1
	mkdir ../tmp/debian || exit 1
	mkdir ${b} || exit 1
	cd ./debian/patches || exit 1
	for var in "${files[@]}"; do
		mv ${var} ../../${b} || exit 1
	done
fi
cd ~/sync && \
swt ${name} && \
cd ${root} && \
#
#this is better when no switch and in normal flow
#mv .pc ~/sync && \
#mv debian/patches ~/sync/debian
#
#if files are restored at switch, mv cannot overwrite even with -f
rsync -av .pc ~/sync && \
rsync -av debian/patches ~/sync/debian && \
#and now, put parent back, needed at local debuild
if [ "${parent}" != "" ]; then
	mv ${a}/* .pc && \
	mv ${b}/* debian/patches && \
	rm -r ${a} && \
	rm -r ${b} && \
	rm -r ../tmp/debian
	#rm -r ${b}/..
fi
