name: 'test'
inputs:
 branch:
  description: "another branch"
 debug:
  description: "more info"
 gtk:
  description: "gtk version"
  required: true
 pattern:
  description: "if name is not straight(a script has the name and the proc has another name)"
 prepack:
  description: "preinstalled packages"
#must have GITHUB_TOKEN for gh/upload
runs:
 using: "composite"
 steps:
  - name: prepacks
    shell: bash
    run: |
     if [ "${{ inputs.prepack }}" != "" ]; then
      sudo apt install -y ${{ inputs.prepack }}
     fi
  - uses: actions/checkout@master
  - name: Run a multi-line script
    shell: bash
    run: |
     #proj
     name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
     #get appimage artifact
     branch=${{ inputs.branch }}
     if [ -z "${branch}" ]; then
      branch=$(git rev-parse --abbrev-ref HEAD)
     fi
     echo ${branch}
     id=$(gh run list --workflow=appimage.yml -b ${branch} | cut -f7 | head -1)
     repo_at_gh=`cat debian/control | grep "^Homepage" | grep -o "[^/]*$"`
     #
     url=`gh api -H "Accept: application/vnd.github.v3+json" /repos/colin-i/${repo_at_gh}/actions/runs/${id}/artifacts | jq ".artifacts[0].archive_download_url"`
     url=${url:1:-1}
     echo ${url}

     curl -L -H "Authorization: token ${{ env.GITHUB_TOKEN }}" ${url} --output a.zip
     unzip ./a.zip

     apt download libfuse2`if [ ${{ matrix.os }} = "ubuntu-24.04" ]; then echo -n t64; fi` #xvfb is already
     dpkg -x ./*.deb q
     #export DISPLAY=:0

     runname=./${name}.AppImage
     pattern=${{ inputs.pattern }}
     #dependencies test, if screen was working here then no broadway
     sudo Xvfb :1 -screen 0 1920x1080x8 &
     xvfbid=$!
     sleep 5
     { #don't know why but strace is "Killed" but is printing through the end when & with strace
      sleep 5 & { termid=`ps -o ppid= $!`; echo termid=${termid}; echo ${termid} > 1; }
      sleep 10
      if [ -z "${pattern}" ]; then
       echo name
       ENTRY_DEBUG=x DISPLAY=:1 LD_LIBRARY_PATH=`pwd`/q/lib/x86_64-linux-gnu ${runname} &
       sleep 15
       ps -C ${name} -o pid,cmd | grep ${name} | tr -s ' ' | cut -d' ' -f2 > 2
      else #with --debug? is ok for tora/dico/audapa. must also flush python to work, else can write to a file $(pwd)/4
       echo pattern
       DISPLAY=:1 LD_LIBRARY_PATH=`pwd`/q/lib/x86_64-linux-gnu ${runname} --debug &
       sleep 15
       ps aux | grep ${pattern} | grep -v grep | tr -s ' '|cut -f2 -d' ' > 2
      fi
      #pid of our prog is not related to AppImage pid ( is not a child of that ), and the parent is the terminal, not the appimage
      # -C ${name}.AppImage for appimage pid
      #id= is not working outside this {} process
      straceid=`ps -C strace -o pid,cmd | grep strace | tr -s ' ' | cut -d' ' -f2`
      # -C strace at cmd is also with args
      # cut -f1 is blank at start
      sudo kill -s 9 ${straceid}
      echo strace done
     } &
     sleep 5
     se_term=write  #munmap at prev mmap is ok? prlimit64 is not on 32 bit and more .so. are coming.
     sudo strace -e trace=${se_term} -f -p `cat 1` -o 3 || echo killed
     if [ -n "${{ inputs.debug }}" ]; then
      #cat 4 ||
      cat 3
     fi
     cat 3 | grep "^`cat 2`[ ]*${se_term}(1, \"ENTRY_DEBUG marker\\\\n\""
     # || cat 4
     sudo kill -s 9 ${xvfbid} #our program will exit without an X, and appimage at the same time
     #if [ $? != 0 ]; then exit 1; fi #is ok at !=0 is exiting
     #can use bpftrace or execsnoop but is not a hurry
     #import -window root -display :1 -screen screenshot.png #imagemagick is on noble

     sudo apt install -y libgtk-${{ inputs.gtk }}-bin
     if [ ${{ inputs.gtk }} = 4 ]; then
      br=gtk4-broadwayd
     else
      br=broadwayd
     fi
     echo ${br}
     which ${br} || {
      #in jammy, gtk4-broadwayd is missing, make an exception
      sudo apt install -y imagemagick #imagemagick is on noble
      convert -size 32x32 xc:red screenshot.png
      exit 0
     }

     sudo apt install -y npm libnss3 #was nss3 required at sirc? and after?
     npm install puppeteer
     cat > capture.js <<EOF
     const puppeteer = require('puppeteer');
     async function captureBroadwayScreenshot(url, outputPath) {
       const browser = await puppeteer.launch({ args: ['--no-sandbox'] });
       const page = await browser.newPage();
       await page.goto(url);
       await page.screenshot({ path: outputPath });
       await browser.close();
     }
     captureBroadwayScreenshot('http://localhost:8080', 'screenshot.png');
     EOF
     #port 8080+DISPLAY at default
     DISPLAY=:0 ${br} -p 8080 &
     sleep 10
     GDK_BACKEND=broadway BROADWAY_DISPLAY=:0 LD_LIBRARY_PATH=`pwd`/q/lib/x86_64-linux-gnu ./${name}.AppImage &
     # -d 200x200  #this can be an extra arg
     sleep 10
     node capture.js
  - name: upload artifact
    uses: actions/upload-artifact@master
    with:
     name: screenshot-${{ matrix.os }}
     path: screenshot.png
